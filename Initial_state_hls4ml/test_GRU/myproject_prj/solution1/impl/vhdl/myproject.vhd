-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_1_V_ap_vld : IN STD_LOGIC;
    input_1_V : IN STD_LOGIC_VECTOR (799 downto 0);
    layer4_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_0_V_ap_vld : OUT STD_LOGIC;
    layer4_out_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_1_V_ap_vld : OUT STD_LOGIC;
    layer4_out_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_2_V_ap_vld : OUT STD_LOGIC;
    layer4_out_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_3_V_ap_vld : OUT STD_LOGIC;
    layer4_out_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_4_V_ap_vld : OUT STD_LOGIC;
    layer4_out_5_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_5_V_ap_vld : OUT STD_LOGIC;
    layer4_out_6_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_6_V_ap_vld : OUT STD_LOGIC;
    layer4_out_7_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_7_V_ap_vld : OUT STD_LOGIC;
    layer4_out_8_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_8_V_ap_vld : OUT STD_LOGIC;
    layer4_out_9_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_9_V_ap_vld : OUT STD_LOGIC;
    layer4_out_10_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_10_V_ap_vld : OUT STD_LOGIC;
    layer4_out_11_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_11_V_ap_vld : OUT STD_LOGIC;
    layer4_out_12_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_12_V_ap_vld : OUT STD_LOGIC;
    layer4_out_13_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_13_V_ap_vld : OUT STD_LOGIC;
    layer4_out_14_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_14_V_ap_vld : OUT STD_LOGIC;
    layer4_out_15_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_15_V_ap_vld : OUT STD_LOGIC;
    layer4_out_16_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_16_V_ap_vld : OUT STD_LOGIC;
    layer4_out_17_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_17_V_ap_vld : OUT STD_LOGIC;
    layer4_out_18_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_18_V_ap_vld : OUT STD_LOGIC;
    layer4_out_19_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_19_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.137000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=165,HLS_SYN_FF=18133,HLS_SYN_LUT=4682,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv800_lc_1 : STD_LOGIC_VECTOR (799 downto

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal input_1_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_1_V_preg : STD_LOGIC_VECTOR (799 downto
    signal input_1_V_in_sig : STD_LOGIC_VECTOR (799 downto 0);
    signal input_1_V_ap_vld_preg : STD_LOGIC := '0';
    signal input_1_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call26 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call26 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call26 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call26 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call26 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp8 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pointwise_conv_1d_latency_cl_0_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (799 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214 : component pointwise_conv_1d_latency_cl_0_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => input_1_V_in_sig,
        ap_return_0 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_0,
        ap_return_1 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_1,
        ap_return_2 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_2,
        ap_return_3 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_3,
        ap_return_4 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_4,
        ap_return_5 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_5,
        ap_return_6 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_6,
        ap_return_7 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_7,
        ap_return_8 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_8,
        ap_return_9 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_9,
        ap_return_10 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_10,
        ap_return_11 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_11,
        ap_return_12 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_12,
        ap_return_13 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_13,
        ap_return_14 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_14,
        ap_return_15 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_15,
        ap_return_16 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_16,
        ap_return_17 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_17,
        ap_return_18 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_18,
        ap_return_19 => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_19,
        ap_ce => grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    input_1_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    input_1_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_1_V_ap_vld = ap_const_logic_1))) then 
                    input_1_V_ap_vld_preg <= input_1_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_1_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_V_preg <= ap_const_lv800_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_1_V_ap_vld = ap_const_logic_1))) then 
                    input_1_V_preg <= input_1_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp8_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp8 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call26_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call26 <= ((ap_start = ap_const_logic_0) or (input_1_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp8))) then 
            grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_ce <= ap_const_logic_1;
        else 
            grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    input_1_V_ap_vld_in_sig_assign_proc : process(input_1_V_ap_vld, input_1_V_ap_vld_preg)
    begin
        if ((input_1_V_ap_vld = ap_const_logic_1)) then 
            input_1_V_ap_vld_in_sig <= input_1_V_ap_vld;
        else 
            input_1_V_ap_vld_in_sig <= input_1_V_ap_vld_preg;
        end if; 
    end process;


    input_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, input_1_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_1_V_blk_n <= input_1_V_ap_vld;
        else 
            input_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_1_V_in_sig_assign_proc : process(input_1_V_ap_vld, input_1_V, input_1_V_preg)
    begin
        if ((input_1_V_ap_vld = ap_const_logic_1)) then 
            input_1_V_in_sig <= input_1_V;
        else 
            input_1_V_in_sig <= input_1_V_preg;
        end if; 
    end process;

    layer4_out_0_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_0;

    layer4_out_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_10_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_10;

    layer4_out_10_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_10_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_10_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_11_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_11;

    layer4_out_11_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_11_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_11_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_12_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_12;

    layer4_out_12_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_12_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_12_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_13_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_13;

    layer4_out_13_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_13_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_13_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_14_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_14;

    layer4_out_14_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_14_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_14_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_15_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_15;

    layer4_out_15_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_15_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_15_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_16_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_16;

    layer4_out_16_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_16_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_16_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_17_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_17;

    layer4_out_17_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_17_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_17_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_18_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_18;

    layer4_out_18_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_18_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_18_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_19_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_19;

    layer4_out_19_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_19_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_19_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_1_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_1;

    layer4_out_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_2_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_2;

    layer4_out_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_2_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_3_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_3;

    layer4_out_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_3_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_4_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_4;

    layer4_out_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_4_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_5_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_5;

    layer4_out_5_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_5_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_6_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_6;

    layer4_out_6_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_6_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_7_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_7;

    layer4_out_7_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_7_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_8_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_8;

    layer4_out_8_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_8_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer4_out_9_V <= grp_pointwise_conv_1d_latency_cl_0_0_0_0_0_fu_214_ap_return_9;

    layer4_out_9_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer4_out_9_V_ap_vld <= ap_const_logic_1;
        else 
            layer4_out_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
