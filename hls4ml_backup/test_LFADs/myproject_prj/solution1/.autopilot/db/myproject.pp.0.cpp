# 1 "firmware/myproject.cpp"
# 1 "firmware/myproject.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "firmware/myproject.cpp" 2
# 19 "firmware/myproject.cpp"
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 393 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 402 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 403 "/usr/include/features.h" 2 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 2 3
# 394 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;

  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;





}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 1 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 31 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 55 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 1 3 4
# 30 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 164 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 174 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 201 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 212 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 233 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 253 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();
# 411 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();
# 529 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 673 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 727 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 782 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 808 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 818 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 857 "/usr/include/wchar.h" 3 4
}
# 46 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 136 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 258 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 278 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 2 3
# 69 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef long streamoff;
# 99 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 112 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 134 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 75 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 1 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 142 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_defines.h" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{




  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() throw();


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) throw();

      void _M_addref() throw();
      void _M_release() throw();

      void *_M_get() const throw() __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() throw();
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() throw();

      exception_ptr(const exception_ptr&) throw();


      exception_ptr(nullptr_t) throw()
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) throw()
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }







      exception_ptr&
      operator=(const exception_ptr&) throw();


      exception_ptr&
      operator=(exception_ptr&& __o) throw()
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() throw();

      void
      swap(exception_ptr&) throw();
# 132 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&) throw()
      __attribute__ ((__pure__));

      const class type_info*
      __cxa_exception_type() const throw() __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) throw()
    {
      if (true)
 {



 }
      if (false)
 {
   return current_exception();
 }
    }




  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) throw()
    { return std::copy_exception<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 154 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() throw() : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception();

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 155 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 1 3
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 1 3
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 53 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 98 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 1 3
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  struct __sfinae_types
  {
    typedef char __one;
    typedef struct { char __arr[2]; } __two;
  };
# 70 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() { return value; }
    };


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };
  template<> struct __is_void_helper<void> : public integral_constant<bool, true> { };




  template<typename _Tp>
    struct is_void
    : public integral_constant<bool, (__is_void_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };
  template<> struct __is_integral_helper<bool> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<signed char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned char> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<wchar_t> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<char16_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char32_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long long> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_integral
    : public integral_constant<bool, (__is_integral_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };
  template<> struct __is_floating_point_helper<float> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<double> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<long double> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_floating_point
    : public integral_constant<bool, (__is_floating_point_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };
  template<typename _Tp> struct __is_pointer_helper<_Tp*> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_pointer
    : public integral_constant<bool, (__is_pointer_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_reference;


  template<typename _Tp>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_object_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, !is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public integral_constant<bool, (__is_member_object_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_function_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_function_pointer
    : public integral_constant<bool, (__is_member_function_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename>
    struct __is_nullptr_t_helper
    : public false_type { };
  template<> struct __is_nullptr_t_helper<std::nullptr_t> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public integral_constant<bool, (__is_nullptr_t_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };




  template<typename _Tp>
    struct is_arithmetic
    : public integral_constant<bool, (is_integral<_Tp>::value
          || is_floating_point<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_fundamental
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_object
    : public integral_constant<bool, !(is_function<_Tp>::value
           || is_reference<_Tp>::value
           || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_enum<_Tp>::value
          || is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value
          || __is_nullptr_t<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };


  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, true> { };

  template<typename _Tp>
  struct is_member_pointer
    : public integral_constant<bool, (__is_member_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };



  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };


  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };




  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };




  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };




  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };

  template<typename>
    struct remove_reference;


  template<typename _Tp>
    struct add_pointer
    { typedef typename remove_reference<_Tp>::type* type; };




  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };




  template<typename _Tp>
    struct is_reference
    : public integral_constant<bool, (is_lvalue_reference<_Tp>::value
          || is_rvalue_reference<_Tp>::value)>
    { };




  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value,
    bool = is_rvalue_reference<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true, false>
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, false, true>
    { typedef typename remove_reference<_Tp>::type& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp,
    bool = is_integral<_Tp>::value,
    bool = is_floating_point<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, false, true>
    : public true_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true, false>
    : public integral_constant<bool, static_cast<bool>(_Tp(-1) < _Tp(0))>
    { };


  template<typename _Tp>
    struct is_signed
    : public integral_constant<bool, __is_signed_helper<_Tp>::value>
    { };


  template<typename _Tp>
    struct is_unsigned
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          && !is_signed<_Tp>::value)>
    { };




  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };

  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename _Tp, typename... _Args>
    class __is_constructible_helper
    : public __sfinae_types
    {
      template<typename _Tp1, typename... _Args1>
        static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);

      template<typename, typename...>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Args...>(0)) == 1;
    };

  template<typename _Tp, typename _Arg>
    class __is_constructible_helper<_Tp, _Arg>
    : public __sfinae_types
    {
      template<typename _Tp1, typename _Arg1>
        static decltype(static_cast<_Tp1>(declval<_Arg1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Arg>(0)) == 1;
    };




  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public integral_constant<bool,
          __is_constructible_helper<_Tp,
        _Args...>::__value>
    { };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper
    { static const bool __value = false; };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper<true, _Tp, _Args...>
    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_helper<true, _Tp, _Arg>
    {
      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));
    };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public integral_constant<bool,
   __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,
           _Tp, _Args...>::__value>
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_destructor
    : public integral_constant<bool, __has_trivial_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_default_constructor
    : public integral_constant<bool, __has_nothrow_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_constructor
    : public integral_constant<bool, __has_nothrow_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_assign
    : public integral_constant<bool, __has_nothrow_assign(_Tp)>
    { };




  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
    bool = (is_void<_From>::value || is_function<_To>::value
     || is_array<_To>::value)>
    struct __is_convertible_helper
    { static const bool __value = is_void<_To>::value; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    : public __sfinae_types
    {
      template<typename _To1>
        static void __test_aux(_To1);

      template<typename _From1, typename _To1>
        static decltype(__test_aux<_To1>(std::declval<_From1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_From, _To>(0)) == 1;
    };




  template<typename _From, typename _To>
    struct is_convertible
    : public integral_constant<bool,
          __is_convertible_helper<_From, _To>::__value>
    { };


  template<typename _From, typename _To>
    struct is_explicitly_convertible
    : public is_constructible<_To, _From>
    { };

  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 819 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };





  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };





  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };



  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };



  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;


  template<typename... _Tp>
    struct common_type;

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    { typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    {
      typedef typename
        common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;
    };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct _Result_of_memobj<_Res _Class::*, _Arg>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype(_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
        __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct _Result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype((_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
            (std::declval<_Args>()...) )
        __type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl;

  template<typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl<false, false, _Functor, _ArgTypes...>
    {
      typedef
        decltype( std::declval<_Functor>()(std::declval<_ArgTypes>()...) )
        __type;
    };

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_impl<true, false, _MemPtr, _Arg>
    : _Result_of_memobj<typename remove_reference<_MemPtr>::type, _Arg>
    {
      typedef typename _Result_of_memobj<
 typename remove_reference<_MemPtr>::type, _Arg>::__type
 __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_impl<false, true, _MemPtr, _Arg, _ArgTypes...>
    : _Result_of_memfun<typename remove_reference<_MemPtr>::type, _Arg,
                        _ArgTypes...>
    {
      typedef typename _Result_of_memfun<
 typename remove_reference<_MemPtr>::type, _Arg, _ArgTypes...>::__type
 __type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : _Result_of_impl<is_member_object_pointer<
                        typename remove_reference<_Functor>::type >::value,
                      is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>
    {
      typedef typename _Result_of_impl<
 is_member_object_pointer<
   typename remove_reference<_Functor>::type >::value,
        is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>::__type
 type;
    };
# 1266 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
}
# 54 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t)
    { return static_cast<_Tp&&>(__t); }

  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t)
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }







  template<typename _Tp>
    inline typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
# 94 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r)
    { return std::__addressof(__r); }


}
# 109 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 120 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{




  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<int...>
    struct _Index_tuple;



  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }


      constexpr pair(const pair&) = default;





      template<class _U1, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
 pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        std::enable_if<std::is_convertible<_U2, _T2>::value>::type>
 pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value
         && std::is_convertible<_U2, _T2>::value>::type>
 pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2>
 pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<class... _Args1, class... _Args2>
 pair(piecewise_construct_t,
      tuple<_Args1...> __first, tuple<_Args2...> __second)
 : first(__cons<first_type>(std::move(__first))),
   second(__cons<second_type>(std::move(__second))) { }

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      {
 first = std::move(__p.first);
 second = std::move(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::move(__p.first);
   second = std::move(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename _Tp, typename... _Args>
 static _Tp
 __cons(tuple<_Args...>&&);

      template<typename _Tp, typename... _Args, int... _Indexes>
 static _Tp
 __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    { __x.swap(__y); }
# 259 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<typename __decay_and_strip<_T1>::__type,
  typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 277 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
}
# 66 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_iterator_category : integral_constant<bool, __has_iterator_category_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 110 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 168 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 1 3
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 395 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 429 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 519 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 631 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 699 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 923 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(const _Iterator& __i)
    { return move_iterator<_Iterator>(__i); }




}
# 69 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 1 3
# 47 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = std::move(*__a);
          *__a = std::move(*__b);
          *__b = std::move(__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 135 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 475 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 647 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1008 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 58 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 83 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 227 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 49 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3
# 50 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 2 3
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 378 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 2 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4








struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
{
  int sched_priority;
};

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 25 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
  int __kind;





  short __spins; short __elision;
  __pthread_list_t __list;
# 166 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 681 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 693 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 716 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 729 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1160 "/usr/include/pthread.h" 3 4
}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 223 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));






# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));








# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;







}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;






  return __gthread_active_ptr != 0;
}
# 657 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 800 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 1 3
# 48 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }


      template<typename... _Args>
        void
        construct(pointer __p, _Args&&... __args)
 { ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }


      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 191 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp,
    bool = __has_trivial_copy(typename _Tp::value_type)>
    struct __shrink_to_fit
    { static void _S_do_it(_Tp&) { } };

  template<typename _Tp>
    struct __shrink_to_fit<_Tp, true>
    {
      static void
      _S_do_it(_Tp& __v)
      {
 if (true)
   { _Tp(__v).swap(__v); }
 if (false) { }
      }
    };



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_allocator_type : integral_constant<bool, __has_allocator_type_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };




}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 46 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 1 3
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 101 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 1 3
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 2 3
# 50 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 53 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3



#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() { return _M_len; }


      constexpr const_iterator
      begin() { return _M_array; }


      constexpr const_iterator
      end() { return begin() + size(); }
  };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils)
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils)
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 105 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 142 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 167 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 477 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 501 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(basic_string&& __str)
      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 525 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 558 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 573 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 733 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 746 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit()
      {
 if (true)
   { reserve(0); }
 if (false)
   { }
      }






      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 787 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 816 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 833 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 854 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const
      { return operator[](this->size() - 1); }
# 907 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 978 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1010 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1032 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1068 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1088 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1104 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1116 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1132 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1144 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1172 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1187 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1199 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1218 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1240 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1263 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1281 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1304 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1321 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1345 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1361 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1381 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1400 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1422 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1446 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1465 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1488 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1506 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1524 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1545 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1566 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1588 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1658 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1744 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1754 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1764 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1796 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1809 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1823 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1840 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1853 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1868 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1881 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1898 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1911 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1926 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1958 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1972 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1987 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2033 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2048 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2062 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2079 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2092 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2108 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2121 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2138 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2153 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2171 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2201 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2225 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2243 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2266 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2291 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2303 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2424 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2470 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2507 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2544 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2581 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2618 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2655 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2672 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2690 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2713 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2731 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}





# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 158 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 250 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 337 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 70 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 139 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __suseconds_t suseconds_t;






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 197 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 257 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4
}
# 66 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 97 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 157 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



namespace std
{


  using std::lldiv_t;


  using std::llabs;
  using std::lldiv;


  using std::atoll;
  using std::strtoll;
  using std::strtoull;

  using std::strtof;
  using std::strtold;


  using std::abs;

  using std::div;

}
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4






typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 577 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 868 "/usr/include/stdio.h" 3 4
}
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 2 3
# 91 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 147 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace __gnu_cxx
{
# 165 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;




}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 2 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2756 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }


  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 48 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const;
    };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<> inline size_t hash<bool>::operator()(bool __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char>::operator()(char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<signed char>::operator()(signed char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned char>::operator()(unsigned char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<wchar_t>::operator()(wchar_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char16_t>::operator()(char16_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char32_t>::operator()(char32_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<short>::operator()(short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<int>::operator()(int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long>::operator()(long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long long>::operator()(long long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned short>::operator()(unsigned short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned int>::operator()(unsigned int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long>::operator()(unsigned long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long long>::operator()(unsigned long long __val) const { return static_cast<size_t>(__val); };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    inline size_t
    hash<float>::operator()(float __val) const
    {

      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    inline size_t
    hash<double>::operator()(double __val) const
    {

      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    __attribute__ ((__pure__)) size_t
    hash<long double>::operator()(long double __val) const;




}
# 2974 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };



}
# 54 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 1 3
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 55 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 99 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 118 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale() throw();
# 127 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 137 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 152 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 165 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 582 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 599 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 616 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 643 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 657 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 674 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 693 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 707 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 736 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 752 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 765 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 823 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 200 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 256 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 331 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 362 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 394 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 420 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 437 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 449 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 562 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 578 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 595 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 621 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 672 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 684 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 695 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 706 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 725 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 741 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 762 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 779 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 115 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 181 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 205 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 222 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 235 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 262 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 276 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 294 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 316 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 335 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 350 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 375 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 402 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 428 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 442 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 460 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 476 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 487 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 507 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 523 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 533 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 554 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 569 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 580 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 592 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 605 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int
      sync() { return 0; }
# 627 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 643 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 665 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 678 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 702 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 720 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 746 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 761 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 808 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 2 3
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 1 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 51 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 52 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 2 3
# 81 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}







namespace std
{

  using std::iswblank;

}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 1 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 50 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 50 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1997 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2056 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2098 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2169 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2234 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2252 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2273 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2291 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2333 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2396 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2421 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2469 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2527 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 1 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 137 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 731 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 967 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1028 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1153 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1190 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2608 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 127 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 138 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 191 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 212 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 247 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 285 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 297 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 337 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 351 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 380 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 400 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 420 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 439 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 473 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3
# 45 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 82 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 108 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 250 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 283 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 311 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 324 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      flush();
# 335 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      pos_type
      tellp();
# 346 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 358 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 377 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 396 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 406 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 448 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 490 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 540 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 578 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    { return (__os << __x); }



}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 588 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 91 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 120 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 239 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 249 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 281 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      get();
# 295 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type& __c);
# 322 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 333 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 356 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 366 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 395 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 406 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 430 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 447 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      peek();
# 465 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 484 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 501 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      putback(char_type __c);
# 517 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      unget();
# 535 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int
      sync();
# 550 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      pos_type
      tellg();
# 565 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(pos_type);
# 581 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 636 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 672 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 683 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 702 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 744 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 772 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 833 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 849 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    { return (__is >> __x); }



}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 514 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 859 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 20 "firmware/myproject.cpp" 2

# 1 "firmware/myproject.h" 1
# 23 "firmware/myproject.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 54 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 1
# 57 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h" 1
# 100 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2
# 157 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2
# 562 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h" 1
# 80 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << n;
    __typeof__(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << (_AP_W - n);
    __typeof__(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h" 1
# 61 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2







# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 1
# 55 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 63 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ __typeof__(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ __typeof__(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h" 1
# 70 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  }
# 311 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2
# 368 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 24 "firmware/myproject.h" 2

# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h" 1
# 66 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h"
# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 88 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {

        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;



    }

    inline __attribute__((always_inline)) bool full() const {

        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;



    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {
        __STREAM_T__ tmp;

        _ssdm_StreamRead(&V, &tmp);



        return tmp;
    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;



    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;



    }



    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V ;
};


}
# 26 "firmware/myproject.h" 2

# 1 "firmware/defines.h" 1



# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/defines.h" 2

# 1 "firmware/nnet_utils/nnet_types.h" 1



# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 5 "firmware/nnet_utils/nnet_types.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 6 "firmware/nnet_utils/nnet_types.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 7 "firmware/nnet_utils/nnet_types.h" 2

namespace nnet {


template<typename T, unsigned N>
struct array {
    typedef T value_type;
    static const unsigned size = N;

    T data[N];

    T& operator[](size_t pos) {
        return data[pos];
    }

    const T& operator[](size_t pos) const {
        return data[pos];
    }

    array& operator=(const array &other) {
        if(&other == this)
            return *this;

        (static_cast <bool> (N == other.size && "Array sizes must match.") ? void (0) : __assert_fail ("N == other.size && \"Array sizes must match.\"", "firmware/nnet_utils/nnet_types.h", 30, __extension__ __PRETTY_FUNCTION__));

        for (unsigned i = 0; i < N; i++) {
#pragma HLS UNROLL
 data[i] = other[i];
        }
        return *this;
    }
};

}
# 7 "firmware/defines.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 8 "firmware/defines.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 9 "firmware/defines.h" 2
# 27 "firmware/defines.h"
typedef ap_fixed<16,6> model_default_t;
typedef ap_fixed<16,6> input_t;
typedef ap_fixed<16,6> layer2_t;
typedef ap_fixed<16,6> layer3_t;
typedef ap_fixed<16,6> layer11_t;
typedef ap_fixed<16,6> layer6_t;
typedef ap_fixed<16,6> layer12_t;
typedef ap_uint<1> bias12_t;
typedef ap_fixed<16,6> result_t;
# 28 "firmware/myproject.h" 2


void myproject(
    input_t input_1[73*70],
    result_t layer13_out[73*70]
);
# 22 "firmware/myproject.cpp" 2
# 1 "firmware/parameters.h" 1



# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/parameters.h" 2


# 1 "firmware/nnet_utils/nnet_helpers.h" 1
# 25 "firmware/nnet_utils/nnet_helpers.h"
# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ();



extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int totalorder (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ();



extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ();



extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ();





extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32 __nanf32 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();



extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ();





extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64 __nanf64 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();



extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ();





extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32x __nanf32x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();



extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ();





extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64x __nanf64x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();



extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 489 "/usr/include/math.h" 3 4
extern int signgam;
# 569 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 684 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 685 "/usr/include/math.h" 2 3 4
# 696 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}



}
# 725 "/usr/include/math.h" 3 4
extern "C++" {
# 754 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1205 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1246 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 26 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 1 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 42 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 1 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 1 3
# 36 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 37 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 44 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 129 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 265 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 275 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 292 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 324 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 344 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 390 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 418 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 445 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 458 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 474 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 490 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ifstream()
      { }
# 500 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 529 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 549 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 567 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 586 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 613 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 627 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 645 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 661 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ofstream()
      { }
# 671 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 700 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 721 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 740 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 759 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 787 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 799 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 830 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_fstream()
      { }
# 840 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 869 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 890 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 909 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 1 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 701 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 921 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 27 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 1 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 1 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 69 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 1 3
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 86 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2> >
    { static const std::size_t value = 2; };

  template<class _Tp1, class _Tp2>
    const std::size_t
    tuple_size<std::pair<_Tp1, _Tp2> >::value;

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2> >
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2> >
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(const std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__const_get(__in); }


}
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 1 3
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 191 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 532 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 1 3
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 154 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 203 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value));
    }
# 276 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;
                                              ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 350 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                           ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 373 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 413 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 452 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 481 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 510 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last));
    }
# 536 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last),
         __comp);
    }
# 558 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 571 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 64 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 1 3
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 1 3
# 64 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 91 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 84 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 111 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator __first, _ForwardIterator __last,
       _Tp& __value)
        {
   if(__first == __last)
     return;

   _ForwardIterator __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(__value));
       _ForwardIterator __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       __value = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }
    };
# 230 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_construct_buf(_ForwardIterator __first,
      _ForwardIterator __last,
      _Tp& __value)
    {
      typedef typename std::iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __value);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if(_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            *__first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3





# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 76 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 371 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }

  inline bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isfinite(_Tp __x)
    { return true; }

  inline bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isinf(_Tp __x)
    { return false; }

  inline bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnan(_Tp __x)
    { return false; }

  inline bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }

  inline bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  inline bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  inline bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  inline bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  inline bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  inline bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  inline bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 842 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
}
# 957 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;


  inline float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  inline long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    acosh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return acosh(__type(__x));
    }

  inline float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  inline long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    asinh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return asinh(__type(__x));
    }

  inline float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  inline long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    atanh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return atanh(__type(__x));
    }

  inline float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  inline long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    cbrt(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return cbrt(__type(__x));
    }

  inline float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  inline long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  inline float
  erf(float __x)
  { return __builtin_erff(__x); }

  inline long double
  erf(long double __x)
  { return __builtin_erfl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erf(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erf(__type(__x));
    }

  inline float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  inline long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erfc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erfc(__type(__x));
    }

  inline float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  inline long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    exp2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return exp2(__type(__x));
    }

  inline float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  inline long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expm1(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return expm1(__type(__x));
    }

  inline float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  inline long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  inline float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  inline long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }

  inline float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  inline long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  inline float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  inline long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  inline float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  inline long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  inline int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  inline int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }

  template<typename _Tp>
    inline int
    ilogb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return ilogb(__type(__x));
    }

  inline float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  inline long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    lgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lgamma(__type(__x));
    }

  inline long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  inline long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }

  template<typename _Tp>
    inline long long
    llrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llrint(__type(__x));
    }

  inline long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  inline long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }

  template<typename _Tp>
    inline long long
    llround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llround(__type(__x));
    }

  inline float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  inline long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log1p(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log1p(__type(__x));
    }


  inline float
  log2(float __x)
  { return __builtin_log2f(__x); }

  inline long double
  log2(long double __x)
  { return __builtin_log2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log2(__type(__x));
    }

  inline float
  logb(float __x)
  { return __builtin_logbf(__x); }

  inline long double
  logb(long double __x)
  { return __builtin_logbl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    logb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return logb(__type(__x));
    }

  inline long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  inline long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }

  template<typename _Tp>
    inline long
    lrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lrint(__type(__x));
    }

  inline long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  inline long
  lround(long double __x)
  { return __builtin_lroundl(__x); }

  template<typename _Tp>
    inline long
    lround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lround(__type(__x));
    }

  inline float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  inline long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nearbyint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nearbyint(__type(__x));
    }

  inline float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  inline long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  inline float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  inline long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nexttoward(_Tp __x, long double __y)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nexttoward(__type(__x), __y);
    }

  inline float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  inline long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  inline float
  rint(float __x)
  { return __builtin_rintf(__x); }

  inline long double
  rint(long double __x)
  { return __builtin_rintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    rint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return rint(__type(__x));
    }

  inline float
  round(float __x)
  { return __builtin_roundf(__x); }

  inline long double
  round(long double __x)
  { return __builtin_roundl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    round(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return round(__type(__x));
    }

  inline float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  inline long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbln(_Tp __x, long __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbln(__type(__x), __ex);
    }

  inline float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  inline long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbn(_Tp __x, int __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbn(__type(__x), __ex);
    }

  inline float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  inline long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    tgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return tgamma(__type(__x));
    }

  inline float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  inline long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    trunc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return trunc(__type(__x));
    }


}
# 38 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 39 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 40 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3


# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;



    static constexpr bool is_integer = false;





    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;





    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 302 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      max() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      lowest() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() throw() { return false; }

      static constexpr bool
      max() throw() { return true; }


      static constexpr bool
      lowest() throw() { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() throw() { return false; }

      static constexpr bool
      round_error() throw() { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() throw() { return false; }

      static constexpr bool
      quiet_NaN() throw() { return false; }

      static constexpr bool
      signaling_NaN() throw() { return false; }

      static constexpr bool
      denorm_min() throw() { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static constexpr char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() throw() { return 0; }

      static constexpr char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() throw() { return char(); }

      static constexpr char
      quiet_NaN() throw() { return char(); }

      static constexpr char
      signaling_NaN() throw() { return char(); }

      static constexpr char
      denorm_min() throw() { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() throw() { return -127 - 1; }

      static constexpr signed char
      max() throw() { return 127; }


      static constexpr signed char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() throw() { return 0; }

      static constexpr signed char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() throw() { return 0; }

      static constexpr unsigned char
      max() throw() { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() throw() { return 0; }

      static constexpr unsigned char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static constexpr wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() throw() { return 0; }

      static constexpr wchar_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() throw() { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() throw() { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() throw() { return (((char16_t)(-1) < 0) ? (char16_t)1 << (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) : (char16_t)0); }

      static constexpr char16_t
      max() throw() { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }


      static constexpr char16_t
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() throw() { return 0; }

      static constexpr char16_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() throw() { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      denorm_min() throw() { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() throw() { return (((char32_t)(-1) < 0) ? (char32_t)1 << (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) : (char32_t)0); }

      static constexpr char32_t
      max() throw() { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }


      static constexpr char32_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() throw() { return 0; }

      static constexpr char32_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() throw() { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      denorm_min() throw() { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() throw() { return -32767 - 1; }

      static constexpr short
      max() throw() { return 32767; }


      static constexpr short
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() throw() { return 0; }

      static constexpr short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() throw() { return short(); }

      static constexpr short
      quiet_NaN() throw() { return short(); }

      static constexpr short
      signaling_NaN() throw() { return short(); }

      static constexpr short
      denorm_min() throw() { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() throw() { return 0; }

      static constexpr unsigned short
      max() throw() { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() throw() { return 0; }

      static constexpr unsigned short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() throw() { return -2147483647 - 1; }

      static constexpr int
      max() throw() { return 2147483647; }


      static constexpr int
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() throw() { return 0; }

      static constexpr int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() throw() { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      denorm_min() throw() { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() throw() { return 0; }

      static constexpr unsigned int
      max() throw() { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() throw() { return 0; }

      static constexpr unsigned int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() throw() { return -9223372036854775807L - 1; }

      static constexpr long
      max() throw() { return 9223372036854775807L; }


      static constexpr long
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() throw() { return 0; }

      static constexpr long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() throw() { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      denorm_min() throw() { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() throw() { return 0; }

      static constexpr unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() throw() { return 0; }

      static constexpr unsigned long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() throw() { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() throw() { return 9223372036854775807LL; }


      static constexpr long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() throw() { return 0; }

      static constexpr long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() throw() { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() throw() { return 0; }

      static constexpr unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() throw() { return 0; }

      static constexpr unsigned long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() throw() { return 1.17549435e-38F; }

      static constexpr float
      max() throw() { return 3.40282347e+38F; }


      static constexpr float
      lowest() throw() { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() throw() { return 1.19209290e-7F; }

      static constexpr float
      round_error() throw() { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() throw() { return __builtin_huge_valf (); }

      static constexpr float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static constexpr float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static constexpr float
      denorm_min() throw() { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() throw() { return 2.2250738585072014e-308; }

      static constexpr double
      max() throw() { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() throw() { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() throw() { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() throw() { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static constexpr double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static constexpr double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() throw() { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() throw() { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() throw() { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() throw() { return __builtin_huge_vall (); }

      static constexpr long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static constexpr long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static constexpr long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 43 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 1 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3
# 59 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 1 3
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_1<__is_trivial(_ValueType)>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
 __uninit_default_n(__first, __n);
    }

 template<typename _Tp, typename _Allocator>
   inline auto
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, void*)
   -> decltype(__alloc.construct(__ptr))
   { return __alloc.construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, ...)
   { _Construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a(_Tp* __ptr, _Allocator& __alloc)
   { _Construct_default_a_impl(__ptr, __alloc, nullptr); }




  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 644 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 64 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 1 3
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }


      _Vector_base(_Vector_base&& __x)
      : _M_impl(__x._M_get_Tp_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = 0;
 __x._M_impl._M_finish = 0;
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 236 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      explicit
      vector(size_type __n)
      : _Base(__n)
      { _M_default_initialize(__n); }
# 249 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 294 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(vector&& __x)
      : _Base(std::move(__x)) { }
# 308 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 333 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 372 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 393 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 411 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 448 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(begin()); }




      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 588 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 608 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 640 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { std::__shrink_to_fit<vector>::_S_do_it(*this); }






      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 694 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 799 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      _Tp*



      data()
      { return std::__addressof(front()); }


      const _Tp*



      data() const
      { return std::__addressof(front()); }
# 825 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 856 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 876 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(iterator __position, _Args&&... __args);
# 892 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 907 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 924 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, initializer_list<value_type> __l)
      { this->insert(__position, __l.begin(), __l.end()); }
# 942 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1006 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1018 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1073 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 1 3
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x)
      : _M_impl(__x._M_get_Bit_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 478 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend class hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x)
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }


    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }


    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const
    { return const_reverse_iterator(begin()); }


    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }


    void insert(iterator __p, initializer_list<bool> __l)
    { this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { std::__shrink_to_fit<vector>::_S_do_it(*this); }


    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>& __b) const;
    };


}
# 66 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 1 3
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   std::make_move_iterator(this->_M_impl._M_start),
   std::make_move_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__position, std::move(__x_copy));
     }
   else

     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(__position, std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   if (true)
     {




       this->_M_impl.construct(__new_start + __elems_before,

          std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          if (false)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
                              ;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {
    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      this->_M_impl._M_finish,
      __new_start,
      _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       if (false)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 35 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod;



    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 169 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");



      static_assert(__m % __a < __m / __a,
      "sorry, not implemented yet: try a smaller 'a' constant");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 201 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 234 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 286 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 299 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>&);
# 319 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>&);

    private:
      _UIntType _M_x;
    };
# 341 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 375 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      result_type
      operator()();
# 493 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }
# 510 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);
# 536 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);

    private:
      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 567 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 599 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 652 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 707 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }
# 724 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 743 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 768 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 783 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 933 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 949 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);
# 967 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 990 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1143 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1160 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1186 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1204 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1372 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1388 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>&);
# 1406 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>&);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1436 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1465 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "/dev/urandom")
    {
      if ((__token != "/dev/urandom" && __token != "/dev/random")
   || !(_M_file = std::fopen(__token.c_str(), "rb")))
 std::__throw_runtime_error(("random_device::" "random_device(const std::string&)"));

    }

    ~random_device()
    { std::fclose(_M_file); }
# 1552 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }

    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const
    { return 0.0; }

    result_type
    operator()()
    {

      result_type __ret;
      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),
   1, _M_file);
      return __ret;



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:


    FILE* _M_file;



  };
# 1609 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1754 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1768 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1781 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1935 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 1949 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 1971 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2110 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::normal_distribution<_RealType1>&);
# 2125 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::normal_distribution<_RealType1>&);

    private:
      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2155 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }






      template<typename _RealType1>
        friend bool
        operator==(const std::lognormal_distribution<_RealType1>& __d1,
     const std::lognormal_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2286 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::lognormal_distribution<_RealType1>&);
# 2301 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::lognormal_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2331 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
        friend bool
        operator==(const std::gamma_distribution<_RealType1>& __d1,
     const std::gamma_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2479 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::gamma_distribution<_RealType1>&);
# 2493 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::gamma_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
    inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2520 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::chi_squared_distribution<_RealType1>& __d1,
     const std::chi_squared_distribution<_RealType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 2643 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::chi_squared_distribution<_RealType1>&);
# 2658 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::chi_squared_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2685 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2827 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::cauchy_distribution<_RealType>&);
# 2842 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::cauchy_distribution<_RealType>&);
# 2858 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::fisher_f_distribution<_RealType1>& __d1,
     const std::fisher_f_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_gd_x == __d2._M_gd_x
    && __d1._M_gd_y == __d2._M_gd_y); }
# 2998 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::fisher_f_distribution<_RealType1>&);
# 3013 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::fisher_f_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3042 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }






      template<typename _RealType1>
        friend bool
        operator==(const std::student_t_distribution<_RealType1>& __d1,
     const std::student_t_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3171 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::student_t_distribution<_RealType1>&);
# 3186 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::student_t_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3222 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, this->param()); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

  private:
    param_type _M_param;
  };





  inline bool
  operator==(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return __d1.param() == __d2.param(); }





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3365 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::bernoulli_distribution&);
# 3379 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3398 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
 friend bool
        operator==(const std::binomial_distribution<_IntType1>& __d1,
     const std::binomial_distribution<_IntType1>& __d2)

 { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 3550 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::binomial_distribution<_IntType1>&);
# 3566 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::binomial_distribution<_IntType1>&);

    private:
      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3600 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {

                        ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3744 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::geometric_distribution<_IntType>&);
# 3759 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::geometric_distribution<_IntType>&);
# 3773 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::negative_binomial_distribution<_IntType1>& __d1,
     const std::negative_binomial_distribution<_IntType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 3905 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::negative_binomial_distribution<_IntType1>&);
# 3920 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::negative_binomial_distribution<_IntType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3956 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::poisson_distribution<_IntType1>& __d1,
     const std::poisson_distribution<_IntType1>& __d2)

        { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 4092 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::poisson_distribution<_IntType1>&);
# 4107 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::poisson_distribution<_IntType1>&);

    private:
      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4144 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(__aurng()) / __p.lambda();
 }

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4288 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::exponential_distribution<_RealType>&);
# 4303 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::exponential_distribution<_RealType>&);
# 4318 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4463 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::weibull_distribution<_RealType>&);
# 4478 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::weibull_distribution<_RealType>&);
# 4493 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4638 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::extreme_value_distribution<_RealType>&);
# 4653 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::extreme_value_distribution<_RealType>&);
# 4665 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 4815 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discrete_distribution<_IntType1>&);
# 4831 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discrete_distribution<_IntType1>&);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4867 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5054 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_constant_distribution<_RealType1>&);
# 5070 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_constant_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5106 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5296 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_linear_distribution<_RealType1>&);
# 5312 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_linear_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5356 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 1 3
# 33 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 1 3
# 58 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3
# 58 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3



# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 1 3
# 66 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 81 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 119 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 145 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 173 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 204 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 236 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 276 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 316 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 2 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 54 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod
      {
 static _Tp
 __calc(_Tp __x)
 {
   if (__a == 1)
     __x %= __m;
   else
     {
       static const _Tp __q = __m / __a;
       static const _Tp __r = __m % __a;

       _Tp __t1 = __a * (__x % __q);
       _Tp __t2 = __r * (__x / __q);
       if (__t1 >= __t2)
  __x = __t1 - __t2;
       else
  __x = __m - __t2 + __t1;
     }

   if (__c != 0)
     {
       const _Tp __d = __m - __x;
       if (__d > __c)
  __x += __c;
       else
  __x = __c - __d;
     }
   return __x;
 }
      };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, true>
      {
 static _Tp
 __calc(_Tp __x)
 { return __a * __x + __c; }
      };

    template<typename _InputIterator, typename _OutputIterator,
      typename _UnaryOperation>
      _OutputIterator
      __transform(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _UnaryOperation __unary_op)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = __unary_op(*__first);
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 {
   const _UIntType __upper_mask = (~_UIntType()) << __r;
   const _UIntType __lower_mask = ~__upper_mask;

   for (size_t __k = 0; __k < (__n - __m); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
      | (_M_x[0] & __lower_mask));
   _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
   _M_p = 0;
 }


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n - 1; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_x[__n - 1];

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      const long double __r = static_cast<long double>(_M_b.max())
       - static_cast<long double>(_M_b.min()) + 1.0L;
      const result_type __m = std::log(__r) / std::log(2.0L);
      result_type __n, __n0, __y0, __y1, __s0, __s1;
      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const result_type __w0 = __w / __n;
   const result_type __w1 = __w0 + 1;
   __s0 = result_type(1) << __w0;
   __s1 = result_type(1) << __w1;
   __y0 = __s0 * (__r / __s0);
   __y1 = __s1 * (__r / __s1);
   if (__r - __y0 <= __y0 / __n)
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y0);
   __sum = __s0 * __sum + __u % __s0;
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y1);
   __sum = __s1 * __sum + __u % __s1;
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename std::make_unsigned<typename
   _UniformRandomNumberGenerator::result_type>::type __urngtype;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::conditional<(sizeof(__urngtype)
        > sizeof(__utype)),
   __urngtype, __utype>::type __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 884 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(__aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1198 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(__aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(__aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     const double __e = -std::log(__aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= _M_param._M_q);

 return __x - 1;
      }
# 1430 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x));
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1647 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(__aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(__aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_m.begin(), _M_m.end(), _M_m.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(__s + 1, __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 51 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 1 3
# 47 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 47 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3






# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 1 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
# 34 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3







#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 82 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 117 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    size_t hash_code() const throw()
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 54 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 1 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
# 32 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3







namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmpty>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return *this; }
      const _Head& _M_head() const { return *this; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return _M_head_impl; }
      const _Head& _M_head() const { return _M_head_impl; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }

      _Head _M_head_impl;
    };
# 123 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
    protected:
      void _M_swap_impl(_Tuple_impl&) { }
    };






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, std::is_empty<_Head>::value>
    {
      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;

      _Head& _M_head() { return _Base::_M_head(); }
      const _Head& _M_head() const { return _Base::_M_head(); }

      _Inherited& _M_tail() { return *this; }
      const _Inherited& _M_tail() const { return *this; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail>
        explicit
        _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      _Tuple_impl(_Tuple_impl&& __in)
      : _Inherited(std::move(__in._M_tail())),
 _Base(std::forward<_Head>(__in._M_head())) { }

      template<typename... _UElements>
        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move(__in._M_tail())),
   _Base(std::forward<_UHead>(__in._M_head())) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head() = __in._M_head();
 _M_tail() = __in._M_tail();
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      {
 _M_head() = std::forward<_Head>(__in._M_head());
 _M_tail() = std::move(__in._M_tail());
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head() = __in._M_head();
   _M_tail() = __in._M_tail();
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head() = std::forward<_UHead>(__in._M_head());
   _M_tail() = std::move(__in._M_tail());
   return *this;
 }

    protected:
      void
      _M_swap_impl(_Tuple_impl& __in)
      {
 _Base::_M_swap_impl(__in._M_head());
 _Inherited::_M_swap_impl(__in._M_tail());
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        explicit
        tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };

  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) { }
    };


  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2>
        explicit
        tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2>
        tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head() = __in.first;
   this->_M_tail()._M_head() = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head() = std::forward<_U1>(__in.first);
   this->_M_tail()._M_head() = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      {
 using std::swap;
 swap(this->_M_head(), __in._M_head());
 swap(this->_M_tail()._M_head(), __in._M_tail()._M_head());
      }
    };


  template<typename _T1>
    class tuple<_T1> : public _Tuple_impl<0, _T1>
    {
      typedef _Tuple_impl<0, _T1> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1)
      : _Inherited(__a1) { }

      template<typename _U1, typename = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
        explicit
        tuple(_U1&& __a1)
 : _Inherited(std::forward<_U1>(__a1)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1>
        tuple(const tuple<_U1>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }

      template<typename _U1>
        tuple(tuple<_U1>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1>
        tuple&
        operator=(const tuple<_U1>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1>
        tuple&
        operator=(tuple<_U1>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };


  template<typename _Tp>
    struct tuple_size;


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...> >
    {
      static const std::size_t value = sizeof...(_Elements);
    };

  template<typename... _Elements>
    const std::size_t tuple_size<tuple<_Elements...> >::value;

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }



  template<std::size_t __i, typename... _Elements>
    inline typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }

  template<std::size_t __i, typename... _Elements>
    inline typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(const tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }


  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static bool __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static bool __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static bool __eq(const _Tp&, const _Up&)
      { return true; }

      static bool __less(const _Tp&, const _Up&)
      { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    inline tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    inline tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<std::size_t...> struct __index_holder { };

  template<std::size_t __i, typename _IdxHolder, typename... _Elements>
    struct __index_holder_impl;

  template<std::size_t __i, std::size_t... _Indexes, typename _IdxHolder,
    typename... _Elements>
    struct __index_holder_impl<__i, __index_holder<_Indexes...>,
          _IdxHolder, _Elements...>
    {
      typedef typename __index_holder_impl<__i + 1,
        __index_holder<_Indexes..., __i>,
        _Elements...>::type type;
    };

  template<std::size_t __i, std::size_t... _Indexes>
    struct __index_holder_impl<__i, __index_holder<_Indexes...> >
    { typedef __index_holder<_Indexes...> type; };

  template<typename... _Elements>
    struct __make_index_holder
    : __index_holder_impl<0, __index_holder<>, _Elements...> { };

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
                       const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>(get<_TIdx>(__t)...,
       get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (get<_TIdx>(__t)..., std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))...,
  std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    __u, typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
     __make_index_holder<_TElements...>::type(),
     __u, typename
     __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args)
    { return tuple<_Elements&...>(__args...); }

  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};





  template<int... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<std::size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };


  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args>
      inline _Tp
      pair<_T1, _T2>::
      __cons(tuple<_Args...>&& __tuple)
      {
 typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
   _Indexes;
 return __do_cons<_Tp>(std::move(__tuple), _Indexes());
      }

  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args, int... _Indexes>
      inline _Tp
      pair<_T1, _T2>::
      __do_cons(tuple<_Args...>&& __tuple,
  const _Index_tuple<_Indexes...>&)
      { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }


}
# 56 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp> class __has_result_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_result_type : integral_constant<bool, __has_result_type_helper <typename remove_cv<_Tp>::type>::value> { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp>
    struct _Derives_from_unary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _Res>
 static __one __test(const volatile unary_function<_T1, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };


  template<typename _Tp>
    struct _Derives_from_binary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _T2, typename _Res>
 static __one __test(const volatile binary_function<_T1, _T2, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_argument_type : integral_constant<bool, __has_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_first_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_first_argument_type : integral_constant<bool, __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_second_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_second_argument_type : integral_constant<bool, __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata)
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref):
      _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref)
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const
      { return this->get(); }

      _Tp&
      get() const
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t)
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t)
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t)
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t)
    { return cref(__t.get()); }



  template<typename _MemberPointer>
    class _Mem_fn;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(_Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(_Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {


      template<typename _Tp>
 _Res&
 _M_call(_Tp& __object, _Class *) const
 { return __object.*__pm; }

      template<typename _Tp, typename _Up>
 _Res&
 _M_call(_Tp& __object, _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp, typename _Up>
 const _Res&
 _M_call(_Tp& __object, const _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __object, const _Class *) const
 { return __object.*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __ptr, const volatile void*) const
 { return (*__ptr).*__pm; }

      template<typename _Tp> static _Tp& __get_ref();

      template<typename _Tp>
 static __sfinae_types::__one __check_const(_Tp&, _Class*);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__one __check_const(_Tp&, _Up * const *);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__two __check_const(_Tp&, const _Up * const *);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const _Class*);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const volatile void*);

    public:
      template<typename _Tp>
 struct _Result_type
 : _Mem_fn_const_or_non<_Res,
   (sizeof(__sfinae_types::__two)
    == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>
 { };

      template<typename _Signature>
 struct result;

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp)>
 : public _Result_type<_Tp> { };

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp&)>
 : public _Result_type<_Tp> { };

      explicit
      _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const
      { return __object.*__pm; }


      _Res&
      operator()(_Class* __object) const
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const
      { return __object->*__pm; }


      template<typename _Tp>
 typename _Result_type<_Tp>::type
 operator()(_Tp& __unknown) const
 { return _M_call(__unknown, &__unknown); }

    private:
      _Res _Class::*__pm;
    };






  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm)
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };


  template<int _Num> struct _Placeholder { };
# 855 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  namespace placeholders
  {

    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 897 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<int __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<int __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<int __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i >= 0 && __i < tuple_size<_Tuple>::value)>
   { };
# 949 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, int... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature> >
    : public true_type { };

  template<typename _Functor, typename... _ArgTypes>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind<__functor_type(typename decay<_ArgTypes>::type...)> type;
    };





  template<typename _Functor, typename... _ArgTypes>
    inline
    typename _Bind_helper<_Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bind_helper<_Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }

  template<typename _Result, typename _Functor, typename... _ArgTypes>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_ArgTypes>::type...)>
 type;
    };





  template<typename _Result, typename _Functor, typename... _ArgTypes>
    inline
    typename _Bindres_helper<_Result, _Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bindres_helper<_Result, _Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() throw();
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp*& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

    public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {

   _Base::_M_init_functor(__functor, &__f.get());
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return __callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 __callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

     public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      struct _Useless { };

    public:
      typedef _Res result_type;







      function() : _Function_base() { }





      function(nullptr_t) : _Function_base() { }
# 1909 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(const function& __x);
# 1918 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 1941 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 function(_Functor __f,
   typename enable_if<
      !is_integral<_Functor>::value, _Useless>::type
     = _Useless());
# 1959 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 1977 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 1991 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2019 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(reference_wrapper<_Functor> __f)
 {
   function(__f).swap(*this);
   return *this;
 }
# 2045 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2073 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      explicit operator bool() const
      { return !_M_empty(); }
# 2086 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2099 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      const type_info& target_type() const;
# 2110 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor> _Functor* target();


      template<typename _Functor> const _Functor* target() const;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f,
        typename enable_if<
   !is_integral<_Functor>::value, _Useless>::type)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target()
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2224 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t)
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f)
    { return !static_cast<bool>(__f); }
# 2242 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t)
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f)
    { return static_cast<bool>(__f); }
# 2260 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 69 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
    {




      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__a, __b);
   else if (*__a < *__c)
     std::iter_swap(__a, __c);
 }
      else if (*__a < *__c)
 return;
      else if (*__b < *__c)
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,
   _Compare __comp)
    {





      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__a, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__a, __c);
 }
      else if (__comp(*__a, *__c))
 return;
      else if (__comp(*__b, *__c))
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }



  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 2:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 1:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 326 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 411 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 649 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 695 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 730 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 747 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 764 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 779 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last, __pred,
    std::__iterator_category(__first));
    }
# 803 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 821 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 874 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 911 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 950 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }


  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      for (; __n > 0; --__n)
 {
   *__result = *__first;
   ++__first;
   ++__result;
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 1008 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1036 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 1051 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 1086 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1129 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1169 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 1209 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = std::move(*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {





      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1437 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1464 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1668 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1702 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1860 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1942 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1962 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2008 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 2032 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1), __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2392 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2439 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2488 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2541 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;





                                                                  ;
                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2603 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;
# 2620 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                    ;

                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2663 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2696 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3120 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;





                                                  ;
                                                 ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3175 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;






                                                               ;
                                                              ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3513 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;






                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3562 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 3581 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3617 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3674 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3730 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3787 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3847 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3884 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3915 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3929 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }
# 3943 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (*__next < *__first)
   return __next;
      return __next;
    }
# 3972 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(*__next, *__first))
   return __next;
      return __next;
    }
# 4001 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4020 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4039 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (*__next < *__first)
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (*__first < *__min)
  __min = __first;
       else if (!(*__first < *__max))
  __max = __first;
       break;
     }

   if (*__next < *__first)
     {
       if (*__next < *__min)
  __min = __next;
       if (!(*__first < *__max))
  __max = __first;
     }
   else
     {
       if (*__first < *__min)
  __min = __first;
       if (!(*__next < *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 4115 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(*__next, *__first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(*__first, *__min))
  __min = __first;
       else if (!__comp(*__first, *__max))
  __max = __first;
       break;
     }

   if (__comp(*__next, *__first))
     {
       if (__comp(*__next, *__min))
  __min = __next;
       if (!__comp(*__first, *__max))
  __max = __first;
     }
   else
     {
       if (__comp(*__first, *__min))
  __min = __first;
       if (!__comp(*__next, *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }
# 4232 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::find(__first1, __scan, *__scan))
     continue;

   auto __matches = std::count(__first2, __last2, *__scan);
   if (0 == __matches
       || std::count(__scan, __last1, *__scan) != __matches)
     return false;
 }
      return true;
    }
# 4276 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__pred(*__first1, *__first2)))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   using std::placeholders::_1;

   if (__scan != std::find_if(__first1, __scan,
      std::bind(__pred, _1, *__scan)))
     continue;

   auto __matches = std::count_if(__first2, __last2,
      std::bind(__pred, _1, *__scan));
   if (0 == __matches
       || std::count_if(__scan, __last1,
          std::bind(__pred, _1, *__scan)) != __matches)
     return false;
 }
      return true;
    }
# 4326 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 4371 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 4392 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4416 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4445 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4484 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4516 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4548 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4580 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4605 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4645 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4716 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4790 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4826 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4868 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4904 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4937 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4969 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5001 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5032 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5069 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5108 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5140 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 5168 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5204 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5238 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5277 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5315 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5354 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5392 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5428 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5469 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5489 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5532 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5553 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5592 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;





                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5634 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;







                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5680 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5701 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5747 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5770 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5814 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5833 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5871 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5892 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5929 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5948 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5990 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6011 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6048 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6069 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6114 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6138 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6171 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6199 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6227 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6255 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3
# 28 "firmware/nnet_utils/nnet_helpers.h" 2

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 1 3
# 58 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3
# 58 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3

# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 1 3
# 68 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;


      template<typename... _Args>
        _Rb_tree_node(_Args&&... __args)
 : _Rb_tree_node_base(),
   _M_value_field(std::forward<_Args>(__args)...) { }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }
# 398 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   if (true)
     {
       _M_get_Node_allocator().construct(__tmp,
          std::forward<_Args>(__args)...);
     }
   if (false)
     {
       _M_put_node(__tmp);
                              ;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p)
      {
 _M_get_Node_allocator().destroy(__p);
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return static_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:

      template<typename _Arg>
        iterator
        _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);
# 592 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, __a) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(_Rb_tree&& __x);


      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void
      swap(_Rb_tree& __t);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);
# 736 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 782 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 803 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)
    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
    {
      if (__x._M_root() != 0)
 {
   _M_root() = __x._M_root();
   _M_leftmost() = __x._M_leftmost();
   _M_rightmost() = __x._M_rightmost();
   _M_root()->_M_parent = _M_end();

   __x._M_root() = 0;
   __x._M_leftmost() = __x._M_end();
   __x._M_rightmost() = __x._M_end();

   this->_M_impl._M_node_count = __x._M_impl._M_node_count;
   __x._M_impl._M_node_count = 0;
 }
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z,
        const_cast<_Base_ptr>(__p),
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      if (true)
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      if (false)
 {
   _M_erase(__top);
                          ;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return pair<iterator, bool>
       (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
 return pair<iterator, bool>
   (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
      return pair<iterator, bool>(__j, false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()),
     _KeyOfValue()(__v)))
     return _M_insert_(0, _M_rightmost(), std::forward<_Arg>(__v));
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          _S_key(__position._M_node)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node),
       _KeyOfValue()(__v)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node),
          _KeyOfValue()(__v)))
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key((++__after)._M_node)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else

 return __position._M_const_cast();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(_KeyOfValue()(__v),
      _S_key(_M_rightmost())))
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node),
           _KeyOfValue()(__v)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_KeyOfValue()(__v),
        _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node),
        _KeyOfValue()(__v)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal_lower(std::forward<_Arg>(__v));
 }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 60 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 1 3
# 64 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 86 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 172 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 183 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(map&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 197 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __c = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__c, __a)
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
# 213 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 229 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, __a)
        { _M_t._M_insert_unique(__first, __last); }
# 252 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 267 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(map&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 288 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }






      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 444 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, value_type(__k, mapped_type()));
 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, std::make_pair(std::move(__k), mapped_type()));
 return (*__i).second;
      }
# 481 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 516 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 537 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 565 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 591 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 612 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 647 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 666 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 697 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      swap(map& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 740 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 755 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 767 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 782 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 797 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 836 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 855 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 880 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 897 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 61 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 1 3
# 63 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 85 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 170 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 181 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 194 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a)
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }
# 210 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 226 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
        : _M_t(__comp, __a)
        { _M_t._M_insert_equal(__first, __last); }
# 249 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 264 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(multimap&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 285 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }




      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 439 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 472 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 499 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 512 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 533 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 568 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 588 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 622 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 665 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 680 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 704 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 719 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 756 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 773 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 798 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 815 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 30 "firmware/nnet_utils/nnet_helpers.h" 2



namespace nnet {
# 280 "firmware/nnet_utils/nnet_helpers.h"
template<class src_T, class dst_T, size_t OFFSET, size_t SIZE>
void copy_data(std::vector<src_T> src, dst_T dst[SIZE]) {
    typename std::vector<src_T>::const_iterator in_begin = src.cbegin() + OFFSET;
    typename std::vector<src_T>::const_iterator in_end = in_begin + SIZE;
    std::copy(in_begin, in_end, dst);
}

template<class src_T, class dst_T, size_t OFFSET, size_t SIZE>
void copy_data(std::vector<src_T> src, hls::stream<dst_T> &dst) {
    typename std::vector<src_T>::const_iterator in_begin = src.cbegin() + OFFSET;
    typename std::vector<src_T>::const_iterator in_end = in_begin + SIZE;

    size_t i_pack = 0;
    dst_T dst_pack;
    for (typename std::vector<src_T>::const_iterator i = in_begin; i != in_end; ++i) {
        dst_pack[i_pack++] = typename dst_T::value_type(*i);
        if (i_pack == dst_T::size) {
            i_pack = 0;
            dst.write(dst_pack);
        }
    }
}

template<class src_T, class dst_T, size_t OFFSET, size_t SIZE>
void copy_data_axi(std::vector<src_T> src, dst_T dst[SIZE]) {
    for(auto i = 0; i < SIZE; i++)
     if(i == SIZE - 1)
     {
      dst[i].data = src[i];
      dst[i].last = 1;
     }
     else
     {
      dst[i].data = src[i];
      dst[i].last = 0;
     }
}

template<class res_T, size_t SIZE>
void print_result(res_T result[SIZE], std::ostream &out, bool keep = false) {
    for(int i = 0; i < SIZE; i++) {
        out << result[i] << " ";
    }
    out << std::endl;
}

template<class res_T, size_t SIZE>
void print_result(hls::stream<res_T> &result, std::ostream &out, bool keep = false) {
    for(int i = 0; i < SIZE / res_T::size; i++) {
        res_T res_pack = result.read();
        for(int j = 0; j < res_T::size; j++) {
            out << res_pack[j] << " ";
        }
        if (keep) result.write(res_pack);
    }
    out << std::endl;
}

template<class data_T, size_t SIZE>
void fill_zero(data_T data[SIZE]) {
    std::fill_n(data, SIZE, 0.);
}

template<class data_T, size_t SIZE>
void fill_zero(hls::stream<data_T> &data) {
    for(int i = 0; i < SIZE / data_T::size; i++) {
        data_T data_pack;
        for(int j = 0; j < data_T::size; j++) {
            data_pack[j] = 0.;
        }
        data.write(data_pack);
    }
}

template <class dataType, unsigned int nrows>
int read_file_1D(const char * filename, dataType data[nrows])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++){
    if (fscanf(fp, "%f\n", &newval) != 0){
      data[ii] = newval;
    } else {
      return -2;
    }
  }
  fclose(fp);
  return 0;
}

template <class dataType, unsigned int nrows, unsigned int ncols>
int read_file_2D(const char * filename, dataType data[nrows][ncols])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++) {
    for (int jj = 0; jj < ncols; jj++){
      if (fscanf(fp, "%f\n", &newval) != 0){
        data[ii][jj] = newval;
      } else {
        return -2;
      }
    }
  }
  fclose(fp);
  return 0;
}

template<class in_T, class out_T, int N_IN>
void change_type(hls::stream<in_T> &in, hls::stream<out_T> &out)
{
    in_T datareg;
    hls::stream<out_T> input_trunc;
    for (int ii=0; ii<N_IN; ii++) {
        out << (out_T) in.read();
    }
}

template<class data_T, int N_IN>
void hls_stream_debug(hls::stream<data_T> &data, hls::stream<data_T> &res)
{
    data_T datareg;
    for (int ii=0; ii<N_IN; ii++) {
        datareg = data.read();
        std::cout << "[" << ii << "]: " << datareg << std::endl;
        res << datareg;
    }
}

constexpr int ceillog2(int x){
  return (x <= 2) ? 1 : 1 + ceillog2((x+1) / 2);
}

constexpr int floorlog2(int x){
  return (x < 2) ? 0 : 1 + floorlog2(x / 2);
}

constexpr int pow2(int x){
  return x == 0 ? 1 : 2 * pow2(x - 1);
}

}
# 8 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_conv1d.h" 1
# 23 "firmware/nnet_utils/nnet_conv1d.h"
# 1 "firmware/nnet_utils/nnet_common.h" 1
# 30 "firmware/nnet_utils/nnet_common.h"
namespace nnet {


enum io_type {io_parallel = 0, io_stream};
enum strategy { latency, resource };
# 44 "firmware/nnet_utils/nnet_common.h"
 template<class T, int N, class Op>
 T reduce(const T* x, Op op)
 {
     static constexpr int leftN = pow2(floorlog2(N - 1)) > 0 ? pow2(floorlog2(N - 1)) : 0;
_ssdm_SpecConstant(&leftN);
# 47 "firmware/nnet_utils/nnet_common.h"

     static constexpr int rightN = N - leftN > 0 ? N - leftN : 0;
_ssdm_SpecConstant(&rightN);
# 48 "firmware/nnet_utils/nnet_common.h"

     if (N == 1){
         return x[0];
     }
     if (N == 2){
         return op(x[0],x[1]);
     }
     return op(reduce<T,leftN,Op>(x, op), reduce<T,rightN,Op>(x+leftN, op));
 }

 template<class T>
 class Op_add{
 public:
  T operator()(T a, T b){
   return a + b;
  }
 };

 template<class T>
 class Op_and{
 public:
  T operator()(T a, T b){
   return a && b;
  }
 };

 template<class T>
 class Op_or{
 public:
  T operator()(T a, T b){
   return a || b;
  }
 };

 template<class T>
 class Op_max{
 public:
     T operator()(T a, T b){
        return a >= b ? a : b;
     }
 };

 template<class T>
 class Op_min{
 public:
     T operator()(T a, T b){
        return a <= b ? a : b;
     }
 };

}
# 24 "firmware/nnet_utils/nnet_conv1d.h" 2
# 1 "firmware/nnet_utils/nnet_conv1d_latency.h" 1




# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 6 "firmware/nnet_utils/nnet_conv1d_latency.h" 2

namespace nnet {



template<typename CONFIG_T>
int compute_multiplier_limit(
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt]
)
{
    int n_mult = 0;
    for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
            for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                for(int jj = 0; jj < CONFIG_T::filt_width; jj++){

                    int index_weight = jj*CONFIG_T::n_chan*CONFIG_T::n_filt + cc*CONFIG_T::n_filt + ff;

                    if((ii*CONFIG_T::stride_width+jj) < CONFIG_T::pad_left || (ii*CONFIG_T::stride_width+jj) >= (CONFIG_T::pad_left + CONFIG_T::in_width)){

                        continue;
                    } else {

                        if( weights[index_weight] > 1e-20 || weights[index_weight] < -1e-20 ){
                            n_mult++;
                        }
                    }
                }
            }
        }
    }

    return ceil( float(n_mult) / float(CONFIG_T::reuse_factor) );

}


template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_latency_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
)
{

    typename CONFIG_T::accum_t mult[CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan * CONFIG_T::filt_width];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_width][CONFIG_T::n_filt];

#pragma HLS ARRAY_PARTITION variable=&mult complete dim=0
#pragma HLS ARRAY_PARTITION variable=&acc complete dim=0


#pragma HLS function_instantiate variable=&weights,&biases


#pragma HLS PIPELINE
#pragma HLS ARRAY_PARTITION variable=&biases complete dim=0


 const int multiplier_limit = compute_multiplier_limit<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOut: for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
            ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                ConvMult: for(int jj = 0; jj < CONFIG_T::filt_width; jj++){

                    int index_mult = ii*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_width + ff*CONFIG_T::n_chan*CONFIG_T::filt_width + cc*CONFIG_T::filt_width + jj;
                    int index_weight = jj*CONFIG_T::n_chan*CONFIG_T::n_filt + cc*CONFIG_T::n_filt + ff;
                    int index_data = (ii*CONFIG_T::stride_width+jj-CONFIG_T::pad_left) * CONFIG_T::n_chan + cc;

                    if((ii*CONFIG_T::stride_width+jj) < CONFIG_T::pad_left || (ii*CONFIG_T::stride_width+jj) >= (CONFIG_T::pad_left + CONFIG_T::in_width)){
                        mult[index_mult] = 0;
                    }
                    else {
                        mult[index_mult] = data[index_data] * weights[index_weight];
                    }
                }
            }
        }
    }



    for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
            acc[ii][ff]=biases[ff];
        }
    }



    AccumOut: for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

            AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                AccumDot: for(int jj = 0; jj < CONFIG_T::filt_width; jj++){
                    int index_mult = ii*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_width + ff*CONFIG_T::n_chan*CONFIG_T::filt_width + cc*CONFIG_T::filt_width + jj;
                    acc[ii][ff] += mult[index_mult];
                }
            }
        }
    }



    for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
            res[ii * CONFIG_T::n_filt + ff] = (res_T)(acc[ii][ff]);
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void pointwise_conv_1d_latency_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    (static_cast <bool> (CONFIG_T::filt_width == 1) ? void (0) : __assert_fail ("CONFIG_T::filt_width == 1", "firmware/nnet_utils/nnet_conv1d_latency.h", 128, __extension__ __PRETTY_FUNCTION__));

    typename CONFIG_T::accum_t mult[CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_width][CONFIG_T::n_filt];

#pragma HLS ARRAY_PARTITION variable=&mult complete dim=0
#pragma HLS ARRAY_PARTITION variable=&acc complete dim=0


#pragma HLS function_instantiate variable=&weights,&biases


#pragma HLS PIPELINE
#pragma HLS ARRAY_PARTITION variable=&biases complete dim=0


 const int multiplier_limit = compute_multiplier_limit<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOut: for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
            ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++) {
                int index_mult = ii*CONFIG_T::n_filt*CONFIG_T::n_chan + ff*CONFIG_T::n_chan + cc;
                int index_weight = cc*CONFIG_T::n_filt + ff;
                int index_data = (ii*CONFIG_T::stride_width-CONFIG_T::pad_left) * CONFIG_T::n_chan + cc;

                if((ii*CONFIG_T::stride_width) < CONFIG_T::pad_left || (ii*CONFIG_T::stride_width) >= (CONFIG_T::pad_left + CONFIG_T::in_width)){
                    mult[index_mult] = 0;
                }
                else {
                    mult[index_mult] = data[index_data] * weights[index_weight];
                }
            }
        }
    }



    for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
            acc[ii][ff]=biases[ff];
        }
    }



    AccumOut: for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

            AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++) {
                int index_mult = ii*CONFIG_T::n_filt*CONFIG_T::n_chan + ff*CONFIG_T::n_chan + cc;
                acc[ii][ff] += mult[index_mult];
            }
        }
    }



    for(int ii = 0; ii < CONFIG_T::out_width; ii++) {
        for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
            res[ii * CONFIG_T::n_filt + ff] = (res_T)(acc[ii][ff]);
        }
    }
}

}
# 25 "firmware/nnet_utils/nnet_conv1d.h" 2
# 1 "firmware/nnet_utils/nnet_conv1d_resource.h" 1




# 1 "firmware/nnet_utils/nnet_dense.h" 1




# 1 "firmware/nnet_utils/nnet_mult.h" 1
# 10 "firmware/nnet_utils/nnet_mult.h"
namespace nnet {

namespace product{






class Product{
    public:
    static void limit(unsigned multiplier_limit) {}
};

template<class x_T, class w_T>
class both_binary : public Product{
    public:
    static x_T product(x_T a, w_T w){

#pragma HLS INLINE
 return a == w;
    }
};

template<class x_T, class w_T>
class weight_binary : public Product{
    public:
    static auto product(x_T a, w_T w) -> decltype(-a)
    {

#pragma HLS INLINE
 if (w == 0) return -a;
        else return a;
    }
};

template<class x_T, class w_T>
class data_binary : public Product{
    public:
    static auto product(x_T a, w_T w) -> decltype(-w)
    {

#pragma HLS INLINE
 if (a == 0) return -w;
        else return w;
    }
};

template<class x_T, class w_T>
class weight_ternary : public Product{
    public:
    static auto product(x_T a, w_T w) -> decltype(-a)
    {

#pragma HLS INLINE
 if (w == 0) return 0;
        else if(w == -1) return -a;
        else return a;
    }
};

template<class x_T, class w_T>
class mult : public Product{
    public:
    static auto product(x_T a, w_T w) -> decltype(a*w)
    {

#pragma HLS INLINE
 return a * w;
    }
    static void limit(unsigned multiplier_limit){
#pragma HLS INLINE
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation
 }
};

template<class x_T, class w_T>
class weight_exponential : public Product{
    public:



    using r_T = decltype(x_T(0) * (ap_int<pow2(decltype(w_T::weight)::width-1)-1>(1)+ap_fixed<pow2(decltype(w_T::weight)::width-1)-1,0>(1)));
    static r_T product(x_T a, w_T w){

#pragma HLS INLINE

 r_T y = static_cast<r_T>(a) << w.weight;

        return w.sign == 1 ? y : static_cast<r_T>(-y);
    }
};

}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        && std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>>::type
cast(typename CONFIG_T::accum_t x){
  return (ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>) (x - CONFIG_T::n_in / 2) * 2;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        && ! std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, res_T>::type
cast(typename CONFIG_T::accum_t x){
  return (res_T) x;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<(! std::is_same<data_T, ap_uint<1>>::value), res_T>::type
cast(typename CONFIG_T::accum_t x){
  return (res_T) x;
}

}
# 6 "firmware/nnet_utils/nnet_dense.h" 2
# 1 "firmware/nnet_utils/nnet_dense_latency.h" 1
# 29 "firmware/nnet_utils/nnet_dense_latency.h"
namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void dense_latency(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{
    data_T cache;
    typename CONFIG_T::accum_t mult[CONFIG_T::n_in*CONFIG_T::n_out];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


#pragma HLS function_instantiate variable=&weights,&biases




#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


#pragma HLS ARRAY_PARTITION variable=&biases complete
#pragma HLS ARRAY_PARTITION variable=&mult complete
#pragma HLS ARRAY_PARTITION variable=&acc complete

 int multiplier_limit = ceil(float(CONFIG_T::n_in*CONFIG_T::n_out) / float(CONFIG_T::reuse_factor)) - floor(float(CONFIG_T::n_zeros) / float(CONFIG_T::reuse_factor));
    CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::limit(multiplier_limit);


    Product1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        cache = data[ii];
        Product2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii*CONFIG_T::n_out+jj;
            mult[index] = CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(cache, weights[index]);
        }
    }


    ResetAccum: for(int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {
        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }


    Accum1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        Accum2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii*CONFIG_T::n_out+jj;
            acc[jj] += mult[index];
        }
    }


    Result: for(int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

}
# 7 "firmware/nnet_utils/nnet_dense.h" 2
# 1 "firmware/nnet_utils/nnet_dense_resource.h" 1
# 27 "firmware/nnet_utils/nnet_dense_resource.h"
# 1 "/usr/include/assert.h" 1 3 4
# 28 "firmware/nnet_utils/nnet_dense_resource.h" 2

namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_leq_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 46, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((multiplier_limit == block_factor) && "This function is correct only for RF <= N_IN") ? void (0) : __assert_fail ("(multiplier_limit == block_factor) && \"This function is correct only for RF <= N_IN\"", "firmware/nnet_utils/nnet_dense_resource.h", 47, __extension__ __PRETTY_FUNCTION__));

#pragma HLS function_instantiate variable=&weights,&biases

#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=&biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=&acc complete

 InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 int w_index = ir;
        int in_index = ir;
        int out_index = 0;
        int acc_step = 0;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL

 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
              CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));


            w_index += rufactor;

            in_index += rufactor;
            if (in_index >= nin) {
                in_index = ir;
            }

            if (acc_step + 1 >= multscale) {
                acc_step = 0;
                out_index++;
            } else {
                acc_step++;
            }
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin_rem0(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = (CONFIG_T::reuse_factor > CONFIG_T::n_in * CONFIG_T::n_out ? CONFIG_T::n_in * CONFIG_T::n_out : CONFIG_T::reuse_factor);
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 119, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin && rufactor % nin == 0) && "This function is correct only for RF > N_IN && RF % N_IN == 0") ? void (0) : __assert_fail ("(rufactor > nin && rufactor % nin == 0) && \"This function is correct only for RF > N_IN && RF % N_IN == 0\"", "firmware/nnet_utils/nnet_dense_resource.h", 120, __extension__ __PRETTY_FUNCTION__));

#pragma HLS function_instantiate variable=&weights,&biases

#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=&biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=&acc complete

 InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    int w_index;
    int in_index = 0;
    int out_index;
    int outstep = 0;
    const int outscale = rufactor / nin;

    int outidx[rufactor];
    IndexLoop:
    for (int ir = 0; ir < rufactor; ir++) {
        outidx[ir] = outstep;
        if ((ir + 1) % nin == 0) {
            outstep++;
        }
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 w_index = ir;
        out_index = outidx[ir] ;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
              CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));

            w_index += rufactor;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out) break;
            out_index += outscale;
        }

        in_index++;
        if (in_index >= nin) {
            in_index = 0;

        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 199, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin) && "This function is correct only for RF > N_IN") ? void (0) : __assert_fail ("(rufactor > nin) && \"This function is correct only for RF > N_IN\"", "firmware/nnet_utils/nnet_dense_resource.h", 200, __extension__ __PRETTY_FUNCTION__));

#pragma HLS function_instantiate variable=&weights,&biases

#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=&biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=&acc complete

 InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind
 typename CONFIG_T::accum_t tmpmult[block_factor];
#pragma HLS ARRAY_PARTITION variable=&tmpmult complete

 MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 int w_index = ir + rufactor * im;
            int in_index = w_index % nin;
            if (w_index >= CONFIG_T::n_in*CONFIG_T::n_out) continue;
            tmpmult[im] = CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]);
        }

        typename CONFIG_T::accum_t mult[multiplier_limit];
#pragma HLS ARRAY_PARTITION variable=&mult complete

 ResetMult:
        for (int imult = 0; imult < multiplier_limit; imult++) {
#pragma HLS UNROLL
 mult[imult] = 0;
        }

        AccumLoop1:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 int w_index = ir + rufactor * im;
            int out_index = w_index / multfactor;
            if (out_index >= multiplier_limit) continue;
            mult[out_index] += tmpmult[im];
        }

        AccumLoop2:
        for (int im = 0; im < multiplier_limit; im++) {
#pragma HLS UNROLL


 acc[im] += mult[im];
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_resource(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

#pragma HLS INLINE region

 if (CONFIG_T::reuse_factor <= CONFIG_T::n_in) {
        dense_resource_rf_leq_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else if (CONFIG_T::reuse_factor % CONFIG_T::n_in == 0) {
        dense_resource_rf_gt_nin_rem0<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource_rf_gt_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 8 "firmware/nnet_utils/nnet_dense.h" 2




namespace nnet {

struct dense_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned n_in = 10;
    static const unsigned n_out = 10;


    static const unsigned io_type = io_parallel;
    static const unsigned strategy = latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;


    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

template<class data_T, class res_T, typename CONFIG_T>
void dense(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{
#pragma HLS inline
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 6 "firmware/nnet_utils/nnet_conv1d_resource.h" 2

namespace nnet {

template<class data_T, typename CONFIG_T>
void im2col_1d(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan], data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_width]) {

    for (int channel = CONFIG_T::n_chan; channel--; data += CONFIG_T::in_width) {
#pragma HLS PIPELINE II=1 rewind
 for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
#pragma HLS UNROLL
 int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation;
            for (int output_col = CONFIG_T::out_width; output_col; output_col--) {
#pragma HLS UNROLL
 if (input_col >= 0 && input_col < CONFIG_T::in_width) {
                    *(data_col++) = data[input_col];

                } else {
                    *(data_col++) = 0;

                }

                input_col += CONFIG_T::stride_width;
            }
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_full(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
)
{
    data_T data_conv[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_width];
    data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];


#pragma HLS ARRAY_PARTITION variable=&data_col complete
#pragma HLS ARRAY_PARTITION variable=&res_col complete

 im2col_1d<data_T, CONFIG_T>(data, data_conv);

    for (int i = 0; i < CONFIG_T::out_width; i++) {
#pragma HLS UNROLL
 for (int j = 0; j < CONFIG_T::filt_width * CONFIG_T::n_chan; j++) {
            data_col[j] = data_conv[j * CONFIG_T::out_width + i];
        }
        dense_resource<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {

            res[j * CONFIG_T::out_width + i] = res_col[j];
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_1d_cf_idx(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan], data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan], const int col) {
    ChannelLoop:
    for (int channel = 0; channel < CONFIG_T::n_chan; channel++) {

#pragma HLS PIPELINE II=1 rewind
 KernelLoop:
        for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
#pragma HLS UNROLL
 int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation + col * CONFIG_T::stride_width;
            if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                data_col[channel * CONFIG_T::filt_width + kernel_col] = data[channel * CONFIG_T::in_width + input_col];
            } else {

                data_col[channel * CONFIG_T::filt_width + kernel_col] = 0;
            }
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_1d_cf(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan], data_T data_col[CONFIG_T::n_chan * CONFIG_T::filt_width], const int col) {
    int index = 0;
    ChannelLoop:
    for (int channel = CONFIG_T::n_chan; channel--; data += CONFIG_T::in_width) {
#pragma HLS UNROLL
 KernelLoop:
        for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
            int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation + col * CONFIG_T::stride_width;
            if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                data_col[index] = data[input_col];
            } else {

                data_col[index] = 0;
            }
            index++;
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_resource_cf(
    data_T data[CONFIG_T::n_chan * CONFIG_T::in_width],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
)
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);






    data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];

#pragma HLS ARRAY_PARTITION variable=&data_col complete
#pragma HLS ARRAY_PARTITION variable=&res_col complete

 ColLoop:
    for (int i = 0; i < CONFIG_T::out_width; i++) {
#pragma HLS PIPELINE
 im2col_1d_cf<data_T, CONFIG_T>(data, data_col, i);
        dense_resource<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {

            res[j * CONFIG_T::out_width + i] = res_col[j];
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_1d_cl(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan], data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan], const int col) {
    int index = 0;
    KernelLoop:
    for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
#pragma HLS UNROLL

 ChannelLoop:
        for (int channel = 0; channel < CONFIG_T::n_chan; channel++) {
            int index_data = (col*CONFIG_T::stride_width+kernel_col-CONFIG_T::pad_left) * CONFIG_T::n_chan + channel;

            if (index_data >= 0 && index_data < CONFIG_T::in_width*CONFIG_T::n_chan) {
                data_col[index] = data[index_data];
            } else {
                data_col[index] = 0;
            }
            index++;
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_1d_pointwise_cl(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan], data_T data_col[CONFIG_T::n_chan], const int col) {
    int index = 0;
    ChannelLoop:
    for (int channel = 0; channel < CONFIG_T::n_chan; channel++) {
#pragma HLS UNROLL

 int index_data = (col*CONFIG_T::stride_width-CONFIG_T::pad_left) * CONFIG_T::n_chan + channel;

        if (index_data >= 0 && index_data < CONFIG_T::in_width*CONFIG_T::n_chan) {
            data_col[index] = data[index_data];
        } else {
            data_col[index] = 0;
        }
        index++;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_resource_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
)
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);






    data_T data_col[CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];

#pragma HLS ARRAY_PARTITION variable=&data_col complete
#pragma HLS ARRAY_PARTITION variable=&res_col complete

 ColLoop:
    for (int i = 0; i < CONFIG_T::out_width; i++) {
#pragma HLS PIPELINE
 im2col_1d_cl<data_T, CONFIG_T>(data, data_col, i);
        dense_resource<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {
            res[i * CONFIG_T::n_filt + j] = res_col[j];
        }
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void pointwise_conv_1d_resource_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
)
{
    (static_cast <bool> (CONFIG_T::filt_width == 1) ? void (0) : __assert_fail ("CONFIG_T::filt_width == 1", "firmware/nnet_utils/nnet_conv1d_resource.h", 225, __extension__ __PRETTY_FUNCTION__));

    const int nin = CONFIG_T::n_chan;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);






    data_T data_col[CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];

#pragma HLS ARRAY_PARTITION variable=&data_col complete
#pragma HLS ARRAY_PARTITION variable=&res_col complete

 ColLoop:
    for (int i = 0; i < CONFIG_T::out_width; i++) {
#pragma HLS PIPELINE
 im2col_1d_pointwise_cl<data_T, CONFIG_T>(data, data_col, i);
        dense_resource<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {
            res[i * CONFIG_T::n_filt + j] = res_col[j];
        }
    }
}

}
# 26 "firmware/nnet_utils/nnet_conv1d.h" 2
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 27 "firmware/nnet_utils/nnet_conv1d.h" 2

namespace nnet {

struct conv1d_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_width = 10;
    static const unsigned n_chan = 0;
    static const unsigned filt_width = 1;
    static const unsigned kernel_size = filt_width;
    static const unsigned n_filt = 1;
    static const unsigned stride_width = 1;
    static const unsigned dilation = 1;
    static const unsigned out_width = 10;

    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;
};

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    if (CONFIG_T::strategy == nnet::latency) {
        conv_1d_latency_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        conv_1d_resource_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void pointwise_conv_1d_cl(
    data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    (static_cast <bool> (CONFIG_T::filt_width == 1) ? void (0) : __assert_fail ("CONFIG_T::filt_width == 1", "firmware/nnet_utils/nnet_conv1d.h", 75, __extension__ __PRETTY_FUNCTION__));

    if (CONFIG_T::strategy == nnet::latency) {
        pointwise_conv_1d_latency_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        pointwise_conv_1d_resource_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 10 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_recurrent.h" 1
# 25 "firmware/nnet_utils/nnet_recurrent.h"
# 1 "firmware/nnet_utils/nnet_activation.h" 1
# 23 "firmware/nnet_utils/nnet_activation.h"
# 1 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/opt/Xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 24 "firmware/nnet_utils/nnet_activation.h" 2



namespace nnet {

struct activ_config
{

    static const unsigned n_in = 10;


    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;


    typedef ap_fixed<18,8> table_t;
};




template<class data_T, class res_T, typename CONFIG_T>
void linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        res[ii] = data[ii];
    }
}






template<class data_T, class res_T, typename CONFIG_T>
void relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = 0;
    }
}

template<class data_T, class res_T, int MAX_INT, typename CONFIG_T>
void relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg < 0) res[ii] = 0;
        else if (datareg > MAX_INT) res[ii] = MAX_INT;
        else res[ii] = datareg;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);
}

template<class data_T, class res_T, typename CONFIG_T>
void relu1(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 1, CONFIG_T>(data, res);
}




inline float sigmoid_fcn_float(float input) {
    return 1.0 / (1 + std::exp(-input));
}

template<typename CONFIG_T, int N_TABLE>
void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) sigmoid_table[index];
    }
}





enum class softmax_implementation {latency=0, legacy=1, stable=2};

inline float exp_fcn_float(float input) {
    return std::exp(input);
}

template<class data_T, typename CONFIG_T>
inline float softmax_real_val_from_idx(unsigned i){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 167 "firmware/nnet_utils/nnet_activation.h"

    data_T x(0);
    x(x.width-1, x.width-N) = i;
    return (float) x;
}

template<class data_T, typename CONFIG_T>
inline unsigned softmax_idx_from_real_val(data_T x){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 176 "firmware/nnet_utils/nnet_activation.h"

    ap_uint<N> y = x(x.width-1, x.width-N);
    return (unsigned) y(N-1, 0);
}

template<class data_T, typename CONFIG_T>
void init_exp_table(typename CONFIG_T::exp_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){

        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::exp_table_t exp_x = exp_fcn_float(x);
        table_out[i] = exp_x;
    }
}

template<class data_T, typename CONFIG_T>
void init_invert_table(typename CONFIG_T::inv_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){
        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::inv_table_t inv_x = 1 / x;
        table_out[i] = inv_x;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_latency(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]){
#pragma HLS pipeline


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
#pragma HLS array_partition variable=&exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){
#pragma HLS unroll
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(data[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum = reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum = invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t,CONFIG_T>(exp_sum)];
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){
#pragma HLS unroll
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_stable(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]){
#pragma HLS pipeline


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    Op_max<data_T> op_max;
    data_T x_max = reduce<data_T, CONFIG_T::n_in, Op_max<data_T>>(data, op_max);


    ap_fixed<data_T::width, data_T::iwidth,AP_RND,AP_SAT> d_xi_xmax[CONFIG_T::n_in];
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){
#pragma HLS unroll
 d_xi_xmax[i] = data[i] - x_max;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
#pragma HLS array_partition variable=&exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){
#pragma HLS unroll
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(d_xi_xmax[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum = reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum = invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t,CONFIG_T>(exp_sum)];
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){
#pragma HLS unroll
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template<typename CONFIG_T, int N_TABLE>
void init_exp_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE])
{
    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = exp_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<typename CONFIG_T, int N_TABLE>
void init_invert_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 64.0*ii/float(N_TABLE);

        if (in_val > 0.0) table_out[ii] = 1.0/in_val;
        else table_out[ii] = 0.0;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softmax_legacy(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];





    if (!initialized) {
        init_exp_table_legacy<CONFIG_T, CONFIG_T::table_size>(exp_table);
        init_invert_table_legacy<CONFIG_T, CONFIG_T::table_size>(invert_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 typename CONFIG_T::table_t exp_res[CONFIG_T::n_in];
    typename CONFIG_T::table_t exp_diff_res;
    data_T data_cache[CONFIG_T::n_in];
    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        data_cache[ii] = data[ii];
        exp_res[ii] = 0;
    }

    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        for (int jj=0; jj<CONFIG_T::n_in; jj++) {
            if (ii==jj) exp_diff_res = 1;
            else {
                data_round = (data_cache[jj]-data_cache[ii])*CONFIG_T::table_size/16;
                index = data_round + 8*CONFIG_T::table_size/16;
                if (index < 0) index = 0;
                if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
                exp_diff_res = exp_table[index];
            }
            exp_res[ii] += exp_diff_res;
        }
    }


    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        int exp_res_index = exp_res[ii]*CONFIG_T::table_size/64;
        if (exp_res_index < 0) exp_res_index = 0;
        if (exp_res_index > CONFIG_T::table_size-1) exp_res_index = CONFIG_T::table_size-1;

        res[ii] = (res_T) invert_table[exp_res_index];
    }

}

template<class data_T, class res_T, typename CONFIG_T>
void softmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]){
#pragma HLS inline
 switch(CONFIG_T::implementation){
    case softmax_implementation::latency:
        softmax_latency<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::stable:
        softmax_stable<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::legacy:
        softmax_legacy<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}




template<typename CONFIG_T, int N_TABLE>
void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE])
{

    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*4.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = tanh(in_val);

        table_out[ii] = real_val;
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        data_round = data[ii]*CONFIG_T::table_size/8;
        index = data_round + 4*CONFIG_T::table_size/8;

        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) tanh_table[index];
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    data_T slope = (data_T) 0.2;
    data_T shift = (data_T) 0.5;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = slope * data[ii] + shift;
        if (datareg > 1) datareg = 1;
        else if (datareg < 0) datareg = 0;
        res[ii] = datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > theta) res[ii] = datareg;
        else res[ii] = 0;
    }
}




inline float softplus_fcn_float(float input) {
    return std::log(std::exp(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softplus_table[index];
    }
}




inline float softsign_fcn_float(float input) {
    return input / (std::abs(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softsign_table[index];
    }
}




inline float elu_fcn_float(float input) {
    return std::exp(input) - 1.;
}

template<typename CONFIG_T, int N_TABLE>
void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

#pragma HLS PIPELINE

 data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = alpha * elu_table[index];
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}




inline float selu_fcn_float(float input) {
    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (std::exp(input) - 1.));
}

template<typename CONFIG_T, int N_TABLE>
void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

#pragma HLS PIPELINE

 data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = selu_table[index];
        }
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha[ii] * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    res_T cache;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if( datareg > 0 ) cache = 1;
        else cache = -1;

        res[ii] = (res_T) cache;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
#pragma HLS PIPELINE

 data_T datareg;
    res_T cache;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        datareg = 2*data[ii];
        if( datareg > 1 ) cache = 1;
        else if( datareg > -1 && datareg <= 1) cache=0;
        else cache = -1;

        res[ii] = (res_T) cache;
    }

}

}
# 26 "firmware/nnet_utils/nnet_recurrent.h" 2
# 1 "firmware/nnet_utils/nnet_recr_activations.h" 1
# 10 "firmware/nnet_utils/nnet_recr_activations.h"
namespace nnet {

namespace activation{

template<class data_T, class res_T, typename CONFIG_T>
class Activation{
    public:



    static void activation(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {}
};

template<class data_T, class res_T, typename CONFIG_T>
class relu : public Activation<data_T, res_T, CONFIG_T>{
    public:



    static void activation(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
    {
        nnet::relu<data_T, res_T, CONFIG_T>(data, res);
    }
};

template<class data_T, class res_T, typename CONFIG_T>
class sigmoid : public Activation<data_T, res_T, CONFIG_T>{
    public:



    static void activation(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
    {
        nnet::sigmoid<data_T, res_T, CONFIG_T>(data, res);
    }
};

template<class data_T, class res_T, typename CONFIG_T>
class tanh : public Activation<data_T, res_T, CONFIG_T>{
    public:



    static void activation(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
    {
        nnet::tanh<data_T, res_T, CONFIG_T>(data, res);
    }
};

}

}
# 27 "firmware/nnet_utils/nnet_recurrent.h" 2




namespace nnet {

struct lstm_config
{

    typedef float weight_t;
    typedef float bias_t;


    static const unsigned n_in = 2;
    static const unsigned n_parts = 20;
    static const unsigned n_out = 2;
    static const unsigned n_state = 2;
    static const unsigned n_4state = 8;
    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    static const bool use_static = true;

    template<class x_T, class y_T, class config_T>
    using activation_recr = nnet::activation::relu<x_T, y_T, config_T>;
    template<class x_T, class y_T, class config_T>
    using activation = nnet::activation::relu<x_T, y_T, config_T>;
};
# 70 "firmware/nnet_utils/nnet_recurrent.h"
template<class data_T, class res_T, typename CONFIG_T>
  void lstm(bool reset_state,
     data_T data [CONFIG_T::n_in],
     res_T h_newstate[CONFIG_T::n_state],
     res_T s_newstate[CONFIG_T::n_state],
     typename CONFIG_T::weight_t param [CONFIG_T::n_state*4*CONFIG_T::n_in],
     typename CONFIG_T::weight_t param_r[CONFIG_T::n_state*4*CONFIG_T::n_state],
     typename CONFIG_T::bias_t param_b[CONFIG_T::n_state*4],
            typename CONFIG_T::bias_t param_br[CONFIG_T::n_state*4]
     ) {


  typename CONFIG_T::accum_t tmpres [CONFIG_T::n_state*4];
  typename CONFIG_T::accum_t tmpres_state[CONFIG_T::n_state*4];
  typename CONFIG_T::accum_t tmpres_ifo [CONFIG_T::n_state*3];
  typename CONFIG_T::accum_t tmpres_c [CONFIG_T::n_state];
  typename CONFIG_T::accum_t inputacc_ifo[CONFIG_T::n_state*3];
  typename CONFIG_T::accum_t inputacc_c [CONFIG_T::n_state];
  typename CONFIG_T::accum_t s_actstate[CONFIG_T::n_state];

#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&s_newstate complete
#pragma HLS ARRAY_PARTITION variable=&tmpres complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_ifo complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_c complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_ifo complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_c complete
#pragma HLS ARRAY_PARTITION variable=&s_actstate complete

 nnet::dense<data_T, res_T, typename CONFIG_T::mult_config1>(data ,tmpres , param,param_b);
  nnet::dense<data_T, res_T, typename CONFIG_T::mult_config2>(h_newstate,tmpres_state, param_r, param_br);

  for(int iacc = 0; iacc < (3*CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc;
    if(iacc > 2*CONFIG_T::n_state-1) index = iacc + CONFIG_T::n_state;
    inputacc_ifo[iacc] = tmpres[index] + tmpres_state[index];
  }
  for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc + CONFIG_T::n_state*2;
    inputacc_c[iacc] = tmpres[index] + tmpres_state[index];
  }

  CONFIG_T::template activation_recr<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_LSTM>::activation(inputacc_ifo, tmpres_ifo);


  CONFIG_T::template activation<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(inputacc_c, tmpres_c);


  for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 s_newstate[iacc] = tmpres_c[iacc]*tmpres_ifo[iacc] + s_newstate[iacc]*tmpres_ifo[iacc+(CONFIG_T::n_state)];
  }

  CONFIG_T::template activation<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(s_newstate, s_actstate);

  for(int iacc = 0; iacc < CONFIG_T::n_state; iacc++) {
#pragma HLS UNROLL
 h_newstate[iacc] = tmpres_ifo[iacc+2*(CONFIG_T::n_state)]*s_actstate[iacc];
  }
}

template<class data_T, class res_T, typename CONFIG_T>
  void lstm_static(bool reset_state,
     data_T data [CONFIG_T::n_in],
     res_T h_newstate[CONFIG_T::n_state],
            res_T s_newstate[CONFIG_T::n_state],
     typename CONFIG_T::weight_t param [CONFIG_T::n_state*4*CONFIG_T::n_in],
     typename CONFIG_T::weight_t param_r[CONFIG_T::n_state*4*CONFIG_T::n_state],
     typename CONFIG_T::bias_t param_b[CONFIG_T::n_state*4],
                   typename CONFIG_T::bias_t param_br[CONFIG_T::n_state*4]
     ) {
  static res_T h_state[CONFIG_T::n_state];
  static res_T s_state[CONFIG_T::n_state];

  typename CONFIG_T::accum_t tmpres [CONFIG_T::n_state*4];
  typename CONFIG_T::accum_t tmpres_state[CONFIG_T::n_state*4];
  typename CONFIG_T::accum_t tmpres_ifo [CONFIG_T::n_state*3];
  typename CONFIG_T::accum_t tmpres_c [CONFIG_T::n_state];
  typename CONFIG_T::accum_t inputacc_ifo[CONFIG_T::n_state*3];
  typename CONFIG_T::accum_t inputacc_c [CONFIG_T::n_state];
  typename CONFIG_T::accum_t s_actstate[CONFIG_T::n_state];

#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&s_newstate complete
#pragma HLS ARRAY_PARTITION variable=&h_state complete
#pragma HLS ARRAY_PARTITION variable=&s_state complete
#pragma HLS ARRAY_PARTITION variable=&tmpres complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_ifo complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_c complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_ifo complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_c complete
#pragma HLS ARRAY_PARTITION variable=&s_actstate complete

 if(reset_state){
    for(int i_state = 0; i_state < (CONFIG_T::n_state); i_state++) {
#pragma HLS UNROLL
 s_state[i_state] = 0;
      h_state[i_state] = 0;
    }
  }

  nnet::dense<data_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config1>(data ,tmpres , param,param_b);
  nnet::dense<res_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config2>(h_state,tmpres_state, param_r, param_br);

  for(int iacc = 0; iacc < (3*CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc;
    if(iacc > 2*CONFIG_T::n_state-1) index = iacc + CONFIG_T::n_state;
    inputacc_ifo[iacc] = tmpres[index] + tmpres_state[index];
  }
  for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc + CONFIG_T::n_state*2;
    inputacc_c[iacc] = tmpres[index] + tmpres_state[index];
  }

  CONFIG_T::template activation_recr<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_LSTM>::activation(inputacc_ifo, tmpres_ifo);


  CONFIG_T::template activation<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(inputacc_c, tmpres_c);


  for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 s_state[iacc] = tmpres_c[iacc]*tmpres_ifo[iacc] + s_state[iacc]*tmpres_ifo[iacc+(CONFIG_T::n_state)];
    s_newstate[iacc] = s_state[iacc];
  }

  CONFIG_T::template activation<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(s_state, s_actstate);

  for(int iacc = 0; iacc < CONFIG_T::n_state; iacc++) {
#pragma HLS UNROLL
 h_state[iacc] = tmpres_ifo[iacc+2*(CONFIG_T::n_state)]*s_actstate[iacc];
    h_newstate[iacc] = h_state[iacc];
  }
}

template<class data_T, class res_T, typename CONFIG_T>
  void lstm_stack(
      data_T data [CONFIG_T::n_sequence*CONFIG_T::n_in],
      res_T res [CONFIG_T::n_sequence_out*CONFIG_T::n_state],
      typename CONFIG_T::weight_t param [CONFIG_T::n_state*4*CONFIG_T::n_in],
      typename CONFIG_T::weight_t param_r[CONFIG_T::n_state*4*CONFIG_T::n_state],
      typename CONFIG_T::bias_t param_b[CONFIG_T::n_state*4],
      typename CONFIG_T::bias_t param_br[CONFIG_T::n_state*4]
      ) {

    res_T h_newstate[CONFIG_T::n_state];
    res_T s_newstate[CONFIG_T::n_state];
    data_T data_in[CONFIG_T::n_in];
    bool reset_state = true;

#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&s_newstate complete

 for(int ii = 0; ii < CONFIG_T::n_state; ii++) {
#pragma HLS UNROLL
 h_newstate[ii] = 0;
      s_newstate[ii] = 0;
    }
    for(int iloop = 0; iloop < CONFIG_T::n_sequence; iloop++) {
      for(int j = 0; j < CONFIG_T::n_in; j++) {
#pragma HLS UNROLL
 data_in[j] = data[j + iloop*CONFIG_T::n_in];
      }
      if (CONFIG_T::use_static)
        nnet::lstm_static<data_T, res_T, CONFIG_T>(reset_state,data_in,h_newstate, s_newstate, param,param_r,param_b, param_br);
      else
        nnet::lstm<data_T, res_T, CONFIG_T>(reset_state,data_in,h_newstate, s_newstate, param,param_r,param_b, param_br);
      if (CONFIG_T::n_sequence_out > 1)
        for(int i=CONFIG_T::n_state*iloop, j=0; i<(CONFIG_T::n_state*(iloop+1)); i++,j++){
#pragma HLS UNROLL
 res[i] = h_newstate[j];
        }
      reset_state = false;
    }
    if (CONFIG_T::n_sequence_out == 1)
      for(int i=0; i<(CONFIG_T::n_state); i++){
#pragma HLS UNROLL
 res[i] = h_newstate[i];
      }
}

template<class data_T, class res_T, typename CONFIG_T>
  void lstm_stack(
      hls::stream<data_T> &data_stream,
      hls::stream<res_T> &res_stream,
      typename CONFIG_T::weight_t param [CONFIG_T::n_state*4*CONFIG_T::n_in],
      typename CONFIG_T::weight_t param_r[CONFIG_T::n_state*4*CONFIG_T::n_state],
      typename CONFIG_T::bias_t param_b[CONFIG_T::n_state*4],
      typename CONFIG_T::bias_t param_br[CONFIG_T::n_state*4]
      ) {

    typename res_T::value_type h_newstate[CONFIG_T::n_state];
    typename res_T::value_type s_newstate[CONFIG_T::n_state];
#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&s_newstate complete

 for(int ii = 0; ii < CONFIG_T::n_state; ii++) {
#pragma HLS UNROLL
 h_newstate[ii] = 0;
      s_newstate[ii] = 0;
    }

    typename data_T::value_type data_in[CONFIG_T::n_in];
    bool reset_state = true;

    DataPropagation: for(int i_in = 0; i_in < CONFIG_T::n_sequence*CONFIG_T::n_in / data_T::size; i_in++) {
      if (CONFIG_T::n_sequence*CONFIG_T::n_in / data_T::size > 1) {

      }
      data_T data_pack = data_stream.read();
      DataPack: for (int i_pack = 0; i_pack < data_T::size; i_pack++) {
#pragma HLS UNROLL
 data_in[i_pack] = data_pack[i_pack];
      }
      if (CONFIG_T::use_static)
        nnet::lstm_static<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(reset_state,data_in,h_newstate, s_newstate, param,param_r,param_b, param_br);
      else
        nnet::lstm<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(reset_state,data_in,h_newstate, s_newstate, param,param_r,param_b, param_br);
      if (CONFIG_T::n_sequence_out > 1){
        res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 ResPack_sequences: for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = h_newstate[i_pack];
        }
        res_stream.write(res_pack);
      }
      reset_state = false;
    }

    if (CONFIG_T::n_sequence_out == 1){
      res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 ResPack: for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = h_newstate[i_pack];
      }
      res_stream.write(res_pack);
    }

}



struct gru_config
{

    typedef float weight_t;
    typedef float bias_t;
    typedef float accum_t;


    static const unsigned n_in = 2;
    static const unsigned n_out = 2;
    static const unsigned n_state = 2;
    static const unsigned n_sequence = 2;
    static const unsigned n_4state = 8;
    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const bool use_static = true;
    static const unsigned n_zeros = 0;

    template<class x_T, class y_T, class config_T>
    using activation_recr = nnet::activation::relu<x_T, y_T, config_T>;
    template<class x_T, class y_T, class config_T>
    using activation = nnet::activation::relu<x_T, y_T, config_T>;
};

template<class data_T, class res_T, typename CONFIG_T>
  void gru(bool reset_state,
     data_T data [CONFIG_T::n_in],
     res_T h_newstate[CONFIG_T::n_state],
     typename CONFIG_T::weight_t param [CONFIG_T::n_state*3*CONFIG_T::n_in],
     typename CONFIG_T::weight_t param_zr[CONFIG_T::n_state*3*CONFIG_T::n_state],
     typename CONFIG_T::bias_t param_b [CONFIG_T::n_state*3],
            typename CONFIG_T::bias_t param_br [CONFIG_T::n_state*3]
     ) {

    typename CONFIG_T::accum_t tmpres [CONFIG_T::n_state*3];
    typename CONFIG_T::accum_t tmpres_state_zr[CONFIG_T::n_state*3];
    typename CONFIG_T::accum_t tmpres_state_h [CONFIG_T::n_state];
    typename CONFIG_T::accum_t tmpres_zr [CONFIG_T::n_state*2];
    typename CONFIG_T::accum_t tmpres_h [CONFIG_T::n_state];
    typename CONFIG_T::accum_t inputacc_zr [CONFIG_T::n_state*2];
    typename CONFIG_T::accum_t inputacc_h [CONFIG_T::n_state];

#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&tmpres complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state_zr complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state_h complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_zr complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_h complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_zr complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_h complete

 nnet::dense<data_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config1>(data, tmpres, param, param_b);
    nnet::dense<res_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config2>(h_newstate, tmpres_state_zr, param_zr, param_br);


    for(int iacc = 0; iacc < (2*CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc;
      inputacc_zr[iacc] = tmpres[index] + tmpres_state_zr[index];
    }


    CONFIG_T::template activation_recr<typename CONFIG_T::accum_t, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_GRU>::activation(inputacc_zr, tmpres_zr);




    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 tmpres_state_h[iacc] = tmpres_zr[iacc+(CONFIG_T::n_state)]*tmpres_state_zr[iacc + (2*CONFIG_T::n_state)];
    }


    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc + CONFIG_T::n_state*2;
      inputacc_h[iacc] = tmpres[index] + tmpres_state_h[iacc];
    }


    CONFIG_T::template activation<typename CONFIG_T::accum_t, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(inputacc_h, tmpres_h);


    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 h_newstate[iacc] = (res_T)(tmpres_h[iacc]*(1-tmpres_zr[iacc]) + h_newstate[iacc]*tmpres_zr[iacc]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
  void gru_static(bool reset_state,
            data_T data [CONFIG_T::n_in],
            res_T h_newstate[CONFIG_T::n_state],
            typename CONFIG_T::weight_t param [CONFIG_T::n_state*3*CONFIG_T::n_in],
            typename CONFIG_T::weight_t param_zr[CONFIG_T::n_state*3*CONFIG_T::n_state],
            typename CONFIG_T::bias_t param_b [CONFIG_T::n_state*3],
            typename CONFIG_T::bias_t param_br [CONFIG_T::n_state*3]
     ) {


    static res_T h_state[CONFIG_T::n_state];
    typename CONFIG_T::accum_t tmpres [CONFIG_T::n_state*3];
    typename CONFIG_T::accum_t tmpres_state_zr[CONFIG_T::n_state*3];
    typename CONFIG_T::accum_t tmpres_state_h [CONFIG_T::n_state];
    typename CONFIG_T::accum_t tmpres_zr [CONFIG_T::n_state*2];
    typename CONFIG_T::accum_t tmpres_h [CONFIG_T::n_state];
    typename CONFIG_T::accum_t inputacc_zr [CONFIG_T::n_state*2];
    typename CONFIG_T::accum_t inputacc_h [CONFIG_T::n_state];

#pragma HLS ARRAY_PARTITION variable=&h_state complete
#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
#pragma HLS ARRAY_PARTITION variable=&tmpres complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state_zr complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_state_h complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_zr complete
#pragma HLS ARRAY_PARTITION variable=&tmpres_h complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_zr complete
#pragma HLS ARRAY_PARTITION variable=&inputacc_h complete

 if(reset_state){
      for(int i_h_state = 0; i_h_state < (CONFIG_T::n_state); i_h_state++) {
#pragma HLS UNROLL
 h_state[i_h_state] = 0;
      }
    }

    nnet::dense<data_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config1>(data, tmpres, param, param_b);
    nnet::dense<res_T, typename CONFIG_T::accum_t, typename CONFIG_T::mult_config2>(h_state, tmpres_state_zr, param_zr, param_br);


    for(int iacc = 0; iacc < (2*CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc;
      inputacc_zr[iacc] = tmpres[index] + tmpres_state_zr[index];
    }


    CONFIG_T::template activation_recr<typename CONFIG_T::accum_t, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_GRU>::activation(inputacc_zr, tmpres_zr);




    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 tmpres_state_h[iacc] = tmpres_zr[iacc+(CONFIG_T::n_state)]*tmpres_state_zr[iacc + (2*CONFIG_T::n_state)];
    }


    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 int index = iacc + CONFIG_T::n_state*2;
      inputacc_h[iacc] = tmpres[index] + tmpres_state_h[iacc];
    }


    CONFIG_T::template activation<typename CONFIG_T::accum_t, typename CONFIG_T::weight_t, typename CONFIG_T::ACT_CONFIG_T>::activation(inputacc_h, tmpres_h);


    for(int iacc = 0; iacc < (CONFIG_T::n_state); iacc++) {
#pragma HLS UNROLL
 h_state[iacc] = (res_T)(tmpres_h[iacc]*(1-tmpres_zr[iacc]) + h_state[iacc]*tmpres_zr[iacc]);
      h_newstate[iacc] = h_state[iacc];
    }
}

template<class data_T, class res_T, typename CONFIG_T>
  void gru_stack(
        data_T data [CONFIG_T::n_sequence*CONFIG_T::n_in],
        res_T res[CONFIG_T::n_sequence_out*CONFIG_T::n_state],
        typename CONFIG_T::weight_t param [CONFIG_T::n_state*3*CONFIG_T::n_in],
        typename CONFIG_T::weight_t param_zr[CONFIG_T::n_state*3*CONFIG_T::n_state],
        typename CONFIG_T::bias_t param_b [CONFIG_T::n_state*3],
        typename CONFIG_T::bias_t param_br [CONFIG_T::n_state*3]
        ) {

      res_T h_state[CONFIG_T::n_state];
      data_T data_in[CONFIG_T::n_in];
      bool reset_state = true;

#pragma HLS ARRAY_PARTITION variable=&h_state complete
#pragma HLS ARRAY_PARTITION variable=&data_in complete

 for(int ii = 0; ii < CONFIG_T::n_state; ii++) {
#pragma HLS UNROLL
 h_state[ii] = 0;
      }
      for(int iloop = 0; iloop < CONFIG_T::n_sequence; iloop++) {
        for(int j = 0; j < CONFIG_T::n_in; j++) {
#pragma HLS UNROLL
 data_in[j] = data[j + iloop*CONFIG_T::n_in];
        }
        if (CONFIG_T::use_static)
          nnet::gru_static<data_T, res_T, CONFIG_T>(reset_state,data_in,h_state,param,param_zr,param_b, param_br);
        else
          nnet::gru<data_T, res_T, CONFIG_T>(reset_state,data_in,h_state,param,param_zr,param_b, param_br);
        if (CONFIG_T::n_sequence_out > 1)
          for(int i=CONFIG_T::n_state*iloop, j=0; i<(CONFIG_T::n_state*(iloop+1)); i++,j++){
#pragma HLS UNROLL
 res[i] = h_state[j];
          }
        reset_state = false;
      }
      if (CONFIG_T::n_sequence_out == 1)
        for(int i=0; i<(CONFIG_T::n_state); i++){
#pragma HLS UNROLL
 res[i] = h_state[i];
        }
    }

template<class data_T, class res_T, typename CONFIG_T>
  void gru_stack(
      hls::stream<data_T> &data_stream,
      hls::stream<res_T> &res_stream,
      typename CONFIG_T::weight_t param [CONFIG_T::n_state*3*CONFIG_T::n_in],
      typename CONFIG_T::weight_t param_zr[CONFIG_T::n_state*3*CONFIG_T::n_state],
      typename CONFIG_T::bias_t param_b [CONFIG_T::n_state*3],
      typename CONFIG_T::bias_t param_br [CONFIG_T::n_state*3]
      ) {

    typename res_T::value_type h_newstate[CONFIG_T::n_state];
#pragma HLS ARRAY_PARTITION variable=&h_newstate complete
 for(int ii = 0; ii < CONFIG_T::n_state; ii++) {
#pragma HLS UNROLL
 h_newstate[ii] = 0;
    }

    typename data_T::value_type data_in[CONFIG_T::n_in];
    bool reset_state = true;

    DataPropagation: for(int i_in = 0; i_in < CONFIG_T::n_sequence*CONFIG_T::n_in / data_T::size; i_in++) {
      if (CONFIG_T::n_sequence*CONFIG_T::n_in / data_T::size > 1) {

      }
      data_T data_pack = data_stream.read();
      DataPack: for (int i_pack = 0; i_pack < data_T::size; i_pack++) {
#pragma HLS UNROLL
 data_in[i_pack] = data_pack[i_pack];
      }
      if (CONFIG_T::use_static)
        nnet::gru_static<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(reset_state,data_in,h_newstate,param,param_zr,param_b, param_br);
      else
        nnet::gru<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(reset_state,data_in,h_newstate,param,param_zr,param_b, param_br);
      if (CONFIG_T::n_sequence_out > 1){
        res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 ResPack_sequences: for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = h_newstate[i_pack];
        }
        res_stream.write(res_pack);
      }
      reset_state = false;
    }

    if (CONFIG_T::n_sequence_out == 1){
      res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 ResPack: for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = h_newstate[i_pack];
      }
      res_stream.write(res_pack);
    }

}


}
# 11 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_sepconv1d_stream.h" 1





# 1 "firmware/nnet_utils/nnet_sepconv_stream.h" 1





# 1 "firmware/nnet_utils/nnet_conv_stream.h" 1



# 1 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_shift_reg.h" 1
# 83 "/opt/Xilinx/Vivado/2019.2/common/technology/autopilot/ap_shift_reg.h"
template<typename __SHIFT_T__, unsigned int __SHIFT_DEPTH__ = 32>
class ap_shift_reg
{
  public:

    inline __attribute__((always_inline)) ap_shift_reg() { }
    inline __attribute__((always_inline)) ap_shift_reg(const char* name) { }

  private:

    ap_shift_reg(const ap_shift_reg< __SHIFT_T__, __SHIFT_DEPTH__ >& shreg)
    {
        for (unsigned i = 0; i < __SHIFT_DEPTH__; ++i)
            Array[i] = shreg.Array[i];
    }

    ap_shift_reg& operator = (const ap_shift_reg< __SHIFT_T__,
        __SHIFT_DEPTH__ >& shreg)
    {
        for (unsigned i = 0; i < __SHIFT_DEPTH__; ++i)
            Array[i] = shreg.Array[i];
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __SHIFT_T__ shift(__SHIFT_T__ DataIn,
        unsigned int Addr = __SHIFT_DEPTH__ - 1, bool Enable = true)
    {

        __SHIFT_T__ DataOut;
        _ssdm_op_MemShiftRead(&Array[Addr], &DataOut, &DataIn, Enable);
        return DataOut;






    }


    inline __attribute__((always_inline)) __SHIFT_T__ read(unsigned int Addr = __SHIFT_DEPTH__ - 1) const
    {

        __SHIFT_T__ DataOut;
        __SHIFT_T__ DataIn;
        _ssdm_op_MemShiftRead(&Array[Addr], &DataOut, &DataIn, false);
        return DataOut;



    }

  protected:
    __SHIFT_T__ Array[__SHIFT_DEPTH__] ;
};
# 5 "firmware/nnet_utils/nnet_conv_stream.h" 2




namespace nnet {

enum class conv_implementation { linebuffer=0, encoded=1};




template<unsigned K, unsigned S, unsigned W>
unsigned scale_index_K_gte_S(const unsigned idx) {
#pragma HLS INLINE

 if (idx < K - S) {
        return idx;
    }

    constexpr unsigned nW = ((W - K) / S) * S + K;
    constexpr unsigned sW = (((K + S - 1) / S) - 1) * S + K;
    if (idx >= nW) {
        return sW;
    }

    const unsigned r = nW - idx;
    if (r <= K - S) {
        return sW - r;
    }

    return K - S + (idx - (K - S)) % S;
}

template<unsigned K, unsigned S, unsigned W>
unsigned scale_index_K_lt_S(const unsigned idx) {
#pragma HLS INLINE

 if (idx < S - K) {
        return idx;
    }

    constexpr unsigned nW = ((W - K) / S) * S + K;
    constexpr unsigned sW = (((S + K - 1) / K) - 1) * S + K;
    if (idx >= nW) {
        return sW;
    }

    const unsigned r = nW - idx;
    if (r <= S - K) {
        return sW - r;
    }

    return S - K + (idx - (S - K)) % S;
}

template<unsigned K, unsigned S, unsigned W>
unsigned scale_index(const unsigned idx) {
#pragma HLS INLINE

 if (K >= S) {
        return scale_index_K_gte_S<K, S, W>(idx);
    } else {
        return scale_index_K_lt_S<K, S, W>(idx);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void mult_buffer(
    hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    res_T& res_pack,
    hls::stream<res_T>& res_stream,
    unsigned & outputs_ready,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
) {
#pragma HLS INLINE

 typename data_T::value_type data[CONFIG_T::kernel_size * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&data complete
 typename res_T::value_type res[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=&res complete

 InitData: for (int id = 0; id < CONFIG_T::kernel_size * CONFIG_T::n_chan; id++) {
#pragma HLS UNROLL
 data[id] = data_window[id].read();
    }

#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(data, res, weights, biases);
    } else {
        dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(data, res, weights, biases);
    }

    CastLoop: for (unsigned jj = 0; jj < CONFIG_T::n_filt; jj++) {
#pragma HLS UNROLL
 if (res_T::size / CONFIG_T::n_filt == 1) {
            res_pack[jj] = res[jj];
        } else {
            res_pack[outputs_ready * CONFIG_T::n_filt + jj] = res[jj];
        }
    }

    if (res_T::size / CONFIG_T::n_filt == 1) {
        res_stream.write(res_pack);
    } else {
        if (outputs_ready == (res_T::size / CONFIG_T::n_filt) - 1) {
            res_stream.write(res_pack);
            outputs_ready = 0;
        } else {
            outputs_ready++;
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void compute_output_encoded(
    const data_T& in_elem,
    hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    hls::stream<res_T> &res,
    res_T &res_pack,
    unsigned &outputs_ready,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt],
    ap_uint<CONFIG_T::kernel_size> *pixel_idx
) {
#pragma HLS INLINE

 MultLoop: for (unsigned p = 0; p < data_T::size / CONFIG_T::n_chan; p++) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 CopyDataFilt: for (unsigned f = 0; f < CONFIG_T::kernel_size; f++) {
#pragma HLS UNROLL
 CopyDataChan: for (unsigned c = 0; c < CONFIG_T::n_chan; c++) {
#pragma HLS UNROLL
 if (pixel_idx[p][f]) data_window[f * CONFIG_T::n_chan + c].write(in_elem[p * CONFIG_T::n_chan + c]);
            }
        }
        if (pixel_idx[p][CONFIG_T::kernel_size - 1]) {
            mult_buffer<data_T, res_T, CONFIG_T>(data_window, res_pack, res, outputs_ready, weights, biases);
        }
    }
}






template <class data_T, typename CONFIG_T>
void kernel_shift_1d(
    const data_T& in_elem,
    typename data_T::value_type kernel_window[CONFIG_T::filt_width * CONFIG_T::n_chan]
) {
#pragma HLS inline
#pragma HLS PIPELINE II = 1


 static const int filt_width = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&filt_width);
# 162 "firmware/nnet_utils/nnet_conv_stream.h"

    KernelShiftWidth: for (int i_iw = 0; i_iw < filt_width; i_iw++) {
#pragma HLS UNROLL
 KernelShiftChannel: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {

            kernel_window[i_iw * CONFIG_T::n_chan + i_ic] = kernel_window[(i_iw + 1) * CONFIG_T::n_chan + i_ic];
        }
    }


    static const int lastheight = (CONFIG_T::filt_width - 1) * CONFIG_T::n_chan;
_ssdm_SpecConstant(&lastheight);
# 172 "firmware/nnet_utils/nnet_conv_stream.h"

    KernelPushChannel: for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
#pragma HLS UNROLL
 kernel_window[lastheight + i_ic] = in_elem[i_ic];
    }
}

template <class data_T, typename CONFIG_T>
void kernel_shift_2d(
    typename data_T::value_type shift_buffer[CONFIG_T::filt_height][CONFIG_T::n_chan],
    typename data_T::value_type kernel_window[CONFIG_T::filt_width * CONFIG_T::filt_height * CONFIG_T::n_chan]
) {
#pragma HLS inline


 static const int filt_width = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&filt_width);
# 187 "firmware/nnet_utils/nnet_conv_stream.h"

    KernelShiftWidth: for (int i_iw = 0; i_iw < filt_width; i_iw++) {
#pragma HLS PIPELINE II = 1
 KernelShiftHeight: for (unsigned i_ih = 0; i_ih < CONFIG_T::filt_height; i_ih++) {
            KernelShiftChannel: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {

                kernel_window[i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + i_iw * CONFIG_T::n_chan + i_ic] = kernel_window[i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + (i_iw + 1) * CONFIG_T::n_chan + i_ic];
            }
        }
    }


    static const int lastheight = (CONFIG_T::filt_width - 1) * CONFIG_T::n_chan;
_ssdm_SpecConstant(&lastheight);
# 199 "firmware/nnet_utils/nnet_conv_stream.h"

    KernelPushHeight: for (int i_ih = 0; i_ih < CONFIG_T::filt_height; i_ih++) {
#pragma HLS UNROLL
 KernelPushChannel: for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
            kernel_window[lastheight + i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + i_ic] = shift_buffer[i_ih][i_ic];
        }
    }
}

template <class data_T, typename CONFIG_T>
void shift_line_buffer(const data_T& in_elem,
                    ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)][CONFIG_T::n_chan],
                    typename data_T::value_type kernel_window[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan]
) {

#pragma HLS PIPELINE


 typename data_T::value_type shift_buffer[CONFIG_T::filt_height][CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = &shift_buffer complete dim = 0

 UpdateBuffer: for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
#pragma HLS UNROLL


 shift_buffer[CONFIG_T::filt_height - 1][i_ic] = in_elem[i_ic];
    }

    LineBufferDataIn: for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {

        LineBufferShift: for (unsigned i_ih = 1; i_ih < CONFIG_T::filt_height; i_ih++) {
#pragma HLS UNROLL
 typename data_T::value_type pop_elem = line_buffer[i_ih - 1][i_ic].shift(shift_buffer[CONFIG_T::filt_height - i_ih][i_ic]);
            shift_buffer[CONFIG_T::filt_height - i_ih - 1][i_ic] = pop_elem;
        }
    }
    kernel_shift_2d<data_T, CONFIG_T>(shift_buffer, kernel_window);
}

template<class data_T, class res_T, typename CONFIG_T>
void compute_output_buffer_2d(
    const data_T& in_elem,
    ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)][CONFIG_T::n_chan],
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
) {
#pragma HLS INLINE


 const static int lShiftX = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&lShiftX);
# 249 "firmware/nnet_utils/nnet_conv_stream.h"

    const static int lShiftY = CONFIG_T::filt_height - 1;
_ssdm_SpecConstant(&lShiftY);
# 250 "firmware/nnet_utils/nnet_conv_stream.h"



    static int pX = 0;
    static int pY = 0;

    static int sX = 0;
    static int sY = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=&res_out complete dim = 0

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack


 nnet::shift_line_buffer<data_T, CONFIG_T>(in_elem, line_buffer, kernel_data);


    if ( (sX - lShiftX) == 0 && (sY - lShiftY) == 0 && pY > lShiftY - 1 && pX > lShiftX - 1) {


#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
            dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(kernel_data, res_out, weights, biases);
        } else {
            dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(kernel_data, res_out, weights, biases);
        }


        CastLoop: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
        }


        res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
        if (pY + 1 == CONFIG_T::in_height) {
            pY = 0;
            sY = 0;
        } else {
            pY = pY + 1;

            sY = ((sY - lShiftY) == 0) ? sY - CONFIG_T::stride_height + 1 : sY + 1;
        }
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void compute_output_buffer_1d(
    const data_T& in_elem,
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
) {
#pragma HLS INLINE


 const static int lShiftX = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&lShiftX);
# 323 "firmware/nnet_utils/nnet_conv_stream.h"



    static int pX = 0;
    static int sX = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=&res_out complete dim = 0

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack


 nnet::kernel_shift_1d<data_T, CONFIG_T>(in_elem, kernel_data);


    if ( (sX - lShiftX) == 0 && pX > lShiftX - 1 ) {


#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
            dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(kernel_data, res_out, weights, biases);
        } else {
            dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(kernel_data, res_out, weights, biases);
        }


        CastLoop: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
        }


        res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}

}
# 7 "firmware/nnet_utils/nnet_sepconv_stream.h" 2

namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void depthwise_product(
    data_T data[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    res_T res[CONFIG_T::n_chan],
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan]
) {
#pragma HLS INLINE

 typename CONFIG_T::accum_t mult[CONFIG_T::kernel_size * CONFIG_T::n_chan];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_chan];


#pragma HLS function_instantiate variable=&weights

#pragma HLS PIPELINE II=CONFIG_T::reuse_factor

#pragma HLS ARRAY_PARTITION variable=&mult complete

 int multiplier_limit = ceil(float(CONFIG_T::kernel_size * CONFIG_T::n_chan) / float(CONFIG_T::reuse_factor)) - floor(float(CONFIG_T::n_zeros) / float(CONFIG_T::reuse_factor));
    CONFIG_T::mult_config::template product<data_T, typename CONFIG_T::mult_config::weight_t>::limit(multiplier_limit);


    Product: for(int ii = 0; ii < CONFIG_T::kernel_size * CONFIG_T::n_chan; ii++) {
#pragma HLS UNROLL
 mult[ii] = CONFIG_T::mult_config::template product<data_T, typename CONFIG_T::mult_config::weight_t>::product(data[ii], weights[ii]);
    }


    ResetAccum: for(int iacc = 0; iacc < CONFIG_T::n_chan; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }


    Accum1: for(int ii = 0; ii < CONFIG_T::kernel_size; ii++) {
        Accum2: for(int jj = 0; jj < CONFIG_T::n_chan; jj++) {
            int index = ii * CONFIG_T::n_chan + jj;
            acc[jj] += mult[index];
        }
    }


    Result: for(int ires = 0; ires < CONFIG_T::n_chan; ires++){
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void depthwise_mult_buffer(
    hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    res_T& res_pack,
    hls::stream<res_T>& res_stream,
    unsigned & outputs_ready,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan]
) {
#pragma HLS INLINE

 typename data_T::value_type data[CONFIG_T::kernel_size * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&data complete
 typename res_T::value_type res[CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&res complete

 InitData: for (int id = 0; id < CONFIG_T::kernel_size * CONFIG_T::n_chan; id++) {
#pragma HLS UNROLL
 data[id] = data_window[id].read();
    }

#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
        depthwise_product<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(data, res, weights, biases);
    } else {
        (static_cast <bool> ("Resource strategy for DepthwiseConv2D is not supported." && false) ? void (0) : __assert_fail ("\"Resource strategy for DepthwiseConv2D is not supported.\" && false", "firmware/nnet_utils/nnet_sepconv_stream.h", 84, __extension__ __PRETTY_FUNCTION__));
    }

    CastLoop: for (unsigned jj = 0; jj < CONFIG_T::n_chan; jj++) {
#pragma HLS UNROLL
 if (res_T::size / CONFIG_T::n_chan == 1) {
            res_pack[jj] = res[jj];
        } else {
            res_pack[outputs_ready * CONFIG_T::n_chan + jj] = res[jj];
        }
    }

    if (res_T::size / CONFIG_T::n_chan == 1) {
        res_stream.write(res_pack);
    } else {
        if (outputs_ready == (res_T::size / CONFIG_T::n_chan) - 1) {
            res_stream.write(res_pack);
            outputs_ready = 0;
        } else {
            outputs_ready++;
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void compute_depthwise_output_encoded(
    const data_T& in_elem,
    hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    hls::stream<res_T> &res,
    res_T &res_pack,
    unsigned &outputs_ready,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan],
    ap_uint<CONFIG_T::kernel_size> *pixel_idx
) {
#pragma HLS INLINE

 MultLoop: for (unsigned p = 0; p < data_T::size / CONFIG_T::n_chan; p++) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 CopyDataFilt: for (unsigned f = 0; f < CONFIG_T::kernel_size; f++) {
#pragma HLS UNROLL
 CopyDataChan: for (unsigned c = 0; c < CONFIG_T::n_chan; c++) {
#pragma HLS UNROLL
 if (pixel_idx[p][f]) data_window[f * CONFIG_T::n_chan + c].write(in_elem[p * CONFIG_T::n_chan + c]);
            }
        }
        if (pixel_idx[p][CONFIG_T::kernel_size - 1]) {
            depthwise_mult_buffer<data_T, res_T, CONFIG_T>(data_window, res_pack, res, outputs_ready, weights, biases);
        }
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void pointwise_mult_buffer(
    const data_T &data_pack,
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]
) {
#pragma HLS INLINE

 typename data_T::value_type data[CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&data complete

 typename res_T::value_type res[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=&res complete

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack

 InitData: for (int id = 0; id < CONFIG_T::n_chan; id++) {
#pragma HLS UNROLL
 data[id] = data_pack[id];
    }

#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(data, res, weights, biases);
    } else {
        dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(data, res, weights, biases);
    }

    CastLoop: for (unsigned jj = 0; jj < CONFIG_T::n_filt; jj++) {
#pragma HLS UNROLL
 res_pack[jj] = res[jj];
    }

    res_stream.write(res_pack);
}


template<class data_T, class res_T, typename CONFIG_T>
void compute_depthwise_output_buffer_1d(
    const data_T& in_elem,
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan]
) {
#pragma HLS INLINE


 const static int lShiftX = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&lShiftX);
# 186 "firmware/nnet_utils/nnet_sepconv_stream.h"



    static int pX = 0;
    static int sX = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&res_out complete dim = 0

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack


 nnet::kernel_shift_1d<data_T, CONFIG_T>(in_elem, kernel_data);


    if ((sX - lShiftX) == 0 && pX > lShiftX - 1) {

#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
        depthwise_product<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(kernel_data, res_out, weights, biases);
      } else {
        (static_cast <bool> ("Resource strategy for DepthwiseConv1D is not supported." && false) ? void (0) : __assert_fail ("\"Resource strategy for DepthwiseConv1D is not supported.\" && false", "firmware/nnet_utils/nnet_sepconv_stream.h", 211, __extension__ __PRETTY_FUNCTION__));
      }


      CastLoop: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
      }


      res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
    } else {
        pX = pX + 1;
        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
  }

template<class data_T, class res_T, typename CONFIG_T>
void compute_depthwise_output_buffer_2d(
    const data_T& in_elem,
    ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)][CONFIG_T::n_chan],
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan]
) {
#pragma HLS INLINE


 const static int lShiftX = CONFIG_T::filt_width - 1;
_ssdm_SpecConstant(&lShiftX);
# 246 "firmware/nnet_utils/nnet_sepconv_stream.h"

    const static int lShiftY = CONFIG_T::filt_height - 1;
_ssdm_SpecConstant(&lShiftY);
# 247 "firmware/nnet_utils/nnet_sepconv_stream.h"



    static int pX = 0;
    static int pY = 0;

    static int sX = 0;
    static int sY = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&res_out complete dim = 0

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack


 nnet::shift_line_buffer<data_T, CONFIG_T>(in_elem, line_buffer, kernel_data);


    if ((sX - lShiftX) == 0 && (sY - lShiftY) == 0 && pY > lShiftY - 1 && pX > lShiftX - 1) {

#pragma HLS INLINE region
 if (CONFIG_T::strategy == nnet::latency) {
        depthwise_product<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(kernel_data, res_out, weights, biases);
      } else {
        (static_cast <bool> ("Resource strategy for DepthwiseConv2D is not supported." && false) ? void (0) : __assert_fail ("\"Resource strategy for DepthwiseConv2D is not supported.\" && false", "firmware/nnet_utils/nnet_sepconv_stream.h", 275, __extension__ __PRETTY_FUNCTION__));
      }


      CastLoop: for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
      }


      res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
        if (pY + 1 == CONFIG_T::in_height) {
            pY = 0;
            sY = 0;
        } else {
            pY = pY + 1;
            sY = ((sY - lShiftY) == 0) ? sY - CONFIG_T::stride_height + 1 : sY + 1;
        }
    } else {
        pX = pX + 1;
        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
  }

}
# 7 "firmware/nnet_utils/nnet_sepconv1d_stream.h" 2
# 1 "firmware/nnet_utils/nnet_conv1d_stream.h" 1







namespace nnet {

template<class data_T, typename CONFIG_T>
void compute_scaled_indices_1d(
    const unsigned w_idx,
    ap_uint<CONFIG_T::filt_width> *pixel_idx
) {
    unsigned wp_idx = w_idx * (data_T::size / CONFIG_T::n_chan);

    ComputeIndex: for (unsigned p = 0; p < data_T::size / CONFIG_T::n_chan; p++) {
#pragma HLS UNROLL

 unsigned sw_idx = scale_index<CONFIG_T::filt_width, CONFIG_T::stride_width, CONFIG_T::in_width>(wp_idx + p);
        pixel_idx[p] = CONFIG_T::pixels[sw_idx];
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_encoded_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    (static_cast <bool> (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) ? void (0) : __assert_fail ("CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0", "firmware/nnet_utils/nnet_conv1d_stream.h", 32, __extension__ __PRETTY_FUNCTION__));

    hls::stream<typename data_T::value_type> data_window[CONFIG_T::filt_width * CONFIG_T::n_chan];
    const int win_depth = CONFIG_T::out_width;
    for (unsigned i_out = 0; i_out < CONFIG_T::filt_width * CONFIG_T::n_chan; i_out++) {
#pragma HLS STREAM variable=&data_window[i_out] depth=win_depth
 }

#pragma HLS ARRAY_PARTITION variable=&CONFIG_T::pixels complete

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 unsigned outputs_ready = 0;

    ap_uint<CONFIG_T::filt_width> pixel_idx[data_T::size / CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&pixel_idx complete

 ReadInputWidth: for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (data_T::size / CONFIG_T::n_chan); i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency && data_T::size / CONFIG_T::n_chan == 1) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
        compute_scaled_indices_1d<data_T, CONFIG_T>(i_iw, pixel_idx);
        compute_output_encoded<data_T, res_T, CONFIG_T>(data.read(), data_window, res, res_pack, outputs_ready, weights, biases, pixel_idx);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_buffer_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    (static_cast <bool> (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) ? void (0) : __assert_fail ("CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0", "firmware/nnet_utils/nnet_conv1d_stream.h", 66, __extension__ __PRETTY_FUNCTION__));

    ReadInputWidth: for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width; i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
        compute_output_buffer_1d<data_T, res_T, CONFIG_T>(data.read(), res, weights, biases);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_1d_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
#pragma HLS inline region
 switch(CONFIG_T::implementation){
        case conv_implementation::linebuffer:
            conv_1d_buffer_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
            break;
        case conv_implementation::encoded:
            conv_1d_encoded_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
            break;
    }
}

}
# 8 "firmware/nnet_utils/nnet_sepconv1d_stream.h" 2

namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void depthwise_conv_1d_encoded_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan])
{
    (static_cast <bool> (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) ? void (0) : __assert_fail ("CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0", "firmware/nnet_utils/nnet_sepconv1d_stream.h", 18, __extension__ __PRETTY_FUNCTION__));

    hls::stream<typename data_T::value_type> data_window[CONFIG_T::filt_width * CONFIG_T::n_chan];
    const int win_depth = CONFIG_T::out_width;
    for (unsigned i_out = 0; i_out < CONFIG_T::filt_width * CONFIG_T::n_chan; i_out++) {
#pragma HLS STREAM variable=&data_window[i_out] depth=win_depth
 }

#pragma HLS ARRAY_PARTITION variable=&CONFIG_T::pixels complete

 res_T res_pack;
#pragma HLS DATA_PACK variable=&res_pack
 unsigned outputs_ready = 0;

    ap_uint<CONFIG_T::filt_width> pixel_idx[data_T::size / CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=&pixel_idx complete

 ReadInputWidth: for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (data_T::size / CONFIG_T::n_chan); i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency && data_T::size / CONFIG_T::n_chan == 1) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
        compute_scaled_indices_1d<data_T, CONFIG_T>(i_iw, pixel_idx);
        compute_depthwise_output_encoded<data_T, res_T, CONFIG_T>(data.read(), data_window, res, res_pack, outputs_ready, weights, biases, pixel_idx);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void depthwise_conv_1d_buffer_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_width * CONFIG_T::n_chan],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_chan])
{
    (static_cast <bool> (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) ? void (0) : __assert_fail ("CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0", "firmware/nnet_utils/nnet_sepconv1d_stream.h", 52, __extension__ __PRETTY_FUNCTION__));

    ReadInputWidth: for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width; i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
        compute_depthwise_output_buffer_1d<data_T, res_T, CONFIG_T>(data.read(), res, weights, biases);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void pointwise_conv_1d_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    (static_cast <bool> (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) ? void (0) : __assert_fail ("CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0", "firmware/nnet_utils/nnet_sepconv1d_stream.h", 70, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> (CONFIG_T::filt_width == 1) ? void (0) : __assert_fail ("CONFIG_T::filt_width == 1", "firmware/nnet_utils/nnet_sepconv1d_stream.h", 71, __extension__ __PRETTY_FUNCTION__));

#pragma HLS ARRAY_PARTITION variable=&weights complete
#pragma HLS ARRAY_PARTITION variable=&biases complete

 ReadInputWidth: for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (data_T::size / CONFIG_T::n_chan); i_iw++) {
        if (CONFIG_T::strategy == nnet::latency && data_T::size / CONFIG_T::n_chan == 1) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
        if (i_iw % CONFIG_T::stride_width == 0) {
            pointwise_mult_buffer<data_T, res_T, CONFIG_T>(data.read(), res, weights, biases);
        } else {
            data.read();
        }
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void separable_conv_1d_cl(
    hls::stream<data_T> &data,
    hls::stream<res_T> &res,
    typename CONFIG_T::depthwise_config::weight_t depthwise_weights[CONFIG_T::depthwise_config::filt_width * CONFIG_T::depthwise_config::n_chan],
    typename CONFIG_T::pointwise_config::weight_t pointwise_weights[CONFIG_T::pointwise_config::n_chan * CONFIG_T::pointwise_config::n_filt],
    typename CONFIG_T::depthwise_config::bias_t depthwise_biases[CONFIG_T::depthwise_config::n_chan],
    typename CONFIG_T::pointwise_config::bias_t pointwise_biases[CONFIG_T::pointwise_config::n_filt]
) {
#pragma HLS DATAFLOW

 hls::stream<data_T> depthwise_res;
    unsigned res_depth = CONFIG_T::depthwise_config::out_width;
#pragma HLS STREAM variable=&depthwise_res depth=res_depth

 switch(CONFIG_T::depthwise_config::implementation){
        case conv_implementation::linebuffer:
            depthwise_conv_1d_buffer_cl<data_T, data_T, typename CONFIG_T::depthwise_config>(data, depthwise_res, depthwise_weights, depthwise_biases);
            break;
        case conv_implementation::encoded:
            depthwise_conv_1d_encoded_cl<data_T, data_T, typename CONFIG_T::depthwise_config>(data, depthwise_res, depthwise_weights, depthwise_biases);
            break;
    }
    pointwise_conv_1d_cl<data_T, res_T, typename CONFIG_T::pointwise_config>(depthwise_res, res, pointwise_weights, pointwise_biases);
}

}
# 12 "firmware/parameters.h" 2


# 1 "firmware/weights/w2.h" 1
# 12 "firmware/weights/w2.h"
model_default_t w2[13440] = {-0.0266006887, 0.1275345832, -0.0468946546, 0.2015636265, -0.1114521921, 0.0301125720, 0.0187178664, 0.1453438252, 0.0539276786, 0.1172866821, -0.0519861877, 0.0139617817, -0.0633647591, -0.0186552946, -0.1231978238, -0.1685312688, 0.1217421517, -0.1791819036, -0.0481410809, 0.1446750462, 0.0375319235, -0.1421416849, -0.0406074598, -0.1003219709, -0.1299389303, 0.0949910879, 0.0975921974, -0.1878731549, 0.1302717924, 0.1236794442, 0.0692251027, -0.0097598042, -0.1313678473, 0.0975722224, 0.0949250162, -0.0123373875, -0.0764026269, 0.0032930875, -0.0615775362, 0.0501119159, 0.0643852651, -0.0323421918, 0.1519556195, 0.0267380662, 0.1829110235, 0.0336639956, -0.0387053564, 0.0140406694, 0.2180222273, -0.1401003301, 0.0068213595, 0.0899116322, -0.1159134135, 0.2492518723, 0.1539652944, -0.0835640579, 0.1503869444, 0.0912270173, -0.0482689179, -0.0981552005, 0.0636239871, 0.0620379373, -0.0806987211, 0.1175065935, -0.2603912652, 0.0599501655, 0.0574189164, 0.0533885732, 0.0465036705, -0.1011698470, 0.0775370151, 0.1507615149, -0.0091229882, 0.1732235253, -0.0762302950, 0.0533374809, 0.1127646491, 0.0708428472, 0.1476677507, -0.0385588817, -0.0827255249, 0.0985049158, -0.0959190428, 0.1298515499, 0.0384783298, 0.0879717171, -0.1445381045, 0.0451644771, 0.1141103357, 0.0879756138, -0.0082574887, 0.2636880279, 0.0903331265, -0.1363293231, -0.0387028903, -0.2425115705, 0.2029624432, 0.0506213829, 0.0865186378, -0.0511932522, 0.1151533276, -0.1009747386, -0.0368061699, 0.0878791362, -0.1748651713, 0.0154993804, 0.1044498160, 0.0738536716, 0.0123552177, -0.2587808669, 0.1034347117, -0.1153340265, 0.0342037342, -0.1011282802, 0.0537491627, -0.0599915907, 0.0402433872, 0.0772650614, -0.0093265949, 0.0730632097, 0.0185066517, -0.0310872141, -0.1610770822, -0.1851677299, 0.1374170929, 0.2111380696, 0.0741331503, -0.0463157222, 0.0972495601, 0.0064024297, -0.1420709193, 0.0685206279, 0.1687241495, -0.0923802555, 0.0250152815, 0.1083660349, -0.2277938128, 0.0284075662, -0.0257905181, 0.0609993488, 0.1348781884, 0.1757792383, -0.1139911488, 0.0069897971, -0.0725828409, -0.1017183587, -0.1428933591, 0.1681521535, -0.0954726711, 0.2622100115, 0.0924946815, 0.2702201903, 0.1838013083, 0.1294724047, -0.0615510158, 0.0542606898, -0.1521788388, -0.0431528538, -0.1884221882, -0.1425487250, -0.1584521234, 0.0741795003, -0.0870020762, -0.0324022062, -0.0299202446, 0.0898084417, 0.0971806124, 0.1426667720, -0.1294258684, -0.0624767877, -0.1867150515, -0.0096188588, 0.0021974440, -0.0530622713, -0.0044755144, -0.1147417575, -0.0033620275, -0.0039017582, -0.0212472714, -0.1102792546, -0.0040290747, 0.0585745350, -0.1797632724, -0.0411577076, 0.0561885685, -0.0876708329, 0.2252713442, 0.1399422884, 0.0820865333, -0.0070279250, -0.1635880470, -0.0466590747, -0.1795667261, 0.0096903089, 0.0826683789, 0.0118401097, 0.0598534159, 0.0863980427, 0.0270842742, -0.0715059787, -0.0935240388, 0.1421687752, 0.2097841650, -0.2560929358, 0.0122432504, 0.0928857028, 0.0674617365, -0.1312992871, -0.0629082993, 0.0058976696, 0.0764863566, 0.0995394140, 0.0369260870, -0.0824097618, 0.0698917508, 0.0371596403, -0.1245324239, 0.2665960193, 0.1453823745, 0.1182926744, -0.0360787213, 0.1073342934, 0.1135211587, -0.0642506704, 0.0996721536, -0.0783467144, 0.0799830407, -0.1764375865, -0.2074528039, 0.1452611685, 0.1524170488, 0.1656602770, -0.1081026718, -0.0082382122, -0.0079990728, -0.1592538953, 0.0574711002, 0.1482934654, -0.0910360441, 0.1066120416, -0.2098198831, -0.1253148913, -0.0244329982, 0.0470976494, 0.1225521341, 0.0594529174, -0.2646343410, 0.1038019136, -0.1119114161, 0.0826972574, 0.0512334220, 0.1211444438, 0.0690232590, 0.1836070120, 0.1595945060, 0.1988166124, 0.0686931461, -0.1681691408, 0.0986300632, 0.1597453505, -0.1402961016, -0.0721351281, 0.0820335969, 0.1214200780, 0.0621739104, -0.0052086930, -0.0708683804, -0.1716537029, -0.0842819214, -0.0946298167, 0.1092216447, -0.0507326126, -0.1024020910, 0.1341186464, -0.1842798740, 0.1911289990, -0.1761140376, -0.2242698222, -0.0729197413, 0.1316097975, -0.1537108570, -0.2457261682, -0.1475030929, 0.0772065520, 0.1131861433, 0.0357375592, 0.0166254751, 0.0929280668, -0.0356178693, -0.1033328995, -0.1660175622, 0.0862508267, 0.0920959339, -0.1600735635, -0.0062568560, 0.0117304511, -0.0918606743, 0.0208081827, -0.0971662477, -0.1071157977, -0.0964619592, 0.0540912524, -0.0270695481, -0.0250333566, -0.0655727834, -0.0255140495, 0.0129380450, -0.2515339851, 0.1606662571, 0.1223855913, 0.0598389134, -0.0220929962, 0.0162128173, -0.0276446715, 0.2394640446, 0.0600081496, -0.0888507515, 0.0308165848, -0.0423450433, 0.2094181031, 0.0919714570, -0.0150826471, 0.0119608836, -0.1121777892, 0.1733669937, -0.0565223023, 0.0851689279, 0.1229003221, 0.1675406247, -0.1601658911, -0.1503244489, -0.1776583493, 0.1100875735, 0.1031489372, 0.0102092568, 0.0189495198, -0.0555976853, -0.0632625446, -0.1136354804, -0.0292569995, 0.1047713235, 0.1024445146, -0.1474543661, -0.1959614009, -0.0423484780, 0.0380118601, -0.0520280264, -0.1473717690, 0.0259657111, 0.1177249849, -0.0186104942, 0.1306785643, 0.2304957360, -0.0721741468, -0.1451424509, 0.0694169700, -0.1592458040, 0.0084607061, 0.1207853854, -0.1243653223, -0.0721352398, -0.0470437817, -0.1298567206, -0.0347340815, 0.1722515821, 0.0677250177, -0.1869329661, -0.0596136190, -0.0346220285, 0.1638122648, 0.0917645916, -0.0058377823, 0.1863297671, 0.1402800530, -0.0513169877, -0.2236777991, 0.1648473740, 0.0018413016, -0.0128194476, -0.0755481794, -0.1886434108, 0.1720332652, 0.1530866623, 0.1390770525, -0.0146579966, -0.0230907891, 0.0642797276, -0.0838915408, -0.1279600114, -0.0315113626, 0.1461275518, 0.1233235076, 0.1117453128, -0.0652095452, -0.0056100152, -0.0369780734, -0.1421282589, -0.0473237671, -0.1245599464, 0.1471492648, -0.1616522670, -0.0158024095, 0.0720288903, 0.0342987478, -0.1665619612, -0.1328788400, -0.0713613778, 0.0495176651, -0.2526891530, 0.1338496208, -0.1234748140, 0.0072527160, -0.0000354399, -0.0827018842, -0.1854546368, -0.0901435092, 0.0567625239, -0.2020033896, -0.1388754845, 0.1207683831, -0.1203639060, 0.0148961535, -0.0984598175, 0.0821834505, 0.0266720690, 0.1008063257, -0.1441973448, -0.2241781652, 0.0765976384, -0.1312257648, 0.0630111843, -0.1734956801, -0.1300434172, 0.0605737306, 0.0190747064, 0.1872955114, -0.2356998920, -0.0282183625, -0.1687917113, -0.1494168043, -0.0684404150, 0.0727643743, -0.0744176656, 0.1917441785, -0.2017535120, -0.0608105324, -0.1384797543, -0.2603392303, 0.0141316848, 0.1008357555, -0.1627467126, 0.1197544709, 0.0984250233, -0.1002289355, -0.2349539101, 0.0679705516, -0.1201839522, 0.0243072286, 0.0907451585, -0.0897597969, -0.0340545066, -0.0454273932, 0.0774321556, 0.0448084138, 0.2294804007, -0.0365092605, -0.0476082079, 0.0880818665, -0.0224259328, 0.0201211274, 0.0276305843, -0.0897495076, 0.0173687935, -0.0735717714, 0.0622882135, 0.0140328193, 0.0642297268, -0.1575444341, 0.0830443278, -0.1352013648, -0.0994345397, 0.1921813041, -0.1743480861, 0.1131003574, 0.1923342496, 0.0452380478, -0.0682050139, 0.1372535378, -0.2384492010, 0.0596580282, -0.1773695499, -0.0845603123, -0.1908079535, 0.1292035133, -0.0397568867, 0.0910709873, -0.0667264536, -0.0248885695, 0.0800753981, -0.2236310244, -0.1004947498, 0.1877820194, -0.0175453629, -0.0773022324, 0.0677925125, 0.1019816771, 0.0398736186, 0.1328121573, 0.0654761195, -0.0665434822, 0.1344266087, 0.0495050773, -0.1196938604, -0.1631004214, -0.0009916291, 0.1507191062, -0.1343591213, 0.0912661254, -0.0776801482, -0.1399134398, 0.0258549396, -0.2112240493, -0.2066540271, 0.2081506997, -0.0402574874, 0.0002584434, 0.1568337381, -0.0645177439, 0.0769891366, 0.1811791360, 0.0863503441, 0.1181368455, -0.0358903445, 0.1634216905, -0.0053437836, 0.1421585232, -0.0886142477, -0.0472024940, -0.0598021559, -0.0059400317, 0.0828580037, 0.0762106404, -0.0081757782, 0.0462419912, 0.2173752040, -0.0738872290, 0.0005347013, -0.1372293234, 0.0653951019, -0.0079372050, 0.0406874456, 0.1067783609, 0.2366573215, 0.1180858091, 0.0305448938, 0.1438811272, 0.1948632598, -0.1271658242, -0.1866651922, -0.1920327544, -0.0683635548, 0.0580845922, 0.1076125652, 0.0408867523, 0.1315758377, 0.1456117630, -0.0861745402, 0.0648283884, 0.1853728592, -0.1754806489, -0.0587189831, -0.1672944576, 0.0998310521, -0.0437667705, -0.1667268872, -0.1529600769, -0.0150454547, 0.0677844286, -0.2301887721, -0.0261989720, -0.0401580669, 0.0925087333, 0.0787485838, -0.0006350295, 0.0146055669, 0.1591551602, 0.2155784667, 0.0981088132, -0.1254457235, -0.0218330827, -0.2368347347, -0.2319073379, 0.0880998150, -0.1923636645, 0.0082446141, -0.1934897155, -0.0137325097, 0.0073146131, 0.0264053252, -0.0842617601, 0.1172973290, 0.2515287995, -0.2084376067, 0.2180108726, -0.0073484858, 0.0125714932, -0.1547347903, 0.0651412755, 0.0811366215, -0.0897778347, -0.0922066644, 0.0324803405, 0.0258486886, -0.1567533612, 0.0272883773, 0.2054580748, -0.2465476245, 0.0194435939, -0.0242983438, -0.0059188027, -0.0447670519, 0.1792337596, -0.0504337251, -0.0399550050, -0.2194568813, 0.0292410366, 0.0713101774, 0.0958965421, 0.0162731633, -0.0838014707, 0.1972270608, 0.0341249034, -0.1203917712, -0.0191607047, -0.1668342799, -0.1062175333, -0.1321232617, 0.0149602257, 0.0461469032, 0.0775051862, -0.0553717427, -0.0720290020, 0.1284393221, -0.0925593004, -0.0138017703, 0.1438950747, 0.1305610985, 0.1028155386, -0.0916096717, -0.1693533659, 0.2314745784, -0.1278763413, -0.0785450265, -0.1182622239, 0.0375839211, 0.1492820233, 0.0484647006, -0.1336627901, 0.1896934360, -0.1645709574, -0.1107583568, -0.0908229128, 0.0649258494, -0.0213425085, -0.2140517682, -0.1749203652, 0.1151574627, -0.1367161870, -0.1475327909, -0.1188618392, -0.0077306633, 0.1266271770, 0.1630977690, 0.0844463557, 0.0699879378, -0.1079146564, 0.1632090956, 0.0357514992, 0.0429792628, -0.2131223679, -0.0635068342, -0.1489357948, -0.1220044941, -0.0604014806, 0.0093365386, 0.0095180720, -0.0248060767, 0.0926865116, 0.1404757500, -0.0955892578, 0.2635222971, 0.1019067168, 0.0972611308, -0.0011571251, -0.0476940088, 0.2392553091, 0.1516282409, 0.1896397620, -0.0112199001, -0.0795735344, 0.0729731843, 0.0584690645, -0.0410441197, -0.1090205163, -0.2486370057, -0.1687700450, -0.1273525059, 0.0461855605, -0.0115107298, 0.1612215638, 0.1803453416, 0.0359875299, 0.2666941583, -0.2325408906, -0.0830533877, 0.1254774332, -0.0687682554, -0.0532943197, -0.1871118397, 0.1537693888, 0.1204189137, 0.0671232045, 0.0903515369, 0.2350808531, -0.1802627891, -0.1119409055, 0.1426834315, -0.1015011445, 0.0656223893, -0.0010214612, 0.1267511845, 0.0349109136, -0.0619315766, 0.0884699002, 0.1720784605, -0.1314917952, 0.0994944423, -0.0742167756, -0.1529248655, 0.1045643613, 0.0076399702, -0.0181717742, -0.0707851723, 0.0614608601, -0.0624732338, 0.0190685708, 0.0116616273, 0.0373277254, 0.0878282934, -0.1266767979, 0.0587028079, -0.1229575425, 0.0968558714, 0.0065638595, 0.0119777611, 0.0365222543, 0.1005699635, -0.0428095832, -0.0417095795, -0.2431430817, 0.1665346324, 0.0716572255, -0.1605624706, 0.2226073444, -0.1334597170, -0.1520794928, -0.0388064310, 0.0777401328, -0.0731702968, -0.0567162856, 0.2221321613, 0.1305408925, 0.1133112237, 0.0733948201, -0.0547062792, 0.0454634503, -0.0016797052, -0.0542330667, -0.1903498918, -0.0471810400, -0.0019098056, 0.0681379959, -0.2261189520, 0.1119570583, 0.1188756749, -0.0169294421, -0.1625450850, 0.0322801135, -0.0120614683, -0.0934906527, -0.0090482831, 0.0036016242, -0.0006191846, -0.0066787461, 0.0455881134, -0.1394011825, 0.0360704549, 0.1489036232, -0.1012870967, 0.1065195724, 0.1554308683, 0.1227415651, 0.1020719334, -0.0681451187, 0.0074965712, 0.2344065905, 0.0256330371, -0.0114279687, -0.0027325810, -0.1283445209, -0.0667317733, 0.2108189911, 0.0280787684, 0.0670767948, 0.0633196905, -0.0415534824, -0.0524156839, -0.2382077724, -0.0078441584, -0.0323931687, 0.1890685707, -0.0831919685, 0.1246537492, -0.2052252889, 0.0617626198, -0.0105441669, -0.1552898437, -0.0023409056, -0.1005854383, 0.2201394737, -0.0912264660, -0.0200216267, 0.2315089554, 0.2002963275, -0.0941990092, -0.0464865938, -0.1052648053, 0.1121296659, 0.1799872965, -0.1585280448, 0.1590016633, -0.0668083727, 0.0525934361, 0.0615978166, 0.0579009876, 0.0698258802, 0.1295565218, 0.0196349490, -0.1495149136, -0.2430034280, -0.0927642733, 0.0870295539, -0.0016836405, 0.0959981233, -0.0707491413, -0.0445795879, -0.0238411762, -0.1802983284, 0.1271371394, -0.2427101433, 0.2047956437, 0.2643244863, -0.1443717778, -0.0897648409, 0.0568417720, -0.0947894976, -0.0602647364, -0.0727534071, -0.1972263753, -0.0015494187, -0.1311494857, 0.0501624569, -0.0542763472, -0.1064812765, 0.2361169010, -0.0536015667, -0.0059073702, -0.0510291383, -0.2508325875, -0.0887011886, 0.0405938700, -0.1101183966, 0.1957209110, -0.0367424525, -0.0770534202, 0.1359627247, -0.1755826771, 0.0897127017, 0.0253484156, -0.2304317206, 0.0600415692, -0.1165307164, 0.0082838824, -0.2052420974, -0.0843724161, 0.0391464904, -0.1483227611, 0.1239090711, 0.1047850028, -0.0479119048, -0.2210717797, 0.0705100298, -0.2158084363, 0.1143950745, -0.0527794063, -0.0791475698, 0.2279727310, 0.1461481005, -0.0349210799, -0.0500880778, 0.2080400884, 0.1100921035, 0.0895746648, -0.2332191765, 0.0203646999, -0.0291743577, 0.0442735963, 0.0156974774, 0.0205513164, -0.1474726051, -0.0126842121, -0.0787119418, -0.2319745421, 0.0183638781, 0.0619580299, 0.0460537188, 0.0690036267, 0.1784308702, -0.1404378265, -0.0773445740, 0.0689826086, -0.0614282489, -0.1226042733, 0.1361090690, 0.0909392610, -0.2199236304, -0.1761159450, -0.0933913663, -0.0491336621, 0.1803069115, -0.0612370893, 0.0769269243, -0.0637684092, -0.1233529225, 0.1052316651, -0.1378255486, -0.0961536467, -0.0253606662, 0.2307992429, 0.0982891545, -0.0690515488, -0.0886972025, 0.1558647454, -0.0197400898, -0.0504154339, 0.0466019250, 0.2346712202, 0.0214057155, -0.0489139110, -0.0978015661, -0.0331224203, -0.0597614013, 0.1493856460, -0.1329253167, 0.1244132444, 0.0198244266, -0.0061535588, 0.1238392368, 0.1848180145, 0.0611956827, -0.2131787986, -0.0329177827, -0.0238830578, -0.0416147038, 0.1359782368, -0.2077153325, 0.1861377209, 0.1412343979, 0.1592501104, 0.0524756722, -0.0430364050, -0.1681564301, -0.2621558607, -0.1229841560, 0.1971950084, -0.1469370723, 0.0136978393, 0.1101854444, 0.1145076677, 0.0764524192, 0.1503619105, -0.0743291155, -0.0436717346, 0.0770049244, -0.2712376714, -0.0622498877, -0.0825331062, -0.0293949563, -0.2631765604, -0.2325835824, 0.1901496798, -0.1876242161, -0.0468008704, 0.0725982115, -0.1429565251, 0.1810187399, -0.1659712046, -0.1008525789, -0.0980214849, -0.1388365030, 0.0152300913, 0.0348130167, 0.0095195826, 0.0420708694, -0.0279963110, -0.1524522007, -0.2447511852, 0.0527724735, 0.1052432209, 0.0657230541, 0.1200617254, -0.1312854886, 0.0142644821, 0.1725793034, -0.1389422417, 0.0747669414, -0.2367774844, 0.0707449764, -0.2137190700, -0.1743117273, 0.0308230165, -0.0513487421, 0.2339802533, 0.0168830920, 0.0926932245, -0.1270139813, 0.1890584230, 0.0598826893, -0.1791811883, -0.1703517139, 0.1658746153, -0.2553414702, 0.1055462211, 0.1089102626, -0.2689305842, -0.1011425406, -0.1179675013, -0.1071869507, -0.0015845003, 0.1095459089, -0.0653882921, -0.0889616609, -0.2616147697, -0.0865121707, 0.0404280983, 0.1113597825, -0.0799935833, 0.1198464781, -0.1622160077, 0.1783046275, 0.0132252974, 0.2530866265, 0.0734868646, 0.2127291709, -0.1038671732, 0.1710484773, -0.2338212729, 0.1352364719, -0.0792230964, -0.1672629565, -0.0350093432, 0.0132127414, 0.0065161567, 0.0929278582, 0.2506414056, 0.0917665213, 0.1561618149, -0.0918582007, -0.0939554125, -0.1291241795, -0.2144847214, -0.0316607952, 0.0451785624, 0.1119681671, 0.0156296901, -0.1767385006, -0.2182058394, 0.0500244945, -0.0047838134, 0.0251396392, -0.2475441694, -0.1707706004, -0.0215820540, 0.0994801521, 0.1098142937, -0.1049781218, -0.1593520641, 0.1472102702, 0.0435464419, 0.0512504838, -0.0821475759, -0.0176530462, 0.1521235108, 0.1234630868, -0.0198021997, 0.0896747932, 0.1762693673, 0.0959390551, 0.0392154120, -0.0034628308, 0.0033227419, -0.0890772268, -0.0996771455, -0.1660980731, 0.0996770263, 0.0342504084, -0.0515118651, -0.1477891058, 0.0907684639, -0.0498682000, 0.0425545685, -0.1015977114, -0.2306204587, 0.1184383035, 0.2317287177, 0.1899399906, 0.0588358082, 0.1205476075, 0.1083586216, -0.1145030931, 0.1641047448, -0.0919803679, -0.2037928849, 0.1060373858, 0.1952636093, 0.0253965352, 0.0769255832, -0.0898464099, 0.0228926353, -0.0022536716, 0.0586179607, 0.1335843801, -0.0184274763, 0.0734125525, -0.0846666992, -0.1147272438, -0.1075181887, -0.0175153725, 0.0656410754, -0.0951841101, -0.0099332863, -0.1280765980, 0.0511582345, 0.0183829833, 0.0094213337, 0.1292271614, -0.1873090416, -0.0581031218, -0.1372331828, -0.1178143844, -0.0882688612, -0.0757397488, 0.0273146443, 0.0594108738, 0.0378316008, 0.0055591492, -0.1878534406, 0.0169117320, -0.0289171934, 0.0574065074, 0.1197008640, 0.0094095049, -0.0407164954, -0.1980184615, 0.1921044737, -0.1154886633, -0.1303258687, -0.0965398252, 0.0948162377, -0.0890624523, -0.1004895419, -0.1162171885, -0.0155312307, 0.1717608869, 0.2069174498, -0.0934676677, -0.1035744622, -0.0919362083, -0.0272558089, 0.1533472389, -0.0808019638, -0.2062646896, -0.0403525122, -0.0318752229, -0.0054603894, 0.0011542767, 0.0749272630, 0.0939132944, -0.1635795534, -0.0087572318, -0.0543418191, 0.2059264183, -0.0308857244, -0.2155177444, 0.1749048531, 0.0817424655, 0.0134990457, -0.0479583889, -0.0201248601, -0.0920061246, -0.0699676648, -0.1543349922, 0.1058721393, -0.1397069842, -0.2055252641, 0.0450637341, 0.0863516405, -0.0159417391, -0.1997487396, 0.1453579813, 0.0370650552, 0.2668541074, -0.0304244738, -0.0420356952, 0.0085343197, -0.1103659868, -0.1082001925, -0.1872263402, -0.0481047370, 0.0938591957, -0.0661942959, 0.0151695069, -0.1963563859, 0.0075316397, -0.1879506558, -0.1273290217, -0.1203911453, 0.0823360458, -0.1298368424, 0.0233868863, 0.0373784378, 0.0940742195, -0.2067465186, -0.1055450216, -0.1384255141, 0.1214558333, 0.0424542725, 0.0729247630, 0.0774112046, 0.1001878604, -0.0726064518, 0.1511112899, 0.0329148956, -0.1282474846, -0.0744568035, -0.0043235626, -0.0708772913, 0.1075173914, 0.0077390214, -0.1288938671, 0.0257915221, -0.0526766255, -0.0981622785, -0.0312822461, -0.2674561739, -0.1342157274, 0.2058612853, -0.1147482544, 0.2005447745, -0.0728813037, -0.1677544266, -0.2113474458, 0.1232573390, 0.1639630795, 0.0003429810, 0.0134559236, -0.2420611829, 0.1461993009, -0.0731294155, 0.0769180283, -0.0331085399, -0.0009736512, 0.0842168257, -0.0021091262, -0.0714740753, 0.1869394779, -0.0624747537, -0.1787485629, 0.0120266350, -0.1728309244, 0.1924781203, -0.0706654564, -0.1878341585, -0.0471485816, 0.2012442797, -0.0216311831, 0.0527647696, -0.1040124819, 0.1969782561, -0.1660238057, 0.2486985922, -0.1543501019, -0.1183665618, -0.0446477011, 0.0227364879, 0.0492810793, 0.0274771173, 0.0127924457, 0.0310359113, 0.1616218388, 0.0724535063, -0.2002384812, 0.0432072356, 0.0437006541, -0.1740071028, -0.1220749542, -0.1615707129, 0.1639568061, 0.0152253211, 0.0530141182, 0.0222079400, -0.0951305330, -0.2325029224, -0.1266290992, -0.0670427009, -0.1153402999, -0.0113594709, -0.2063753754, -0.2164349556, -0.0715734735, 0.0053388695, 0.0958312005, -0.1114081070, -0.1191069037, -0.0360745639, -0.2260001302, 0.0021589142, -0.0711115673, 0.1061013639, -0.1348887086, -0.0751930550, -0.0601378977, 0.1891870648, -0.0876400322, 0.1185298711, 0.0020823856, 0.1022864357, -0.1769304127, -0.0915954188, 0.1851432770, -0.0711012334, -0.0426203609, 0.0315940157, 0.1485053897, -0.0629210696, -0.1966956854, 0.1195522174, -0.0543661751, -0.0518733524, -0.0818193108, 0.1546491981, -0.0095303915, 0.0851858109, -0.0346380807, 0.1503446251, 0.0319652930, 0.1118421853, 0.1024959236, -0.0304177646, -0.2408282310, -0.2268712074, -0.0355824269, 0.0043926788, 0.1194955856, 0.1945979744, 0.1300190240, -0.2111674398, -0.1064722538, 0.1377662718, 0.0672538057, 0.2467030883, -0.1517229825, -0.0629796237, -0.0522980765, -0.0746960714, 0.1515929550, 0.0129439011, 0.2436256409, 0.0366479978, 0.0015563809, 0.0402194709, 0.1849347949, 0.2195244581, -0.0870558247, 0.1693213880, -0.2162787914, -0.0229229089, 0.0692024007, 0.2419296652, -0.2444748133, 0.0187916495, 0.0411286131, -0.0671117827, 0.0610091351, 0.1706016660, 0.0438373461, 0.0758172721, -0.0614743568, -0.0927712992, 0.0427441522, 0.0041230321, 0.2458832562, 0.0262144394, -0.1024412364, 0.0399286859, 0.1021128967, 0.2206151783, -0.2070048153, -0.2433390170, 0.0269565042, -0.2075581253, -0.2262126803, 0.0692307279, -0.0881146714, 0.1109982431, -0.0282491669, 0.0935478583, -0.1260095686, 0.1826133579, 0.0586047657, -0.0312462021, 0.1207076386, -0.0439034179, -0.0276268758, -0.1492745876, -0.0218262170, -0.0723832622, -0.0176703595, -0.1432629824, -0.0401462875, -0.0129758883, -0.2170269042, -0.0939529315, -0.0360231437, -0.2403638363, -0.0886577070, -0.1140570790, 0.0484959111, 0.0792974234, 0.0239208024, -0.1083195135, 0.2253806740, -0.0605041906, -0.0357908569, -0.0428289287, 0.0686243176, -0.0897336900, -0.0066245068, -0.0176615659, -0.0295948908, -0.2312899679, 0.0304690283, 0.1496051699, -0.2227661759, -0.0770771354, 0.1968439370, 0.1739079505, 0.1414350420, -0.0387669019, 0.1307603419, 0.0522291996, 0.2323880792, -0.0699710846, -0.0726704150, -0.0375615880, 0.0383967645, -0.1002451852, -0.2024409771, 0.1260768175, 0.0504616573, -0.2021500915, -0.1202271357, -0.2478137463, -0.2445641905, 0.1599805653, 0.1750000268, -0.1363791823, 0.1139541492, 0.0601489432, 0.0030138176, -0.0935821980, 0.0485043041, 0.0631574392, -0.1072179377, 0.0301795565, -0.1102486700, 0.0689528435, 0.1275818050, -0.1986033171, 0.1849136502, 0.0781969130, -0.1988639385, 0.0092057250, -0.0287955999, -0.0649846122, -0.0226736385, -0.1144157350, 0.0942402780, 0.0541233085, 0.0855112746, -0.1072877049, -0.0826616213, 0.0686061531, 0.0209676065, 0.1850627661, -0.0863054469, 0.0327758156, 0.0504499562, 0.1962151378, -0.1652581841, 0.0576856695, -0.0241499692, 0.0439351425, -0.2181481272, 0.0931153372, 0.1352311969, -0.1148897409, -0.2135843188, 0.0471026972, 0.0030598375, -0.0916702524, -0.1364670247, 0.1214235201, -0.0024678516, 0.1696487069, -0.0529831238, -0.1658633351, -0.0331940092, 0.0671525151, 0.0006367420, 0.0671392307, -0.1386437118, 0.0388123468, -0.0711684600, -0.2616951466, -0.0137667097, -0.2378757000, -0.0109172687, -0.0446970463, -0.0492485315, 0.0243576095, 0.2191933393, -0.1578314751, -0.0828394517, 0.0815249905, -0.0721593276, -0.0354338251, -0.0705316737, 0.0949682146, 0.1263590455, 0.1828610003, -0.0502647199, -0.0309456475, 0.1163416356, -0.1953257620, -0.1191139519, -0.0064823688, 0.0191742890, -0.1561820358, 0.0195380878, 0.1027865857, 0.1593971252, 0.0603571609, -0.0746986642, -0.0309298486, -0.1439242512, 0.1173632219, 0.1066656485, -0.0190127343, 0.0805030912, 0.0829050913, 0.0574495271, -0.1392749548, -0.0871286243, 0.1241696700, -0.1522617638, -0.0544738099, 0.0832543895, 0.1728070527, -0.1873517334, 0.2072472125, 0.1401312202, -0.1719837785, 0.0547945090, 0.0090738181, -0.0712724626, 0.1890306771, -0.1290787607, -0.2163577676, -0.0536610708, 0.0127282087, -0.0136404708, -0.0775882900, -0.0237603448, 0.0840783790, 0.2672603428, -0.0923462436, -0.0532599986, -0.0192811191, 0.0070454925, -0.0124753928, 0.0658180341, -0.2430703044, 0.0753226057, -0.2055747807, -0.0088039646, -0.0581499226, 0.2115245163, 0.1670219898, -0.0773537830, -0.2698216438, -0.1082187817, -0.0798053518, 0.0829886422, -0.1603773981, -0.2210972458, -0.0316677839, 0.0234222617, -0.1666414738, -0.1863158494, 0.0694437847, 0.0253994353, 0.0318192057, -0.1116364077, 0.0425502732, -0.1262614429, 0.0526145287, -0.0895718858, -0.1172997653, 0.1546069235, -0.0465181395, -0.0045354492, -0.1740288734, -0.0994179547, 0.1061617061, -0.2257137299, 0.0063677966, 0.0352150053, -0.1480568796, -0.1825571805, 0.1170377880, -0.1256759465, 0.0089532109, 0.1101444885, -0.0874869004, -0.1412674040, 0.0633245334, -0.0951823220, -0.0773352534, 0.1520285457, -0.0418625884, -0.0302182660, 0.0829446763, -0.0008022973, -0.0606458820, 0.0231118314, 0.2128634304, 0.0385933518, -0.1327051073, 0.0630296916, 0.2513846755, -0.0751620829, -0.0739207268, -0.0911302790, -0.1821859330, 0.0056071659, -0.0849132463, 0.0592803136, 0.1336235255, 0.1137987748, -0.0676416084, -0.1415090710, -0.0490290672, -0.0373695977, -0.0467115492, 0.1169415191, 0.1645284444, -0.1410120428, -0.0385014005, 0.0355131067, -0.1469765604, 0.1857642084, -0.0081427330, 0.1177121773, -0.0891924277, -0.2025315613, -0.0945050940, 0.1502121389, -0.0990520120, -0.0043914989, 0.0717666596, 0.0363817029, -0.2111437917, 0.0065317648, 0.0639473572, -0.0245418418, 0.0529479310, 0.1351280957, 0.1164584011, 0.1628307104, -0.2563724518, -0.0658149868, 0.2034991235, -0.0467713699, -0.0211964510, -0.1338382810, -0.0107169952, -0.0261192434, 0.0380822681, 0.0457022712, -0.1079041138, 0.1886113435, -0.1066895798, 0.1808179170, -0.1124771833, 0.0281313490, 0.1279131174, 0.0937477723, 0.0209789518, -0.0783838034, -0.1036818773, 0.1688480377, -0.0114624817, -0.0206456259, 0.0255015418, 0.1079782546, -0.0466311350, 0.1169482023, -0.1681720167, -0.1158731729, 0.0656864643, -0.2620310783, -0.2220981866, 0.2423581928, 0.2639302611, 0.1502508819, 0.1242227703, 0.0668034628, -0.0382501632, -0.0677565187, -0.1495029479, -0.0945012197, -0.0206851326, -0.0518583842, -0.0343792550, -0.0427838080, -0.0036620807, 0.0380809307, -0.0566447563, -0.1595778465, -0.1860537976, -0.0361879990, -0.1698890030, 0.1521389633, 0.0874710083, -0.0910763294, -0.0259815305, -0.1066489294, 0.1920646727, 0.0830266103, -0.0410203822, 0.0089133000, -0.0208599605, -0.2183054388, 0.0621501841, -0.0668331906, 0.0202626344, 0.1532399803, 0.0163435694, -0.0919813886, -0.2240251601, 0.2113014013, -0.2240927815, -0.0796070769, -0.1160753220, -0.0587302372, -0.1372585297, -0.1183416098, 0.1342029721, 0.1795444787, 0.0429174379, 0.1249647513, 0.1460129619, -0.0358127020, -0.2681148648, -0.0138436761, -0.0553049743, -0.0783870220, 0.0273580290, 0.1283502281, -0.1951533854, -0.1851279438, 0.1628459841, -0.0701779127, -0.0360616185, 0.0537124872, 0.0023268040, 0.1614655256, 0.1291332543, -0.0575176477, -0.0182099231, 0.1312285364, 0.1242407113, 0.2530506253, -0.0907177627, 0.0217103902, -0.0625856519, -0.1434319913, -0.0107418383, 0.0661511570, -0.0536990464, 0.0734936297, 0.1383465081, 0.0384761281, 0.1066267714, -0.0171124004, -0.1529287547, 0.0072661713, 0.0105195995, 0.0711253881, -0.0834267661, -0.0045770742, 0.0470001213, 0.1404511482, 0.0398792885, 0.0729660988, -0.1097102165, 0.1946730763, 0.0779388174, -0.1233937442, 0.1534332037, 0.1300520450, 0.1384427547, -0.0786521584, -0.0663305670, 0.0199871771, -0.1141259968, 0.0386245288, 0.1611896455, 0.0704840347, 0.0339167975, 0.1392778754, -0.2059830129, 0.0244082920, 0.2212726921, -0.0392920598, 0.0902931020, 0.0097487243, -0.0295456517, 0.0873417482, 0.0127357719, 0.1738777161, 0.0255053453, 0.1682418138, -0.2018071413, 0.1532104313, 0.1264039576, -0.0962020382, 0.1256238222, -0.0787078440, 0.1422632933, -0.0396927185, -0.2223223448, 0.0837923586, 0.0277646780, 0.0230616760, 0.0420332924, 0.0026622431, 0.1758363992, 0.1887500286, 0.0041812304, -0.1709925532, 0.1381501108, -0.0258106235, 0.0911115482, 0.0153525872, 0.0454791486, -0.0207518246, -0.0744535699, -0.0451287441, -0.0217699204, -0.0672722831, 0.0069313343, 0.1776447594, -0.1029694602, 0.1937160194, 0.1097851545, 0.0712121353, -0.0324650668, -0.1705121100, -0.1186036989, 0.0023956995, 0.1541532874, -0.1103610098, 0.1357785016, 0.2469511181, 0.0838979632, -0.0562580042, 0.0723949000, -0.0740771666, -0.1717054844, -0.0439980812, -0.1051056087, -0.0498900600, -0.0375215150, 0.0135033615, 0.1505823135, -0.1929292679, 0.1066891849, -0.0652497783, 0.2100863010, 0.1017075405, -0.0322989747, -0.1243414506, 0.0125343977, -0.0139019759, 0.0390968658, 0.1291887909, -0.0553951524, 0.0591789782, 0.0926980302, 0.0373176150, -0.0819534212, -0.0696453452, -0.0002920784, 0.0786926970, 0.1836951673, -0.1495099366, -0.0207388084, -0.0174641106, -0.0610645972, -0.1978552788, 0.0621716715, -0.0014841069, 0.0272579174, 0.1971142739, -0.1482914388, -0.1301555187, 0.0469115935, -0.2630223632, 0.1165360883, 0.0274993591, 0.1630780250, -0.0394895859, 0.0800192058, -0.0295877811, 0.0568842590, 0.0982556045, 0.0014927452, -0.0537364557, 0.0238671694, -0.0763324052, -0.1617549360, 0.0111271879, -0.2116481513, 0.0737718865, -0.0326103382, -0.0389883742, 0.0118144657, 0.1417872906, -0.2289415300, -0.0307044461, -0.0865648240, 0.2674210966, -0.0627167523, 0.0574661382, -0.0918176696, -0.0630219206, -0.1062706634, 0.0282129161, -0.0423756093, -0.1502136588, 0.1592983752, -0.1326874197, 0.1111174747, -0.1028992459, 0.0753133819, 0.1562270671, -0.0159981456, 0.0741851628, 0.0410999171, 0.2047359645, 0.1103726849, -0.1367961913, 0.0036203333, -0.0158979464, -0.1554519683, 0.0089432793, 0.1810770631, -0.0310000293, -0.1576547325, -0.0868042558, -0.1227783039, -0.0628023967, -0.0446627066, 0.2171071917, -0.0604285114, 0.1081778407, 0.1307744831, -0.0616505779, 0.1839267612, -0.0203817300, 0.0785506591, 0.0702420697, 0.2714272738, -0.1878439486, -0.0241339020, 0.0306234621, 0.0985292792, 0.0604757890, -0.2435440570, 0.0344517790, 0.1354099065, -0.2190012038, -0.1014157310, 0.0982946828, -0.0411860868, 0.0891063064, 0.0799181089, -0.0399825834, -0.0192942061, -0.1051163450, -0.1009880677, 0.0564878322, 0.1736882776, -0.1113174707, -0.0131449699, 0.0215189271, 0.0458661914, -0.1919853389, -0.0790790096, 0.0061147385, 0.2372647226, -0.0641616583, -0.0581734776, -0.0161602031, 0.1590851247, -0.0475445837, 0.1360350847, -0.0801598057, -0.0623067617, -0.2704005241, -0.1111068651, -0.0939235762, 0.1599921882, 0.1528054774, -0.1892616898, 0.0401078649, -0.0556140579, -0.0595105365, 0.1130453795, 0.0910430700, 0.1068569571, 0.1230890602, -0.2552845478, 0.0744556934, 0.0580131523, 0.0335891135, 0.0449343324, 0.1455384940, 0.0676958784, 0.2011191845, 0.2025190294, -0.1438682526, 0.0232889429, 0.2356784344, 0.1138080135, 0.0258011892, 0.2506390810, 0.1455112100, 0.2489772290, 0.1787032783, -0.1235610321, 0.0825040489, -0.0018947087, 0.0046011531, -0.1323159188, -0.1621892899, 0.1505052149, -0.1045970395, -0.0719543546, 0.0001783473, -0.2309697866, 0.1089335382, 0.0220968891, 0.0500336699, -0.1278017163, -0.0203728285, -0.0804007351, -0.0332818888, -0.0689827949, 0.0530576520, 0.0948685557, -0.0924943537, -0.1998847425, -0.0321429446, -0.1396595240, -0.2492059022, 0.1177897528, 0.0411049686, 0.0532005727, -0.0665825605, 0.2261203825, 0.1480662823, 0.1397622675, 0.0813253596, -0.0083277207, -0.0679520890, -0.2685673535, 0.1745248139, -0.1880514473, 0.0068434007, 0.1514506340, 0.0314093791, -0.1568255872, -0.1237306073, -0.0227715280, 0.0337687731, 0.1407544464, 0.2622396946, -0.2000095695, -0.0244953074, -0.1998331398, -0.0217398014, -0.1607499570, 0.1338740587, -0.1725930423, -0.0555460230, -0.0293638203, 0.1418352723, -0.1824692786, 0.0379247144, -0.0052908123, -0.1784915477, 0.0741691738, -0.0183967333, -0.0731355697, 0.0458938032, 0.0314650126, 0.0758295730, 0.0679966956, 0.2364081144, -0.1936052740, -0.1798055470, 0.2541381419, 0.0691259652, 0.0105934385, 0.0408135094, 0.0688220784, 0.2075515389, 0.1939246207, 0.1436762065, 0.0585446618, -0.0469367057, 0.0638303235, -0.0944423378, 0.1814528704, -0.0046683298, -0.1184789240, -0.0154194171, -0.0043629808, 0.2215135694, -0.1397603005, -0.0156519227, -0.1404870003, -0.1170234978, -0.2296779901, 0.0422280729, -0.2646339238, 0.0103205368, -0.2361563295, 0.2350277156, -0.2410482615, -0.0091963839, -0.2020742744, -0.0806395635, -0.1184357777, -0.0502762906, -0.0504818112, -0.1389548928, -0.1188784093, -0.1141943559, -0.1312208772, -0.0476940945, 0.1360713691, 0.1320685297, 0.0121087143, 0.0939118043, -0.0647999197, 0.0788462460, 0.0164871868, -0.0569659732, 0.1752891243, 0.0967220068, 0.0788022429, -0.2368248552, -0.0764393359, -0.1691598892, -0.1942858696, 0.2530852854, 0.0042289956, -0.0616124198, -0.0998308882, -0.0126903690, -0.0803326294, 0.2175486088, 0.0632315427, -0.0667495430, 0.1979285181, 0.1210486665, 0.0934500843, -0.1679632664, 0.1391070932, -0.0422035865, -0.1332502812, 0.1144299656, 0.0606476329, -0.0151100243, -0.0696133599, 0.1916590333, 0.1554611474, -0.0219245739, 0.0098221265, 0.0803569257, -0.1759506613, -0.1484474093, -0.1186566651, 0.0621063411, -0.0597392879, 0.1205367967, 0.2038215548, 0.2316790819, -0.0565985627, -0.0277328175, 0.1178661138, -0.2492573261, 0.0548611768, -0.2522747219, -0.1192744002, -0.1316741407, -0.1578269154, -0.2262142301, 0.0090579661, 0.0044975844, -0.0644257441, 0.0125013329, -0.0091980416, 0.0256171338, 0.1773461103, -0.1271542758, 0.2328110784, -0.0035389322, 0.0595485196, 0.0775282085, 0.0547862649, -0.0280839410, 0.1010383368, 0.0291829389, 0.1046936363, 0.1309329420, 0.0035608660, 0.1301625520, -0.2402965426, -0.0266469494, -0.1521185786, 0.0713802427, 0.0175545756, 0.1096475497, 0.0108853439, -0.0082385484, 0.0421781540, 0.0241625644, 0.0564462990, -0.1769144088, 0.1573058963, 0.0564736165, 0.1335245669, 0.0251544323, -0.1562241763, -0.1167842820, -0.0353046097, 0.0190589298, 0.1479218900, -0.2658278942, 0.0098473290, 0.0217330698, -0.1139299050, 0.0536898859, 0.1678854972, -0.1206949055, -0.0559546314, -0.1021014526, -0.0430853255, -0.0796190724, -0.1174480319, 0.0259484500, 0.1325079650, -0.2096338570, 0.0901462659, -0.0657005161, -0.0469042398, -0.0763434842, -0.0223746747, -0.0566602871, 0.0833612308, -0.1523364633, 0.0429210290, -0.1516245455, 0.0818380266, -0.2064090371, 0.1699349582, -0.0011301677, -0.1599462926, 0.0315589793, 0.0595278181, -0.0130075319, 0.0261855181, -0.1396796256, 0.0139925657, -0.0771677047, 0.0253824741, -0.1731822640, -0.0898016617, 0.1298525929, 0.0070377639, -0.0623060837, -0.0750613883, 0.0601245575, -0.0412999652, -0.0981784388, 0.1687267125, 0.0404836722, -0.0292826109, -0.0790976733, -0.1275319010, 0.0254333131, -0.0874364674, 0.0122037707, 0.0011053968, -0.1022614390, -0.1777672917, 0.0707499683, -0.2599467635, 0.1362436861, 0.1078217179, 0.0607699789, 0.0423405804, 0.0586715005, -0.0680322349, -0.0665726885, 0.2083143294, -0.0768953338, 0.0341160595, -0.0061607631, -0.0879591480, -0.2082104385, 0.0403429717, 0.1194891632, -0.0041787033, 0.0135160061, -0.0331094116, -0.1114192903, 0.1113373339, 0.1687480658, -0.0674864873, -0.0945011154, -0.0600266866, -0.0467700697, -0.2210784703, -0.0409530774, 0.0788867325, 0.0623822249, 0.0960461050, 0.1712355465, -0.0907349810, -0.1897398531, -0.0144642480, -0.1516638547, -0.1210895181, 0.0121033937, -0.0333858132, -0.0287689455, 0.0652551353, -0.0959541351, 0.1115027890, -0.0151157444, 0.1156570539, -0.0547906831, 0.0981735438, -0.0746285170, 0.1495118439, 0.0087196119, -0.0684541538, -0.0224304479, -0.0837705657, -0.0230727084, -0.1694907099, 0.2465648055, 0.2056860775, 0.0425252058, -0.1550973803, 0.1386211514, 0.1228356734, -0.1802610904, -0.0997322798, 0.0037115174, -0.0443088859, 0.0880706161, 0.0938427374, -0.0955095440, -0.1084328592, 0.2089247406, 0.0167357791, 0.1439228058, -0.0201830622, -0.1671782285, 0.0109305689, 0.0253445040, -0.1890052259, 0.1011173055, -0.1130825579, 0.0275660288, -0.0524421781, 0.1302502155, 0.0358512290, -0.1970487237, 0.1032061353, -0.1221598610, 0.1573194116, 0.0385578573, 0.0480698533, 0.0490545109, 0.0942955017, -0.1741319448, -0.1187563613, 0.1402306855, -0.0745533779, 0.1419347525, 0.1492265761, -0.0076103718, -0.1290393025, 0.0009928196, 0.0915150717, -0.0274371449, -0.0213600621, 0.0176768731, 0.0325997695, -0.1099092066, 0.0036263601, 0.0472436845, 0.0002255984, -0.1263888627, 0.0248697586, 0.0806508660, -0.0358128920, 0.1380819231, -0.0598119311, 0.1271292716, 0.0669510812, 0.1090356335, 0.0702211335, -0.1109362245, -0.1976849884, 0.1390268058, 0.1556156278, 0.2307791412, 0.0566133931, 0.0822822899, 0.2440232486, -0.0302384309, -0.0904363692, 0.1442571878, -0.1558961570, 0.0529737286, -0.2019128054, -0.0235996619, 0.1090664864, -0.0285806824, -0.2032715380, 0.2159772664, 0.0994116291, 0.1716207862, -0.1241892278, -0.1267488897, 0.1445611715, -0.0897548273, 0.0456402116, -0.1099782884, -0.0423879884, 0.0332478508, 0.1287204921, -0.1243636981, 0.1436590850, 0.0918425843, -0.0072333179, 0.0616972223, -0.1275040507, -0.0958906114, 0.2034277171, 0.2222909629, 0.1996059716, 0.1527548283, 0.0069293366, -0.0552319288, 0.1493188143, -0.1720762700, 0.1867780238, 0.1154901460, 0.1002163365, 0.0673190281, 0.0569785759, 0.1177761331, 0.0810164735, -0.1189211681, -0.0145951249, -0.0008515609, -0.1140852720, -0.0378755480, 0.1108668968, 0.1081260070, -0.1406842172, -0.1308256686, 0.1423547864, 0.1702954620, -0.0345496871, -0.1094893888, 0.2353121787, 0.1009625569, -0.1371001750, 0.0254256278, 0.0618373156, -0.0447266325, 0.0349150300, -0.1150901243, -0.0003078908, -0.2326250374, 0.1348505169, -0.1086735055, -0.0227075052, 0.0790150762, 0.0892020389, 0.0364951864, -0.0624506027, 0.0236817095, -0.1256303340, 0.0557239018, -0.0109074796, -0.0892735571, 0.0573813431, -0.1007276401, 0.0283941682, -0.1308289319, 0.0298387352, 0.0867550820, 0.1667740196, -0.0013101532, 0.0181283038, 0.1746995300, 0.0208126251, 0.1382399350, 0.0482471026, 0.1085045412, -0.0109129101, -0.1678460389, 0.0485724024, 0.0293357577, -0.0696540102, -0.0082270904, -0.0854029655, -0.1803114414, -0.1490563452, -0.1235064343, -0.1703808010, 0.1129380465, 0.0982622430, -0.1159617305, -0.1145486608, -0.1221532598, -0.0323162228, -0.0986524820, 0.1381924748, 0.0988365412, -0.0299676098, -0.2468278110, -0.1046065837, 0.0943638533, 0.0570751466, -0.0053245444, 0.1132359803, 0.0661854446, 0.1053562164, -0.1833225489, -0.0263847169, 0.1280900389, -0.0000133603, -0.1079880968, -0.0078337975, 0.1199190244, -0.2087648213, -0.1186295003, 0.0480028428, -0.1266480982, -0.0298086461, 0.2102919221, 0.0173321329, 0.0006174134, -0.0600556210, -0.0661710650, 0.0385448150, -0.1813924015, -0.1222631559, -0.0460916534, -0.0319144949, 0.1237979829, 0.0938380510, -0.1408892721, 0.0907378718, -0.1479170918, -0.1269211769, 0.0846679211, -0.2041198611, -0.0259265751, 0.1256825030, 0.1422938854, -0.1235456988, -0.1829474270, 0.0611442290, -0.1403531730, -0.1298733652, 0.0090311123, -0.0471628234, -0.0008603436, 0.0021968086, -0.0900244117, -0.0811163858, 0.0161084030, -0.0673948601, 0.1308588088, 0.0429500826, 0.0408891141, 0.0190107860, -0.0265251882, -0.1629341692, -0.0327275693, -0.2604972720, 0.0588494502, 0.0117712636, -0.1790035516, -0.2285088152, -0.0734759942, 0.0001720167, -0.0464049540, -0.1688990444, -0.0067369491, -0.0613309741, -0.0939768702, 0.0403263681, -0.0233485866, 0.2351712584, -0.1063665375, -0.1016635373, -0.0540730134, -0.0483275205, -0.2466223389, 0.0433066897, -0.0284500420, -0.0723899230, 0.1707251072, -0.0179304611, -0.0569644570, 0.1641540378, -0.0342472531, -0.0355690978, -0.0812529773, 0.1101668030, -0.1529591084, 0.2058290839, -0.0651978627, 0.0972663686, -0.2413510829, -0.1336421818, 0.0448758416, 0.2663836181, 0.0415250733, 0.0668463707, 0.1796799898, -0.1139286086, 0.0325411223, -0.1684437692, 0.1964836717, -0.0642741770, 0.1389040798, -0.0302684270, -0.0633669570, -0.1392430365, -0.0581161417, 0.0587634183, 0.0499910824, -0.1218644232, 0.0678659305, -0.1833440214, -0.0868830308, -0.0376753509, -0.1408097148, -0.2017354965, -0.1542811990, 0.1209603846, 0.0353199989, 0.0014247115, 0.0827789009, 0.1990048587, -0.0737276450, 0.0416971594, -0.1176059544, 0.0122616990, 0.2296643853, -0.0520436130, -0.0442443639, 0.1412845105, -0.0198378451, -0.1458810717, 0.1248864308, 0.0279640872, 0.0845698044, 0.1946084201, -0.1070336252, -0.0209071264, 0.1945414096, 0.1128709912, 0.0102868350, -0.0635174066, -0.1613289267, -0.1867208779, -0.1444945484, -0.0324041769, -0.0323398747, -0.0366695188, 0.1145103276, -0.1739027351, 0.0324072465, -0.0274488330, 0.0135886371, 0.0575314388, 0.1532881409, -0.1009209901, -0.0456005931, -0.0282283295, -0.1195415780, -0.1677617729, 0.2014480978, -0.0376579389, 0.2360175550, -0.1211200953, -0.1868869960, 0.1571498215, 0.0234575216, 0.0073410473, 0.0339690372, 0.2505817413, 0.0368888937, 0.0522224382, -0.1718165278, 0.0388059989, 0.0255774837, -0.0828164220, -0.0378485397, -0.0560322180, -0.1167897806, 0.1677800864, -0.0581488535, -0.1411789209, 0.1878700852, -0.0640350878, 0.0095432093, 0.1245199144, 0.0752039552, 0.1018297300, 0.0417439304, -0.0651289299, 0.0689586177, 0.0315811858, -0.0507266298, 0.0409559682, 0.1657911688, 0.0470090322, -0.0598545782, -0.0736153871, -0.1596994251, -0.0787467733, 0.0116565702, -0.0795329735, 0.0666632652, -0.1615537405, 0.1043978259, 0.0410430767, 0.1101083681, 0.1429435164, 0.1686093062, -0.1261999458, 0.2028564513, -0.0367216989, -0.0027705655, -0.1602856815, 0.0016469773, -0.1972977966, 0.0445096418, -0.1732132882, 0.1241708100, 0.0108436234, 0.1368294805, 0.0093393764, 0.0278768688, 0.0120185670, 0.0837344080, -0.0981730223, -0.2025811523, -0.1309373230, 0.1387719363, 0.0901587158, -0.0936101601, -0.1840716153, 0.1733711064, -0.0858386233, -0.0626456141, -0.2111143172, 0.0841232836, -0.2291038036, -0.0713324547, -0.0112084970, 0.0909963176, 0.0680135265, -0.0673717335, 0.1362349242, -0.1207932383, -0.1158930659, 0.1537072808, 0.0295185857, 0.1003398597, -0.0898512378, -0.0793105215, 0.0144428620, 0.0272650830, -0.0350244790, 0.0283962097, 0.0224011913, -0.2093464732, -0.0723054707, -0.0349723808, -0.0990808457, -0.0172979813, -0.1156149358, 0.0938744992, 0.0637348369, 0.0497237965, 0.0281120501, -0.1765715033, 0.0958785787, 0.0532301366, 0.1543073207, 0.1972145140, 0.1398276538, 0.1301587075, 0.1021394208, 0.0514116064, -0.1523789465, 0.0754530728, 0.0057710684, 0.2020669580, -0.0884229019, 0.0462032929, -0.0693295300, 0.1168814003, 0.1153199002, 0.0027714008, -0.1151882485, -0.0350910611, 0.0574122146, 0.0912668705, 0.1007781327, 0.1963547021, -0.1395179480, -0.2041495144, 0.0639100745, -0.1624285728, -0.0910277814, 0.0122036980, 0.2302800119, 0.1809131503, -0.2334611416, 0.0002690704, -0.1462060511, 0.2343471795, 0.1575494409, -0.0322215110, 0.0109440247, 0.1919897646, 0.1134441271, 0.1889772266, -0.2546695769, 0.1254285574, -0.1948583871, 0.1812761426, 0.0116045456, -0.0215914659, 0.1440990865, -0.0796334594, -0.1938651055, 0.0327253714, 0.1447066665, 0.0473173596, -0.1601102948, -0.0897215754, -0.0544403456, -0.0735682994, -0.2471824884, 0.1800694168, 0.1674664915, 0.1581962705, 0.0454847664, -0.1086077690, -0.0412686132, -0.0444084220, -0.0668261126, -0.0934144408, -0.1388131678, 0.2687724233, -0.2501040697, 0.1346567720, -0.0108111212, 0.1401391923, -0.0155300004, 0.0362138189, 0.0568153672, 0.0226447526, -0.1504855156, 0.0999263749, 0.0492691472, 0.0347331502, 0.1900002956, -0.0821401253, -0.0500044636, 0.0206005778, 0.2526360154, -0.0583270304, -0.0547006354, -0.2463658005, 0.1125319749, -0.0360568054, -0.0460684635, -0.1654743701, -0.0829754174, 0.0429845452, 0.2490066588, -0.0672519058, 0.2224289328, -0.0963001847, 0.2576293051, -0.0486891270, 0.1680120230, 0.2622865438, -0.1599569619, -0.0441719256, 0.1135302484, -0.0576960854, 0.0688399151, -0.1065340489, 0.0141911237, -0.0264055021, 0.2058572769, 0.0276047513, 0.1006033346, -0.0484519862, -0.0805737302, 0.0251259543, -0.1290781796, -0.1622104496, 0.1627084315, -0.0370676182, 0.0070414999, -0.0179090146, 0.1368208230, 0.0792742446, -0.0310553666, 0.0237025246, 0.2537569702, 0.1177996770, -0.0574102588, 0.1961719543, -0.0063082576, 0.0015265199, 0.1982675195, 0.0370907858, -0.0812349766, -0.1317361444, -0.2617063820, -0.1370488852, 0.0729069784, 0.1293486357, -0.0397711918, -0.1256203353, -0.1913673580, -0.0754090697, -0.0278138593, 0.0196214207, -0.0041472833, 0.1790883839, -0.0699208900, -0.1704989523, -0.2053257227, 0.0196070410, -0.1976964623, 0.1314159334, 0.0518420227, -0.0920440257, -0.0149410013, 0.0301845483, -0.1769582629, -0.2027539611, 0.0184108727, 0.1365718842, -0.0665569082, -0.0577962138, 0.1563839912, -0.1362967938, 0.1298327893, -0.0988655239, 0.0146309594, 0.2664430737, 0.0982909128, -0.0210754909, 0.0526575968, -0.0862102211, 0.0509795994, 0.1339055896, 0.0714598000, 0.2512020767, 0.2437638044, 0.1134693995, 0.0408415571, 0.0263293646, -0.0792292729, 0.1919478327, 0.0861274451, 0.0075732437, -0.0821591169, -0.1116535813, 0.0619858541, -0.0258665103, 0.0077215363, -0.1353884488, 0.0301992111, 0.0114891268, -0.0224567726, 0.1028569117, -0.0271224994, -0.2169044763, 0.0558078326, 0.2155327797, 0.1938704401, -0.0190989748, 0.0813839510, 0.0078358743, -0.0059337192, 0.1908000410, -0.1169633344, -0.0166783910, -0.0576784723, -0.1818259507, 0.0657103881, -0.0264756922, -0.0682770386, 0.0659635067, -0.0619012713, -0.1284037977, -0.0228275750, -0.0746595636, -0.0638766289, 0.0347314179, 0.0727475509, -0.1701835990, 0.1716568917, -0.0367885642, 0.0703943446, -0.0089506134, -0.0814354643, 0.0337518901, -0.0966418311, -0.0877105966, -0.0387150943, 0.0575016029, 0.1201153547, -0.0844599232, 0.1380995065, 0.0890765637, 0.1363271773, -0.0171238761, -0.0510249883, 0.0722981989, -0.0369436778, 0.1266754419, 0.0696916878, 0.0815251768, 0.0368165411, -0.1083605886, -0.0641195849, 0.0431056060, 0.1292335689, -0.0032596795, -0.0005233295, -0.0282379929, -0.1097704992, -0.0256764181, 0.1131183431, 0.1630397737, -0.1583429426, 0.0026806425, 0.0474982411, -0.1166251674, -0.0674420819, 0.0323652998, -0.0061568334, -0.0344742462, 0.0573052466, -0.0463939309, 0.1581278741, -0.0989036635, -0.1224011555, 0.0188339446, 0.1259138733, 0.0305623263, 0.0614952445, -0.1316131353, -0.2359447032, 0.1321645677, -0.2001895607, -0.1470052600, 0.0500903241, -0.1471185535, -0.0748448819, 0.1198615432, 0.1080577895, 0.0068580653, 0.0285203774, 0.0150269074, -0.0661545321, 0.0701575577, 0.0248140562, -0.0695455149, 0.1180929914, -0.1012764797, -0.0666861236, 0.2049448490, -0.0417664982, -0.0977756903, 0.1135992631, -0.0904790983, 0.0568388663, 0.0528999157, -0.0045927907, 0.0954962596, -0.0135635482, 0.0544338450, 0.0290646069, -0.1759863049, -0.0081316512, 0.1748971045, 0.2164159417, 0.1080091670, 0.1422801316, -0.0636845455, 0.1304511726, 0.0421794541, 0.1929878891, -0.0214202348, 0.0667062178, 0.0620237105, -0.0147605408, -0.0519173257, -0.0264474396, 0.1846798360, -0.0814324692, -0.0569921844, 0.1633530408, 0.0098900450, 0.2333306223, -0.1509690434, -0.0762125701, -0.1560257077, 0.0241691303, 0.1962230653, 0.0135826813, 0.0936514139, 0.1046802253, 0.0033106655, -0.0188847855, -0.1160543188, -0.0400403664, -0.1464934498, -0.0539611876, -0.2202576101, -0.1176685095, 0.1034158617, -0.1643393934, 0.0418847017, 0.1451720446, -0.0835930705, 0.1824286729, 0.2707447410, 0.0035318905, -0.0415339880, 0.1777592450, -0.2602230012, -0.1533788741, -0.0261286106, -0.1374792457, 0.0561186150, 0.1378421336, -0.1687168926, -0.0932705104, -0.2529381514, 0.0537140369, -0.0179758985, 0.0281751361, 0.1344100088, 0.1254627556, -0.0452810377, 0.2291260958, 0.2389997095, -0.0744506568, -0.1023631543, -0.0436489545, 0.0088764410, 0.1040712073, 0.0434004255, -0.0719294995, 0.0652159899, 0.0541263558, 0.0455635376, 0.0115999766, 0.1367747635, -0.0056002680, -0.0052810530, 0.1483090967, -0.0583238527, -0.2700719535, 0.1332570165, -0.0724065676, 0.0107089169, 0.2207596451, -0.0330719724, -0.1904749274, 0.0397148505, -0.1274138987, -0.0979546681, 0.0215731133, 0.0500675738, -0.0730056092, 0.0783707350, 0.1531859934, 0.0450065993, -0.0487373620, -0.1342431903, 0.1491493285, 0.0273354966, -0.0368702337, -0.1178710386, -0.0714891851, 0.0645060912, -0.0802880749, -0.1064258367, 0.1833350807, 0.0923511162, 0.0265278351, -0.1865141988, -0.0457987487, 0.1228051260, 0.0731161535, 0.1558732986, 0.2333336771, 0.0724203810, -0.0420099199, -0.0473692119, -0.0933564231, -0.1000831500, -0.0997226015, 0.1948084384, -0.1293610334, 0.0623621978, 0.0090126228, 0.1986444294, 0.1085417420, -0.1765595376, 0.0064313821, 0.0940426365, 0.0757677630, -0.0010467237, 0.1733298004, -0.0857561380, -0.1084593832, 0.0957823992, -0.1977224350, -0.0939729810, -0.0502066500, -0.0484118685, 0.1215257272, 0.1048747823, -0.1619159430, -0.1521859914, -0.0268305372, -0.1286210567, -0.1117011085, -0.0342237614, -0.0602149181, -0.2134384215, 0.0615852848, -0.0087191155, -0.0791894868, 0.0312355645, -0.2357873917, 0.1805037856, -0.0468917154, 0.2001912147, 0.1100347787, -0.0273707099, 0.1320065558, -0.1863949597, -0.1787158102, -0.0173147488, -0.0135227023, -0.1158092767, -0.1064129025, 0.0589268133, 0.0361349583, -0.1444250047, -0.0832045674, 0.1070309430, 0.1217382923, 0.1987855434, -0.1176411286, -0.1307064742, -0.2153338343, 0.0399637036, 0.0509463586, 0.1382100433, -0.1841800064, -0.1549140960, 0.1227041334, 0.0562060736, -0.1007940769, -0.1895168275, -0.1437620968, 0.0862227008, -0.0969745070, -0.0137795359, 0.0894907489, 0.0153684542, 0.2383216023, -0.1807348430, -0.1237381250, 0.1641067117, 0.1794777662, 0.2040993422, -0.0491852351, -0.0820907131, -0.1189785525, 0.1646430045, 0.0215571411, 0.1618525386, -0.0852937996, 0.1160866842, -0.1814457923, -0.0135766333, 0.0455509275, -0.0681733489, -0.0587500110, 0.0423451886, 0.1045460477, -0.0385914296, -0.1530629545, 0.0362651423, -0.1626663208, -0.0794874728, 0.0878515467, 0.0843578279, -0.1619258523, -0.1374952346, -0.0789239928, 0.0069283904, 0.0727424175, 0.0110715656, 0.0755999237, -0.1557550877, 0.0322304778, 0.2027033269, 0.2103564888, -0.0695152804, -0.1999268532, 0.1291320026, 0.0088429237, -0.1269909590, 0.0061676335, -0.0739947557, -0.0190578680, 0.1856087595, -0.0420083180, -0.0279834773, 0.0466541015, -0.0620817430, 0.0500031747, -0.2385561466, 0.0660993084, 0.0690937489, -0.0868473575, -0.0741203278, 0.2131572068, 0.1010240018, 0.0464962684, -0.2313037664, 0.0907242298, -0.1322676539, 0.1611907929, -0.1059054807, -0.0029428885, -0.1188066378, 0.0379684269, 0.0538060851, -0.0238130204, -0.0827056468, 0.0391635634, -0.0466244221, 0.0612435341, -0.1388310045, 0.0560758002, 0.0339067951, -0.1038595438, -0.2317010313, 0.1524902880, 0.0154205374, 0.1420635134, 0.0515199713, 0.0623959079, -0.0710513294, -0.2630295157, -0.2420819849, -0.1359996945, 0.0638908446, -0.1540680230, -0.0634288341, 0.1217658073, 0.1133110523, 0.0927846730, 0.0145124579, -0.1560342014, 0.0552237108, 0.1058476567, 0.0040974086, -0.0806478783, -0.0532634258, -0.1868204176, -0.2057585269, -0.2061513811, 0.1227871180, 0.2042317241, 0.2001855373, 0.0507541411, 0.0130295297, 0.0789604336, 0.1302051842, 0.2708832920, -0.0367364436, 0.1739209443, -0.0700833499, 0.0032614360, 0.1400745958, -0.0873016417, -0.1251435727, 0.1267021894, -0.0226451717, 0.0273277871, -0.0442082994, -0.0332711563, -0.2244186252, -0.2186460197, -0.1292252094, -0.1885103285, 0.0362876616, -0.1941461414, -0.0483145416, -0.0071711857, -0.1037359759, 0.0222766902, -0.0723635033, 0.1831529588, -0.0867454782, -0.2589077353, 0.1587690115, -0.0340117253, 0.2488242239, 0.0729525909, -0.1339981854, -0.1073865741, -0.0141305951, 0.0749355629, 0.1860547960, 0.0204210039, -0.0530749746, -0.1537459940, -0.2535610497, -0.2117726356, 0.0751136690, 0.0082004843, 0.0686416551, 0.1428128183, -0.0519273132, -0.2220035493, 0.0603821091, -0.2087017894, -0.1099865809, 0.0064498368, -0.1767050028, 0.0892903879, -0.0527113937, 0.0135051897, 0.0148033714, -0.0340516716, -0.2459132969, -0.1341267228, -0.0962222368, 0.0291136112, 0.1231063157, -0.1712774187, -0.0382697880, 0.0179945342, 0.1064954326, -0.0064311391, -0.0224941038, 0.1887929291, 0.1241925359, 0.2466078550, 0.1908435374, 0.1498038620, 0.1788918823, -0.2467580289, 0.0049519436, 0.0278469361, 0.1761911809, -0.0714339092, 0.1079827175, -0.1827890873, 0.0648647994, 0.0016005380, 0.0082792249, -0.1627604067, 0.0219586566, 0.0906072706, 0.1146145836, -0.0048560384, 0.0193374008, -0.0942270383, 0.0984357893, 0.0070860600, -0.0464385562, 0.0111453822, -0.0015773259, 0.1111900732, 0.1144970655, 0.0295222420, -0.0178858470, -0.0583328940, -0.1224341020, -0.1255074292, 0.0507367998, 0.1635085344, 0.0392423831, 0.0606104061, -0.0947775990, -0.0960681215, 0.0017403322, 0.1212326437, 0.1975536644, 0.1656261683, 0.2625526190, 0.0362062603, 0.1175495610, 0.0020687049, 0.0828606263, -0.1365379095, -0.0693658143, 0.2239361405, 0.0790887922, -0.0446649864, 0.1674607396, -0.0466675460, 0.0160880703, -0.1468600929, 0.2157004625, -0.2663798034, 0.0741906688, 0.0326832160, 0.1027151421, 0.1192892268, 0.0450367443, 0.0857859552, 0.0080218371, 0.2676582932, -0.0989646241, -0.2427895814, -0.1338948011, -0.0504646711, -0.0889913291, -0.0987906903, -0.0591508411, -0.0208256654, -0.2268844098, -0.0950828046, 0.1444650888, 0.0488705710, 0.0046790550, -0.0175913293, -0.2284396142, 0.0509930961, -0.2230934203, -0.2404458970, -0.0432883129, -0.0235141665, -0.1210572943, -0.0220821295, -0.1840078086, -0.0098653780, 0.0485871062, -0.0138061875, -0.0152948778, -0.1152464226, 0.1787461489, 0.0775431246, -0.0363932662, 0.0868798569, 0.0395562313, -0.2041273415, 0.0260517076, 0.2048655897, -0.2545534670, 0.2206738293, 0.1185206473, -0.1878301799, -0.0505525731, -0.0754387602, 0.1113662422, 0.1197192445, 0.2259180099, 0.2101766616, 0.0964567959, 0.1632727832, 0.0887650251, 0.1532205790, 0.1450513601, 0.2506767213, -0.0985446349, -0.2508407831, -0.1162381768, 0.0881865844, -0.0666419864, 0.0408215225, -0.0408616513, -0.0857284144, 0.0788998678, -0.0950680748, 0.1674000174, -0.0193657372, 0.0173454937, -0.0934980437, 0.1290434748, -0.1418073475, 0.0588792227, 0.0334980972, 0.2572760284, 0.1980113238, -0.0161643829, 0.0118586216, -0.1017336920, -0.1956244260, 0.1033356413, -0.0413570181, -0.1304096878, 0.0320857763, 0.2486601323, 0.2143124491, -0.1289154142, 0.1748239398, -0.0543172732, -0.1313734949, 0.2496192306, 0.0581581034, -0.1454147398, 0.0557021238, -0.1458175778, -0.1815304011, 0.0457198285, 0.1718183309, 0.1051810086, 0.0544491597, 0.1865155846, -0.1298676431, -0.0622870661, 0.0229542498, -0.0371553041, -0.1399338096, 0.0934963822, -0.2029270232, -0.0264855754, -0.1034008190, 0.1975477636, 0.0319266394, 0.2290837467, -0.1501062512, -0.0805172920, 0.0542353764, -0.0426739231, 0.0630019531, 0.0419635177, 0.0150114847, 0.1065057591, -0.1895294189, -0.0303371064, 0.0748998672, 0.1398047358, -0.0662129968, 0.1457411051, 0.0955036432, -0.0954954922, -0.1047921330, 0.0783954337, -0.1104126722, -0.0725362450, 0.0651154444, 0.2584241331, 0.1965507418, -0.1229669824, -0.2004957795, -0.1048559174, -0.1234327406, 0.2175160944, 0.2053539604, -0.0924682021, 0.1023673192, -0.0373234674, -0.0530711897, 0.0135028698, 0.2687783837, -0.1125800088, 0.1765430272, -0.0685095564, 0.0269482993, -0.0979803950, 0.0334625877, 0.1136020869, 0.1001662835, 0.2469792664, -0.1407479197, 0.1733164787, 0.2052685767, 0.1082848087, -0.1469516009, 0.0673744604, -0.1175792441, 0.1319977343, 0.1278109401, 0.0794764459, 0.0580664091, 0.0473782942, -0.0126538370, -0.1463119537, -0.1561187804, -0.1497632414, 0.0509782024, -0.0226348341, -0.1636751145, 0.2688534260, 0.1885490119, 0.1784343272, 0.0955557674, 0.0893838331, 0.0006823881, -0.0569770485, -0.0453602001, 0.1570303738, -0.1856894344, -0.0779767111, 0.0439622812, -0.1072365493, -0.1739912629, -0.0078161191, -0.0192884449, 0.1138752028, -0.1197627783, -0.1832437813, 0.0277468022, 0.0609408617, 0.0468295440, -0.0532959960, 0.1130332127, -0.0032335802, -0.2592964470, -0.1673253179, -0.1753312647, -0.0678503811, -0.0488816649, 0.0765395239, -0.1942819953, 0.0156047866, -0.0316474326, 0.0252964888, 0.0782147124, 0.0624389276, 0.1840317845, 0.0180545785, 0.1043205634, 0.1123477370, -0.0303324778, 0.2714571357, -0.2174275219, 0.1520131826, -0.0432404652, 0.0086113084, 0.0892254040, -0.0121336663, 0.0987149552, 0.0632270426, -0.2562536597, -0.1559151411, -0.1335097700, -0.0484211110, 0.1201598048, 0.1149816141, 0.0216013435, -0.1155823395, 0.0314932689, -0.2620370388, -0.0306790359, -0.0739561990, -0.0176672973, 0.0797787905, 0.0627184659, -0.1412135363, -0.2021443546, 0.1560449749, 0.1231754869, -0.0064545125, 0.1290522069, -0.1524479091, 0.0019531953, 0.0834040865, -0.1246711835, -0.0428732783, -0.1209281459, 0.1352264583, -0.0088061867, -0.0325209647, -0.0820023492, 0.0458243601, -0.0643179119, 0.1864779592, -0.0538858064, -0.1420763135, -0.1368670911, -0.1294120401, -0.1263110638, 0.0125072459, 0.1429691762, 0.0122730471, 0.0136282844, 0.2371566892, 0.0692476332, 0.0066906516, -0.1888118088, -0.0150774326, -0.1581553370, -0.1023612171, 0.0857784674, -0.0081627090, -0.1163811982, 0.0197990928, 0.1320636570, -0.1977911592, 0.1654178798, 0.0408708490, 0.1554407328, 0.1248509884, -0.0090710912, 0.1044294015, 0.2633186877, 0.0174806230, -0.2212650776, -0.0438760556, -0.1923145950, -0.0688834786, 0.0098752333, 0.0748767629, 0.0132289603, -0.0307631046, 0.0333417356, -0.2095171958, 0.0649919063, -0.1155076176, -0.0010892507, -0.1259265244, -0.1782312840, 0.2237883061, 0.0877074972, 0.0761096999, 0.0531164967, 0.0627799630, -0.2137630582, -0.0621019416, -0.2021399885, 0.0302341171, 0.1683323681, 0.0648390204, -0.1024004743, 0.2203492969, -0.1287053227, -0.2256150544, -0.2079272419, 0.1042884663, 0.1218807772, -0.1151070222, -0.0878654569, 0.1228735596, -0.1716015488, 0.1790611446, -0.0486838520, -0.1499754786, -0.0698208809, -0.0454009399, -0.0450736918, -0.1439596564, 0.0059581040, 0.0560882427, -0.0395219848, -0.1374754608, -0.0341194496, 0.1075770408, -0.0606697202, 0.1449539959, 0.1117340401, -0.1091218591, 0.1339908689, -0.0726698786, 0.1506536007, 0.1741935760, -0.0802831724, 0.0043069078, 0.0155634331, -0.0860755369, -0.0496674739, -0.0253421515, 0.0191171262, -0.0221265517, -0.1013175175, 0.0041559017, 0.0859554857, 0.0260976087, 0.0833771601, 0.0197749846, -0.0474386141, -0.0640642941, 0.0203476734, 0.1182368472, -0.0621594712, -0.0965015441, 0.1255049855, 0.1115208268, 0.2132657915, -0.0706315190, 0.0207517091, 0.1534076780, 0.0815522447, 0.0333844721, -0.0701780468, -0.0063008242, -0.2478046864, 0.0486445278, 0.0087437546, 0.0148313344, -0.1991299242, 0.0392102972, 0.0129595939, 0.0488013588, -0.1818125993, -0.0847419575, -0.1098280102, -0.1195318997, 0.1093311459, 0.1775159687, -0.0011632540, -0.1507924348, 0.2620405555, -0.2261493802, -0.2082432806, 0.0733282566, 0.0780549496, 0.1646123528, -0.1265564561, 0.0447050445, -0.2101107538, -0.1549211740, 0.1621686518, 0.0911160633, -0.0649700016, 0.0619971007, 0.0886944607, 0.0050094826, 0.1025225818, 0.1412883699, -0.1852903813, 0.1312869787, 0.1136024594, -0.0655596405, -0.0141793313, -0.1378507167, -0.1947232634, -0.2438930720, 0.0571321584, -0.0331579857, -0.0542773306, 0.0589089356, -0.1276261508, -0.1514487416, 0.0133601241, 0.0255825128, 0.0428778119, 0.0425127968, 0.1321702749, -0.1785858572, 0.0263477396, 0.1080641747, -0.2054104358, 0.1575723439, -0.1998608261, 0.1239376441, -0.2289132774, -0.0208096635, -0.0544897504, 0.0447879434, -0.0169820990, 0.0148718124, 0.1663342267, 0.0751489773, -0.0343656652, 0.1197812781, 0.0713160038, 0.0071041193, -0.2316481918, -0.1418427676, -0.0848280266, -0.1174582541, 0.0720037892, -0.1096468270, -0.1030669659, 0.0412283279, 0.0752185807, 0.1056626514, -0.0604903735, -0.0673838928, 0.0157275796, 0.1125783622, -0.1266978383, -0.0188745465, 0.0846231878, 0.0911025330, 0.0429579765, -0.0475827344, 0.0672763363, -0.0574387275, 0.0195174124, -0.1116845533, -0.1040109694, -0.0833140016, -0.0003696358, -0.0785571188, 0.1517847180, 0.1022230983, -0.0523799360, -0.0865901858, 0.0222327281, -0.1389249861, 0.1323198974, 0.1028294340, -0.0558659658, 0.1003540531, 0.0962538794, -0.0610617362, 0.0033933099, 0.1345355511, -0.1347875297, 0.2682054937, 0.1086017862, -0.1243169606, -0.0233411491, -0.0945195332, -0.0974735096, -0.0228711721, 0.1005343720, 0.0857193023, -0.0610715002, -0.2026407868, -0.1874559969, -0.1769009233, -0.1238376573, 0.0217194408, 0.0954775214, -0.0285501704, 0.0353338793, -0.0787880421, -0.1631618738, -0.1895423234, -0.0741971806, 0.0008998993, -0.1187314242, 0.1086420268, 0.1982299984, 0.2560931444, -0.0580993146, -0.0014394566, 0.1549098045, 0.0821329877, 0.1665636152, 0.2118841559, 0.0962898210, 0.0497570671, 0.1391209066, 0.0407615043, -0.1061976478, -0.0994447321, -0.1852719933, -0.1253635585, -0.0018278926, -0.0113905733, -0.1693191975, -0.0560009666, -0.2351420224, -0.1170041263, 0.2174345404, -0.0623740777, -0.1045122221, 0.0508114174, -0.1245872602, 0.0956673548, 0.0456985272, 0.1470796168, -0.1820258796, 0.0548631921, -0.0466486402, 0.0408980325, -0.0124182245, 0.0066756341, -0.2359355390, 0.0549951382, -0.0054061953, -0.0122469794, 0.0260400735, 0.0520334244, -0.1034441143, 0.0360583775, -0.0312409308, -0.1273678392, 0.1461783350, -0.0583909899, 0.1405431032, 0.0926392823, 0.1517435610, -0.0138554992, -0.1273212582, -0.0211759154, -0.0029991774, 0.0663732365, -0.2418894768, 0.0027374134, -0.0789469108, -0.2115794569, -0.0495731644, -0.1285775155, 0.0088978279, 0.0598089620, 0.0326804258, -0.1022249460, -0.0669801906, -0.0344421603, -0.0793265551, 0.1307541430, -0.1157574356, -0.0026178525, 0.1020148695, 0.0963742509, -0.0954937413, 0.1811672598, -0.0789074972, 0.0225185603, 0.0011084505, -0.2313739061, -0.0527683422, 0.0428553373, 0.1056799889, -0.2256146967, -0.1814731508, 0.0719174072, -0.1256708354, 0.0397670977, 0.1564423740, -0.1854562163, -0.1561765820, 0.1542328596, 0.0960734934, 0.1242058203, -0.1642449498, -0.0801224113, -0.0315477327, 0.2017629892, -0.0739893168, -0.1136021763, -0.1028006747, 0.0702265650, 0.1498214900, 0.2073269635, 0.0094586620, -0.0230669677, -0.1159021631, 0.1711341441, -0.1266482025, -0.1093710065, -0.0148227466, -0.1852948219, 0.0591770373, -0.1639994383, -0.0850327536, -0.1391756535, -0.1024597436, -0.0793514922, 0.1183851883, 0.0679663047, -0.0081512081, -0.0780038387, 0.0048796567, -0.0012549857, 0.1412757486, -0.0345363989, -0.1009860933, -0.1421947628, 0.0674392134, 0.1351183355, -0.2011906803, -0.1118068025, 0.0463025793, 0.1393157989, 0.0398949981, -0.1644652188, -0.1523316801, -0.0012052231, -0.0057879393, -0.0364181325, -0.0904833004, -0.0144881159, -0.0926071256, -0.0264553707, 0.0706462637, 0.1929192096, 0.0704564229, 0.2056440860, -0.1612059772, -0.0376237892, 0.2555319965, -0.0395767093, 0.0850054920, -0.0210310295, 0.1502928585, -0.1549817622, -0.0606535710, 0.2636502385, -0.1668099463, -0.1896615326, -0.1470412761, 0.0138816023, -0.1459517628, -0.0961986408, -0.1392411292, -0.1489120573, 0.2458007336, 0.0285833795, 0.1048303470, -0.1286665201, 0.0575295575, 0.0316667370, 0.0771774501, -0.1174995080, 0.0915521681, -0.0043371082, 0.0352488719, -0.0551421605, 0.0411498472, -0.0881386176, 0.0345073417, 0.0839367136, -0.2047240734, 0.0438769199, 0.0637538508, 0.0247780103, 0.0674847439, 0.0711509511, -0.1924815476, 0.2393875420, 0.0622983575, 0.0100269569, -0.2042485327, 0.0386579670, -0.2327886224, -0.1581581235, 0.1319162250, -0.0838333443, 0.1221028641, -0.1019493639, -0.0770291761, 0.0913184434, 0.0204557627, 0.2057067454, -0.0060550715, -0.0077858754, 0.1793229133, 0.0467585139, 0.0803462490, -0.1702107638, 0.0139835356, 0.1462698579, -0.0722279176, -0.0440576561, 0.0752702132, -0.1213540882, 0.1227864325, -0.0382329971, -0.0607451126, -0.2403243035, -0.1002528667, -0.2260717899, -0.0600711107, 0.0203723460, -0.0133492863, 0.1884821206, 0.1555982530, -0.0656395778, -0.1116968691, -0.1706681848, -0.1223605797, -0.0491400212, -0.1420501620, 0.0051081185, -0.0254841223, -0.1678760797, -0.0523523986, -0.1201333851, -0.0769393519, -0.0745219439, 0.1795713454, 0.0498456024, 0.2505544722, -0.2073551565, 0.0974498689, -0.0521271937, -0.0116465259, 0.0576062873, 0.0715692788, 0.0601096340, 0.0505326129, 0.2081677914, -0.2178199291, -0.0106754303, -0.0757792965, 0.0877714753, -0.2074016184, 0.1297449172, 0.2072888017, -0.2338558435, -0.1241432205, -0.0557470396, 0.0047212122, -0.0548871122, -0.1556005031, 0.2552415133, -0.0822246000, 0.1488077193, 0.1099088565, -0.0297643803, 0.0224593207, -0.1234302223, 0.1168126911, 0.2108183205, 0.0221152343, 0.0001732867, -0.2258307785, -0.1078110263, 0.0158011764, 0.1354856789, 0.1284865290, 0.1226019114, 0.0880518258, 0.0356361568, 0.0319668390, 0.1354778111, -0.0045475252, -0.2055943161, -0.2047988325, -0.0157599114, 0.0591754988, 0.0571134053, 0.1031896099, 0.0759319440, 0.1680912226, 0.0007600806, 0.1512535512, 0.1821258366, -0.2601969540, 0.0966471881, -0.0794518515, 0.1349801570, 0.0167110022, -0.0436608270, 0.2550977767, 0.0107189203, -0.1679982394, -0.1455351859, 0.0312888585, 0.0164642632, 0.1402010620, -0.0833489224, -0.1899489760, -0.1350256950, -0.1804244220, 0.0114797065, 0.0234412290, 0.0280177929, -0.1232698336, 0.0122138234, -0.0032095502, -0.1966969669, 0.0219494179, -0.1268880814, 0.0777821019, -0.0415989272, -0.0724664629, 0.0698789582, -0.0308469627, -0.1146894991, -0.2673774064, 0.0221602898, 0.0022892440, 0.0789429471, 0.0155805582, -0.0769133046, 0.0002144899, 0.1446276456, -0.1411558837, -0.1081804708, -0.0590452962, 0.0971902609, 0.1408681273, -0.0521655232, -0.1331173927, -0.1106193140, 0.0563071482, 0.0888633206, 0.0061277454, -0.0939456969, -0.1505260617, 0.0590714104, -0.0273770560, 0.0976136848, 0.0884757787, 0.0441820249, 0.0595123805, 0.1044548303, 0.0040663686, -0.0769634172, -0.1025493518, 0.1868041903, 0.0157667473, 0.1723004729, -0.0417837948, 0.0245911982, -0.1714125276, -0.1308732629, -0.0281406362, 0.0746784881, -0.0103603574, 0.1161384583, -0.0775640756, 0.1890005022, 0.1292006671, 0.0556907468, -0.2081343085, -0.0055054156, 0.1804822534, -0.1519069970, -0.1767438352, 0.0300587025, 0.0444215834, -0.0582065955, 0.2179399133, -0.1215178818, 0.0866951793, 0.1475111246, 0.0154060088, 0.0326961689, -0.0647495165, -0.1957928091, -0.0865258276, 0.0895427242, -0.1681329012, 0.0405339375, -0.0327149183, 0.1411691010, -0.0830299631, 0.1116638035, -0.0942235440, 0.0145423859, 0.0031235293, 0.0130054047, 0.0750758424, -0.1027676240, 0.1185149476, -0.0093218228, 0.0003975525, 0.0833224133, -0.0071189576, 0.0547797494, 0.1385411918, 0.1476257443, 0.0103023713, -0.2256280184, -0.1451047510, 0.0070788325, 0.0802872553, 0.0248174127, 0.0339649133, 0.1145614758, -0.0571610704, -0.0371262245, -0.0230060034, -0.1855804622, -0.1758900583, 0.0429434516, -0.0551352426, -0.1014182344, 0.0920701548, 0.1380764246, 0.1331418455, -0.0397115052, -0.0546895750, 0.0941559151, 0.0770504102, -0.0517638922, -0.1388503909, 0.0401354618, -0.2186112553, -0.1045257747, 0.0676663369, 0.1011790782, 0.1321692616, -0.0023397349, 0.1007783413, -0.0333671123, 0.2196182162, 0.0783773512, 0.0049460293, 0.0501377992, -0.0872577280, -0.0764310062, -0.1109451950, -0.2080107182, 0.0533110648, -0.1452664882, 0.0592829213, 0.1466121525, -0.1073712111, -0.1316364557, 0.1187325567, -0.1146740913, 0.0573003255, 0.2363282740, -0.0148580903, -0.1679915488, -0.0458145700, 0.0616543107, 0.0705292970, 0.1833284199, 0.2318346798, -0.0855602473, -0.1013721302, 0.1956344396, 0.0278382674, -0.0131143015, 0.2138384283, 0.0985911936, -0.0539047867, 0.0322464705, -0.1715847403, -0.1878452897, 0.1416569650, 0.0310216360, 0.0580350608, -0.0822780952, -0.2199509442, -0.1295948774, -0.0013202361, 0.2209371030, 0.1037690938, -0.0004840679, 0.0660478398, 0.2125994265, 0.1612034589, -0.0308020450, -0.0823326483, 0.1062311605, 0.0896350965, -0.1292631775, -0.1941091418, -0.0551526621, -0.0853702724, -0.1154376194, -0.0183340758, 0.0195165090, 0.2077126503, -0.1402954608, -0.0467209257, -0.2050915360, 0.0707209632, 0.0127301626, -0.0999201015, 0.0709518716, -0.0812224671, 0.0943514705, -0.0581763387, -0.0587868653, -0.2171535939, 0.1666222513, -0.0119844861, 0.0617755540, 0.1696458161, 0.1112004817, -0.0252388548, 0.1355559379, 0.1505812407, -0.0199371241, -0.2353169322, -0.2502634823, 0.1652740389, -0.0255748946, -0.0448045619, 0.2237946391, 0.0039468757, 0.1964767128, -0.0544323511, 0.0933836699, 0.0586887561, -0.1555636525, -0.1421570182, -0.1199661940, -0.1440431774, 0.0808974206, 0.1366790831, -0.1125779599, -0.0853923485, -0.1383045018, -0.1381278634, -0.1491188407, -0.2509817779, -0.1276899725, 0.0279181190, -0.1402472705, -0.0981268138, 0.1687652916, 0.0377257429, -0.0485230535, 0.0300235730, -0.0156130400, -0.0766400024, -0.1949726790, 0.0509979986, 0.1907112300, 0.1789673865, 0.0817942917, -0.0723571703, 0.1710798889, 0.0740606338, 0.0266826134, 0.0301117711, 0.0216499157, 0.1689328104, 0.0569652431, -0.0066423966, -0.1235139444, 0.2614672780, 0.0684375241, -0.0117827458, -0.0476675183, -0.1578882337, 0.2172295004, 0.2090978324, -0.1121583059, 0.0166169144, -0.1118956059, 0.1251279414, 0.0500552543, -0.0411187038, 0.1072238833, 0.1433117539, 0.1584983766, -0.2051551491, 0.1616357416, -0.0146730375, -0.0115728779, 0.0387899950, 0.0741392598, -0.2096378654, -0.0057435157, 0.1396867037, -0.1775625795, 0.1186923534, -0.2289296389, 0.0042413343, -0.1226711273, 0.0256186742, 0.2419429868, -0.1911113858, -0.0073294495, -0.1081797257, 0.1081259623, 0.1449232846, -0.0160677359, 0.1431329101, -0.1247738302, -0.1527625620, 0.1386270970, -0.0838585049, 0.2470766157, 0.0839779004, 0.0539304167, -0.1186645031, -0.1911667883, -0.0232527349, 0.1180080548, 0.0939989388, 0.2441175580, 0.1178221852, 0.1740090549, 0.0443682037, 0.0735185742, -0.0097813923, 0.0788594559, -0.1077674627, -0.1422570050, 0.1715907007, -0.0651875064, -0.1553380787, 0.1395245045, 0.1638920307, 0.0781470090, -0.0838335752, 0.1955874413, -0.0336521938, -0.0373781547, -0.1335833222, 0.0889940262, -0.1112135276, -0.1442376077, 0.1962425709, -0.0038846817, -0.0102976449, 0.1338499188, -0.1175225005, 0.0294840429, 0.1028299853, -0.2411540598, -0.0805161446, -0.0522356927, 0.1943244189, -0.0866956115, -0.1010959521, 0.0575715937, 0.0117653720, -0.1548504382, -0.1108553633, 0.1590602100, 0.0920562446, 0.1799963266, -0.0993950665, -0.0040939916, 0.0050037503, 0.1106600836, -0.0644286051, -0.2510158718, -0.2058329433, -0.0569704808, -0.1066711843, -0.0576382019, 0.0273377392, -0.0975271985, 0.0242345165, 0.1474585384, -0.0893796459, -0.2124166638, -0.1324166059, 0.1270578206, 0.0795223787, -0.0444554165, -0.0032877987, 0.1198297888, 0.0275773313, 0.0664791018, -0.1060290560, -0.1079419106, -0.0917920098, 0.0781140924, -0.1639215797, -0.1351938546, -0.0277205091, 0.2272468060, 0.2572346032, 0.0973816812, 0.0889124125, 0.1158253625, -0.2407853305, -0.0602975301, 0.1171075106, 0.1354070455, 0.1885666996, 0.1605163962, -0.0093956394, -0.1153167114, 0.0400612764, 0.1388653964, 0.0458523594, -0.0742962509, 0.0689495802, -0.2096890658, -0.1052079052, -0.1586829871, -0.2517338097, 0.0723286048, 0.0970110670, 0.0141726453, 0.1074810848, -0.0449897908, 0.0032844534, 0.2266829759, -0.0364946984, -0.1479235142, 0.1909394264, -0.0334264413, -0.0473495834, -0.0400867499, 0.0223281197, 0.1277748495, -0.1616355479, 0.0296487119, -0.0947550982, 0.0031736940, 0.0080218874, 0.0110792462, -0.2358654290, -0.0560076460, -0.0715133995, 0.0681162253, -0.1423413754, -0.1998371482, -0.1635134369, -0.0114707351, -0.0723476931, 0.0124277202, -0.0257711597, 0.0522793047, 0.2443676591, 0.0294306576, 0.0887780711, -0.0206905641, 0.0786126554, -0.1800070405, 0.0947813690, 0.0008000390, 0.1521157324, -0.0868204013, -0.0276399180, -0.0880930498, 0.0716032907, -0.1649054587, -0.0798919722, 0.0573345423, -0.0313273109, -0.1270797104, -0.0329589956, 0.1344395131, -0.2677409053, -0.1598353386, 0.0637603328, 0.0748263672, 0.0866920203, 0.1130295992, -0.0563955866, 0.1700095087, 0.1471325755, 0.0432058088, 0.0156110786, -0.0094246147, 0.0670432821, 0.1202380434, -0.1345702410, -0.0520687699, 0.0815301761, 0.1144453436, -0.2680601478, 0.2006021589, -0.0228300672, 0.0744091049, -0.0343613997, -0.0571226515, -0.2158696651, 0.0029069404, -0.0504651256, -0.0428080298, -0.1986046284, -0.1668531001, -0.1167078093, -0.1108184904, -0.0506556034, -0.0641906038, 0.0705965236, 0.0538554005, -0.1017685682, -0.0094639976, -0.0902155042, -0.0110227764, -0.1512650698, -0.2143348902, -0.1223929971, -0.1627402306, 0.0435549244, 0.0663482919, -0.0380351469, -0.1725205332, 0.1980882883, 0.1534490138, -0.1264143884, -0.1436950117, 0.1947178096, 0.0433235243, -0.1260042340, 0.0528724268, 0.1189028770, 0.1569534838, 0.1061344743, -0.0055711954, 0.1094927415, -0.0221732743, 0.0979744270, 0.0536363386, -0.1463966966, 0.1609417945, -0.0619676597, 0.1517724991, -0.0029417579, 0.1147834882, 0.1990284920, -0.0334290229, 0.1329136044, 0.1043000147, -0.0901880637, 0.1146028116, -0.2598150074, -0.0024228492, -0.0118132532, 0.0844556689, -0.1586019248, -0.0622413419, 0.0723087490, 0.1343627423, 0.0092718992, -0.0604784079, -0.0259207338, 0.2037221044, 0.2010748535, 0.0102582052, -0.1393592358, -0.0982723385, 0.1674893200, -0.0339295007, -0.1147036776, 0.1164228022, 0.2108426988, -0.0258173961, 0.0121579990, -0.0738392249, -0.0327829272, 0.0655061752, 0.0668990985, -0.0027011677, 0.1065557823, -0.0748856440, -0.0658621788, -0.0282274410, 0.1345046461, -0.0635439605, 0.1276658177, 0.0517267585, -0.0862205848, 0.1165701821, -0.0901537761, -0.0347700119, 0.1053729206, 0.1782818139, 0.1030940935, -0.2202465087, -0.1863690764, 0.0830628127, 0.1301670969, 0.1052715704, 0.0662349612, 0.0591449104, -0.0410724953, 0.0691740438, 0.1096408293, 0.0793388635, -0.0410968885, -0.0510929376, -0.1979911625, -0.1561962515, 0.1481238455, 0.1538718045, -0.1640054584, -0.0717549548, 0.0216371901, -0.1159254611, -0.0683546364, -0.0570428297, 0.0994793251, 0.2220294327, 0.0891134515, -0.0252723247, -0.0022501864, -0.1075537279, 0.0075177145, -0.0401802026, -0.0169412401, -0.0863227323, -0.0575924367, 0.0678883791, 0.1756583750, -0.1126376837, -0.1048092097, 0.0043616039, 0.0183180775, 0.0039879824, -0.1230277792, -0.0380362123, 0.0132220285, 0.1155158728, -0.1903237402, 0.1785746366, -0.1528131664, -0.0326882638, -0.0125808092, 0.0912758037, 0.0478911363, -0.2565413117, 0.0588197075, 0.1011625677, 0.1531243473, -0.0301815607, 0.1775658727, 0.1532902569, 0.0293712318, 0.1683526337, -0.0092120413, 0.1313353032, -0.0523526967, -0.0120312432, -0.1059709638, 0.0691087022, 0.1071459949, 0.1704407632, 0.2210036665, 0.1542685926, 0.0148841012, 0.2417597473, 0.1989846826, 0.1797425747, -0.1619803756, -0.1526739299, 0.0111363148, -0.1722167283, -0.0989378989, 0.0210123714, 0.0562825873, 0.0120896492, 0.1312482357, -0.1221156344, 0.1119945496, -0.1571115851, 0.0324898437, 0.0169046558, 0.0822456032, 0.0524684079, -0.0517487824, -0.1080774367, 0.0230959095, -0.0282715820, -0.0467279144, 0.0832451433, -0.1396965981, -0.1260678768, -0.0367822126, 0.0352527238, -0.0137781072, 0.1841588616, -0.2275492847, 0.1562466770, 0.0664348826, 0.2001059204, 0.1245840564, 0.0445412062, 0.0873847753, -0.0869444832, -0.1663528979, 0.0182321910, -0.0700136572, 0.1976071894, -0.1026658043, -0.1887301058, -0.1252050251, 0.0026526777, -0.2375991642, -0.2008247674, 0.1325334013, 0.0414960124, 0.0502370559, -0.1342981309, -0.0389984064, 0.1230857968, -0.0013736646, -0.1048691869, 0.0779610798, 0.1132535711, 0.0854656026, -0.0359901302, -0.0092642866, 0.0602739342, 0.1207315028, -0.0886701792, 0.0072236126, -0.0996502936, 0.0654612780, 0.1466866285, 0.1949139684, 0.0625703484, 0.0033135274, 0.1466297358, 0.1852060258, 0.1146193817, 0.1252096146, 0.0210586786, 0.0362568386, -0.1922784448, -0.1754833907, -0.0948322564, -0.0689371601, -0.1069737971, -0.0971732810, -0.0892273486, 0.0278131161, 0.2408084869, -0.0681513771, -0.1045655608, -0.1654420048, 0.0136996331, 0.1761785448, -0.0075458689, 0.0146147916, 0.1492413282, 0.0217444506, 0.0525944419, -0.1169770882, 0.1549137533, -0.0488144383, -0.1231792048, -0.0235274844, -0.0282032043, 0.0145659773, -0.0177868605, 0.0083187800, -0.0464369841, -0.2042306066, 0.0762033090, -0.1336427480, 0.1798132360, 0.1174955070, 0.0016609608, -0.1271743327, 0.0404392891, 0.1547171175, -0.1333797127, 0.1691763252, 0.0494752303, 0.1260361969, 0.2398705035, -0.0091783265, -0.1595897675, 0.2641680241, 0.0626486465, -0.0093810325, 0.0339955278, -0.0552595221, -0.2669658661, 0.1133955345, 0.0812819079, 0.1731961221, -0.0611860231, -0.0442627408, -0.0821508467, 0.0402861163, -0.1271670610, -0.1297728419, -0.0607014447, -0.0487984866, -0.0908565521, -0.0649651438, 0.0172077008, 0.0169550516, -0.0210512746, 0.1398745626, -0.0242693443, 0.1654945463, 0.0322785415, 0.0988118201, -0.1680975258, -0.0657139197, 0.2657175064, -0.0955897123, 0.0689000487, 0.1163725927, 0.0995029658, -0.0025335853, -0.0740364492, 0.0527832396, 0.0719722360, 0.1030184180, -0.0043019820, -0.1995335072, -0.1515609771, -0.0392893739, 0.0512722321, 0.1047149524, 0.0197228193, -0.0190483592, 0.1185750887, -0.0759659037, -0.2090872377, 0.1015594080, -0.1185314059, 0.0481130891, -0.1601348370, -0.0523653403, -0.0340671577, -0.0877955779, -0.0793669000, 0.1474775076, -0.0473285206, 0.0687625483, 0.0499376059, 0.0763429701, 0.0661407560, 0.0861039683, -0.1013101265, 0.1938138455, -0.1755312383, 0.1389316469, -0.1644628793, -0.2119801641, -0.0015882975, -0.0435781181, -0.0021923555, -0.1201170757, 0.0791636109, 0.1414432377, 0.0594538376, 0.1336585134, 0.1763538867, -0.0703367218, 0.1644513458, -0.0096005909, -0.1073860526, -0.0186136197, 0.0366775617, -0.0069278432, 0.0015947614, 0.0017509282, 0.0471215509, -0.0694294497, -0.0749730617, 0.2028589398, 0.0723527893, 0.1406342387, 0.0699778050, 0.0996673405, -0.2690042555, -0.1009613574, 0.0297854301, 0.0622135624, -0.0427282043, 0.1909063011, -0.1170959175, 0.0703078061, 0.1261660755, -0.2076854855, 0.1273316145, -0.1576612294, -0.0855952725, -0.1599764079, 0.0086333472, -0.0801511705, -0.0387675762, -0.0093549900, 0.0369206443, 0.0045269430, 0.1231882274, -0.0407552198, 0.0003147922, 0.0218861140, -0.0326194055, 0.0398963094, 0.0153385401, 0.0578511320, 0.2291688770, -0.0235375110, 0.0868194029, -0.0616670772, -0.0494577996, -0.0137455994, -0.0839042068, 0.1172971725, 0.0500925630, -0.0737760291, -0.0810427442, 0.1858669221, -0.1104303375, -0.0826649517, -0.1280762404, 0.0054603429, -0.1561472863, 0.0029361187, -0.0810664967, -0.0858363882, -0.0879762769, 0.2368785441, 0.0293037221, -0.1678576320, 0.0176295806, -0.0021852462, -0.0836587101, 0.0160686839, 0.1554899961, -0.1082327217, -0.0167547576, 0.0457442887, -0.1486445516, -0.0959894210, 0.1223434657, 0.0395091549, 0.0013054052, 0.0397587754, 0.0320012346, 0.0325957499, -0.2368149608, -0.0495113619, 0.0367636494, 0.0035142486, 0.0169220902, -0.1609932482, -0.0627825186, -0.0451953709, 0.0626575872, -0.1663087159, 0.1688629985, 0.0613054670, -0.1123577505, 0.1420297027, -0.0199053772, 0.0895697847, -0.1838916093, 0.0542841442, -0.0533783808, -0.0137288375, -0.0999818519, 0.1371039301, -0.1314196289, -0.0746574551, -0.0141361468, -0.2371557802, -0.0260069333, -0.0909133106, -0.1024678871, -0.1923879981, -0.0480462685, -0.1660424173, 0.1690796316, -0.0023528936, 0.0271611977, 0.0260966308, -0.0739224032, -0.0598320886, 0.1036429033, 0.1445280612, -0.0383926518, -0.1164384484, -0.0270265564, -0.1609149277, 0.0063872309, 0.0263741761, 0.1603281349, -0.0985852256, 0.0664887726, -0.0251737647, 0.1697012037, -0.1897151470, 0.0774257034, 0.2698108554, -0.1591157764, -0.1783040315, 0.1987514645, -0.0977220088, -0.0981582180, -0.1444617212, -0.0351258367, 0.0156623051, 0.0942481011, 0.1103553101, 0.2005553246, -0.1939882636, -0.1013257131, -0.1528224051, 0.1069368050, -0.1076771319, 0.2168543786, 0.1413275152, -0.1425213218, 0.2110951245, 0.1634835154, -0.1492854804, 0.0685056746, -0.0116610192, -0.0590977892, -0.2242598832, 0.0060189185, -0.0019225224, 0.0472305305, -0.0113386642, -0.0028537484, 0.0536177680, 0.0564999357, -0.0552986972, -0.1662835032, -0.1961613148, -0.2249844968, -0.1207973808, -0.0902934819, 0.1993321031, -0.0311273951, -0.0646476671, 0.1245652810, 0.0085882796, -0.0549564697, 0.1058156788, -0.2687257230, 0.0916575491, 0.0929023996, -0.2195735425, 0.2287144959, 0.0863953456, -0.0191663429, -0.0411719345, -0.0488864742, -0.0110814739, -0.1276745498, -0.0214244779, 0.1968466192, 0.1581767499, -0.1497176886, 0.0119776614, -0.0600483790, 0.0143955154, 0.1042898446, 0.1165730581, -0.0947348773, 0.1067217886, -0.1441676617, 0.0446823612, 0.0317785442, -0.1212750003, 0.1926864386, 0.0811892226, -0.1195997596, -0.2027802765, 0.0562695637, 0.1895072162, 0.0232963953, -0.0530786216, 0.0684866533, -0.0369427167, -0.0056533148, 0.1314266920, -0.0195447076, 0.0015938414, 0.0170318279, -0.1196523756, -0.0444124788, -0.2230704278, -0.0369931422, -0.0039650816, -0.0002410995, 0.0026561932, -0.0363746546, 0.0683383048, -0.0463687144, 0.1812137961, 0.0849585235, -0.1391663998, 0.0548821688, -0.0193174426, -0.1899729520, 0.0785999745, -0.1048793271, 0.0445580445, -0.0274744648, 0.0706172511, 0.0584016033, -0.0340715721, -0.0943109468, -0.1238848045, -0.0703061894, -0.0174705908, 0.0368173271, -0.1325879097, 0.1567246318, -0.1283914298, 0.0649994761, -0.0877213627, -0.0002997453, -0.0731496140, 0.0967036039, -0.0503723398, 0.0132495882, 0.0516916849, -0.1106342152, -0.0087731928, -0.0409278907, -0.1618483663, 0.0669531971, 0.0695300549, 0.0195482019, -0.0082060071, 0.2191889435, 0.0656921342, -0.1365419775, 0.0616093539, 0.1963804066, -0.1585032046, -0.0005484103, 0.0982790217, -0.0450203717, -0.0438956805, -0.1522455215, 0.0347945914, -0.0056825699, 0.2311420292, 0.0478583984, -0.0384341627, 0.1072405800, -0.0808311254, -0.0255906768, 0.0584219471, 0.0621547215, 0.1424253732, -0.2130050212, -0.1510773003, -0.2698818147, -0.0808228478, -0.1192552745, 0.1061288044, -0.2410976738, 0.1283903420, 0.0378465131, 0.2307590842, -0.1145188883, 0.0751247555, -0.1622811407, 0.1992644370, -0.0080840420, -0.1792539507, 0.0819728673, 0.1816887558, -0.1755162925, -0.1149234325, -0.1170914248, -0.0949947089, -0.1301880926, -0.1332786381, 0.0040993942, 0.1115689799, 0.0904442519, 0.1918729246, 0.0941542536, -0.1926828176, 0.0284515601, 0.1383145452, -0.0696138889, 0.0576483980, -0.0679509789, -0.0960978121, -0.0033477147, 0.0634394884, 0.0468090810, 0.0601368882, -0.1204071119, 0.0594359934, 0.1992399991, -0.0098924441, -0.1156889498, -0.0398399532, -0.1519725472, -0.0537555292, -0.2004942447, -0.0906206816, 0.1686979979, -0.0308164675, 0.1627452672, -0.1293479651, -0.1143176034, -0.1392999589, -0.2374604493, 0.0289060771, -0.0227004420, 0.0491747707, -0.2598916590, -0.1105282307, -0.0935374945, -0.1394082159, 0.0813675001, 0.0206389390, 0.0495972782, 0.1123975813, -0.1233375371, 0.1829261631, 0.1471915841, 0.1378943771, 0.0555776134, 0.0855769292, 0.0342365876, -0.0083709955, -0.0243593212, 0.0171755627, -0.0432218574, -0.0346051045, -0.1972017735, 0.2714031339, 0.0163120106, -0.1860323697, -0.0078749722, 0.2548845708, -0.1559385210, 0.1560872942, -0.2550251782, 0.1602077782, -0.0234834459, 0.0036204187, -0.0957299247, 0.0637774467, -0.1549844295, -0.0665497184, -0.0618671477, -0.0024300767, -0.0479768589, 0.2601073682, -0.1625623852, -0.1394043118, -0.0333774872, 0.0417042188, 0.1824825555, 0.1176923364, 0.0874952748, 0.0186405443, -0.1347577423, 0.1674428880, -0.0029679614, 0.0927456990, -0.0711174682, -0.1704179049, -0.0802570432, -0.0926633254, 0.0802499950, -0.1126949191, -0.0189612601, 0.2367500961, -0.0075077894, -0.1695603877, -0.0080115814, 0.0598359928, 0.1406421512, -0.0940637514, -0.0071001817, -0.0058600944, -0.1105234250, -0.1662045270, -0.0430265330, 0.0479897819, -0.0528837293, 0.1177375987, -0.2353022993, -0.2214153558, -0.1041009724, -0.2382289320, -0.2686131895, -0.0711530000, -0.0050958744, -0.0018832138, -0.1931586266, -0.0180624332, 0.0427067354, 0.0840482190, -0.1828599721, -0.1710924208, -0.0261291433, -0.0361945741, 0.0752593949, -0.1033707485, 0.1165641248, 0.1300148964, 0.0273201261, -0.1196457818, -0.1411708444, -0.0060898694, -0.0092537878, -0.1233979762, -0.0730095580, -0.1153971702, 0.1532545686, -0.0795698315, -0.0316391066, -0.2062727958, 0.1347784698, 0.0480721369, -0.1445123106, 0.0347697772, 0.0270432401, -0.0125431065, -0.0170729421, 0.1978437901, -0.1544607133, -0.1423945427, -0.1021131501, -0.2596990168, -0.0025582453, 0.0644555837, -0.0353996344, -0.1348147094, 0.0805160701, -0.0116424235, 0.0860645175, 0.1428291947, 0.0979787782, -0.1411286891, -0.1074863300, -0.0096830102, 0.0735925883, -0.0894403160, 0.0543061681, -0.0288538262, 0.2082481831, 0.1353634596, 0.1170299500, 0.0014369062, 0.0298846457, -0.2558973432, -0.0981191620, 0.0685131550, -0.1771595627, 0.0806567371, 0.0639125109, 0.0961903930, -0.0734016225, -0.1660510302, -0.1537456959, 0.2033040822, 0.0029993323, -0.0644766465, -0.0581379980, 0.2230941802, -0.1478929818, -0.1060942635, -0.0333537683, -0.0600410886, -0.0074815163, -0.0600268394, -0.0214172043, -0.0469610542, 0.0245778579, -0.0996689573, 0.0532912724, -0.1206459105, 0.1571274996, -0.1561669558, -0.1335321516, 0.0606621988, 0.0840607658, -0.0510244854, -0.0493149012, 0.0000873179, -0.0849614441, 0.2619386911, -0.2456037849, -0.0718672946, -0.0762995705, -0.0099071041, -0.0846911892, -0.0726694837, 0.1012909487, -0.1181847453, -0.0404690504, 0.1566925049, 0.1612305939, -0.1702220887, 0.1834088266, 0.0202013180, 0.1793708503, 0.0447159819, -0.0955193415, 0.0825170279, 0.2196492702, 0.1669575423, -0.0151727833, -0.2424459010, 0.1804351956, -0.0586655028, -0.0116877286, -0.0188126490, -0.1399316937, -0.0805506706, 0.1249232814, 0.1182940602, -0.0013886682, -0.1527525634, -0.1032872275, 0.0613909140, -0.0234017037, -0.1931215078, -0.1035000682, -0.2241597921, 0.0871398672, 0.0676554814, -0.0735921562, -0.2406556457, 0.0433929004, -0.1680021435, 0.0666965321, 0.0640142485, 0.1869639009, 0.2689216137, 0.1772813648, 0.0729060099, 0.0222259220, 0.2603489757, -0.0152625376, -0.1149711981, 0.2242996246, 0.1011568084, 0.1110709608, -0.2268139571, -0.1722656488, 0.0920067430, -0.2323818207, 0.0855678990, 0.1215572208, -0.1294519603, -0.0234183017, -0.1505626589, 0.0155779393, 0.0388295501, 0.1937631965, 0.1212954521, -0.1151687279, 0.0486127250, 0.0494912863, -0.1985182017, 0.2010669857, 0.0190912485, 0.0353046656, -0.0049646157, 0.1685604602, 0.0690667629, 0.1643286645, -0.1135454997, -0.0598761588, 0.0445050336, -0.0026507857, -0.2277696431, -0.0937412083, -0.0652455091, 0.1676011384, -0.0790392905, -0.0552481562, -0.1259750128, 0.0654355288, 0.1442875862, -0.1281638294, 0.1025242060, -0.1151861697, -0.0885131210, 0.0582127236, -0.0399482436, -0.1642379314, -0.1816390902, -0.0526016578, 0.0907667130, 0.1128794476, -0.0413680449, -0.0040723132, -0.0856567472, 0.1825037450, 0.0633636490, 0.1506027281, -0.1467405260, -0.1608120501, 0.0261095986, 0.1196683794, -0.2263257354, 0.0434662886, -0.0688034147, -0.2116539478, 0.1131273657, -0.1117132083, -0.0704689324, 0.2410900742, 0.0009151858, -0.0157203078, 0.1399521828, -0.1180346385, -0.0855062678, -0.1120054796, -0.0365611911, -0.1568703055, -0.0204221308, -0.0718832463, 0.0918905810, 0.0707624778, -0.0499693900, -0.0609500334, -0.0096046040, -0.0942275822, -0.0829577968, -0.0209532809, -0.0171504542, 0.0736397654, 0.1449593604, -0.0035650705, -0.0211550482, 0.2366968244, 0.0101440707, -0.1401291192, -0.0085932473, 0.0425397120, -0.1187783480, 0.0291731134, 0.2456048131, 0.2010727078, 0.0957815126, 0.1283149123, -0.0548559278, 0.0175176822, -0.0113392929, -0.0235578474, -0.0522124358, 0.0402006581, 0.0269973092, 0.0421110429, -0.0449607708, -0.1915365309, 0.2151494920, -0.0118023604, -0.1049238667, 0.1317865252, 0.0256933998, -0.0882399678, 0.0612069480, 0.0175969601, 0.0814983994, -0.1232632622, 0.1131852940, -0.0984126404, 0.1224099547, -0.1165584698, 0.0468830615, -0.2351970673, 0.0091757588, -0.1317253858, -0.2661057115, 0.1777462363, 0.1626949757, -0.1914078593, -0.0359685458, -0.1240800098, 0.1020618826, -0.0472401492, 0.1660620868, 0.0649240911, -0.0579845682, 0.2469713390, -0.1135696471, -0.1409899592, 0.1068224981, 0.1888028085, 0.1583407670, 0.0758616701, 0.0121174734, -0.0214344151, -0.0011393942, -0.0293486193, 0.0535005704, 0.2097815573, 0.1066518575, 0.0034022038, -0.1511607021, -0.0923301205, -0.0652982518, -0.1004087627, 0.0857242495, 0.0324734636, 0.0908109993, -0.1225284338, 0.1276961863, -0.0087407641, 0.2607437372, 0.1337380707, -0.0208770186, 0.0754193887, -0.0679524913, 0.0909368694, -0.0821061656, -0.0081712203, 0.1455715597, -0.1462474167, -0.0609188043, 0.0505767688, 0.0963083133, -0.1110344380, 0.0630902126, 0.0973604545, 0.0056255013, -0.0722359866, -0.0095858425, -0.1531073302, -0.1729820818, 0.1267489791, 0.0593625829, -0.0221718289, 0.0340993889, 0.0643158555, -0.0990014449, -0.0298926085, 0.1837637275, -0.1520573944, 0.0609255247, 0.0070371088, 0.1588903964, -0.2042280138, -0.1002526134, -0.1503965855, 0.0714375451, -0.1007027775, 0.1385587156, 0.1975587606, 0.0358568504, 0.0921007246, -0.1152310446, 0.2609990537, -0.0999824032, 0.0248154234, 0.0090609519, 0.0628825948, 0.1292312890, -0.1943809986, 0.0449507087, 0.1114008129, 0.0733042061, -0.1543496698, -0.0154146533, -0.0177994166, 0.1142184138, -0.0974149033, -0.0455560982, -0.0681824014, -0.1510973126, 0.1990545839, 0.1496288180, -0.0612150729, 0.0353885703, -0.0291683599, 0.1864953637, 0.0278086141, -0.0682973340, -0.0459940992, -0.1849666238, 0.0393716954, -0.0883327127, -0.0197294522, -0.0554768145, -0.1612116992, 0.0797362849, 0.0881901234, -0.1389995962, -0.1749158502, 0.1723104566, -0.0722728521, -0.0132717257, 0.1578005850, 0.0247357413, -0.0664638728, 0.1423076838, -0.1008848548, 0.0839311406, -0.1554674804, 0.0260821003, 0.0112768197, -0.0842310414, 0.1126615480, -0.2672867179, -0.0318203047, -0.0396637470, -0.1945533156, -0.1221795902, -0.2070400119, -0.0172725469, 0.0241222233, -0.0868406668, -0.0165797397, -0.1516978443, -0.0537089221, -0.1286916286, 0.1210951880, 0.0756968930, 0.0413973890, -0.1081605256, -0.1462495178, -0.1695437729, 0.2448243648, -0.1731325537, -0.1683756560, 0.0323814899, 0.0357530341, -0.0637158155, -0.1080334932, -0.1896543652, -0.1272010803, 0.0899854302, 0.0279913936, 0.2439009398, 0.1783962697, -0.0011690888, 0.0287993588, -0.1278523952, 0.0225878898, -0.0834221840, 0.0021668293, -0.0056887204, 0.0570322648, 0.0927861407, 0.1843904704, -0.0308429915, -0.0102439849, -0.1554352641, 0.1850106716, 0.0082151620, 0.1614014059, 0.1692051142, -0.1015915647, 0.0257871486, -0.1156777591, -0.1267099530, 0.1395670474, -0.0037742036, 0.0078079831, -0.1049760059, 0.2390217483, -0.1025256962, -0.0371738486, 0.1098797917, 0.1781693846, -0.0986494943, 0.0177152958, 0.0932912678, 0.1962307394, 0.1122875214, -0.0880260617, 0.0122479536, 0.0632775798, 0.0626491755, 0.0359463319, -0.1139622256, -0.0473511517, 0.1869509518, 0.0311756041, -0.1863745600, -0.1948879659, -0.1765620410, -0.0201199111, 0.0087283077, -0.0324250720, 0.1292322725, 0.1524086148, 0.2691905499, -0.0759888887, -0.0538524389, -0.2242550701, 0.0399063043, 0.0875337943, -0.0250120703, 0.0002098075, -0.2222992480, 0.0962851271, 0.0329397134, -0.0187707543, 0.1489756554, -0.2074589878, 0.1104446724, -0.0680568516, -0.0898251310, -0.2035071999, 0.0066519254, 0.0034434395, 0.1423324943, -0.0340382233, -0.0550977066, 0.0597354248, 0.0107296584, -0.0142169809, 0.2210093141, 0.0716716722, -0.1094116345, 0.2127865255, -0.2153511643, -0.1217983291, -0.2195197940, -0.0247434881, 0.1752157509, 0.0099059343, 0.1635957956, -0.0486339591, -0.0712071136, 0.1864723265, 0.2018975019, -0.1721557230, -0.0220037717, 0.2266053855, -0.1158289388, 0.1979526579, -0.0263715927, -0.1197622120, 0.0157287028, 0.1560198218, 0.0163446013, -0.0643770397, -0.1209450811, 0.2639410496, 0.0888541117, 0.1947225630, -0.1582325697, -0.1089334786, -0.1209173054, -0.1190340221, 0.0564631373, 0.1040189415, 0.1374621093, -0.0289415605, 0.1080376878, -0.0814654008, 0.0754538551, -0.1069783941, -0.2375732511, 0.0117881149, 0.0899560228, 0.2601689398, -0.0778580755, -0.0094779851, 0.0450479686, -0.0402508527, -0.2453971952, 0.0203707330, 0.0267690402, -0.1146255061, 0.1172211245, 0.2503424883, 0.1057785749, -0.1037923396, 0.0995003283, 0.0299077760, -0.0622260943, 0.0969652683, -0.1114615649, 0.0620971173, -0.0139904888, -0.0212603379, -0.0039609177, 0.0544147193, 0.0720923543, -0.1065169871, -0.0373748131, 0.1239471510, -0.0530860499, -0.0603988133, -0.0360489078, -0.2651112378, 0.0298181307, 0.0046337955, 0.0456840657, 0.0059515731, 0.0794947818, -0.1482730061, 0.1167605966, 0.0164985098, 0.1303456575, -0.1609523892, -0.0424251072, 0.1420426965, -0.0949415863, -0.1652697772, -0.0722844377, 0.0203377791, -0.0398587286, 0.1806305945, 0.0335084908, -0.1371381432, -0.1597395837, 0.0252524950, -0.0931029990, -0.0405440666, 0.1147399247, -0.1381461471, -0.1853642613, 0.1009891182, 0.0942971855, 0.0873105377, 0.0174386762, 0.0870342329, -0.0243318733, -0.1282661408, 0.0002587767, 0.0414549187, 0.1045476347, 0.0109046325, -0.2092679441, 0.1233834103, 0.0398093276, -0.2046339810, -0.1902404875, -0.0493184924, -0.0648807883, -0.0443470962, 0.0249111522, 0.1532435417, 0.1960921139, -0.0552163981, 0.1640416086, -0.0272646230, 0.1659115702, 0.1901517808, -0.0153096197, -0.0857750326, 0.0134518649, -0.0536591820, -0.0482208133, -0.0806990787, 0.0395148434, 0.0070860684, 0.2042325586, 0.2183118463, 0.0251048841, -0.0804456770, -0.0384334177, 0.1774626225, 0.0677831098, 0.1246438846, 0.0583969355, -0.0887946114, 0.0218405686, -0.0420816541, -0.0464714989, 0.0776428059, -0.0198544674, -0.1577059478, 0.1329874992, -0.0149018290, 0.0377702788, -0.2429795116, -0.0955495760, 0.2641319335, 0.1228991970, 0.1744815111, 0.0445928648, 0.2226162106, 0.1668272763, -0.1205443665, -0.0683090389, 0.1036902070, 0.1130245626, 0.1968939751, -0.1612078398, 0.0871051922, -0.1421103776, 0.0185236670, 0.1070374250, -0.0516396388, 0.0618788525, 0.0958857983, 0.0665074587, 0.0354424678, 0.0113060139, 0.0559971631, -0.1452558339, -0.0070841857, 0.2311773896, 0.1574033648, -0.0645479932, 0.0077211396, 0.1418262869, -0.1921380311, 0.1646908969, 0.0564131886, -0.1582943201, -0.0391578004, 0.0550412424, -0.0112300646, 0.1405190825, -0.0817757398, 0.1690971553, 0.0687948242, 0.0724156871, 0.0864500776, 0.2426254302, 0.0838163272, 0.0091379546, -0.2483045310, 0.0077521517, -0.1911934465, 0.1776397228, -0.2682915330, -0.0369411260, 0.1245383918, 0.0376278087, 0.1697240025, -0.2211539447, -0.2663967013, -0.1101712137, 0.1066378728, -0.0701775774, 0.0033135170, -0.0529138446, -0.0300970897, 0.0399436839, 0.1103815883, -0.2109255791, -0.1169042811, 0.0631187782, 0.0437638313, -0.1504591256, 0.0595126823, 0.0265454520, 0.1063948795, 0.1190878451, -0.0618669316, 0.2370542437, 0.2174728960, -0.0813599601, -0.0213252511, -0.0965859890, -0.0122442795, 0.0373901203, 0.2532148361, 0.0985148773, 0.2166265249, -0.0512912385, -0.0599832684, 0.0004487878, 0.0477641672, -0.2095560431, -0.1058357880, -0.0358315967, -0.0473302193, 0.1990827918, -0.0183760747, 0.0010301722, 0.0233433377, -0.0391519964, 0.1391735375, 0.1418663561, -0.0701221898, -0.1236511096, 0.0578275062, 0.0241419505, -0.0275523234, -0.0341198742, -0.0270826295, 0.2668708563, -0.0070325457, -0.0361747146, -0.0735416561, -0.0130045069, 0.2448103875, 0.1710906029, 0.2538127303, -0.0305322036, 0.0248652473, -0.0465051755, -0.0760129839, -0.2121812701, 0.1396473199, -0.0199850462, -0.0387703888, -0.0002639937, 0.1132492051, 0.1707988679, 0.0185972136, -0.0720838606, -0.1594200730, 0.0677358955, -0.1267000586, 0.1154987738, -0.0251324400, -0.1622874141, 0.0028210531, 0.1866363734, -0.2713896632, 0.0159929674, 0.0472933426, 0.0899811015, 0.0053481930, 0.0181958377, 0.1676781178, -0.0959105939, -0.0733449012, 0.0424855165, -0.0929101780, -0.0181563776, 0.0463791825, -0.0958936512, -0.0493040904, -0.1862147301, -0.1734070778, 0.0286324322, -0.0876191631, 0.0642358363, 0.0186093245, 0.2369020581, 0.0250972882, -0.0138743073, 0.2491501421, 0.0892237499, 0.1374602914, 0.1876622140, 0.1043890119, 0.0591895543, -0.1970211118, -0.0777134523, 0.0430147983, -0.0427507795, 0.0740121752, 0.0558857322, 0.0277837627, 0.1207125708, 0.0619764291, -0.0237463396, -0.0009932552, 0.1420343965, -0.0151981181, -0.0017422840, 0.1660574079, 0.0179435778, 0.1598936319, -0.1940710843, -0.0459039733, -0.1955277175, -0.0114848912, -0.0488700867, -0.0136410957, 0.2156038135, 0.2381577194, 0.1523591131, -0.0612176098, 0.0774616152, 0.1633509547, -0.0435759462, 0.1869786978, -0.0097929575, -0.0100067453, -0.1746912748, -0.2110482901, 0.0028528788, -0.1169270650, 0.0413580872, -0.0220880620, 0.0796435252, -0.2009479403, -0.2043745667, -0.0227544550, 0.0722445846, 0.0747236237, 0.0020099501, 0.2054966688, 0.1936589926, -0.0394602753, 0.0988906994, 0.0210248027, 0.0501255319, -0.0487397090, -0.0005440320, -0.0648964345, -0.1966541708, 0.0109443478, -0.0615211986, -0.1539276242, -0.1501696259, -0.0189684406, -0.1849281192, -0.0697102994, -0.0213371646, 0.1677272469, -0.2160818726, -0.0416662581, -0.0611348227, 0.0063404622, -0.0983593538, 0.0355277434, 0.1888030171, -0.1313892156, -0.1416997612, 0.0232985560, 0.2395335138, -0.2245440334, 0.0094520170, 0.0158133022, 0.0271159653, -0.1283951253, -0.0372692607, 0.2105251998, 0.1228646338, 0.0043478957, -0.1548757553, -0.1346878558, -0.1499967724, -0.1110100746, -0.0620223954, 0.1406288445, -0.1821422130, 0.0487584919, -0.1653588563, 0.0713132843, -0.0193404816, -0.1008884087, -0.0140758883, 0.0687057599, 0.1486438811, -0.0684986785, -0.0489439666, 0.0570809320, 0.0145804770, 0.0979942903, 0.2157479227, 0.0855441317, -0.1602059603, 0.0027881388, -0.0086399550, 0.2330239415, -0.0619405545, -0.2696573138, 0.2055340260, 0.0710287318, 0.0000915820, -0.0490037389, -0.0394268632, -0.0031036057, -0.0189548787, -0.0725638270, -0.0012981045, -0.0687596053, -0.1309037358, 0.2103867978, -0.1662277728, 0.2333124727, -0.1006379426, 0.0972574651, 0.0371919647, -0.0493131652, -0.0059608766, 0.0300487541, 0.1407384574, 0.0436654203, 0.1042085811, 0.0032843340, 0.0457692854, -0.0146003859, -0.1070902497, 0.0203007329, 0.1541648358, -0.0973095968, -0.1273570210, -0.2216729373, 0.0505465306, -0.1956052035, -0.1196031719, -0.1348553002, 0.0360935666, 0.1481399387, -0.1429218799, 0.0721553341, -0.0927430838, 0.2031062543, 0.1045572758, -0.1175692454, -0.0293675717, -0.1423592716, -0.0630937442, 0.0847560465, 0.0005501134, 0.1074533463, -0.0511145517, -0.1574505717, 0.1763337553, -0.0106519563, -0.0705628842, -0.2465343624, 0.0997280627, 0.0959924757, -0.0700940117, 0.0991103798, -0.0167855248, -0.0403461978, -0.1487890333, -0.0937109143, -0.0929759592, -0.1584677845, -0.1505407542, -0.1316549480, -0.0103985555, -0.1488691270, -0.1662947536, -0.0175994076, -0.2623292506, 0.0078223422, -0.0157195013, 0.0220415667, 0.0604063123, 0.2348349392, 0.2479216009, 0.0051625567, -0.1144720465, -0.1309076399, 0.0966067761, -0.0718732625, -0.1927785873, 0.0478289910, -0.1194185019, 0.0976400897, -0.0258493405, -0.0764911398, 0.0501840934, 0.2317623198, -0.2319214344, 0.1911351830, 0.1562213749, -0.1321943402, -0.0570608974, 0.0435071476, 0.0680103973, -0.0597937554, -0.2300311178, -0.0245638750, -0.0489963852, -0.0152235646, -0.0782625079, 0.0194002278, -0.0877059624, -0.1175934002, -0.1559593081, -0.1345122606, 0.1768425256, 0.0681769922, 0.0094836876, -0.0900905207, 0.0876098871, 0.2446446568, 0.0961503088, -0.1662634611, 0.0565301515, 0.1820631623, -0.2477830052, 0.1184082404, -0.1274702400, 0.1253432631, 0.1510837823, -0.0888009742, -0.0341900848, 0.0676948503, -0.0806820020, -0.1336441040, -0.0687265322, -0.0028656789, 0.1805055141, 0.1422322989, 0.0605468974, 0.0345689952, 0.0847192407, 0.0898513272, 0.1049936637, 0.1136032343, -0.1243247688, -0.0924956650, 0.0923486799, -0.1825831831, -0.0237099063, 0.1157822683, -0.2557710409, 0.0123403240, -0.0053429836, -0.1038521528, 0.0592312291, -0.1767068654, -0.0365219787, -0.0895767659, 0.1940549016, 0.2632573247, 0.1036231071, -0.0824113339, 0.1266492903, 0.1500199884, -0.1812299192, 0.0147354472, 0.1259366423, 0.1753162593, -0.0292891413, 0.0102626421, 0.0215203613, -0.1754886508, 0.1687384248, 0.1204753667, 0.0810723603, 0.0556046553, 0.2258659154, -0.1699795276, 0.0272846762, 0.2208031118, 0.0987758785, -0.0810186937, -0.0433545820, 0.0128689017, 0.0831619725, 0.0244250912, 0.0016094479, 0.0290578585, -0.2513789237, 0.1337466836, -0.1816143095, -0.0085822474, -0.1641854495, 0.1375555247, -0.1602537781, -0.0862283930, -0.0145686744, -0.0647365972, -0.0193511359, 0.1198423505, -0.0179402158, -0.0307030678, -0.1372987777, -0.0246212315, -0.0738977566, 0.1168095842, 0.1105735376, 0.0179617833, -0.2026201338, 0.1506630480, 0.1404755414, 0.0509895720, 0.1156375334, -0.1215880513, -0.1655132025, 0.1459162533, -0.0672461092, 0.0700230673, -0.0292603821, 0.0323460102, -0.0040005851, -0.1367376149, -0.0739370510, 0.0759260356, 0.1972591728, -0.2035829574, -0.1112230197, 0.1156348959, 0.0913479775, 0.1678889692, 0.0112749469, 0.0256234389, 0.0055468855, 0.1160029918, 0.2311179191, 0.1409787685, 0.1502435952, 0.1532835364, 0.0706502348, 0.1507117003, -0.1838442981, -0.1433388293, 0.1332244724, 0.0782021284, 0.1355654448, 0.0052526691, -0.1861453354, 0.0212301798, 0.0416539907, -0.0976306945, 0.0732057542, -0.0455033891, 0.0050832471, -0.1885551214, 0.0706416219, 0.0234956387, 0.1268371195, 0.0975922048, 0.0281811133, -0.0300680678, -0.0984949321, 0.2442189008, 0.2528699338, 0.1234832481, 0.0165088531, 0.0531143881, -0.0200967565, -0.0008412350, 0.0720341131, 0.0857184827, 0.2481076419, 0.0053385850, -0.0528632253, 0.1507273763, 0.0699223205, -0.0894451439, 0.0077323248, -0.1139420867, -0.1285723150, 0.2205954343, -0.2445129752, 0.1973985881, 0.0657787696, -0.0436073765, 0.0431964733, -0.1121945754, -0.1210584342, -0.0187078863, -0.2336223722, 0.1206808016, 0.1778494865, -0.0444840118, -0.2404549122, 0.0882743672, 0.1986526698, 0.0328091085, -0.0973718762, 0.2639978528, 0.0199864693, -0.0349091962, -0.0239968579, -0.0813915208, 0.0415120684, -0.1391919851, 0.1257177889, -0.1956437975, 0.0751572624, -0.1271013319, 0.0204913523, -0.1195151061, -0.2135303020, 0.1150415540, -0.1393374056, 0.0039620306, -0.0634345040, -0.1540496051, 0.1487297565, -0.0502002873, 0.1056900620, 0.0365896598, 0.2583816350, -0.1178019345, 0.0372914411, -0.2240124941, 0.1592302769, 0.1191996187, 0.0354769453, -0.0838297233, -0.0809693038, 0.0431860052, 0.0463364013, -0.1795048714, -0.1186725050, 0.0416363217, -0.0383153223, 0.2057859153, 0.0316207521, -0.1319017708, -0.0476275682, 0.1405530274, 0.1575456709, -0.0738142505, -0.0487742051, 0.2402416468, 0.1130536124, -0.1167055294, -0.1155320555, -0.1177462935, 0.2382078767, 0.0082268836, 0.1465617716, -0.1151397526, -0.0572953485, 0.1967674494, -0.1317457408, -0.1261210293, 0.1268056184, -0.0368421525, 0.0249095205, -0.1654428691, -0.2338453680, 0.1003100500, -0.0864621401, 0.0692436919, -0.1098374426, -0.0966023579, -0.0528551824, -0.0527872257, 0.2646245658, 0.0261735190, -0.1806194782, 0.0534974858, -0.0363856032, -0.0854562595, -0.0274236593, -0.1440900713, 0.1494982541, 0.1259294599, -0.0361517891, 0.1012420207, 0.1424970180, -0.0206403844, 0.0158430357, 0.1740333438, -0.0239618514, 0.1042288616, -0.0614054576, 0.0347570702, 0.1456061006, 0.0633313432, -0.1820648611, 0.2067638785, -0.0004068848, -0.2323365211, -0.1198333576, -0.1163549200, 0.2082152665, -0.0535541363, 0.0651484206, -0.1000635475, 0.0224968661, 0.0835595876, 0.0028909664, -0.1760244966, -0.0464275666, 0.0601246618, 0.1121008471, 0.0954918712, -0.1335867196, -0.0487705953, 0.0886124223, -0.0151853729, -0.0721031427, 0.0862221494, -0.2077123821, 0.1939910799, -0.0553585663, 0.0809571147, -0.0014575926, 0.1095181927, -0.0338363610, -0.2360982001, 0.0858483538, -0.1574870944, -0.0232470408, 0.0298082940, -0.1460439563, -0.1976981908, 0.0002839927, 0.0229821242, 0.0043899356, -0.1464182585, 0.0091668917, -0.0556642152, -0.2517412901, 0.1327629983, 0.0546003580, -0.1073936820, 0.0129391449, 0.0154300695, -0.1102209762, -0.2161777169, -0.0554604493, 0.0157929752, 0.0925032422, 0.1548050046, 0.0778577626, -0.0225531720, 0.0513535999, -0.1390395015, 0.1633168161, -0.0273951795, -0.0213510804, 0.0996836573, -0.0307975113, -0.0157426372, 0.1908980906, -0.1178622618, -0.0345733315, -0.0091464389, 0.1692822427, 0.2618780136, -0.0867789909, -0.1765721887, 0.0100478921, -0.2425578088, -0.0727222562, -0.1213411093, 0.1266254634, -0.0810699239, -0.0872791857, 0.0051929206, 0.1833413839, -0.0768753663, 0.1070167571, 0.0306870770, 0.0506988615, -0.0275349952, -0.0613716766, 0.0726692602, 0.0308972504, 0.0227036159, 0.0207145531, -0.0435213745, -0.0553993620, -0.0970119983, 0.0421180129, -0.1632701457, -0.0089644995, -0.0138055403, -0.0650983080, 0.1041139886, -0.0918439552, 0.1174364537, 0.0667433888, -0.1212361604, 0.1525056213, 0.0767330900, 0.0805810168, -0.1025878564, 0.1168519557, -0.0336453728, -0.0651274472, 0.0538561195, -0.2221418917, -0.1004197001, -0.0251776613, 0.0365551971, -0.0521641001, -0.2245283425, 0.0346303955, -0.1964752525, -0.1272322983, -0.0257058498, 0.0785052702, -0.0772110820, -0.1599948406, 0.0476834364, -0.1125707775, 0.1763637066, 0.0195934400, 0.1690208614, 0.0183696933, 0.0148034981, -0.0830735937, 0.0170579832, 0.0399007313, 0.1762889326, -0.1745435447, -0.0662220046, -0.0074371276, 0.0082421536, -0.0600013845, -0.0724206716, 0.2188996375, 0.1818046123, -0.0184286479, -0.2099547237, -0.0138652194, -0.2205000967, 0.2626419067, 0.2211005986, -0.0404471755, -0.0465070195, 0.0244439337, -0.0208396148, 0.0338478051, -0.0964197218, -0.1291463524, -0.0673206449, -0.0192921236, 0.0649498254, -0.0385515206, -0.2058487684, -0.1909243315, 0.0695488453, -0.1421947479, -0.0698942319, -0.0756964311, 0.0431400128, -0.1184690446, -0.0817783996, -0.2164428830, 0.0144649250, 0.0727349669, 0.1684856713, 0.0798842981, 0.2241160274, -0.2423207909, 0.1416734159, -0.0358525664, -0.0278850533, 0.0394085050, 0.0197264459, 0.0383843966, 0.0597581528, -0.0416941345, 0.1192083284, -0.0363563448, 0.0621253513, -0.0257064905, -0.0389079191, -0.0389244035, -0.0638912618, 0.1570677459, -0.0408028401, 0.1368366480, -0.2127207965, 0.0025669239, 0.0047454550, 0.0125430329, 0.0785039291, 0.1716871113, -0.0757036582, 0.0063182251, -0.0961494818, 0.0519803837, -0.1294234842, -0.0479537137, -0.0187429842, -0.0287088528, 0.2118990421, 0.0454223603, 0.0064407703, -0.1936145723, 0.0256423373, -0.0853982568, 0.1480077505, -0.0131658269, -0.1154994816, 0.1410371959, -0.2641213834, -0.0902537480, 0.1432425827, -0.1394337565, 0.1008673385, -0.1702167541, -0.0372106880, -0.1990543902, -0.1074289605, 0.1507143080, -0.1142774969, -0.0183844939, 0.1043079868, -0.0614069290, 0.0144685227, -0.0148786223, 0.2657562792, -0.0106891748, -0.0063566174, 0.0925991684, 0.0407187752, 0.0542945117, 0.0025754799, 0.1706188172, 0.1195613444, 0.1675805300, -0.0081826318, -0.2343825102, -0.0100243622, -0.0268293172, 0.2475530058, -0.1506444365, 0.0543471240, -0.0915755033, 0.0633368790, -0.1333165318, -0.0006545868, 0.2487890869, 0.0331054963, -0.1205626354, 0.1602917314, 0.1940585971, 0.0743183196, 0.2588134706, -0.0829334110, 0.2049343288, 0.0501015224, 0.2345596999, -0.0734731108, -0.1560997218, 0.1085025370, 0.0719895288, -0.1479039043, -0.0213261899, -0.0029220060, -0.0209704246, -0.1999513656, 0.0762207061, -0.2283225507, -0.1375700235, 0.1798174977, -0.0622179881, 0.1645088792, -0.0749356821, -0.0018304506, -0.0998724625, 0.1016746387, -0.0725875869, 0.2450300306, 0.0176277924, 0.1212199405, -0.0828240365, -0.1351347417, 0.0199648533, 0.0222349279, 0.0054968433, -0.0500287376, 0.0356681906, -0.1748463660, -0.1755180806, -0.0930009931, -0.0048427605, 0.0618688874, -0.1207456291, 0.2051136792, -0.0525450520, -0.1312704086, 0.0969277322, -0.0920060650, 0.2595868111, -0.0284819957, -0.1481589824, -0.2546391487, 0.0922693536, -0.1483597457, 0.0445484780, 0.0064739101, 0.0313288830, 0.0079879006, 0.0752459466, -0.0913649052, 0.0034175497, -0.1693631858, -0.1912004799, -0.1180917248, 0.1060039774, -0.2018647492, 0.1886621416, 0.0866330341, -0.1502407193, 0.1655225754, 0.0137239555, 0.0130596105, 0.0713852942, -0.0542086847, 0.1228111386, -0.1814997643, 0.1095094308, -0.1548696905, -0.2351682931, -0.1188080683, -0.1389874667, -0.1903970689, 0.1272639930, -0.1385067701, -0.0044864165, -0.1178650558, 0.0278796051, -0.2609459460, 0.1119443774, 0.1446215212, -0.1901222318, -0.1376915574, -0.1792094857, 0.0794000179, 0.0146640595, -0.2174807489, 0.1091331542, 0.1813345551, -0.0995607674, -0.1006750017, 0.0434660092, 0.0601398386, -0.0938520879, -0.0619108453, 0.1186300889, -0.0930904523, -0.1118504629, 0.0365057252, 0.0583388060, 0.0337088071, -0.0643001869, 0.0173310861, -0.0262624025, -0.1568037122, -0.1491821110, -0.0539105721, 0.2004104406, -0.1957474500, 0.0556318797, 0.0682304278, -0.0870409757, -0.2248014510, -0.0653091073, 0.1026624963, 0.0847754404, 0.0869904906, -0.0612471029, -0.2149465680, -0.1784908772, -0.1502476335, 0.0477577746, 0.1507987082, 0.1155697033, 0.1086458266, 0.0014657358, 0.0512377210, -0.0672150776, 0.0868067965, -0.0051196394, 0.0442945398, -0.0892874673, -0.1097793058, 0.0353441536, -0.1382525712, -0.1398523599, 0.0016278652, -0.0403163731, 0.0007935243, 0.1004632339, -0.0390401408, -0.1917199492, -0.1866543144, 0.0131716169, -0.0787521526, 0.0661189705, 0.0984725505, 0.2227891386, -0.0141480425, 0.1305044144, 0.0531940758, 0.0562316477, 0.1174753979, 0.2025236189, 0.0514162667, 0.0163266882, -0.0096853832, 0.0224673282, -0.2006939352, 0.1700162292, -0.0960934311, 0.2262915969, 0.1255678087, -0.1017674804, -0.1502143294, 0.2351427227, -0.0271455254, -0.0421515256, 0.0666475371, -0.1238558441, -0.1044991016, 0.0713929608, 0.1987033039, 0.0003102447, -0.2692261636, 0.1262107641, 0.0276763141, 0.0943668634, 0.0929770768, 0.0404749140, -0.1670186073, -0.0148479501, -0.2032328695, -0.1291145682, 0.1254543066, -0.0304858368, -0.0434813648, -0.0425462723, 0.1470449120, -0.0930477381, -0.0771192834, 0.1250199378, 0.0878261477, -0.0528546721, -0.2037086636, -0.0343713872, -0.1382715106, 0.0327379927, -0.1929996759, 0.0277131125, 0.1699937731, 0.0725735202, -0.1137959883, 0.1289916039, 0.0031048865, 0.2360650003, -0.0942472816, 0.1635874659, -0.1059041619, 0.1157538146, -0.1062612161, 0.1104547232, -0.2151526809, 0.1241564006, -0.0072641065, 0.1669497937, 0.0267618950, 0.1235379875, -0.0749185160, -0.1122225299, 0.0197852645, 0.0591608733, -0.1082006097, 0.1962668300, 0.1305511892, 0.0742937475, -0.1448937356, -0.2142817825, -0.0091832997, -0.0089006610, -0.1375281662, -0.1704101562, -0.0258460939, 0.0281540807, -0.1802130938, 0.1227115840, -0.1912393719, 0.2586600482, 0.1062758192, 0.1284554601, -0.0882630050, 0.1256555617, 0.0176675599, 0.1086327434, -0.1862804145, -0.1112857386, -0.0504059754, -0.0810874403, 0.1132117733, -0.0305016823, 0.0979012772, -0.0631538033, 0.0018525479, 0.0086764423, -0.0291596595, 0.0862664208, -0.1655798107, -0.0608273409, -0.1462197304, -0.0220477097, -0.0506073236, -0.1441313922, 0.1609386206, -0.1188879535, 0.0384014212, -0.0164200719, 0.0782181621, -0.0761449188, 0.0325403772, -0.0471153967, -0.0952146500, -0.0601719432, -0.0674374849, -0.0718543828, 0.2254906446, -0.2026220262, -0.0036465500, 0.1527452171, -0.0697708949, 0.0516602769, 0.0440265425, 0.0110796578, 0.0267896857, -0.1974151582, 0.1141714156, -0.0731402785, 0.1531114876, 0.1741322875, -0.2189748436, -0.0111397011, 0.0427998193, 0.1761149615, 0.0072834720, 0.0175201260, -0.1754513681, -0.1889457107, -0.0164842103, 0.2557648718, 0.2311193645, -0.0181768984, -0.0243887324, -0.0216434747, 0.0084537789, -0.1919735074, -0.0394190364, -0.1260034889, -0.1290234476, -0.0410445407, -0.1011034101, 0.0477456860, -0.0735962912, -0.1551527828, 0.0320415832, 0.1659379900, -0.2229970694, -0.1178927273, 0.0833672807, -0.0997037515, 0.2030598670, -0.0075468174, -0.2597698867, -0.1787244678, -0.1665320396, 0.0434491523, -0.1423088610, -0.0780720413, -0.0986053944, 0.1923201978, 0.0082486263, 0.2288391143, 0.1253702939, -0.1052101851, -0.0490913913, 0.1438056678, -0.0149375107, 0.0648155436, 0.0157463234, -0.0307306368, -0.0289450884, 0.0249372721, -0.0614044406, -0.1243103370, 0.2002641559, 0.0895732418, -0.0684020817, 0.1143766865, 0.1193592846, 0.1662130803, -0.1121250913, 0.2113165259, 0.0494257249, -0.2192786187, -0.1553166360, -0.0951652974, -0.2700078487, -0.1186846271, 0.0421386473, 0.0496505685, 0.0898225233, 0.1937160194, -0.0798875839, -0.0882055759, -0.1155579612, -0.0518548414, -0.1168420687, 0.0044956924, 0.1053237841, -0.0673721433, -0.1023196578, -0.0595322363, -0.0363504291, -0.1518625021, 0.0003118156, -0.0585620105, -0.1036080793, -0.1443868577, -0.1124506891, -0.1763451099, 0.1259281486, 0.1873934120, 0.0227370523, -0.0745006204, -0.1919264346, -0.0281265117, -0.1517867595, 0.1042026877, -0.1340925694, -0.2643524706, 0.0067724255, 0.0025589271, 0.0505221263, -0.1456539184, -0.0163258780, -0.0185462739, -0.2393347174, -0.1210760698, 0.0410257950, -0.2438319325, -0.1152385101, -0.0404905863, -0.1448535770, -0.1244121715, -0.1010725200, -0.0765700042, 0.1320862472, -0.0097914888, 0.0839287862, 0.1092207953, 0.0633430555, -0.0105753653, 0.0769290403, 0.1747508794, -0.1800455302, 0.0645806789, -0.1284292787, 0.0972630605, -0.1329236329, 0.1676902473, 0.1745328456, 0.1923893690, -0.2443730533, 0.0141785368, 0.1591482460, -0.1372480541, -0.1796901226, -0.0028982097, -0.1405776143, 0.0962133929, -0.1365546882, -0.0083272848, 0.0439268053, 0.1282745004, -0.0653326809, -0.0706643984, -0.2638760805, 0.1036213860, -0.0376592353, 0.1651846766, -0.0875022635, -0.0100484947, 0.1193462536, -0.1088913977, -0.0090475762, -0.1033122912, 0.1970754862, -0.0962296352, -0.0805081129, 0.1716558337, -0.0740891621, 0.1785954684, -0.0452703238, 0.0257447734, 0.1415181458, 0.0645688176, 0.0903969109, -0.0102024181, 0.0450566113, 0.1940063089, 0.0224014856, -0.2360434234, 0.0411982797, 0.0684330165, 0.1640340239, -0.0769910812, 0.1377608329, -0.1142682284, 0.1016720235, 0.0971702859, -0.0287264045, 0.0053580771, 0.0207672622, -0.0705605075, -0.0496355779, 0.1805674136, 0.0943741649, -0.1989904195, 0.2026395351, -0.0334418304, -0.0268805549, -0.0625294223, -0.0071675410, 0.1534556895, 0.2624708116, -0.1370840520, 0.0818478093, 0.0006878293, 0.0807004720, -0.1436849535, -0.0100506078, 0.1096336991, -0.1747205555, 0.2349388301, -0.1298280954, -0.0407872759, 0.0756491199, 0.0057028346, -0.1697802842, 0.1818203032, -0.1873030216, 0.0274707861, 0.0988968387, -0.0991435796, 0.0193503033, 0.1557713151, 0.1059897393, -0.1741696298, 0.0079064406, 0.0587924607, -0.0131731937, -0.1466188431, -0.0165485144, -0.0324251242, -0.0661562085, -0.0513852984, 0.1013021991, 0.1676900685, -0.1094837785, -0.1344631761, 0.0558940880, -0.1536092162, -0.0668402314, 0.1874202490, -0.1119900569, -0.1096795425, -0.1845462769, 0.2465110272, -0.1874359697, 0.0107601630, -0.1512846053, 0.1797122806, 0.0527988225, 0.0970419943, 0.1460825652, -0.2185883224, -0.1428128481, 0.0852496549, 0.0954247117, 0.0946551561, 0.0937567502, 0.0189241245, 0.0554912388, 0.1371232420, 0.0005558552, 0.1268319339, -0.0786604956, -0.1914135069, -0.0374866836, 0.1401450932, 0.0751988515, 0.1451630294, 0.0036489561, 0.2067054808, 0.2167542875, -0.0792597681, 0.1537467092, -0.0217151400, 0.2386569381, -0.1496331096, -0.1357065588, -0.1969930381, -0.0702436119, -0.1912702024, -0.1737647504, -0.0167123862, -0.0265098494, 0.0996970758, 0.1578309238, -0.0120987305, -0.1718799323, 0.1698444933, 0.1564565897, 0.0750057176, -0.0847225413, 0.0420781262, 0.1350574791, -0.1843414754, 0.2224939764, -0.2166007608, -0.0250204708, 0.0684941038, 0.1051020771, 0.0948406085, -0.0282190759, 0.0772529617, -0.0896552429, 0.0085462844, -0.0544829667, -0.1005530283, -0.1180967465, -0.0298565216, 0.0708062723, -0.1378240287, 0.0947934017, -0.1858257949, 0.0236229226, -0.2579763234, -0.0869268030, 0.1025458723, 0.0453843400, 0.0113255437, 0.0326434411, -0.1313522756, 0.1302686483, 0.0937306955, 0.1115231961, -0.0188028552, 0.1895232350, 0.0988421515, -0.1013474688, -0.1008655131, 0.0451333784, 0.0012209460, 0.0902381316, 0.0816800222, -0.1012306660, -0.0001682900, -0.1161073148, 0.0882496089, 0.1303337514, 0.1254481077, 0.1244625524, 0.1731072068, -0.1404523551, -0.1432523131, -0.1606015116, 0.2401279509, 0.0702412501, 0.0798742250, 0.1169861481, 0.0413791686, 0.2132803649, 0.0007562503, -0.1708399802, -0.2328857183, 0.0719947889, 0.0101059759, 0.0870106891, -0.2390052378, 0.0344650149, -0.0942523256, 0.0196466707, 0.1206727251, 0.2364790291, 0.0479629971, 0.1486284435, 0.0687305033, 0.1088753119, 0.0197398942, 0.1513244659, -0.0316969864, 0.1025078967, -0.0660644844, -0.0001136585, 0.0613649897, 0.0282606836, 0.0592136532, 0.0374069698, -0.1110000685, 0.0096715158, -0.1700048149, -0.0580604486, -0.0529875048, 0.0496629849, -0.1547144800, -0.1499796361, 0.2684369981, -0.0485962741, 0.2057607025, 0.0245908964, 0.0902316868, 0.0203481242, 0.1157366633, 0.0962304622, -0.1806339920, 0.1123543009, 0.2707393765, -0.0787684768, 0.0338492021, -0.1560080349, -0.1393864006, 0.1335195154, -0.0362347960, -0.2030453831, -0.2126242518, 0.0546570681, 0.0915462747, 0.1961149573, 0.2444622517, 0.2156799585, -0.0415568054, 0.2668354213, 0.0824624225, 0.0357335657, -0.2222212255, -0.1317666918, 0.2213888615, 0.0336036161, -0.0423975028, -0.1340620071, -0.0131743327, 0.1772028804, -0.1353704482, -0.0724577829, -0.0954543427, -0.0752638355, 0.1595337689, 0.1078604907, 0.2186549455, 0.0339051187, -0.2349677235, -0.0996220335, 0.0010621072, -0.0497558303, 0.1985463947, 0.0730200931, 0.0353082642, 0.1306164563, -0.1301583350, -0.0970988274, 0.2526674271, 0.1536499262, 0.1002108082, 0.0666813478, -0.1672529727, 0.0243042577, -0.0968776792, -0.0240239929, 0.0575444549, -0.1849395186, 0.1155233085, -0.1549525261, -0.1220257804, -0.0878613666, -0.0440414250, -0.0422513187, 0.0696105137, -0.0157473329, 0.0086669512, -0.0144739468, -0.0382610857, 0.0696661994, 0.0378158092, 0.1826743633, -0.0098586483, -0.0188092627, -0.0266479347, 0.0449046791, -0.1012439206, -0.0630946085, 0.0648321137, 0.1170966923, -0.0616662987, 0.2098257095, -0.0689480677, 0.2002969086, -0.0088793980, 0.0683542192, -0.0077951369, -0.2070482075, -0.0124153709, 0.0530757643, -0.1861189157, 0.2548243999, 0.0416296497, 0.0537902154, 0.1230304763, 0.0700700730, 0.0004559205, -0.1210024208, -0.0000857385, 0.1893426329, -0.2070355713, 0.0518788584, 0.0606373772, -0.2059396356, 0.1025738344, 0.0033500253, 0.1916826963, 0.0092266882, -0.0439766757, 0.1823015958, 0.1276006401, 0.0017108832, 0.0281704161, -0.0813161135, 0.0921742395, 0.2424557060, 0.0392447487, -0.2004977912, -0.0194929130, -0.1118747666, -0.0065084496, 0.1013694108, 0.0088707218, -0.0948923156, 0.0822350457, -0.0369198583, -0.0899736807, 0.1118437424, -0.0786796510, -0.1340851039, -0.0987498760, 0.1101698652, 0.0531349927, 0.0055479724, 0.1798736602, 0.1102196276, -0.1129954010, 0.0418376699, 0.0214202777, 0.1686993539, -0.0287589822, -0.0955899581, 0.0281773005, 0.0026936703, -0.0772177503, -0.2117053717, -0.0626359880, -0.0593381710, 0.0013958469, -0.1204111129, -0.0281258803, 0.1251893640, -0.0082159294, 0.1165343449, 0.0951596871, -0.0037335004, -0.1778094620, 0.1966621876, 0.0115873255, -0.0552611239, 0.0061921380, 0.0316174626, 0.0532217287, -0.0700179711, 0.0567042418, -0.1400003433, 0.0223977286, 0.1556134522, -0.0753989741, -0.0253105834, -0.1602025479, 0.2559308410, 0.1272930950, -0.0807903111, 0.0063811354, -0.0799764097, -0.0815763324, -0.1592342705, -0.0098348772, 0.0410472192, 0.0979437232, 0.0379800946, 0.0802370906, -0.0254631080, -0.0194076169, 0.0368908718, -0.0800034478, 0.1260272563, -0.0436356030, -0.0575038679, -0.0802422091, 0.0206927843, -0.1723516881, 0.0084125856, 0.1702624559, 0.2698360085, -0.0116599314, -0.2140482068, -0.0685839653, 0.0153917475, 0.0379277952, -0.1224712804, 0.1375347674, 0.1101782918, 0.1240108311, 0.1221950799, -0.1923043430, -0.2413708717, -0.1133502722, 0.0279561765, 0.1559771597, 0.2381704152, -0.0562487543, 0.0318504274, 0.0373299271, -0.0384458005, 0.0310210176, -0.0091333725, -0.0858214274, -0.2162113339, -0.0211601667, 0.2015044838, -0.1057245806, 0.0295731109, 0.2514726222, -0.0960877836, 0.2431501895, 0.0446274243, 0.0167449936, -0.0275975280, -0.0907582417, -0.2542599142, -0.0081137633, -0.1076715142, -0.1976927370, 0.0787561536, -0.0718958676, -0.0653767660, 0.1122010648, -0.0380191319, 0.0143597219, -0.1956526339, -0.0610981956, -0.0417640395, -0.1398604959, 0.1626293510, 0.0815840811, 0.0101023335, -0.0627372414, 0.1620960534, -0.0644099936, 0.0864413977, -0.0669714585, 0.0332458243, 0.0325182825, -0.1820943505, -0.0131560238, 0.0973263606, 0.2192871422, 0.0645601898, 0.2235974669, -0.0793902427, 0.0125586046, -0.0724217445, 0.1915116012, -0.1918877810, 0.1336862147, -0.0529502220, 0.1306762397, 0.1943646222, -0.1770694554, 0.2352369130, 0.0998106599, -0.1229612455, 0.1665177345, -0.0071159797, 0.0037203417, -0.0219797827, 0.0570897572, 0.1967794597, 0.1983909011, -0.0745180547, -0.2495909035, 0.1474021971, -0.1033003032, -0.0393468998, -0.1142973080, -0.0038741734, 0.2210386544, -0.0694644004, -0.0392799824, 0.2384757102, -0.1319522858, -0.2529400289, 0.0416268483, -0.0462993160, -0.1670848131, 0.0060002259, -0.1701554656, -0.1571494788, -0.0673566386, 0.0493700095, 0.0848664939, 0.1237306520, 0.0528396182, 0.0757950991, 0.0913166925, 0.1074734703, -0.0119315581, 0.0295400750, -0.0327697545, -0.1493820101, 0.0066212555, -0.0273180716, -0.1219323277, -0.1464032382, -0.0185868442, -0.0245682076, 0.0480670296, 0.0606293455, -0.2177292258, -0.2414793819, 0.0141316643, -0.0697930977, 0.1650818884, -0.0552251413, 0.0791122466, 0.0164759010, 0.1200042218, -0.0415597968, 0.2021154612, -0.0592002980, 0.2088685930, 0.2005883902, 0.0728001371, -0.1965334266, 0.2217718363, 0.0383535884, 0.0810742900, 0.0482991971, 0.0275388602, 0.0646629781, 0.0178361628, -0.0725532845, -0.0237225480, -0.0944663808, 0.0522853844, 0.0514598116, 0.0436953790, -0.0380561501, 0.2177446336, 0.1263272464, -0.0581545606, -0.0447197370, 0.0100152101, 0.0925223380, -0.2064668983, -0.1313192397, -0.0359507687, -0.0927749872, -0.0332460701, 0.0465017706, 0.1851018518, 0.1809007227, 0.0014425446, 0.1231117174, 0.0345307961, -0.1875515431, -0.0189229436, -0.0415567830, -0.0592115000, 0.0318053998, 0.0219779424, -0.0093951551, 0.1288246214, -0.1208997816, -0.0399280936, -0.0968486667, 0.0681050420, -0.0026304463, -0.2457809001, 0.0414424501, -0.0332606547, -0.0906906649, 0.0748735964, -0.2130498439, 0.0362252407, -0.1808708608, 0.0628848374, 0.0639867187, -0.1416873485, 0.1112017184, -0.1696384400, 0.2167634219, 0.0208205115, -0.1707897186, 0.1002075747, 0.1491116285, -0.0253725331, -0.0254133046, 0.2072005719, -0.1266487986, 0.1806630492, -0.1830462813, -0.1106959283, -0.2421131581, 0.1597911417, -0.0995620564, 0.1534899473, 0.0205455944, -0.2206676304, -0.2227330059, -0.0647004172, 0.0604166500, 0.2450632453, -0.0981341749, -0.0858721212, -0.0469468236, 0.0126542579, -0.0576207004, 0.0601997562, 0.0918862298, -0.1503405124, -0.1456338912, -0.1917609870, 0.0962223262, 0.1110610962, -0.2614746988, -0.2610226572, 0.1222635359, -0.0507930778, -0.0358839147, -0.0595387481, 0.0730027780, -0.1719954610, -0.1094251126, 0.1039237753, 0.0084968349, -0.0288250539, 0.0949832872, 0.0493687354, 0.1153727621, -0.2006050199, -0.0421145596, -0.0413916521, -0.1207407787, 0.0869357511, -0.1149990261, -0.0513186231, -0.0873262957, 0.0933618918, -0.0104976492, -0.0714698657, -0.1599154472, 0.0729137585, -0.0381927304, 0.0522338040, 0.0234390292, -0.0543197691, -0.0330703706, 0.1203990355, -0.2299303561, -0.1338535249, -0.1836021543, 0.1258745939, -0.0317321196, 0.0528582819, -0.0570069589, -0.0639793426, -0.1054780930, 0.0488508157, -0.0222499482, 0.2111660540, -0.0709466860, -0.1120941713, -0.0620792769, 0.1704667658, -0.0246226564, 0.0497406796, 0.0077624670, 0.1060492471, 0.1250784099, 0.0571531579, -0.2007730752, -0.1424136907, 0.0497698188, 0.0403526500, 0.0892921165, 0.0237671025, 0.0678925812, 0.0351390131, 0.0158058405, -0.0054180087, -0.1761610359, 0.0680419058, 0.0474989787, 0.0219406318, 0.0522092097, -0.0054621799, 0.1816941798, 0.0303071123, 0.2114597708, -0.0342857428, 0.0785099640, 0.0667336285, 0.0471256189, 0.0845392570, -0.0744211450, 0.0347686000, -0.1770772338, 0.0796582624, 0.2250840217, -0.1585308313, 0.2172124833, 0.1993129998, 0.0756561980, 0.0318728611, -0.1055652425, 0.1471896619, -0.0473575182, 0.1742070615, 0.1653370559, -0.1677956283, -0.0891670212, 0.1496806741, -0.1625662297, 0.2039443403, -0.1741695255, -0.2472106665, 0.0235921498, -0.1490849704, 0.0926825106, 0.0342438482, -0.0173317473, -0.0906380489, -0.0011901619, 0.1805988252, 0.1762340516, 0.0641650558, 0.1650154740, -0.0067100986, 0.1673383862, 0.0190584250, 0.0402193218, -0.1161330119, -0.0656561255, 0.2109890878, -0.0759894550, 0.1202330217, 0.0523299240, 0.0992242545, 0.0449775755, 0.0639149472, -0.2156052589, -0.2697951496, 0.0010921448, 0.1183554754, 0.0078012068, -0.0026454539, 0.1055025309, 0.0650343373, -0.1235892624, 0.1228501275, -0.0517019182, -0.1513875574, -0.0785555318, -0.1343142986, -0.2546516359, -0.0341941006, 0.0324445292, 0.0160896666, -0.2242693454, 0.0713550895, 0.0674291551, 0.1934719682, -0.1403724253, 0.0450993590, -0.0265571941, 0.1920085996, 0.2357332110, -0.0208362695, 0.1573659629, 0.1498130709, -0.0007292177, 0.1847196221, -0.0155660929, 0.0341428146, -0.1687328815, 0.0142954504, 0.1094089001, 0.0511222295, 0.1257371008, 0.0451100618, 0.0896846950, 0.0396998152, -0.1804207265, 0.1371865422, 0.0867048129, 0.0169792976, -0.1902774274, 0.1004566550, -0.0493969470, -0.0751353875, 0.0434242487, 0.2037596405, 0.0358879119, -0.0559941977, 0.0877351537, -0.1882314831, -0.0214794204, -0.0766841620, 0.1281448007, -0.0943002105, -0.1114660576, -0.2438336015, 0.1524413377, 0.0814280212, 0.1968276948, -0.0642704517, -0.0376472510, 0.1000253558, 0.0278413147, -0.1621633321, 0.1393308342, 0.0059455009, -0.0976811722, -0.1353281885, 0.0624444634, -0.0283353031, 0.1841790080, -0.1194109246, -0.2271786481, 0.0277917851, -0.0359728262, -0.0737980828, -0.1030735746, 0.1149806157, 0.0680713579, -0.0172322523, -0.0542380624, -0.1558842510, -0.0380513482, 0.0945104361, 0.1082053110, -0.0638849810, 0.1163649336, -0.0110538965, 0.2662984729, -0.0787081569, -0.1855627000, 0.1525519937, -0.2000199556, 0.0308755003, -0.0820205808, 0.1012357846, 0.2075620592, 0.0888719410, -0.0292993151, 0.2172103375, 0.0121471481, 0.0253229346, -0.1639609784, -0.1570358723, 0.0247523971, 0.1663623005, -0.1405789554, -0.2474110425, -0.0149600487, 0.1535143703, -0.0226047505, -0.0650516748, 0.0069864546, 0.0175243802, 0.0038398188, 0.0660111383, -0.0424869657, 0.0776631832, -0.0183737986, -0.0869430527, -0.1494268328, -0.0166543666, -0.0419533327, 0.0315900147, 0.0226192661, 0.1104337126, 0.0037674622, 0.0159093104, -0.1244358346, 0.2483104914, 0.0797871649, -0.0672426522, 0.1292372346, 0.1282052696, -0.0593832508, -0.1201583371, -0.0200810470, 0.0683765709, -0.1545549929, 0.1894742996, 0.0129426401, 0.2651787102, 0.0146546029, -0.0710623786, -0.0824218616, -0.0536277741, -0.0220742673, 0.0371612161, 0.0501532704, 0.0374014787, -0.1973555982, -0.1796642840, -0.1982379258, 0.0604789481, -0.0173881967, -0.0464618467, 0.0800839737, 0.0982972458, 0.1122973859, -0.0259707719, -0.0088451719, 0.0022834032, 0.0302315112, 0.1780905575, -0.0478653610, -0.1222671047, 0.0968416929, -0.0497305319, -0.0577505194, 0.0007151306, -0.0498013645, -0.0304146912, -0.1052006185, -0.1053025201, -0.0786160678, 0.2685860991, 0.0033169291, 0.1460538507, 0.1265521944, -0.0345522910, 0.0154423611, -0.1557388455, 0.1036774144, 0.0176534578, -0.1393487602, 0.0324728563, -0.0713545009, 0.0921154246, -0.0469744839, 0.0453679599, 0.0182864927, -0.1091929972, 0.0383771025, -0.0966230780, -0.0962072536, 0.0194798093, -0.0890970603, -0.1082279012, -0.0971921459, 0.1856207848, 0.1172413826, -0.1028622836, -0.0732166618, 0.0015684748, 0.1066412777, -0.0922750831, -0.1998403519, 0.0269366074, 0.1810275763, 0.0593228564, 0.1500222236, 0.0241771694, 0.1283854097, -0.0106691755, -0.1123632416, -0.1406598538, -0.0067746560, -0.0311824027, 0.1321302503, -0.2504011393, -0.0234704055, 0.2124932706, 0.1233276054, -0.1285049915, -0.1130529791, -0.1045660973, -0.0141812004, -0.0985318646, 0.0552166291, 0.1919989288, 0.1705280840, -0.0296229441, 0.0682996735, 0.0579333305, -0.0813537166, 0.2484443188, 0.0806758404, 0.1446495205, 0.1474381387, -0.0991878361, 0.0641991869, 0.1365206838, 0.1601680964, 0.0858161300, -0.1637281030, -0.0577757359, -0.1666445881, -0.0558358207, -0.1758457720, -0.1128027663, -0.0032959150, -0.1402225941, -0.0361263119, -0.1555714458, 0.0796509534, -0.0080033671, 0.1023006514, -0.0497527756, 0.0184543245, -0.0628422052, 0.0648100674, 0.0212988593, 0.1095597968, 0.0261402503, -0.1076127589, -0.0319799967, 0.0076422328, -0.0522099510, -0.1591572464, -0.0022745561, 0.1201341078, 0.2006478161, 0.0051918058, 0.0967355743, 0.1305693090, -0.0957256034, -0.0026962622, 0.1982221901, 0.0968147516, 0.1752474755, -0.1273067296, 0.1526082456, 0.2224592119, 0.0793135539, -0.1338524222, -0.0588543937, 0.0005461691, -0.0313347988, 0.1861609370, 0.0540969223, 0.1402087808, -0.0989566520, 0.0755255520, 0.0901008248, -0.0374577865, 0.0304167699, -0.1487319171, 0.0423949175, -0.0137849366, -0.0133740054, -0.2130402178, 0.0226625893, 0.0321315490, -0.2318417877, 0.0096486900, -0.1243485287, -0.1196677163, -0.2384766191, -0.0754611865, 0.0472491123, 0.0097067570, -0.1581194848, 0.0813431218, 0.1394619495, -0.0905791670, 0.1774453819, 0.2082783133, -0.1479767114, -0.2661862969, 0.0070287916, -0.1760963053, 0.1111881956, 0.0528902858, 0.0837273523, 0.1986883730, -0.1033084542, 0.0997817069, 0.0780874565, -0.2595966458, 0.1822513640, -0.1376750320, -0.0726740658, -0.0614343174, -0.2163450718, 0.0159295779, 0.0087411450, 0.1640034467, 0.0171834324, -0.0613905936, -0.0049658152, -0.0488020405, 0.1636086553, -0.0516124740, 0.1673409045, -0.0216677040, 0.1832581758, 0.2049747258, -0.1562257260, -0.1047036275, 0.1702646613, -0.1628862321, -0.2602502704, -0.0868049860, -0.0311857462, -0.1243360341, -0.0597848222, -0.0744986236, 0.1116806790, 0.0747794360, -0.0068190251, -0.2364195138, -0.1578776240, 0.0729732960, -0.0338903330, 0.0755812898, 0.1053867340, -0.2663447261, 0.1548429877, -0.0096560698, 0.0266269855, 0.1634268612, 0.0218499508, 0.1219437420, -0.0535271429, 0.0533492714, 0.0445239171, 0.1746230125, -0.0930466503, 0.0308758151, 0.1608313769, 0.0198249128, 0.1166775003, 0.0130116576, 0.1814226508, -0.1266755909, 0.0028357175, -0.1432089657, -0.0623835884, 0.1549783051, 0.0100485981, 0.0373252816, 0.0033275255, -0.1487499475, -0.0025871401, 0.0037454176, -0.0746070296, -0.0224106442, -0.0371554606, 0.0576675050, -0.0494823866, -0.2658083141, -0.0442465805, 0.0156582538, -0.1356081367, 0.2592295110, -0.1541258693, 0.0436352268, -0.0598925129, -0.1645375639, -0.0493655801, 0.0515330657, -0.1747798026, -0.2651606202, 0.1124695688, -0.1496922374, 0.1360066980, -0.0684683099, -0.0183000471, 0.1015234664, 0.0320030227, -0.0515871868, 0.1901353002, -0.0027493462, 0.0202596914, -0.0514947921, 0.1374755353, -0.1603166163, 0.0216714982, 0.0923232660, -0.1827605069, -0.1321155578, 0.1345044672, -0.0030198616, -0.1106821895, -0.0957098752, 0.1122455001, 0.2396878302, 0.0965278745, -0.0455650389, 0.0785559863, 0.1491365284, 0.1068448946, 0.0107688392, -0.0240987446, -0.0498304032, -0.2465710789, -0.0320139043, 0.0261565838, 0.0472950153, 0.0358704850, -0.1921409518, -0.0319631845, -0.0820630416, -0.0664330646, -0.1011241600, -0.1020586640, -0.0445225686, -0.0459471010, -0.1303759664, 0.0126110800, 0.1642976999, -0.1213396788, 0.0230780803, 0.1898538023, 0.2090181857, -0.1529430151, -0.1805747151, -0.1391751468, -0.0952970758, 0.1661821902, -0.1864250302, 0.1325191855, 0.0268784948, -0.0242236424, -0.1588645428, -0.0940429568, 0.1402541697, 0.0383940861, 0.2256457955, -0.1267148852, -0.1232781038, -0.1911229044, -0.1433533281, 0.1844151169, -0.1965219229, -0.2673077881, 0.0074339896, 0.2037639320, 0.0610028245, -0.1792790443, 0.0698499233, 0.0563570745, 0.1665752232, -0.1097647697, -0.0300631933, -0.1946748048, -0.1396349967, -0.2576225400, 0.2494567633, -0.2603136301, 0.1125315279, 0.0664301813, -0.0486309268, -0.1507842839, 0.0997179076, 0.1045842543, 0.0118995318, 0.0128460322, -0.2202145010, 0.0528404340, 0.1993339360, 0.2202623934, -0.1973114163, -0.1099171340, -0.1794288158, -0.0357287489, 0.0278972983, 0.0112462966, -0.0788485110, -0.0930017084, 0.0522977859, 0.0931677669, -0.1190336049, 0.1776798517, -0.0557805412, -0.0713128597, 0.2551385164, 0.0134411808, 0.0264431741, 0.0041495143, 0.1748730540, -0.0835611373, 0.0217258334, -0.0218894426, -0.1482398361, 0.2212004811, 0.1240407825, 0.1173826978, -0.0491191521, -0.1351474524, -0.1259716898, -0.0486457609, -0.2486836761, 0.0439905711, -0.1040810347, -0.1274853796, 0.1330569535, -0.0459120721, 0.0005810607, -0.0141009260, 0.1983979791, 0.0383982174, -0.0298321415, 0.0888067707, -0.0673578158, -0.2149461955, -0.0715935156, -0.0004039684, 0.0004593235, -0.1517680287, -0.0813886449, -0.1281664073, 0.1518224031, 0.0765992552, 0.0163085293, -0.0584555529, -0.1123509258, -0.0609285980, 0.0339771733, -0.0865900367, -0.1309516877, -0.0390949249, -0.0873691365, 0.2041321099, -0.0792279765, 0.0670241863, 0.0462402627, -0.1564127505, 0.0998361483, -0.0357090235, 0.1648674011, 0.0298920367, -0.0984118283, -0.0776237100, -0.2478506714, 0.0625140369, -0.2099535763, -0.1099561378, -0.1345171332, -0.0319282562, 0.2223308384, -0.0702063665, -0.2506728768, -0.0181878731, -0.0651948974, -0.0508175977, 0.0091766408, 0.0084134219, -0.1246446446, 0.1443669498, -0.1521012783, -0.1327927113, 0.0090610050, 0.0442201681, -0.0903735682, -0.0677111447, 0.2581701577, -0.0372008085, -0.1398658603, -0.0456682183, -0.0164213832, 0.0531007312, -0.0476297215, 0.1692472994, -0.1957340837, 0.1612693071, 0.0944541171, -0.0607068315, 0.1416800618, -0.1202426255, -0.1149292663, -0.0547454022, 0.0308243092, -0.0646562800, -0.0267851315, 0.1381292939, -0.0924706757, -0.0999882445, 0.1890090108, -0.0885831118, 0.0026463037, 0.0492690876, -0.2194697559, 0.0860209689, -0.0582165644, -0.0276619233, -0.1556378305, 0.1877168119, 0.0084784646, -0.1307077259, 0.1288665086, 0.1257598400, -0.1780647486, -0.0205978025, -0.0759124085, -0.0685425848, 0.1041311100, 0.1578900069, -0.1514024138, 0.0511436909, 0.0760861039, 0.1696421951, -0.1187317222, 0.0535608716, 0.0880541056, -0.0347470455, -0.1126131639, -0.0971555412, 0.0861255452, 0.0874284506, 0.1720332652, -0.0236360058, 0.0924275219, 0.1285512149, -0.1043941751, 0.0513268597, -0.1947112381, -0.1012188867, 0.1598102301, 0.0313546918, 0.0217639208, 0.0959277973, 0.0283310413, 0.0979566053, 0.0656488165, 0.1373606026, 0.2530889809, 0.0451893546, -0.0302298199, -0.0671702847, -0.1935771257, 0.1086538583, 0.0349072106, -0.0460355021, 0.1806145459, 0.0351489037, 0.0528644025, 0.0299015045, -0.2094452679, -0.0613591224, -0.0676210299, -0.0175870024, 0.0568165705, 0.1447055638, -0.2360733747, -0.0069612768, -0.0712044910, -0.0663645864, -0.0162502918, 0.0435203500, -0.1296825707, -0.0817763954, 0.1042352989, 0.1231195480, -0.1008110642, 0.0376973487, 0.1269291937, -0.0777179375, 0.0796552077, -0.0308979880, 0.0491546541, -0.0515162908, -0.0461008064, 0.1068088114, -0.2285837680, 0.1607585996, -0.1771598011, 0.0900096297, -0.0106411427, -0.1277935058, 0.1767051965, 0.0573941059, 0.0463521257, -0.0285594054, -0.2306789607, 0.0220567174, 0.0322141610, 0.1147657111, 0.1399189085, 0.0629839674, 0.0468334407, 0.0246421508, 0.0472886451, -0.1674589515, -0.0794660375, 0.0171434470, -0.0626197755, 0.0735947862, -0.0851852670, 0.0666874945, -0.1717957556, -0.1373740137, -0.0959274396, -0.0071511660, 0.0788855702, 0.0199103821, 0.0202859249, 0.2005279362, 0.0529377349, 0.1380246729, 0.1127410084, 0.0188310221, 0.2316228002, -0.1434526443, 0.0719783530, 0.2214896828, 0.0476012006, -0.1310117990, -0.0590045936, 0.2376360446, -0.1941035390, 0.2399943471, -0.0069213789, 0.0959004238, 0.0099578295, -0.0095010865, 0.1443181187, -0.1206088811, 0.0086603221, -0.0927167609, 0.0986023322, -0.1905099452, 0.0451460071, -0.0001532086, -0.2288175076, 0.0615288503, -0.1031657383, 0.0646061301, -0.0541840829, -0.0633873940, -0.0442055874, -0.0575260408, -0.0828156844, 0.1621654183, 0.1205755398, -0.1235827133, 0.0252238140, 0.1314663142, -0.2704160511, 0.0776608065, -0.1868797392, 0.1720793843, -0.0452730358, -0.1350645572, -0.1289318055, 0.1006045863, -0.0549827367, 0.1605573893, 0.2294230014, -0.2126154900, 0.0716926530, 0.2366105318, -0.0917680711, -0.0389330909, -0.1778430045, 0.0797744021, -0.2426117808, -0.0953925550, -0.1000847220, -0.0234004054, -0.0090032835, -0.0130314315, -0.0467825755, 0.0437418036, 0.0527182631, -0.0021962796, -0.1117958650, 0.2567737699, 0.0050210287, 0.1304405481, 0.0838165060, 0.0549145378, 0.0759298801, -0.0560705103, 0.1256150901, -0.0243222211, -0.0982882679, 0.0158935748, -0.0716265887, 0.1949547231, 0.0393857136, -0.2050030231, -0.0629906878, -0.0297114346, -0.0401281565, 0.1168748364, 0.0066949911, -0.0254337154, -0.1119618863, 0.0379614420, 0.0690130517, -0.0356146693, -0.0302018560, 0.0311101116, -0.1310304254, 0.0207343213, 0.1997739673, 0.1390907019, 0.0909038782, 0.0181570929, 0.1791371703, -0.1528508812, 0.1366523653, 0.0706340596, -0.0282254145, 0.0211786088, -0.0388807133, 0.1088070124, -0.0091525335, -0.1072936431, 0.0009944576, 0.2521704137, -0.1636940241, -0.0940973684, 0.0094057359, 0.0602302849, -0.0612272583, 0.0859941468, -0.2525957227, -0.2455765605, 0.2193095982, 0.0056610894, -0.1397502124, -0.0095433295, -0.0377921239, -0.0366366431, 0.0430779271, 0.0602349713, 0.0034096818, 0.0458396859, 0.0465834513, -0.1160218269, -0.1797172725, -0.1563509852, -0.1291529685, -0.1301367730, 0.2482355833, -0.1105094925, 0.0404033102, -0.0317055807, -0.1571014076, 0.1796213984, -0.0302198417, 0.0610108301, -0.0498138070, -0.0281049516, -0.0535101183, -0.1346471012, 0.1404404789, -0.0606181808, -0.2163347900, -0.2110163271, 0.1227179244, 0.0382089354, 0.1866138279, -0.0763468072, -0.2218621969, 0.1029297188, 0.1135187745, 0.1277718842, -0.0107089654, -0.1006938890, -0.0607604682, 0.0329379626, -0.0601616986, 0.0219244603, 0.1158474162, 0.1784379184, 0.1361363381, 0.2471966296, -0.0638196617, 0.1197103560, -0.0404482260, 0.0865802243, -0.1292026937, -0.0348810963, 0.2016144097, 0.0254456792, 0.1380140483, -0.0631327704, 0.1178325862, 0.0424639508, 0.1428128034, -0.0041767894, -0.2634119987, 0.0716732070, -0.0818426311, -0.0421106517, 0.0693451986, 0.0400574058, 0.1963323802, -0.1543125212, -0.0298568681, 0.1251950711, 0.0404728130, 0.0003288267, 0.0170747787, 0.0386991836, 0.0321096815, 0.0830549598, -0.0964862406, -0.0194006730, -0.0531115830, -0.0469699651, 0.1026953906, -0.0463220887, -0.0283268616, 0.0035156836, -0.0543226749, 0.0950817838, 0.1006854028, -0.0987934321, 0.0591375157, 0.0389451571, 0.1216683909, 0.0404520631, -0.0386536680, -0.0153571060, 0.0234524161, 0.1717327684, -0.0843360424, -0.0849955082, -0.0872888789, -0.1457671523, 0.1504537165, 0.0393702313, -0.0579321682, 0.2445271909, 0.0394661613, 0.0452029295, -0.1520764977, 0.0691988543, 0.1113606393, 0.0916976258, 0.0750923678, 0.2694800794, -0.1929953247, 0.2106343508, 0.0061480817, -0.0178069845, -0.0406005569, 0.0035693906, -0.0854322761, 0.1839497536, 0.0378465392, -0.1280959845, 0.0622700453, 0.0085339416, -0.0402668193, -0.2368993908, 0.1422190964, -0.2448766530, 0.0923914090, -0.1722195446, 0.1592832208, -0.0619951785, -0.0551922694, -0.1177047566, 0.2254706472, 0.0386518463, -0.1813411266, -0.1078028977, 0.0127598420, 0.1494457275, -0.2154436409, -0.0365539640, -0.1151270047, 0.0981504098, -0.2383799851, -0.0534872413, -0.0291669182, -0.2071373612, -0.1853659600, -0.1624218822, 0.0328498632, -0.0678707287, -0.0027895686, -0.0240275785, 0.0749463737, -0.0042169266, 0.0974750295, -0.0907504335, 0.0301925633, 0.1054716706, 0.1249579936, -0.1745957583, -0.0325434506, -0.0173162818, 0.0966180488, 0.1264692396, 0.0901997760, -0.1034434661, -0.0911360234, 0.2026015222, -0.0297155548, -0.0493819080, 0.1189785078, -0.0329078734, -0.0027720171, 0.0466185436, 0.2600741982, 0.0195109639, -0.0331729427, 0.0181561969, 0.0209243465, -0.0023862820, 0.1258317083, 0.1842094362, -0.1773811579, 0.1752234697, 0.0401250646, 0.0183368176, -0.0168160256, 0.1810164750, -0.0386879668, 0.1650792509, -0.0917198807, 0.0355631076, 0.2385502756, 0.0977327749, -0.2636049986, 0.0286467597, 0.1717967242, -0.1510901451, -0.0614520125, 0.1262440234, 0.1329170465, -0.0918918326, -0.1689237803, -0.0024277729, 0.0846253186, -0.1261593699, -0.2649260163, -0.1393848062, -0.1204380617, 0.0981848240, 0.0160759129, 0.0915518776, -0.1247863472, 0.0095731588, 0.0523084365, 0.0096368026, 0.2634217739, 0.0326808915, -0.0385641828, 0.0127623836, -0.0790200084, 0.1649863273, -0.1179381087, 0.0109548727, 0.1823741645, 0.1034679934, 0.0174662471, -0.0100407749, -0.0835653096, -0.1344023049, 0.0211408343, 0.0167217385, 0.0305177215, 0.1911554635, 0.1003379151, 0.0359107703, -0.0165709220, 0.0039258837, 0.0375653245, 0.0633191764, 0.0094761373, 0.1405927241, 0.0632557794, -0.1089860350, -0.1924675554, -0.1201681197, 0.0429839194, -0.1196913496, -0.0069688018, -0.0250332430, 0.0954900235, 0.1802697480, 0.2189453989, -0.1543786079, 0.1421679109, 0.1549032629, -0.2703416646, -0.0563908592, -0.0003492683, -0.0077814730, -0.0697150156, 0.1574725360, -0.1952547282, -0.0022023348, 0.0223503858, 0.0581090041, 0.1158486158, 0.0207198504, -0.1245790049, -0.0769428089, 0.1175777093, -0.0710185021, -0.2607235909, 0.1311670989, -0.0516235642, 0.0201691166, -0.0523243956, 0.0488257222, -0.1444262415, 0.0678264201, -0.1378717571, 0.0710267648, -0.1046711206, 0.0790318698, -0.1747352481, -0.1647579223, -0.0365218371, 0.1418133527, 0.0051079439, 0.0064714472, 0.0953429118, 0.0018425788, -0.0017677061, -0.1110624075, 0.0528960526, 0.0683859736, -0.0880797729, 0.0413056053, 0.0661247224, -0.1141880453, -0.2389284521, 0.2652922273, 0.0134646278, 0.0315883532, 0.0827002898, -0.0829154924, 0.0451947823, -0.1137013286, 0.0011031354, -0.1422433108, -0.0173524152, 0.1319737732, -0.0333541073, -0.0504914261, 0.0410015658, 0.0051884199, 0.1282363385, -0.0379956141, 0.0936123878, 0.0351773798, -0.0334684514, 0.1023335233, -0.0065159998, -0.0523285754, -0.1155071780, 0.0475294068, 0.2698586583, 0.0168051459, 0.1336763352, -0.0845646784, 0.1143071130, 0.0638768747, 0.0095958645, -0.0859467462, -0.0795106664, 0.0183164887, 0.0734029114, 0.0225937013, 0.0263292026, 0.1204845160, -0.0061631100, -0.0867535770, 0.0162371024, -0.0839087293, 0.0479505919, -0.0293215755, -0.0291763637, 0.1033567339, 0.1477648616, -0.1614867896, -0.0962156057, 0.0034088267, -0.0715171248, -0.0334948748, -0.0630767792, 0.0060727876, 0.1240029335, 0.1306596696, 0.2299332172, 0.1141029894, -0.1160270125, 0.1252162308, 0.1246821955, -0.1149349883, -0.0402064025, -0.0544801280, -0.1348404288, -0.2243805528, -0.0362339728, -0.0504397117, 0.0742226094, -0.2087283283, -0.1935237497, 0.0520182140, -0.0085344017, -0.2241351753, -0.0393326506, 0.1613881886, -0.1979463547, 0.0867213756, -0.0626434982, 0.0315571465, 0.2214273214, 0.0197769422, -0.1440415829, 0.0984268859, -0.0760028064, -0.0006918943, -0.1110789180, -0.0222934131, -0.0712090731, -0.0361868814, 0.1715486199, -0.2083231509, 0.0732098073, -0.1883206218, -0.0192097090, 0.1643071622, -0.1476951838, -0.1269050390, -0.1572620571, 0.0276923757, -0.0794836208, -0.0000626869, -0.2018295079, -0.0862867162, 0.0543342531, -0.1723920107, -0.2445836067, -0.2059791237, 0.1326247901, 0.1660419106, 0.2213311493, 0.0986305848, 0.0081527224, 0.0830722153, 0.0818703696, 0.1133119166, -0.1384062320, 0.0637302473, -0.1470243931, -0.0429407023, 0.1250837296, 0.0238255449, 0.0343726128, 0.0957364067, 0.0878139138, -0.1396109015, 0.0088181319, 0.1082720384, 0.1060349643, 0.1586652696, -0.0743179768, -0.1330375075, 0.0618025400, 0.0825739130, 0.1202013791, -0.0749890730, 0.1724961847, 0.1030964330, 0.0803396925, -0.1155282706, -0.0574353226, -0.1650784463, 0.1506837159, 0.0352062769, -0.0048803198, 0.1000874341, 0.0969861671, 0.0212494172, -0.0185564999, 0.1971901208, 0.0594984107, 0.0099450462, 0.0213390663, -0.1349296123, 0.1940658391, -0.0716058537, -0.0940215290, -0.2121454030, -0.0898825973, -0.1086070687, 0.0907252431, 0.1885412037, -0.1981275976, -0.0116427196, 0.0481692888, 0.0134626506, 0.0729497895, -0.0905553773, 0.0830811113, 0.0930515826, -0.0302317236, 0.0928354561, -0.1526102424, 0.1963365525, 0.0373236425, -0.1303492039, -0.0945457891, 0.0767522305, -0.1508141309, 0.1793555915, 0.1439937204, -0.0681203082, 0.1625552028, 0.0315267928, 0.1756239980, -0.0689173341, -0.2133632302, -0.1665637940, -0.2406559139, -0.1137218475, -0.1131559610, 0.0901594684, 0.0503718182, -0.0900039077, -0.2289071977, 0.0905166492, 0.0521164834, 0.2137446105, 0.0166294817, 0.0872525573, 0.0390763357, 0.0073557626, -0.1934660673, -0.0701271966, -0.0993428379, 0.0589235909, -0.1113389283, -0.0119521059, -0.0123271570, 0.0575717762, -0.0099203568, 0.0044586747, 0.1378358603, 0.1030974090, -0.1156160831, -0.0402456485, -0.1219783872, -0.0801347867, -0.0686424300, 0.1440630257, -0.0656472668, 0.2102449536, 0.0942224190, 0.0742637366, 0.0367756076, -0.0381035842, 0.1052305624, 0.2702964246, -0.2055938393, 0.0125602297, 0.0270706471, 0.1271674335, -0.0950540826, -0.0315787680, -0.0878941789, -0.0597772822, 0.0303055532, -0.0283685923, -0.0794119984, -0.0535603724, 0.1694907248, 0.0851992816, 0.1618809402, 0.0625926629, 0.0170034487, 0.0273191519, -0.0499520563, 0.0982337147, 0.0676704645, 0.1772335470, 0.0324719660, -0.0718235672, 0.0701395944, 0.1248681247, 0.0673544407, 0.0094823632, 0.0163366869, 0.0237476975, 0.0428653769, 0.0151381837, -0.1609147340, -0.0387360528, -0.1082592458, -0.0604308806, 0.1122093573, -0.1491116583, -0.1250532418, -0.0380871408, 0.0306638256, -0.0102263400, 0.0094970046, -0.0011675121, -0.0048860186, 0.1073760539, -0.0822976157, 0.1062521413, 0.0125456406, -0.0676141679, 0.0781797394, 0.0731307194, 0.2499238998, 0.0452106036, 0.0064911735, 0.1828758717, -0.1846254766, -0.1249757186, -0.0008563642, 0.0367265902, 0.1778818965, -0.0053794044, 0.1181454137, 0.2235668153, 0.1784803271, -0.2015155703, 0.0213327575, 0.0495394543, 0.0175306965, 0.1418248117, -0.1015073135, 0.1809258312, -0.0745913461, -0.1856843531, -0.2023659050, -0.0293114521, 0.0901182443, -0.2100898176, 0.0151778013, -0.0588170588, -0.2121850997, -0.0282681081, 0.0964164808, 0.1168181598, -0.0190425105, -0.0475522354, -0.0632355660, 0.0573988892, -0.0107060252, -0.0922476053, 0.0140069807, 0.1163544655, 0.0293089021, 0.1044467539, -0.2630586326, 0.0066723954, 0.1764845252, 0.0230709426, 0.0026235601, 0.1247412190, 0.0562861487, 0.0094498871, -0.0541695133, -0.0780992135, -0.0436583720, -0.1688668281, -0.2180660367, -0.0156913791, -0.0140310749, -0.0791926235, -0.0389670469, 0.0219112895, 0.0832438841, 0.1849713326, 0.0932583809, -0.0314000249, -0.0795950741, -0.0513091572, 0.1248200089, -0.0863326266, -0.1446964443, 0.1282251924, -0.1170262471, -0.0057823095, 0.0665932670, 0.0179879796, 0.0191139542, -0.0038049754, 0.0764449984, 0.2284821868, -0.0118103474, -0.1342687309, -0.1125166193, 0.1280600876, -0.1901607513, 0.0736706108, -0.0607321784, -0.0946849808, 0.2004167587, 0.0812974349, -0.0706031099, -0.1172911748, 0.0690036044, -0.1735794395, -0.0267854277, -0.1309018880, -0.1709429920, -0.0288427360, -0.0827485248, 0.1615785956, 0.0179281719, 0.0271051005, -0.0342514701, -0.0326856449, 0.0093698055, 0.0267475452, -0.0743472055, -0.0373585820, -0.2406789511, 0.1439839303, -0.0956333727, 0.1204348654, -0.1657071263, -0.0722519383, -0.0530260094, 0.2273620218, -0.0819532126, 0.0426145531, -0.0387829989, -0.1759929359, 0.0377597511, -0.1007926092, -0.0387881063, -0.0574575402, -0.1183367372, 0.0558611490, 0.0092305643, 0.0621493682, 0.0396101810, -0.1031455621, -0.0206509270, 0.0229274426, -0.0822139680, -0.1169264093, -0.1669163853, 0.0856140107, -0.1245390400, 0.0202452037, -0.0478402972, 0.1982948929, -0.1605426520, 0.0985802338, 0.0886253715, 0.2058272511, -0.0690565631, 0.0533616059, 0.0214207787, 0.0961577073, 0.1370779872, 0.0212490987, -0.1674164981, 0.1987916082, -0.1737273037, -0.0216346551, 0.0750799477, 0.0998897031, -0.0183625240, -0.1914945394, -0.0911363885, -0.1203176603, -0.2039466500, -0.2346374989, -0.2332811505, 0.1236883625, 0.0291845500, -0.2038824856, 0.0349517837, 0.0538287722, 0.0688347146, 0.0079803215, -0.0559712648, -0.1008520722, 0.1172260493, -0.1397321224, 0.0862359107, 0.0434910320, -0.1225991920, 0.1299429536, 0.0329591446, 0.2551635504, -0.0703016371, -0.1139548719, 0.0596401952, -0.1012532189, -0.1931716055, -0.0404496454, -0.0435116477, 0.0588495545, 0.0122329704, 0.1390681118, -0.0703588203, -0.1430986077, -0.0922080725, 0.2137673348, 0.1984222531, -0.0694032609, 0.1514779627, -0.0375299491, -0.0508981980, -0.1373699605, 0.0608941503, -0.0090205856, 0.0317622051, -0.0008821457, 0.0437709242, 0.1318790913, 0.1492338330, 0.1503323913, 0.1255097836, 0.2586268485, -0.0078810239, -0.0965224802, 0.2066761851, -0.1045350581, 0.1456488222, -0.0739999712, -0.0689581484, 0.0875218213, -0.0033843177, -0.1981295347, 0.0096161701, 0.1027120501, -0.0516174212, 0.0668825135, 0.0772454217, -0.1230488271, -0.2298956960, -0.2060127705, -0.0499918796, -0.1420171112, -0.0778468028, 0.0671119988, -0.0120856725, 0.0889147744, 0.1449514776, -0.1383948624, -0.0300290473, 0.0683912486, -0.0758395866, -0.1041617393, 0.0416104533, 0.1174845174, -0.1382027715, -0.0009269831, -0.0203781724, -0.1332495362, 0.0032161737, 0.0800857916, 0.1169721335, 0.1376263797, 0.1359550506, -0.0101296967, -0.0303098019, 0.0131320693, -0.1281654537, 0.0337685496, -0.1625873446, -0.0056786314, 0.1030172855, 0.0367689282, -0.0521655306, -0.0923153460, -0.1067136750, 0.1887393147, -0.0732743591, -0.0172561295, 0.2173665762, 0.0510763749, 0.1423779577, -0.0423257090, -0.0146091608, -0.0520755835, 0.0586846843, -0.0811131597, 0.2132149339, 0.0846863687, 0.0521881543, 0.0838487372, -0.0011773368, 0.0792531222, 0.0885588080, 0.0774760842, -0.0333791040, 0.1417358220, 0.0601217039, 0.0729507878, -0.0464023910, 0.1515486836, -0.0380531475, 0.0123647964, 0.0911363140, -0.0394576900, 0.1046163291, -0.0716572851, 0.2151401341, -0.2303927690, 0.0442946479, -0.0461036675, 0.2212741971, -0.1301108003, -0.0188111234, -0.0521827862, -0.1314701587, -0.0354824699, 0.1387600303, -0.0440731160, 0.0726225898, 0.0634212345, -0.0241667181, 0.0464773029, 0.0276646726, -0.0876993760, -0.0501674637, 0.2293791473, 0.0340729468, -0.0750701129, -0.1523799896, -0.0442126468, -0.2260516584, -0.0100937337, -0.0697112381, -0.1726099998, -0.0725414902, -0.0556482896, 0.0560648926, 0.0828577578, -0.1230627149, -0.1482505351, -0.0978656784, 0.1999222934, 0.0078806458, -0.1730933636, -0.0125446245, -0.1477826685, -0.0368774310, 0.1775797904, -0.0482355431, 0.1023681611, 0.0858236104, 0.2439104468, 0.1172146723, 0.1679761857, 0.0109649505, -0.0310043581, -0.0508778617, 0.0223350264, -0.1141643226, -0.2361358553, 0.0580585487, -0.0224115495, 0.0126285711, -0.0515296832, 0.0627495870, 0.0793177634, -0.0724242777, -0.0334783010, -0.1532209814, 0.0173999164, 0.0256940387, 0.0907877907, 0.0879235342, 0.0272938684, 0.0968191177, -0.0142476084, -0.2011105716, 0.1258565485, -0.0432625003, 0.1052732319, 0.0763339251, 0.0160654113, -0.0619924851, -0.0189124774, -0.0182678290, -0.0819119215, -0.1265258491, 0.1031511128, -0.0631072670, -0.0842238143, -0.0961856171, -0.1429774016, -0.1427319199, 0.2118316293, -0.2439224422, -0.1200307384, 0.1011682898, -0.0795311257, 0.1759001166, 0.0235076696, -0.1254789531, -0.0411575623, -0.1109593883, -0.0341073796, 0.0641150549, 0.0752117336, 0.0066810343, -0.0614724085, 0.0505506843, -0.0023650518, -0.0202487130, -0.0420614295, 0.0860609263, -0.1885354072, 0.0703550503, 0.1835789382, -0.2565840185, 0.0123252580, 0.1342196167, 0.1383673400, -0.0699670687, -0.0569833703, 0.1133789867, 0.1428803205, -0.1124389321, 0.0471882746, -0.0612294413, 0.1491768360, -0.0792831555, 0.2385578007, 0.1296301782, 0.0969282687, 0.2153510302, -0.1085376889, 0.0036383802, -0.0292034764, -0.0260323640, -0.0172428191, 0.0970643237, 0.0033569939, -0.2131011635, 0.0050893244, 0.2564958632, -0.0271565691, -0.1183866486, -0.0427078828, 0.0593180917, 0.1989327520, -0.0818861350, -0.1673220992, 0.0705963746, 0.2612545192, 0.1372246593, 0.2023476064, 0.0552710518, 0.0823806599, -0.2116021067, -0.0669234246, -0.1102146581, 0.0447661877, -0.2254838347, 0.0264847558, 0.0054228841, -0.1558801532, -0.0626077950, -0.2242761105, 0.0655556545, 0.0670747086, -0.1569431275, 0.2074964941, 0.0028491316, -0.1590596437, 0.0317448452, 0.0109221982, -0.0587447882, 0.0963956863, 0.0901009813, 0.2183451056, 0.1234881952, -0.0881261081, -0.1013888940, -0.2220646888, -0.2321693897, 0.1665220559, 0.1274978220, -0.0838872343, -0.0417354964, 0.0524829887, -0.0715213642, -0.0553356968, -0.0976608917, 0.0709571615, -0.0620087683, -0.1815902293, -0.1014647931, 0.1368141323, 0.0665176436, -0.1167855859, -0.2618562281, 0.1610533595, -0.2344515026, -0.1336748600, -0.0970238522, 0.2519588768, 0.0900367349, 0.1167762503, -0.1513773203, -0.2019673586, -0.0163836591, 0.0230647977, 0.1024526432, 0.0322163701, 0.0823928416, -0.0500448905, -0.0227138996, -0.1796551794, 0.1037020385, -0.0918537751, 0.1078776345, 0.2653409243, 0.0037247008, 0.0445214435, 0.1966507733, 0.0318345465, 0.0034190319, 0.1966899186, 0.0424474329, -0.0549822226, 0.1802040786, 0.0289056394, -0.1020534188, -0.1784539968, 0.1209762245, 0.0820361152, 0.1295060366, -0.1532268673, -0.1720391363, 0.1376513541, 0.1764528304, -0.1840014607, 0.0842576846, -0.0851820260, -0.1814902723, 0.0032317198, 0.1846670210, 0.0076818946, 0.0468739271, 0.0387726873, 0.2374014258, 0.0876688510, -0.0657367632, 0.1110500991, 0.0847120583, 0.1013194397, 0.1744723916, 0.0651537850, 0.0360937752, 0.1946171075, 0.0489841215, 0.0271802470, 0.1746184081, 0.0916715488, -0.0001056679, -0.1050090417, -0.0387722477, -0.1948210597, -0.0199674685, -0.1164281964, 0.0616672002, -0.1729287654, -0.0141964629, -0.0844783187, 0.0895643756, 0.2009106874, 0.0692053512, 0.0820545927, 0.2670634389, 0.1186039299, 0.1291008741, -0.0461311564, -0.2167212069, -0.0764383301, -0.1638139933, 0.0052711689, -0.0134262517, -0.0200358145, 0.0612947308, 0.0827874914, -0.2015228719, -0.1060989201, -0.0297617409, -0.1190776825, 0.1626676917, 0.1026113257, 0.1382542551, 0.1313239634, -0.0167037863, 0.1446097940, -0.0409650616, 0.2671121359, 0.0857728869, 0.1611751765, -0.0980264917, 0.0288009830, 0.1199955195, 0.1191168875, 0.0952792019, 0.1804393381, -0.0656771734, 0.0290115140, -0.1477760077, 0.2202345729, -0.0312530287, -0.0230785180, -0.1508005261, -0.1077312678, -0.0064854538, 0.0469048843, 0.0107457284, -0.0853830129, -0.0865365490, 0.1226104647, -0.0795223787, 0.2269051820, -0.1353382319, -0.1270755231, 0.0371360742, 0.1907947361, 0.0684009641, 0.1889748424, -0.0499542914, 0.2608048022, 0.0313920528, 0.1005064622, 0.0994081125, 0.0388914384, -0.0808326751, 0.0190072209, 0.1091549098, 0.0928228274, -0.0017343112, -0.0085958475, 0.0656654760, -0.1352995336, -0.0502421744, -0.0232627783, 0.1042800620, -0.0067862496, -0.2608778477, 0.0214623772, 0.0347716101, 0.0878722444, -0.1226837412, 0.0929234773, 0.0871281028, -0.0300333034, -0.0876703858, 0.2637012005, 0.0178974513, 0.0183767639, 0.0912706330, -0.2150944471, 0.1033229083, 0.2689729333, 0.1919589937, 0.1514397562, 0.0299570039, 0.0935619846, 0.0620909669, 0.0576450452, -0.0719014779, -0.1938748658, -0.0487082079, -0.0663014799, -0.1120864376, -0.0405310392, 0.1258429736, 0.0209359117, 0.1190880612, 0.0949581712, 0.0496530198, -0.1413388103, 0.1206670403, -0.1949131042, -0.0321487077, 0.1101565957, -0.0229210518, -0.1361111403, 0.1742200106, 0.1597201675, 0.2022687495, 0.0142944418, -0.1853233129, -0.0905655548, -0.0922142193, 0.0201154873, 0.2206434160, 0.1117141098, -0.1142744198, -0.1538009346, 0.1097054034, -0.2449508458, -0.1333503723, -0.0788995549, -0.0328595378, -0.0026726832, 0.1930470914, -0.0950027779, -0.0713927150, -0.2054801732, -0.1363590211, 0.0122703556, 0.2228658646, -0.1337835044, -0.2382839322, 0.0955333933, -0.1268174946, -0.0423240587, 0.1924093068, -0.1266368628, -0.0484931506, -0.0130057381, 0.0598942451, -0.0264252685, -0.2180828899, 0.1077888459, 0.1351715326, -0.0015403895, -0.2684439123, -0.0645514280, 0.1725243777, 0.0062235277, -0.2396935225, 0.0354663283, -0.0069525149, -0.1376238763, -0.0909972042, -0.1904201955, -0.1926000416, 0.2293570489, 0.0360407978, -0.0279507898, -0.0367114618, 0.0203540251, 0.0491001271, -0.2304211110, 0.0885665864, 0.1248241961, 0.0346875861, 0.1980375499, 0.0546900444, -0.0289956797, -0.0574552827, -0.1958432645, -0.0532679446, -0.1495198905, 0.1642130017, -0.0582736135, 0.2241669595, -0.1000854820, 0.0543557703, -0.1231826246, 0.0969394147, 0.0417850800, -0.1073272824, -0.0648138225, -0.0731438100, 0.0514725670, -0.0024593978, -0.0095088976, 0.0020176461, -0.1468715072, 0.1894563437, -0.1209583506, 0.1807546020, -0.0308439787, 0.0451000966, 0.0376802646, -0.1145296618, 0.0147463717, -0.0431932397, -0.0741528198, -0.0265589524, -0.0819897205, 0.1359129846, -0.2336582094, 0.2491499484, 0.0648284107, 0.0531912521, 0.0136303427, 0.0911547989, -0.0683899671, -0.0798978135, 0.2679709196, 0.0155925648, -0.1048430130, 0.0036338002, -0.1449912637, -0.0958938673, 0.0115767252, 0.0069306153, 0.2297217399, -0.0886814445, 0.1196921840, -0.0274549872, 0.2369832695, 0.0783259049, -0.0667050257, 0.2707813680, 0.0687834397, 0.0901575983, 0.1935657859, -0.0355485193, -0.0189353041, -0.0326032154, -0.0981178135, -0.0160889067, 0.1652959734, 0.0347332470, -0.0861933529, -0.0098781856, 0.0289865844, 0.1347731203, -0.0326434933, 0.0834341347, 0.1129142195, -0.2632608116, 0.2444321662, 0.2147587985, 0.0308845825, -0.0628084317, 0.0643290281, -0.0187961962, 0.1126780361, 0.0540785305, 0.1741763502, 0.0743887499, 0.0962126181, 0.0960868746, -0.0451951623, -0.0265586730, -0.1147485897, -0.0031208606, -0.0765109062, -0.0439461172, 0.0125955353, 0.0823867619, -0.2017430067, 0.0313121080, 0.0560708977, -0.0947259218, 0.2383017093, -0.1358316690, -0.0182088390, 0.0751448572, -0.0120154936, 0.0963968188, -0.0769987553, -0.0263889991, 0.2070026994, 0.1269059926, -0.0608508177, 0.0910958126, 0.1885106117, 0.1939231157, -0.0682819933, -0.2433803976, 0.0568471253, -0.1779473722, 0.1606441289, 0.0795425996, -0.2480124682, -0.1069781408, -0.2107175440, -0.0268854797, 0.0341064706, -0.0792860687, -0.0816705078, -0.1342221946, -0.0269394889, 0.2570698261, -0.0936446264, 0.0394591764, 0.2546066344, -0.0467287675, -0.1421971470, 0.1819057316, -0.1325539351, -0.2339875996, -0.0267880633, 0.1926394254, 0.0452928022, 0.0889124870, 0.1253200769, 0.1289905459, -0.0710593760, -0.1529319435, -0.0115110129, -0.0290185846, -0.2386561930, 0.0283337310, 0.2008522451, 0.0717639476, 0.0357621685, 0.1883772165, -0.0688910037, 0.0908337757, -0.0128203789, -0.0172148906, 0.0937358364, 0.0341413282, -0.1047747806, 0.0554181151, -0.1445638984, 0.1386024505, -0.0128928190, 0.0007533435, -0.1820241660, -0.0357390791, -0.1664310396, 0.0535917915, 0.0886200294, -0.1939248741, -0.0685296953, 0.0431587771, -0.0216818172, -0.0819319412, 0.1446399093, 0.0770622119, -0.2612502575, 0.0337845236, 0.0136879301, 0.2419147938, 0.0407730788, -0.1052833945, 0.0897271633, -0.0525156334, -0.0672010258, 0.1232374310, 0.0625537261, -0.1453734934, 0.0704735965, 0.1283844560, 0.0467853956, -0.0865302384, 0.1032007560, 0.0064987312, -0.1277150810, 0.1174044162, -0.2442089021, -0.0871530920, 0.1219785139, -0.0575543009, -0.0801605880, -0.2683536410, -0.0061652120, 0.0972416848, 0.2382399589, 0.0413663089, 0.0633605197, 0.2505127192, 0.0120341359, -0.1832946837, 0.1035023779, 0.1022486761, 0.0450508296, -0.1280324161, -0.1195264608, 0.0969439372, -0.2306009829, 0.0897089988, -0.0239234734, 0.1328596175, -0.1282452047, 0.0206321906, -0.0297120158, 0.0539537743, 0.0428177677, 0.1877636015, 0.0406314805, 0.0712152570, -0.2324642241, 0.1037046164, 0.1498694867, -0.0346303694, 0.0279689152, -0.0438300297, -0.1454410702, -0.0026902244, 0.2096585333, 0.1985072643, -0.0992578119, -0.0556068942, -0.0120289112, -0.0570764281, 0.1059531197, 0.0414691046, 0.0586360656, -0.2177555859, -0.2541455626, -0.0377343409, 0.2046591789, -0.0387930088, 0.0410447642, 0.0142924543, -0.0978282541, 0.1753825992, 0.2181067020, -0.1334414333, -0.1168126613, 0.0152890692, 0.0610891767, -0.0366199203, 0.0006245142, -0.0650914758, -0.0940881371, 0.0506950803, -0.1210292801, 0.1602871269, -0.1047818288, -0.1484835148, 0.0127988495, 0.1107146591, -0.0909134597, -0.0739590228, -0.0687552392, 0.0180120766, -0.2426483482, -0.2351163775, 0.0763058439, -0.1229210421, 0.0561576299, 0.0872851610, -0.0165284220, 0.0677750111, -0.1283060759, -0.2070468366, 0.0403750427, -0.0809699148, -0.0560017414, -0.0422637388, -0.0191957820, -0.2509812415, 0.1896817833, 0.1745105237, 0.1219208837, 0.1448992789, -0.2378423065, 0.2032190561, 0.0041038669, -0.0452790856, 0.0944368616, 0.0247352924, 0.0305451881, -0.1595035940, 0.0198853835, -0.1464886814, -0.0741874129, -0.1295021623, 0.1451010853, -0.0467599109, 0.1276502013, -0.0835871249, -0.0323980153, -0.1241996884, -0.1707248539, 0.1774253547, -0.0495914780, 0.1382536590, -0.0076674339, -0.2146459073, -0.0854247287, -0.1685328186, -0.1693104506, 0.1558563560, -0.1553340256, -0.0632507876, 0.0661685988, -0.1444856972, -0.0629356652, -0.1250389069, -0.1016213596, 0.1300188154, 0.1066051722, -0.2312015146, -0.2041852325, -0.0448925868, -0.0414439850, -0.2166066468, 0.1455394477, -0.1140108332, 0.0602062270, -0.0756618008, 0.0099465307, -0.1078428030, 0.0042809220, 0.0074200304, -0.0342184268, -0.1720573008, -0.2188736796, -0.0885291025, 0.2615504861, -0.0484267436, -0.0299049132, 0.0486898832, 0.0268738233, -0.0777710527, -0.0860849246, 0.1331526339, 0.1291721165, -0.0932761282, 0.0990534201, 0.0308958925, -0.1857069433, -0.0016448938, 0.1495707929, 0.0429871716, 0.1431113333, 0.1355184913, -0.1484992802, -0.0559146479, -0.1755305529, 0.0017296242, -0.0824829042, 0.2693519890, -0.2184592932, 0.0207213350, 0.1008369923, 0.0886002034, -0.0754329413, 0.1952630430, -0.0226951130, -0.0159516186, 0.0655597225, -0.1047196388, 0.0509700924, -0.0463024117, 0.1926252246, -0.2173811048, 0.0191212669, -0.0981977060, -0.1257331669, -0.1779299229, -0.0866164193, 0.0147985956, 0.1870167702, 0.1059636995, -0.0231499616, -0.2672059536, 0.0708151758, -0.1712167561, -0.0380795859, -0.1013104543, 0.2258531302, -0.1369897425, -0.1182496026, -0.1616733223, -0.0665950775, -0.0268676188, -0.0145553742, 0.0296783987, 0.0699825734, -0.1426685601, -0.0799856633, -0.0610087104, -0.2424683869, -0.0547259562, 0.1590642035, -0.1147719026, -0.1862272471, 0.0791875944, 0.1804068983, -0.1456711590, -0.0869092122, -0.1880269647, -0.0340282172, -0.1672465652, -0.1399062872, 0.0471895970, -0.2281916589, 0.0851857811, 0.2600351870, 0.2266222239, 0.0905171484, 0.0390328914, -0.1512464732, 0.0778217763, -0.0019905264, -0.0390705802, 0.1232490614, -0.0019550268, -0.0173107740, 0.0632805154, 0.1716007292, 0.1035092697, -0.1422274411, -0.0437750816, -0.0552933402, 0.0197173543, -0.1388601959, 0.0325638391, 0.0845025927, -0.2250272930, 0.0076467753, 0.0061967815, -0.2004210502, -0.1521591693, 0.0130908303, -0.0295243133, -0.1089316756, 0.0529126674, 0.1204999089, 0.1445155740, 0.0852297395, -0.0455028191, 0.0677377880, -0.1578962058, -0.2104888260, 0.1430133581, 0.1067728773, -0.2280487865, -0.0540355705, -0.1111341491, -0.0252053291, 0.1242890656, 0.0271529499, 0.1530452669, 0.0173828155, -0.1034732461, 0.0788137168, -0.0313364603, -0.0680037960, -0.1951644719, 0.1563332975, -0.2054650486, -0.0096442066, -0.0158941485, 0.0957060978, -0.2113932818, -0.0375517420, -0.0698107779, 0.0945876613, -0.1623251736, 0.1770144552, -0.0015971994, 0.2170757651, 0.1311278343, 0.1463696808, -0.1714958400, 0.0265515074, -0.0796136409, 0.0245139748, -0.0222133212, -0.1698036641, -0.0065773763, 0.0470966883, 0.0707745701, 0.1246061102, 0.0207471531, -0.1581460536, 0.0849641189, 0.1832794696, 0.0344342552, 0.0943681970, -0.1976863146, -0.0238715764, 0.0071110153, -0.0568571053, 0.1307494789, -0.1002112851, -0.0044885916, -0.1962791085, -0.0724414587, -0.0729398206, -0.0145527180, 0.0424913876, -0.0876641572, 0.0029604151, -0.0109722661, 0.0307884160, 0.1504103541, 0.1476059258, 0.0290116258, -0.0317045264, -0.1764720380, 0.0246292911, 0.2060243487, 0.0722676143, -0.0463580601, -0.2593733668, -0.1433316022, -0.1687042862, 0.1381592304, -0.0392770767, 0.1424007267, 0.0782752112, -0.0218563881, -0.0800873265, -0.0871979296, -0.1512387544, -0.1010962874, -0.0131869754, 0.0019509938, -0.0783634409, 0.0294494741, -0.2419320792, -0.2454539090, -0.0820714831, -0.1744679660, -0.1844642162, 0.1273322403, 0.0421042293, 0.0557184815, 0.0122303814, -0.0165067501, -0.2574634850, -0.0707000345, -0.0004635600, -0.1807605326, 0.0950331986, -0.1453842372, 0.0379354544, -0.0717301071, -0.2417712808, 0.0584875792, 0.0485512614, -0.0303485487, -0.0649917349, 0.1200261936, 0.0268604551, -0.0535332672, 0.2687793970, 0.1696469784, -0.1236341149, -0.0191238504, 0.1086555496, -0.1100286841, 0.0138978818, 0.0817262232, -0.1542961597, 0.0497559980, 0.0453474447, 0.0769214779, 0.0756691545, -0.2194868475, -0.0052309907, -0.0030221269, 0.0766483843, -0.0542393848, 0.0750506744, 0.1438371688, 0.0106740668, -0.1766074598, 0.0699733347, 0.0366142392, -0.0582120717, -0.0699297562, 0.0295957923, 0.2376120836, 0.0979708880, 0.0349191055, -0.1288138479, -0.1471385211, -0.0081761284, -0.0107012251, 0.1248282269, -0.1179309785, 0.0409402288, -0.1007144228, 0.1968508810, 0.0276625957, 0.1481592357, -0.1542366594, -0.0435662009, 0.0930084735, -0.0722132549, 0.1001120061, 0.1286873519, 0.2023073584, 0.0527196750, -0.0213322621, -0.0380840078, -0.2214326859, 0.1034582332, -0.2569599152, 0.0318205021, 0.0785181522, -0.1938016713, 0.0872751102, 0.1912474334, 0.0378370509, -0.0751529336, 0.2169099301, 0.0601200983, -0.0042537032, -0.0436579436, 0.1383445412, -0.0731823966, -0.0562795177, 0.0531808287, -0.0018896325, 0.1189623550, -0.1331998408, -0.0035653543, -0.2185797393, 0.1356973350, 0.0114691304, -0.0465980358, 0.1021165326, 0.0665017813, 0.0482727922, -0.1150977388, 0.1696873009, -0.0525598116, 0.2167909294, -0.1794164479, 0.0534702837, -0.0443192571, 0.1360775977, -0.0715918988, -0.1031388566, 0.0167810172, 0.2031591237, -0.0563483946, 0.0375079922, 0.1896757782, -0.0286043230, 0.0524729602, -0.0060683750, 0.1148432493, -0.2277838290, -0.0058749947, -0.0399833098, -0.0850184709, 0.1175237298, 0.0604844280, 0.1257554591, 0.2552768290, -0.0888497382, -0.2287584692, -0.1664005816, -0.0134025076, 0.1053769439, -0.0059403693, 0.0072996668, -0.1400678307, 0.0564738475, -0.0113287549, 0.1115836576, 0.2018592656, 0.0394328535, 0.0733311549, 0.1384569556, -0.1966474652, -0.0768771023, 0.0473292880, 0.0303956605, -0.0148822423, -0.0649977699, -0.0198753811, -0.0915929750, -0.0762969628, 0.1089312360, 0.1323821843, -0.1206410751, 0.1154387146, -0.1555324495, 0.0290302951, 0.0243489891, -0.0702242032, 0.0957125947, -0.1145039573, 0.0284154695, 0.0180524867, -0.0505971164, 0.0908645615, -0.1083279625, -0.0541381128, -0.0767651349, -0.1565947533, -0.0057556285, -0.0138427019, -0.1252349168, 0.1311455518, 0.0492030792, 0.0280132722, -0.0588677414, -0.0861970708, -0.1735757738, -0.1612570584, 0.1617137790, 0.1074832380, -0.0469738208, -0.0157665852, -0.2255015075, -0.1143947393, 0.1160928831, 0.0753379911, -0.1503106654, -0.0703631416, 0.0495429449, -0.0630095676, -0.1519417763, -0.0848760754, -0.0406476595, 0.0405604802, -0.1375858188, -0.2076000273, -0.1034366563, 0.1592553407, -0.0527979918, -0.0518521518, -0.1703913659, -0.0913307071, -0.1136537343, 0.0806039646, -0.0368150808, -0.1068141907, 0.0830022469, -0.1581888497, -0.0196029637, -0.0190408695, -0.0587422326, 0.0398355201, -0.2031308562, -0.1097205430, -0.1323862970, 0.0719942898, 0.0376174785, -0.1039896160, -0.0269122142, 0.1224064454, 0.1916469783, 0.0104293451, 0.2228656262, 0.0803695843, 0.0757068992, 0.0435895287, -0.0964934602, 0.0498588197, 0.0455631502, 0.1340365559, 0.1196746826, 0.0408085920, -0.0442063101, -0.0312534012, -0.0429292694, 0.2194496989, -0.0392918177, -0.0431109294, 0.1884129494, 0.1171597615, -0.1990752071, 0.1175887659, -0.1667326987, 0.0417934731, -0.0481708497, 0.1352073252, 0.2455174625, 0.1918704659, 0.0455996469, -0.1440643966, 0.2378683984, -0.0685756505, -0.0363755077, 0.0205572639, -0.1120646521, 0.1241625920, 0.1281224936, 0.0441300943, 0.1106728539, 0.0017482491, 0.1510753334, -0.0609161742, 0.1135526150, -0.0896729380, 0.1548082083, 0.1807194799, -0.0337543674, 0.0601707511, 0.1889589429, -0.0537026897, -0.1665098965, -0.2245274633, -0.0197362751, 0.1564389169, 0.0649582818, 0.1052912399, -0.2622583807, 0.0512113050, 0.1105424985, 0.0742362887, -0.0724179149, 0.0042661401, 0.0860632136, 0.0846434087, 0.0222143326, -0.2670430839, -0.1662402749, 0.2669956982, 0.1031736061, 0.1505240947, -0.0016262869, 0.0755795091, -0.0678021908, 0.1981365085, 0.1442126185, 0.0465083905, 0.0617343597, 0.1136099100, 0.0207081065, 0.1448029578, -0.0518012866, -0.0078989957, 0.0036926328, 0.0036624076, -0.0608467944, -0.0558541529, -0.1118958965, 0.1293793768, -0.0219522249, -0.0418700725, 0.1669476181, -0.2530080974, 0.0601288751, 0.2540999353, -0.1053816453, -0.2041796297, -0.0666037798, 0.2003011853, -0.1165515706, 0.1259520352, 0.1120014936, 0.0706985742, 0.0968688503, 0.1549609154, -0.2335470319, -0.1549527347, 0.0417765342, 0.0429787114, -0.0473287888, -0.0187584702, 0.2125337273, -0.1691956371, -0.0317885913, -0.1750290543, 0.0078779636, -0.1160449833, 0.1111327484, -0.1375507563, -0.0126813650, 0.0909045115, 0.0254367627, 0.1261394322, 0.0899017081, -0.1263778806, -0.2308185697, -0.0415060036, 0.0959570184, -0.1124758646, 0.0355961211, -0.1391519457, -0.0676332414, 0.1724669933, -0.1046297625, -0.0572432205, 0.1768284440, -0.0816481858, -0.0654323250, 0.0779984668, -0.0061686793, 0.1326562762, 0.0681121573, -0.0861574039, -0.0463420488, 0.1538647115, 0.0121408803, 0.0773870423, -0.0410472937, -0.0719547421, 0.1649111360, 0.0193112306, -0.1813492328, -0.2003013492, 0.0816059113, 0.1099930555, -0.1768617630, 0.1938289255, -0.0323264524, 0.1795926094, 0.1669488251, 0.1866266131, 0.2154704928, 0.1356745660, -0.1142653152, 0.0071204538, -0.0209007803, -0.0124253873, -0.0267610643, 0.1342979223, 0.0096192034, -0.0504688844, 0.1217988133, -0.0713197514, 0.0981515795, 0.1098739579, 0.0635039508, 0.2708047926, 0.1548744887, -0.1034428924, 0.1379873306, 0.0761986822, 0.0947728083, -0.1282116473, -0.0574818179, -0.0769352168, 0.0525917746, 0.1847767979, -0.0486062430, 0.0636922792, 0.0036084345, -0.1183274165, -0.0120637929, 0.1727583557, 0.1198958755, 0.0188704841, -0.0420310758, 0.1834487617, 0.0988014862, 0.0924014524, -0.0493775792, -0.0044150809, -0.0488291159, 0.0695422217, 0.1870094538, -0.0583421439, 0.0991078392, 0.0306361485, 0.0244663525, -0.1623006016, 0.1222497746, -0.1355435699, 0.1686768234, -0.1305912733, -0.1397830099, 0.0336842090, -0.1163435057, 0.0171433091, 0.2098190486, -0.1234294251, -0.1232199147, 0.0587186590, 0.1586273462, 0.0361871757, -0.0575790145, 0.1248002723, 0.0012352419, 0.0399799645, 0.0569029711, 0.0087508801, 0.0543077663, -0.1065415442, -0.0212029479, 0.1272886992, -0.1811958104, 0.0795334131, 0.0046447678, 0.0820272788, -0.1640444696, 0.0774253160, -0.0553239509, -0.0511397310, 0.0933987647, -0.2334173769, -0.1366934627, -0.1157450899, -0.2653995454, 0.0792380571, -0.0251128171, -0.0646343082, 0.0691429526, -0.0687255412, -0.1096553504, 0.0359049775, -0.0772618577, 0.1709072292, -0.1807153374, -0.0602169819, -0.1718764007, 0.1013887972, -0.0696935281, -0.1387313902, -0.0175010581, -0.1675557047, -0.0903729498, -0.1935809851, -0.0291090850, 0.0736209080, -0.1133305207, 0.0844137147, 0.0823809877, 0.1420484930, 0.0441412888, -0.1330703348, -0.0607221276, -0.1711574793, 0.0420612991, -0.2101055533, -0.0288691223, -0.0072720367, -0.0218543690, 0.1479298770, 0.0460435152, -0.0459333323, -0.0449134968, -0.0763911605, 0.0564622618, -0.0813219398, 0.1293127686, 0.0301446114, 0.0651588961, 0.0691103041, -0.0576594956, -0.2375368774, 0.0264731403, -0.0539429076, -0.1367720366, -0.0399693064, 0.1570598632, 0.0000424827, 0.1303866506, -0.0583289638, -0.2242241800, -0.0147882383, -0.1912195235, -0.1458896250, 0.0504494458, 0.0589798577, -0.0350049213, 0.0121461982, 0.2663547397, -0.0332622826, 0.0307946317, -0.0688127354, 0.0383732058, 0.0558367372, 0.1003643051, -0.1415905952, -0.0508036241, 0.0534558333, 0.1849465370, -0.1245078444, -0.0885433406, 0.0701367855, 0.1580993533, 0.2367148548, 0.0837791413, 0.0370918326, -0.0473316312, -0.1956758350, 0.0739418045, 0.0637173876, 0.0600067340, 0.0254671313, -0.0095386952, -0.0522004478, -0.1796326488, -0.2416103333, 0.0189782921, 0.0477617197, 0.1756013632, -0.1847444773, -0.0432565100, 0.0126836924, -0.0007611802, 0.0039415779, 0.0957330912, 0.1831113845, -0.0467317477, -0.1267725527, 0.1281039417, 0.0227137227, 0.2103090584, -0.0424041338, 0.0803347230, 0.0775048211, 0.2692923844, 0.0027641200, 0.1107682288, -0.0096978284, -0.1286257356, 0.1385929137, 0.1106103733, 0.1366560757, -0.0118195759, 0.1978713721, 0.1117255911, -0.0031219427, -0.0284188632, 0.0167179164, -0.0944800973, 0.2081548125, -0.0223134104, -0.0447436646, 0.0168765895, 0.1313679367, 0.0900671929, -0.1161479130, 0.1498931795, 0.0756524503, 0.0393964723, -0.1572815478, 0.0376464091, 0.0586989447, 0.0157032516, 0.1177271605, 0.0004773136, -0.1142551154, 0.0817513764, -0.1091297120, 0.0977256596, -0.0751089677, -0.0933470652, 0.1353925616, -0.0329102874, -0.1937000602, -0.0676023141, 0.1768047661, -0.0832561627, -0.1555668265, -0.0341265164, -0.2136259973, -0.0683816224, -0.2091184556, -0.1891103834, -0.1019707769, 0.0296267923, 0.0256496146, -0.2092892975, -0.2219698727, -0.1176178604, -0.0422757454, 0.0862371325, -0.0196371451, 0.1419073492, -0.1854941398, -0.0108296843, -0.0574166887, -0.0464899465, -0.0630882606, 0.0260198079, -0.0110386461, 0.0180200674, 0.2137276679, -0.1061093733, -0.0845911652, 0.1370562911, -0.0992007405, -0.2064077258, 0.0974785686, -0.1176896617, -0.2473975420, 0.0404576398, -0.2237168252, 0.1458552778, 0.0897012651, 0.1279038489, -0.0720182955, -0.1282674074, 0.1900452077, -0.0664145872, -0.0264963713, -0.1120246947, 0.1790543199, 0.1905807555, -0.1649531275, -0.1084209010, 0.0293021630, -0.1843400747, -0.1912905276, 0.1168136522, 0.1951137781, 0.1110135242, -0.1207843125, 0.0188180543, -0.1616892517, 0.0097784689, 0.1402188390, -0.0649631172, -0.1338586956, 0.0569963977, 0.0187798832, 0.0428981818, -0.0255610310, -0.2646123171, 0.1697117239, 0.0836585388, 0.0078306636, 0.1204589829, 0.0884665772, -0.0790587142, -0.0820358396, 0.0875161067, 0.1074797213, 0.0261128061, 0.0774914622, 0.0883010477, -0.0210732054, 0.0909507722, 0.2169496864, 0.1678622514, -0.0716990605, -0.2002965361, -0.0436898470, 0.0921748504, -0.0872762427, -0.1207060516, -0.1310901195, 0.0383189842, 0.0247468837, -0.2244975567, -0.1173673272, 0.2246734202, 0.2074361145, 0.0076829526, 0.1967592984, 0.0797574297, -0.1145168096, -0.2185627669, -0.1414897740, 0.0812537000, -0.0275770407, -0.0498167947, -0.1168963760, 0.0531117395, -0.0235498026, 0.0464408584, 0.0871132016, -0.0126420790, 0.0371279269, -0.0740353316, -0.1318715364, 0.0109287165, -0.0540001802, -0.1348368973, 0.1784364283, -0.2629498839, 0.1063352898, 0.0453580096, -0.1083150059, -0.2315582931, 0.1214755103, -0.0470071770, -0.0515288450, -0.0230319742, 0.1364399493, 0.0652142987, 0.0888054222, 0.2143501639, 0.1674423069, -0.0680426136, -0.1255641282, -0.0774338245, 0.0355325155, 0.1326967478, -0.1565140486, 0.0429059118, 0.1580212712, 0.0968350247, 0.0557323657, 0.0226680525, 0.0404742062, 0.0136361141, 0.2071760595, -0.1895729154, -0.0277952868, 0.1632454395, -0.0130339600, 0.2130201608, -0.1769403219, -0.1050409079, 0.1314178705, 0.0622597709, 0.0811648741, 0.0451643951, -0.1249807850, -0.0439153872, -0.1185274869, -0.0580867901, -0.0696585998, 0.0772129968, -0.0235311519, -0.0772667304, 0.0893442631, -0.0626767725, 0.2047895640, -0.1189856976, -0.0061501372, 0.0744059980, 0.0867757797, -0.1074874997, -0.0736511275, 0.0230325721, -0.0119078979, 0.0305001158, -0.1814290583, 0.2687336802, 0.1250564456, 0.0729537383, -0.0473567843, -0.0553763695, -0.0458596312, -0.0148268063, 0.1325678676, 0.2087983638, 0.1222092584, -0.1350996345, 0.1312071830, -0.0619624630, 0.0947939306, -0.1030781791, -0.1999161392, -0.0238008481, 0.0323304087, 0.1939771771, 0.0684710816, -0.0025623599, -0.0897371471, -0.1116325110, -0.1947663426, 0.0512193553, 0.1404293031, 0.0751074180, 0.1792238206, 0.0643527359, 0.0350442454, 0.0306455698, 0.1262733042, -0.1835002750, 0.0768408105, -0.1569444835, -0.0685115084, -0.0265154410, -0.2288270295, -0.0693014264, -0.0985690877, 0.0259528067, -0.0180614069, -0.1123174503, -0.1474216878, 0.0904044807, -0.0036949662, 0.0644296631, -0.2362532169, 0.0506592952, -0.1324218065, 0.0012703012, 0.0394727290, -0.0615185387, -0.1217187941, 0.2094504535, -0.1842133701, -0.0163692366, -0.0582492240, -0.1204274446, -0.0399674140, -0.1887004673, 0.0172680952, 0.1289503574, 0.1955254227, 0.1258087605, -0.0783560053, -0.1138055399, -0.0326901861, -0.1569157541, -0.2207970470, -0.0082491674, -0.0368121974, -0.2265311480, -0.0862538368, -0.0196820367, -0.1352917999, -0.0223253891, 0.1419493854, 0.0189937893, 0.0139049003, -0.1832354814, -0.1569309980, -0.0272715073, 0.0397218131, 0.1156686470, 0.0695439652, 0.0742674172, 0.0272274129, 0.2005377114, 0.1149550304, 0.0882829130, -0.0867964551, 0.1525776982, -0.1235831156, -0.0265636016, -0.1204436719, -0.1041699722, -0.0573340692, -0.0085382331, -0.0367824547, 0.0628880039, -0.0476658493, 0.1229909733, 0.0632741451, 0.0115720946, 0.0037483294, 0.1183673888, -0.0535595678, 0.0064310967, 0.0233290382, -0.0639494061, 0.1270952672, -0.1551745981, 0.0994847417, -0.2184100896, -0.0516643263, 0.0012706832, 0.0642794296, 0.0397959873, 0.1789042503, 0.0172846392, -0.0311930198, 0.1007993892, -0.0700429380, -0.1317749768, 0.0148117775, 0.0337050557, 0.1145915091, -0.0240466595, 0.1735725850, 0.1573887765, -0.1391748786, -0.2259469181, 0.0902284980, -0.0532664843, -0.2299236059, -0.0771500394, -0.0362961181, -0.0203036387, 0.0720949247, 0.0365270078, -0.2150849551, -0.0772634968, 0.0148701435, 0.0225753840, 0.0503485687, 0.0288721677, -0.0038034820, -0.1896505952, -0.0264718290, -0.0074513881, 0.1452824920, -0.0755740479, -0.1714820266, -0.1674267650, -0.1315332502, -0.0606789105, -0.1124303862, -0.0580215491, -0.1255452484, -0.0431024320, 0.1905374676, -0.0018639212, -0.0252927933, 0.1700172126, -0.0911559388, -0.0122803310, -0.0545637272, -0.1334289610, 0.1297965050, -0.2015308589, 0.0753103495, 0.1207666025, -0.1318802387, 0.1015729755, 0.1649499238, -0.1175009385, 0.1638359725, -0.0439040102, -0.0284392908, -0.0735870227, -0.1121175438, -0.1011584252, 0.2605623007, 0.0910610184, -0.0758232921, 0.1276577711, 0.0501615107, -0.0258085411, -0.1538055688, -0.0353566855, -0.0244940985, -0.0335716680, 0.0740836486, -0.0773099139, 0.1577757150, 0.0066241124, 0.2141948193, 0.0001094039, 0.0711220354, -0.1604685187, -0.0970262513, 0.0863770470, -0.1875448972, 0.1791437268, -0.0375789292, 0.1909013838, -0.0820358470, -0.0883384645, 0.0179090258, 0.0899003074, -0.1277966797, 0.1010645032, -0.1695542634, 0.0680452362, 0.0698536187, -0.0471334979, -0.0254486371, 0.1029494107, 0.0948231742, 0.0099827480, 0.1049440950, 0.0899228007, -0.1394289285, 0.0378063694, 0.0573455878, -0.1459906697, -0.0270714220, -0.0559614673, 0.0815773234, -0.2462726831, 0.0700563788, 0.1858524978, -0.1563223600, 0.1664684415, 0.0816978142, -0.0826330334, 0.1161214933, -0.0717126280, -0.1119737476, -0.1701859087, -0.0695306137, -0.1421338767, 0.1125889421, -0.2189940512, -0.0826941058, 0.1338309646, -0.1823327690, 0.0980252326, 0.1227825880, 0.1453295201, 0.0318435021, 0.2057911754, -0.1570196003, 0.1712424010, 0.0561714992, 0.0028548504, 0.0158764832, -0.1750321686, -0.0793738961, -0.0482046790, -0.0056537138, -0.1484913528, 0.0077522201, -0.1059444770, -0.1130483523, -0.2342262566, 0.2621119022, -0.0773941129, -0.0302329734, -0.0113574034, 0.1320849508, 0.1845636368, 0.1595503092, 0.0435067862, 0.0321505181, -0.0919636637, 0.1077348515, -0.0720574632, 0.0584437475, 0.1330963224, -0.0149213625, -0.1770971566, -0.0170286912, 0.1297827810, 0.1722979397, 0.2302032858, -0.1158156618, -0.0724931359, -0.0352036469, 0.1326974183, -0.1214527190, -0.0668258741, -0.0406416133, 0.1941156238, 0.0865692124, 0.1517670155, -0.1907039434, -0.0574083664, 0.0409553051, -0.0666769668, 0.1434018314, 0.1635952443, 0.0108295754, 0.1332106292, 0.0090385182, 0.2400111854, -0.0723254159, -0.1119889989, 0.1877647787, 0.0639748424, 0.1628353447, 0.1367447227, -0.0069045415, 0.0177465379, 0.0674924552, 0.2241928279, 0.0128325289, -0.1274301261, 0.1726155728, 0.1258166283, 0.2199804336, 0.0457935072, -0.0471188128, -0.0787426606, -0.0269520208, -0.0843399018, 0.1936509013, -0.0342635959, -0.0277457237, -0.1742152721, -0.0533451252, 0.0626500770, 0.0446546078, 0.0598509610, 0.0816349462, 0.1127361357, 0.0312725641, 0.0931412876, 0.0780176595, 0.1766517758, -0.1050017476, -0.0769245774, -0.0050587687, 0.1075459197, -0.2035483271, 0.0101044094, -0.0393915363, -0.1190945581, -0.0649118870, -0.0251599029, 0.0207625329, 0.0346823595, -0.1071756706, 0.1109009162, 0.0111718262, 0.1198789179, 0.1580955088, -0.0158881899, -0.1816989630, -0.0600608736, 0.1357524693, -0.0081186853, -0.1194667295, -0.1032406092, -0.0992025062, 0.0495367311, 0.1218552887, -0.1550031751, 0.1872360408, -0.0029019879, 0.1962379813, -0.0868535712, -0.0208500884, -0.0920456350, -0.0895085856, -0.0380554199, -0.0710587054, -0.2464417517, 0.1050993726, 0.1351919323, -0.0853655040, -0.2497240603, 0.1519208103, -0.1210401282, 0.1568080783, -0.0581965782, 0.1557646245, 0.0873749033, 0.0600293539, -0.1633173823, 0.0600328743, -0.1436816305, -0.0356206037, 0.1537441760, 0.1238773242, 0.0524436906, 0.1861869693, 0.1889465302, 0.0229765307, 0.0002726836, -0.0600232445, -0.0844855234, 0.2546527386, -0.0896658525, -0.1008763760, -0.1524602920, -0.1379245222, 0.1086300239, 0.0848014951, -0.0503557399, 0.1576331556, -0.1143176779, -0.1275958270, 0.0491509885, 0.0888141692, 0.0207033884, -0.1259474754, -0.0406194143, -0.2700446546, -0.2011873424, 0.1151521429, 0.1370284855, 0.1957868785, -0.1237558499, -0.0405540392, -0.0573495068, 0.1732106954, -0.0002425709, -0.0300334431, -0.0075804028, 0.1185061857, -0.0992971659, -0.0133927651, 0.0750649944, -0.0827674642, -0.1230024174, -0.2007768750, 0.0074389814, 0.2281951308, -0.0312690847, -0.1435526609, 0.0730855837, -0.0127778966, -0.1415908188, -0.1600098312, -0.1113680005, 0.1322915405, -0.0554684401, 0.0008133255, 0.0680732802, -0.1715520769, -0.1612778455, -0.1202701032, 0.0619020946, -0.0520714596, 0.0532245412, 0.0143550755, -0.0406717174, -0.2637066245, -0.2067975849, -0.0016162725, -0.1242865175, 0.1164502501, -0.1660978943, -0.1918988675, -0.1362435073, 0.1341551542, 0.0939103812, 0.0815606490, 0.0734449625, -0.0356994271, -0.1343322992, -0.0381916687, 0.0025120617, -0.0324331932, -0.0535365269, 0.0235092025, -0.0335445628, 0.0484892689, 0.0394424126, -0.0440167524, 0.0527650379, 0.0812952667, 0.0229964312, 0.0040300908, -0.0504128188, -0.0908172205, 0.1092116386, -0.1302145720, 0.0993868038, 0.0693010315, 0.0576273873, -0.1282210052, -0.0561133437, -0.0152111864, -0.0661209524, -0.0165260360, 0.2145276964, 0.1213572994, 0.2097166926, 0.0174636394, -0.1287194639, -0.1264643520, 0.0899518728, 0.1384942532, 0.0046261917, 0.1510934234, -0.1840406805, 0.0465034992, 0.1904210597, -0.0762898773, 0.0359441936, -0.0660687611, 0.0066737887, -0.0869682953, -0.1073084623, -0.2660110295, 0.1631928384, -0.0654103830, 0.0173490662, -0.0310266707, -0.1962402761, -0.0019931239, 0.0276769679, -0.1825352162, -0.1194226891, 0.2662682831, 0.0896037519, -0.0678701699, -0.0932230577, -0.0059189107, -0.0918806493, 0.1768930554, 0.0651441291, 0.1699965894, -0.0824433640, -0.1943849921, -0.0076549537, 0.0860928819, -0.0601396859, 0.0931865498, -0.0204527713, -0.1185523048, 0.0452045947, 0.0769867152, 0.0068553830, -0.0487223566, 0.0799246132, 0.1323668361, 0.0542902984, -0.0897464529, -0.1142780408, 0.1567366570, -0.1416814923, -0.0007033115, -0.1449688375, -0.1870810986, 0.0698899999, 0.1050630584, -0.0419621915, 0.2037816048, -0.0765555725, -0.1033568755, -0.0050958409, -0.0165415592, -0.0185177103, 0.1184395105, 0.2380797863, 0.0225848574, -0.0586598366, -0.0377187282, 0.0184738077, -0.0262401905, -0.1130485460, 0.0297405478, -0.0950764790, -0.0001034099, -0.0224528275, -0.0320396610, 0.0765706599, -0.0051586176, 0.0210537314, 0.1025827602, -0.0623690002, -0.0682158694, 0.2056316435, -0.0234993361, -0.0227586403, 0.0726631656, -0.0349254124, -0.0184195004, 0.0267981235, -0.1859895289, 0.0430709161, 0.0776374564, -0.1951162815, -0.0579137467, -0.2491091192, 0.2155355811, 0.1926031262, 0.0729325265, 0.1698860079, -0.2493161559, 0.0285222884, 0.1152345464, -0.0197393056, -0.1338523626, -0.0082363645, 0.1774696559, -0.1232774407, 0.0694640651, 0.2613323033, -0.1317821890, -0.1061604396, -0.1802683771, -0.1655192226, 0.1776367873, -0.2141329348, -0.0486511365, -0.0429680645, 0.0269182026, -0.0782888159, 0.0639642999, -0.0152343120, 0.1083314270, -0.1321038753, -0.0998860225, -0.0179316942, -0.0571843237, 0.2209621072, 0.1723173410, -0.2224358767, -0.0701331943, 0.0278756954, 0.1770275831, 0.2240690738, 0.0904368088, -0.1458810568, 0.0903762951, 0.0062656007, -0.1453137547, -0.1111514196, 0.0001065627, 0.0985253081, -0.0002423541, -0.0402295329, -0.0912074819, -0.0865426287, 0.1485423893, 0.0178286843, -0.1225711778, 0.1559464186, 0.2347187549, -0.1336089075, 0.0922630504, -0.0869826600, 0.1056177393, -0.1828933805, -0.0045264810, 0.0134639991, -0.1829345375, 0.0024407548, 0.0595689677, -0.2670320868, 0.0264939368, -0.0304212924, 0.2238063514, -0.0407384224, 0.0038594091, 0.0727855563, -0.0431598350, 0.1780827045, -0.0262739677, 0.1829847246, -0.0050680703, 0.1649240404, 0.0550462008, -0.0830083713, -0.2405755818, 0.0107241748, -0.0006649253, 0.1602752507, 0.0766669139, 0.0922938511, 0.0440237783, 0.1344081014, -0.0579998419, 0.0151256612, -0.0637505502, 0.1144231707, -0.1034794375, -0.2353944927, 0.0420475528, 0.1225567609, -0.1643105447, -0.2464732528, -0.0369420573, 0.0861158967, 0.1447832584, -0.0821816400, 0.2659831047, -0.2291621566, 0.1789958626, 0.0168722719, -0.0537576899, -0.2564724088, -0.0249266010, -0.0604769848, 0.1242365167, -0.2489117831, -0.0354933441, -0.0667213351, 0.0945023075, -0.0817271098, 0.1731320918, 0.1193766221, 0.0550611094, 0.2026901692, -0.1602669805, -0.0346874297, 0.1098142192, -0.1589114666, -0.0074092369, 0.0329136290, -0.0410152078, 0.1332013309, 0.1396643668, -0.0938535631, 0.1474407613, 0.0402492024, -0.1116950437, -0.1578745246, -0.1024418175, -0.0416562818, 0.0816132128, 0.1693165898, -0.0419367775, 0.1538974345, 0.0487930141, 0.1269752383, 0.0824523419, 0.1298754215, -0.1401696205, 0.0593355149, 0.0892243460, 0.0052231331, 0.1716772765, -0.0915149376, -0.0406439640, 0.1351509541, 0.0741899461, 0.1854848117, 0.1622760743, -0.1752959639, -0.0873368755, -0.1572852433, -0.0390497260, 0.0810246170, -0.0555129573, 0.1534489393, -0.1478170156, 0.1451936662, -0.0500125550, -0.0724468529, 0.0218395274, -0.1304376125, -0.1918362677, 0.1100488380, -0.1805092990, -0.0279000346, 0.2691852450, -0.0099725612, 0.0817522779, 0.1133041531, -0.0696276352, -0.0718758330, 0.0151941311, 0.1136609465, -0.0613291897, -0.1351244450, 0.2121458054, 0.0888485387, 0.2277514189, -0.0621970594, 0.1177125201, 0.0399931520, -0.0159186050, -0.0838810727, 0.0008988631, 0.0934380367, -0.0376434661, -0.1473441273, -0.0970946178, 0.0627935827, 0.0757265538, 0.0394528769, -0.1465345472, 0.0435150266, 0.2464379221, 0.0397794619, 0.1035074070, -0.0272699632, 0.1196785495, -0.0255210865, -0.1272677779, 0.0276426487, -0.1076806560, -0.0377327129, -0.1664353609, -0.1094958633, 0.2691212893, -0.1590143889, 0.0967338756, -0.1293699890, -0.0021491866, -0.0878403857, 0.0608410314, -0.2256678343, -0.0843820944, 0.0642064884, 0.1920008361, 0.0330756642, 0.0521773025, 0.0617054217, 0.1145072281, -0.2108039260, -0.0211013909, 0.0500834510, -0.0077509345, -0.0118173631, 0.1088610739, 0.0337235071, 0.2094381750, 0.0829277560, 0.1118741706, 0.1007928103, -0.0516307428, 0.2291777432, 0.1639569998, 0.0863667205, -0.0480899625, 0.0625459999, -0.2213890553, 0.0471135862, -0.0679328516, 0.0848372281, -0.1425311416, 0.1659403741, 0.0376925617, 0.1296046972, -0.1570896804, 0.1885498166, -0.1313587427, -0.0121166622, 0.2435411215, -0.1293951869, 0.0349369831, -0.0820513219, 0.0710396767, -0.0647052154, -0.0886113495, -0.1751546115, 0.1040946841, -0.2033988684, -0.0889645368, 0.0249895174, -0.0171130784, 0.1757151932, 0.2546366155, 0.0196295399, 0.1807578057, -0.0199831165, -0.2134175003, -0.1194387674, -0.0769834518, 0.0331677385, -0.1018220633, 0.1948969364, 0.0581025332, -0.1463023275, -0.1338148415, 0.0689500049, -0.0149460305, 0.1886060238, -0.2103206515, 0.0407886058, -0.1623568833, 0.0198794082, -0.0194455609, -0.1530768871, 0.1358891428, -0.0198838618, -0.0878686756, -0.0022028419, -0.0412166119, 0.1186298132, -0.0355567075, -0.0776571110, -0.1234046593, -0.0647572055, 0.1924497783, -0.0354244672, -0.0011226693, 0.0186044350, -0.0558231175, 0.0562561005, -0.0208934154, 0.0929070711, -0.0763691589, -0.1236844212, 0.0674790367, -0.0291910321, -0.0209861901, -0.2492442578, 0.0680003017, 0.1615557820, 0.1105117276, 0.0036388610, 0.0937978551, -0.1113026813, 0.1766194552, 0.0120039480, 0.1222703978, -0.0059731626, 0.1093193367, -0.0385604016, 0.1031577140, -0.0388512723, -0.1628137678, -0.0119528389, 0.1532517076, 0.2325731665, -0.0429137014, -0.0325498916, -0.0659133941, 0.0067598079, 0.0963711515, 0.1858139485, 0.0571971163, 0.0071366015, -0.0307111721, -0.1957752407, 0.1503724605, -0.0148211950, 0.0752910450, -0.0846806765, -0.1399578154, 0.0834914073, -0.0191486422, 0.1201676652, 0.1444595456, -0.1474405229, 0.1997551173, 0.0634866655, 0.1756618619, -0.0123798968, -0.0440526083, 0.0497095324, -0.0327524245, -0.0872594193, 0.0008896630, 0.1964881271, 0.0002935469, -0.0498231240, -0.2365022898, -0.0024427490, 0.0784101114, 0.0504475869, -0.1521130949, 0.0454389378, -0.0366088264, -0.0153408209, -0.0437096171, 0.0597309023, -0.0984655321, 0.0605201200, 0.1167995706, 0.1919210851, 0.0651090890, -0.0856393874, -0.2251683623, 0.0161074493, 0.0448350720, -0.0756832734, 0.2480607182, 0.0302647576, -0.2062173039, 0.0876158997, -0.0245489832, 0.1853233725, 0.2100154757, 0.0043434943, -0.1538280398, -0.0706953853, -0.1218238696, 0.0978520960, -0.0130598461, 0.0193698164, -0.1888180673, 0.1507565081, -0.1977810562, -0.0996010527, -0.1970711201, -0.0211991761, -0.0561628714, 0.1732663214, -0.0494638160, 0.1506322771, 0.0353548713, -0.2665682435, -0.0156650636, 0.0791781768, 0.1329496205, 0.0933039337, 0.2627556324, 0.0773933753, -0.1996193230, -0.1176884621, 0.1140388176, -0.2611658275, -0.0564649925, 0.0444135442, 0.0214544442, 0.0382609442, 0.2014408410, 0.0162528977, -0.0561681539, -0.0516071133, 0.0382460095, 0.0169651471, 0.1264235526, -0.0664026290, -0.2138032615, 0.0738605633, -0.0946338549, -0.1117506996, 0.2695918977, -0.0691851526, 0.0834882408, 0.2012859136, -0.1600738615, 0.0241070222, -0.1172007173, -0.0749225169, 0.1871616542, 0.2556540966, -0.2042645663, 0.2327899486, -0.0445870832, 0.0051692533, -0.2576758265, -0.0021421516, 0.0159203541, 0.1906024367, 0.0548399687, -0.1914976388, 0.2248591781, -0.0263408925, 0.1486723274, 0.0103604076, -0.0706451908, 0.2513301373, 0.1096325070, -0.0875036940, -0.1099617258, 0.1994557977, -0.0912558511, -0.1295754015, 0.1567756832, 0.1959644407, -0.2082946450, 0.0732927620, 0.0670680031, 0.0496010743, -0.0826087072, 0.0760053545, -0.0487127416, -0.1165835485, 0.0988641828, -0.0198451914, 0.1492626667, -0.2031953186, -0.0592177361, 0.1061429605, 0.0798871443, -0.1680887789, 0.2356064916, 0.1195947006, 0.0029746664, 0.1249418929, 0.2479462922, -0.1516012996, -0.2535229623, -0.1048604697, 0.0014024060, 0.0043128356, -0.1329612434, -0.1241272613, -0.0519706272, -0.0819328651, -0.2704498768, 0.0452730432, 0.0948286727, 0.2299430370, -0.1703964770, -0.1167479753, 0.1265850514, -0.0930838510, -0.1631618738, -0.1204066351, 0.1839912236, -0.0078336885, -0.0225638803, 0.0209496208, 0.1167929843, 0.0157726798, 0.0637935847, 0.0190416779, -0.2555660605, 0.1052185073, -0.1179129854, -0.1951071322, -0.2314349115, 0.0569932759, -0.0526580848, -0.0594181791, 0.0714752078, 0.2462984174, -0.0276379753, -0.2033582628, -0.0783263296, 0.0502451062, 0.1916571259, -0.1901779771, 0.0040325895, -0.0381780267, 0.1408550590, 0.0887309164, -0.0498163253, 0.0104504898, 0.0978536904, 0.2119093835, -0.2034713179, 0.1762232929, 0.0594203100, -0.1191388890, 0.0066371886, 0.1119669676, 0.1280200481, 0.0672344416, -0.1122915819, 0.1421813518, 0.0281662811, -0.1346118450, -0.1263348907, -0.1051244140, 0.1343495399, -0.1593558341, 0.1702128500, 0.0247220118, 0.0495502576, 0.0317061283, -0.0896815956, 0.1158753335, 0.2287271321, 0.1840377450, 0.0391233787, -0.0351273753, -0.2055616379, -0.0266283918, 0.1882047206, -0.0134619325, -0.0117352465, -0.0224923883, 0.1783943772, -0.0019375684, 0.1777369231, -0.0140948771, 0.1196956486, 0.0706351027, 0.2166430205, -0.0315457992, -0.0337067097, 0.0044836123, 0.0518338531, 0.0181885064, 0.1133009568, -0.0347744823, 0.0947531462, 0.0132911038, -0.0805174932, -0.1830692142, -0.0171988774, -0.1673492789, -0.0916656032, 0.0698147863, -0.0703338459, -0.0169266444, 0.0135443211, -0.0106786545, 0.0599298924, 0.0774016902, 0.1345899552, -0.1189723164, 0.1621702313, 0.0531282350, -0.0175031833, 0.1592409611, 0.0374649242, 0.0406129323, 0.0201170202, -0.0309701320, -0.0504366271, 0.0361598358, 0.0716484562, 0.0596765950, -0.2210601866, 0.0789641738, -0.1008846760, -0.1566385925, 0.0809121728, -0.2463437170, -0.0391529500, 0.0277555976, 0.0773098916, -0.1628347337, 0.0826388299, -0.0647394359, 0.1892577559, -0.0780829117, 0.0455197133, -0.0271080304, -0.0741093159, 0.0616148636, 0.0049870377, -0.1119707823, -0.0872353092, 0.0895881876, 0.0451091975, -0.2498506010, -0.1446946263, 0.0356172770, 0.0106314914, 0.1072719991, 0.0067911111, 0.0129031064, 0.2108833194, -0.1460216790, 0.1133334786, 0.1240966171, -0.2495463789, -0.1285607815, -0.1592626274, -0.2371724844, -0.2032496929, -0.1412636787, -0.0975801498, 0.2657428682, 0.1356477737, -0.1534161419, 0.1118617207, -0.0586468950, -0.1230831146, -0.0308104102, 0.1403240114, 0.0904827341, 0.0353160873, 0.0042244028, -0.0563353673, -0.0191543996, -0.0624806508, -0.1975370795, 0.0276446939, 0.0429233015, -0.1867689490, -0.0494427569, 0.1107444689, -0.0668307394, 0.1435998976, -0.0992316827, 0.2635250986, -0.0983701646, 0.0603059009, -0.0088254055, 0.0310213491, 0.0262801666, 0.0573763177, -0.0863410011, -0.0224178191, -0.0259138290, 0.0697932094, -0.0409781151, -0.1743476242, -0.1850862652, -0.1257554144, -0.1749835014, 0.0213787295, 0.1271009296, 0.0081807515, 0.0088332035, -0.0072098831, -0.1883803159, -0.0217876639, 0.2119839191, 0.0130774435, -0.0271319021};
# 15 "firmware/parameters.h" 2
# 1 "firmware/weights/wr2.h" 1
# 12 "firmware/weights/wr2.h"
model_default_t wr2[12288] = {-0.0578016043, -0.0456123315, -0.0483630449, -0.0433665067, 0.0537359789, 0.0639750138, -0.0098635117, -0.0741791129, 0.0109905787, 0.0269078799, 0.0546578243, -0.0653825328, 0.0133771887, 0.0103014139, -0.0917835310, 0.0189763382, 0.0200232808, -0.0024756785, 0.0321340896, 0.0052587637, 0.0316148661, 0.0997975022, -0.0135386260, 0.0234136879, -0.0402015075, 0.0690978542, 0.0180132743, -0.1355021596, 0.0201249439, 0.0218501966, 0.0065999203, -0.0278943349, -0.0193382148, -0.0739315450, -0.0606252998, -0.0775658116, 0.0814302340, -0.0795662776, 0.0520283692, 0.0675732344, -0.0443345010, -0.0530010797, 0.0081581036, -0.0735354647, -0.1013595983, -0.0964467749, -0.1023593619, 0.0614549220, 0.0412410833, -0.1588005275, -0.0110046966, 0.1252871007, 0.0461499095, -0.0929875076, -0.1351583600, 0.0736688673, 0.0527205840, 0.0128486976, 0.0039337715, -0.0494729728, 0.0310100410, 0.0342396982, -0.0627950132, -0.0187960491, 0.0925878137, -0.0444617234, 0.0347207077, 0.0117319888, 0.0177021753, 0.0473640263, -0.0347674415, -0.0939972773, 0.1619540453, -0.0101131089, 0.0704269186, 0.0791928098, 0.0631004125, -0.0579878390, -0.0034245392, -0.1010814235, -0.0436815433, -0.0370237119, -0.1907194257, -0.0560899004, 0.0088464096, -0.0046667247, 0.0486523435, -0.0696193203, -0.1288755834, -0.0332223363, -0.0264921151, 0.0888015032, -0.1135853529, -0.0928846225, 0.0171765164, 0.0534015037, -0.0595714301, -0.0611993484, 0.0372305959, -0.0559872687, 0.0059899758, -0.1534185261, 0.0727850422, 0.0621466786, -0.1556388140, 0.0461226143, -0.0276401397, -0.0419552736, -0.0950853303, -0.0751904696, 0.0253411196, -0.0603149943, 0.0649569780, -0.1132433563, -0.0106366556, 0.0566160977, -0.0178573262, -0.0282792505, -0.0666706339, -0.0302356109, 0.1324612945, 0.0651295930, -0.0666322261, 0.0074921055, 0.1015727744, -0.0971235558, 0.0178954266, -0.1939954311, 0.0884504542, -0.1154798418, -0.0202023126, -0.0158902053, 0.1551526487, -0.0662610233, -0.0077565075, 0.0983274654, -0.0508058406, 0.0133823948, -0.0849608555, 0.0322230719, -0.0207963753, -0.0008112400, -0.0543039143, -0.0097846380, -0.0859017074, 0.0494909212, -0.0331668220, 0.0820350796, 0.1040234491, -0.0718745813, 0.0057119434, 0.2359461188, -0.0529698357, -0.0550481938, -0.0178914238, -0.0654319599, 0.0068700500, 0.0990801603, -0.0307467449, -0.0426252820, -0.0779660419, 0.0161253735, -0.0519833714, -0.0412418917, 0.0762383491, -0.0348864794, -0.0135143427, 0.0404972546, -0.0159528516, 0.1143419296, 0.0314221308, -0.0189508963, 0.0057000029, 0.0210826267, -0.0930223465, 0.1361646801, 0.0549420863, 0.0034309693, 0.0365201607, 0.1020477042, 0.0587643124, -0.1188497469, 0.0154475030, 0.0390215665, 0.0356763303, 0.2150145173, 0.0473519973, -0.0350852981, -0.1110025197, 0.0924958736, 0.0517685190, 0.1015831009, 0.0221358053, -0.0100828409, 0.0471135341, 0.0154261841, -0.0255662259, -0.0864922181, 0.0514445081, 0.0238353666, 0.0068065375, 0.0141328257, 0.0904489607, 0.1506436467, -0.0294779483, 0.0362460278, 0.0073369760, -0.0418482423, 0.0037532116, 0.0973972455, 0.0010968825, 0.0742935836, -0.0159990080, 0.0054303654, -0.1167043820, -0.1607499570, 0.1258393973, -0.0358096436, -0.0058556795, 0.1059439108, 0.0267560780, 0.0020661771, 0.1196542680, -0.0507021099, 0.0123617863, -0.0251836926, -0.1149676666, -0.0040198341, 0.0105091482, -0.0341807716, 0.0910833180, -0.0352507010, 0.0055265520, 0.1164982244, 0.1147928759, -0.0400044620, 0.0618880577, -0.1107977033, -0.0268288665, 0.0024011007, 0.1394139975, 0.0778984427, 0.1248540953, -0.1332873553, -0.0888390690, 0.0219396241, -0.0685179234, -0.0611655712, 0.0635886639, 0.0089035472, 0.0712475330, -0.0930991918, -0.1153955683, 0.1643058360, -0.1257192940, -0.0553669222, 0.0039439136, 0.0287710913, 0.0119512202, 0.1027919799, -0.1703250706, -0.0694182739, -0.0545970723, 0.1253818572, -0.0362793840, 0.0302902758, -0.0431972109, 0.1483180374, -0.0303429980, -0.0633226708, 0.0975164995, -0.0916298479, 0.0353049822, 0.0546197221, 0.0474536568, 0.0785922259, -0.0283956937, -0.0614351407, 0.0490940288, 0.0267631393, 0.0448808819, -0.0290947910, 0.0078343321, 0.0620433204, 0.1141228378, -0.0991173536, -0.0094053969, -0.0632479861, -0.0439702794, -0.0264312029, -0.0531413481, -0.0477052033, 0.0735673457, -0.0356412530, 0.0231166761, 0.0928102210, -0.0261958279, 0.1449147910, 0.0011150637, -0.0957971364, 0.0243598688, -0.0180277172, 0.0950095803, -0.0273919068, -0.0694474131, 0.0554132648, 0.1175467968, 0.0289701577, -0.0831293687, 0.0193850100, -0.0451288074, 0.0189538971, 0.0661427379, 0.0719040260, 0.0225074422, 0.0757320449, 0.0177444499, -0.0114205163, 0.1598795801, 0.0581508130, 0.0438209735, -0.0804742202, 0.0440000966, -0.0524963960, 0.0043381127, 0.1308622658, -0.0271672420, -0.1366199553, 0.0375991315, -0.0386015065, -0.0236531775, 0.0302732904, 0.0646394864, 0.0145650059, -0.1229155213, -0.0289007407, -0.0524348468, 0.0295231566, 0.0031113788, -0.0976037532, 0.0800937861, 0.0051084557, 0.0031369757, 0.0287122205, -0.1106394157, -0.0639239550, -0.0500421189, 0.0851206332, -0.1188120022, 0.0702602491, 0.0658167899, 0.0193305910, 0.0898770764, -0.0207894947, 0.0598596185, 0.0819282085, -0.0132454624, 0.0476566851, -0.1071744263, -0.0701374859, 0.0628681108, -0.0180850867, 0.0425138772, 0.0237802491, -0.0636059865, -0.0499029234, 0.0014581869, 0.0739463791, -0.1276119798, -0.0951996371, 0.0440768935, -0.1001139358, 0.0562740713, -0.0144139817, 0.0890788436, 0.0944469944, 0.0725272596, 0.0315280966, 0.0652073398, -0.0549150594, 0.0753788278, -0.0291734543, 0.1961916983, 0.0181662198, -0.0823586285, 0.0937337056, -0.0036919117, -0.0849470794, 0.0055339658, 0.0689405277, 0.0905476063, 0.0412710495, -0.0773146227, -0.0450495780, 0.0713326111, 0.0468347818, -0.1156049520, -0.0777562186, -0.0212236904, -0.1316966116, -0.0261920933, 0.0367185213, -0.0679160282, -0.0505618043, -0.0745875463, -0.0087924525, -0.0081323357, 0.1073109806, -0.0674728304, 0.0716426000, 0.0284314211, 0.0466245003, -0.0440291725, -0.0079999687, -0.0766688436, 0.1036574394, 0.0489263199, -0.0530328900, -0.0899452865, -0.0003781007, -0.0675742999, 0.0811387300, -0.0372863077, -0.0994315967, -0.0239409599, 0.0443075448, -0.0880557746, 0.0128091387, 0.0854141340, -0.0983253345, 0.0300467126, 0.0536826029, -0.0053390572, -0.0931000486, -0.0215627458, 0.1153476387, -0.0985471308, -0.0269878767, 0.0050421827, 0.0691160932, -0.0188151132, 0.0326003134, 0.1181878000, 0.0103722950, 0.0678108633, 0.0701880828, 0.1260880530, -0.0900260136, 0.0355856419, 0.0703447238, -0.1011627689, 0.0861239657, 0.0523442253, 0.0598753877, -0.0145594208, -0.1052651927, 0.1665578336, 0.0259670150, 0.0855556726, 0.1395787597, -0.0592578463, 0.0719378963, 0.0832196251, 0.0225628465, -0.0438768975, 0.0239573866, -0.0252299495, 0.0187145993, 0.0205811542, -0.1509255916, -0.0532784760, -0.0894922540, -0.0698418394, -0.0206421111, -0.0078219194, -0.0017850585, -0.0609880425, 0.0395952687, 0.0252879020, -0.0424931943, -0.0876867697, 0.0427994914, -0.0620761700, 0.0275349189, 0.0008574642, -0.0074457545, 0.0404644646, 0.1072229668, 0.0308921579, -0.0971259996, -0.0444451571, 0.0081429239, 0.0791224390, -0.0153490612, -0.0020041075, 0.1022999063, -0.0973080769, -0.0889083967, -0.0630063713, -0.0796013325, -0.0646866783, 0.1256732196, -0.0059530404, -0.0267108735, 0.0882970095, -0.0229223538, 0.0839826837, 0.0546654128, 0.2211459130, 0.1120960489, 0.0544733442, 0.0800770000, -0.0601312369, 0.0407884568, -0.0589899831, 0.0275785737, -0.0595653020, -0.0019156741, 0.0453360863, -0.0684336349, 0.1093227044, 0.0250181071, 0.0861693919, -0.1160224378, -0.0979891345, 0.0773596615, -0.1236239448, -0.0792221352, -0.0129466448, -0.0106797004, 0.0624672771, -0.0417327806, 0.0046281992, -0.1360169500, -0.0176886264, 0.0346924104, 0.1060421988, -0.0601377599, 0.0480768718, 0.0134940539, -0.0751465335, 0.0052920179, -0.0555561520, 0.1829916835, 0.0337886065, -0.0429708026, 0.0007212661, 0.0198262054, 0.0029191347, 0.0459328145, 0.0050399788, 0.0590663888, -0.1251377761, 0.0023099529, -0.0358886905, -0.0065216925, -0.0597806424, -0.1326684952, 0.0302291811, -0.1720949411, -0.0226652194, 0.0824982896, 0.0065995967, -0.0113164857, 0.0950519815, -0.1168375537, 0.0417200662, 0.0085583804, 0.0771968141, -0.1520475894, -0.0461404622, -0.0935659781, -0.0841208771, 0.0357213356, 0.0237683374, -0.0792578012, 0.0703422278, -0.0787710622, 0.0347748585, 0.0834556818, 0.0679400936, -0.0255709812, -0.1119205952, -0.0085724341, -0.0722670481, -0.0123455189, -0.0350426137, 0.0135417758, 0.0886852443, -0.0008990507, -0.0405854918, 0.0799283385, 0.0573568717, 0.0096553070, -0.0133579001, 0.1440872997, -0.0117012104, -0.1251390874, -0.0119113717, 0.0032318453, 0.0033521813, 0.0245353319, 0.0493176207, 0.0309130885, -0.1118650585, -0.0588007197, 0.0744763911, 0.1621858627, 0.0932714567, 0.0184566174, 0.0281969476, 0.0208269618, 0.0203176867, 0.0361767113, 0.0318143480, -0.0300452579, 0.0783751085, 0.0689034238, -0.0630459413, 0.1111458987, -0.0307660997, -0.0711166337, -0.0857387185, 0.0983154997, -0.0708280206, -0.0483090244, 0.0108339395, 0.0109543595, 0.0030608291, 0.0896800160, -0.0935121924, 0.0208332948, 0.0470809825, -0.0300203320, -0.0728672743, -0.0237746295, 0.1088092774, 0.0707940906, 0.0205400288, 0.0707263201, -0.0807738751, 0.0134785380, 0.0066224798, 0.0372693166, 0.0323936939, 0.0487096049, -0.1270100772, 0.0405313745, 0.1417487413, 0.1716034859, -0.0013562882, -0.1037515774, 0.0245189629, -0.0121036237, -0.0555524863, 0.0732122809, -0.0926475301, -0.1445311904, 0.0516011231, 0.0643242225, -0.0425267778, 0.0314142667, -0.0118773673, -0.1075501740, -0.0961227193, 0.1109008640, -0.1031461582, 0.0287938751, 0.0566567555, 0.1291376054, -0.0485785939, -0.1027140766, -0.1321400851, 0.0795663446, 0.1254515946, -0.1203752756, 0.0944643393, -0.0222435705, 0.0335135423, 0.0778486729, -0.0406198353, 0.1491971612, 0.0087502720, -0.0147693250, -0.0360628851, -0.0323943980, -0.1040365994, -0.1105907187, 0.1151056960, -0.0354460552, -0.0575042777, 0.1320805997, 0.0091331536, -0.0863331333, 0.0338762924, -0.0023563951, 0.0141616231, -0.0068510831, 0.0203998201, 0.0855839476, 0.1528837085, 0.0534035787, 0.0698691607, 0.0739876926, 0.0118666301, 0.0597385354, 0.0084087551, 0.1486098915, 0.0902886018, -0.0345178768, -0.0073704571, 0.0573017970, -0.0173654612, -0.0538898371, -0.0510735773, 0.0163982436, 0.0608189888, -0.1238674521, -0.0955494493, 0.0917029828, -0.1363719255, -0.0389063396, 0.0901667923, -0.0690593123, -0.0022711204, -0.0216225646, -0.0440004356, -0.0816629007, 0.0374754295, 0.0178522281, 0.0007624782, -0.0254519247, -0.0731937811, -0.1727274060, -0.0972670913, 0.0462723970, 0.0309024472, -0.0331829749, 0.0709208921, -0.0899469107, -0.0111608729, 0.0633508191, 0.0005345956, -0.0272700600, -0.0035661650, -0.0367171206, 0.0447745919, 0.0362474285, 0.0173790697, 0.0737516358, 0.0130288005, -0.0114436382, -0.1126666740, -0.1190848202, -0.1316226125, -0.0752303153, -0.0884289518, -0.0388909690, -0.0163363405, 0.0064049228, -0.0900224298, 0.0445251092, -0.0849717036, 0.0361968651, 0.0109843938, -0.1442063749, -0.0326580182, -0.0168452505, 0.0390195549, 0.0309895016, -0.0899027437, 0.0685079098, -0.0396672487, -0.0156758651, 0.0240780730, 0.0704200566, 0.0976907462, -0.1997798830, -0.0007383936, -0.1500189304, 0.1629565060, -0.0338389613, 0.0624743067, -0.0255357232, -0.0345129408, -0.0682874992, -0.0190144293, 0.0499456190, 0.1407961845, 0.0214151796, 0.0826719627, 0.0695313215, 0.0892686471, -0.1100790575, 0.1365626007, 0.0155135067, -0.0619908199, -0.0027838030, -0.1041791067, -0.0976192355, -0.0152053321, 0.0234591924, -0.0073273713, 0.1023931429, 0.0478291996, -0.0036253093, -0.1163322479, 0.0777578279, 0.0087880148, 0.0449239649, 0.1763004959, -0.0577289090, 0.0254075713, -0.0236120280, -0.1545492262, -0.0088549238, 0.0319170952, 0.0877744034, 0.1039861366, -0.0589966998, 0.0708051175, -0.1477396190, -0.0786464810, 0.0028668677, -0.0141944932, -0.0278110057, 0.0143697727, 0.0792220905, -0.0614127629, -0.0942343771, 0.1145733148, -0.0432131328, -0.0489023179, -0.0614696667, -0.0054987725, -0.0425681062, -0.0233368948, 0.0056376318, 0.0140347928, 0.0293708500, 0.0628765374, 0.0221522003, -0.0197679587, 0.1394745559, -0.0723093227, -0.0003068432, -0.0142915128, -0.0752428770, -0.0907903463, 0.0286508128, 0.0401725061, -0.0591252893, -0.0127744079, -0.0863971189, 0.0906775370, 0.0068274736, -0.1263686717, -0.0624679066, -0.0379327163, -0.0704158247, 0.0202633217, -0.0398917235, -0.0368809402, -0.1121948659, -0.0360300280, 0.1563656330, -0.0018687573, 0.0156117072, -0.0561861023, -0.0183251072, -0.1702552587, -0.0818176940, -0.0406047143, -0.0336890295, -0.0878933594, 0.0354855955, 0.0298079029, -0.0854508951, -0.0610966943, 0.0431839116, 0.1416297853, -0.1644810140, 0.0330995172, -0.0361587629, 0.0525814220, 0.0079318611, -0.0780689046, 0.0482502691, 0.1355115622, 0.0049550608, -0.0711176991, -0.0817728713, 0.0432030819, 0.0256110989, 0.0337611698, -0.0039899684, -0.0503679141, -0.0249858350, 0.0323956721, 0.0254437458, -0.0635543913, -0.0239304677, 0.0773667619, -0.0044638612, 0.0899119228, -0.1296334714, -0.0601598993, 0.0866363645, 0.0516710430, 0.0614841320, 0.0746166632, 0.0973261818, 0.0221779738, -0.0215918235, 0.0223907568, -0.0503337532, -0.0686395541, 0.0332228132, 0.0183197446, -0.0722302422, -0.0340781808, 0.0791753158, 0.0605807491, 0.0522268154, -0.1206940934, -0.0935205966, 0.0113544725, 0.1175902560, -0.0310343727, 0.0361842886, 0.0378212631, 0.0310647264, 0.0360344723, 0.0093988841, -0.0399488956, -0.0498303697, -0.0484557785, -0.0096044866, -0.0154051529, -0.1579643488, 0.0197664425, -0.0872360989, -0.0295822825, 0.0543684401, -0.0322702378, 0.1179005802, -0.0253855046, 0.0228111017, -0.0942262113, -0.0442776047, 0.1988693923, 0.0624318086, -0.0216422901, -0.0224286765, 0.0620678402, 0.0927492678, -0.0512672700, -0.0265945084, 0.0234736633, 0.0624782592, -0.0236967579, -0.1465442777, -0.0801215544, -0.0782823116, -0.0147791384, -0.0334712267, 0.1377743334, 0.0008179566, -0.0168530922, -0.0198824741, 0.0308007244, -0.1145921797, -0.0201939214, -0.1708815843, 0.0403145067, -0.0127137797, -0.0282306820, 0.0799616501, -0.0123918047, -0.0033246663, 0.0981236398, -0.0431273133, -0.0108312424, 0.1246180609, -0.0637797043, 0.0618956052, 0.0575241409, -0.1143855080, -0.0048222393, 0.0424777232, -0.0694870427, 0.0369544178, 0.0149080334, 0.0901912227, -0.0498745441, 0.0524270311, 0.1025268510, 0.0259704124, -0.0902780816, 0.0666823611, -0.0970288813, -0.0336597636, 0.0456900187, 0.0161904562, 0.0059689465, -0.0399228707, 0.0944772288, 0.1810765713, 0.0626191795, -0.0127129955, 0.0261104647, -0.0638824403, -0.0737697855, 0.1349986047, -0.0298788026, -0.0448388346, -0.0221848469, -0.0556898527, -0.0099903895, -0.0241057556, -0.0145270675, -0.1371203214, -0.0005834280, -0.0304056965, -0.0148778921, 0.0568305328, 0.0506175831, 0.1780987531, -0.0693614036, -0.1026692241, -0.0462083220, -0.0270696972, -0.0215279981, 0.0526431315, -0.0053601107, -0.0501411185, 0.0364763327, 0.1369611472, 0.2245875597, -0.0718743503, -0.1335212141, 0.0708476827, -0.0684557036, -0.0763572976, 0.0375098921, -0.0123846130, -0.0082232617, -0.0109525668, 0.0278977547, -0.1689846814, 0.0276817530, -0.0866725594, -0.0285061430, 0.0671135485, -0.0402509198, -0.0699368939, -0.0778008774, 0.0292704906, -0.0578107648, -0.0037412706, 0.0415056832, 0.0758818090, 0.0542166084, -0.0462394170, 0.0023793716, 0.0679612234, -0.0360815711, -0.1094242185, -0.0389367454, 0.1242476627, -0.0643523857, -0.1212690175, -0.0178382788, -0.0508448556, -0.0048506991, 0.0869342461, -0.0582190380, 0.0785261542, -0.0004553539, 0.0831280351, -0.1177092344, -0.1114508212, -0.0614738427, -0.0716548562, -0.1089892536, -0.1016795039, -0.0579640195, 0.1036122888, -0.0806768984, -0.1528481543, 0.0145643605, 0.0762589201, 0.0277247895, 0.1257997006, -0.0153586669, -0.0664284602, -0.1116277650, 0.0980406851, -0.0286366455, 0.0820741504, -0.0543434583, -0.1042156368, -0.0345229656, -0.0187248383, -0.0135970348, -0.0352522321, 0.0296841413, 0.0882627368, 0.0241844207, 0.0249390844, -0.0702835619, 0.0096275155, 0.1046263576, -0.0889235809, 0.0455704965, 0.0992895365, 0.1018731594, 0.0666001886, 0.0223962478, 0.0140139544, -0.0425975136, -0.0346845500, 0.1033105329, -0.0500079989, -0.0461167395, 0.0368977003, -0.0439761728, 0.0007007424, -0.0101002641, -0.0491920039, -0.0389239192, 0.0852638334, 0.0283713434, 0.0221100152, -0.0973462537, -0.0182902031, -0.1273067594, 0.0516256094, -0.0367397480, -0.0571466759, -0.0151045183, 0.0371557325, -0.0838463753, 0.0594317093, -0.0593900792, 0.0148283746, -0.0151790772, 0.1058757827, -0.0652025044, 0.0714413524, -0.0020629517, 0.1137453616, 0.0233386271, -0.0130119668, 0.0222883467, 0.1136100292, -0.0933364928, 0.0889246836, -0.1011328697, -0.0930897743, -0.1107333079, 0.0694487616, 0.0649842545, 0.0388057716, -0.0184646472, 0.0233261082, -0.0816471800, 0.0284932125, 0.0280062761, 0.1028675511, -0.0779860094, -0.0877450034, -0.0528481677, -0.0395100936, -0.1466235965, 0.0095458478, 0.0586110801, 0.1024021730, 0.0200080611, -0.0729456320, 0.0143649122, -0.0286694206, -0.0730530098, 0.0217760243, -0.0448280051, -0.1091778353, -0.0474243052, 0.0168701001, 0.0414375067, 0.1080506742, 0.0089606810, 0.0705011263, 0.0774821788, 0.0776461512, 0.0327902660, 0.1037842929, -0.0244529657, 0.0121856481, 0.1462898105, -0.0387832224, 0.0347612202, 0.1214672402, 0.0210972428, -0.0026076979, 0.0105195977, -0.0025775733, 0.0880100951, 0.0105439797, 0.0569032840, -0.0137884244, 0.0573514402, 0.1391630322, 0.1161098182, 0.0757388026, -0.0478424914, 0.0738403052, 0.0118046384, 0.0146255614, -0.0803638995, -0.0280492175, 0.0061555565, 0.1665703654, -0.1888448447, 0.0966081470, 0.0508488007, 0.0165132079, -0.0636535212, -0.0122388443, -0.0847579986, 0.0359737575, 0.1857510656, 0.0210122038, -0.0689849034, 0.0496433116, -0.0814282745, 0.1462990493, -0.0420491993, 0.0672942176, -0.0024756151, 0.1054265648, -0.0411757678, -0.0491781048, 0.0917757452, 0.0429350175, 0.0160456188, -0.0230505411, 0.0427193679, 0.0448997319, -0.0942513496, -0.1493741423, 0.0185899753, -0.1526430100, 0.0305343885, -0.0253098141, 0.0504389890, -0.1845531464, -0.1063088626, -0.1201206073, -0.0913037285, -0.0237649623, 0.1420634836, 0.0236619357, -0.1075267345, 0.0163136143, -0.0016462262, -0.0507616177, -0.0225315113, 0.0656684712, 0.1080847159, 0.0632114410, 0.0323478244, 0.0455644913, 0.0360261910, -0.0234949887, -0.0234699324, 0.0271655843, 0.0103417821, -0.0136074303, -0.0099266376, -0.1334788054, 0.0151732387, 0.0804303363, -0.0578916892, -0.0567628853, -0.0349286459, 0.0771173611, 0.1749382317, 0.0707214624, 0.0127918571, -0.0571739972, 0.0067781801, -0.0141592417, 0.0406059437, 0.0652823597, 0.0826585516, 0.0401160568, 0.0669846162, -0.0511655733, 0.0386148654, 0.0571433455, 0.0279590003, 0.0518647879, 0.0150418738, -0.0310361311, -0.0604684502, 0.0939978734, -0.0534355901, 0.0190552175, 0.0167191736, -0.0304126013, 0.0199983697, 0.0278997440, 0.0605122410, 0.0912455544, -0.0103253545, -0.0117312577, -0.0710230917, 0.0147995548, 0.0259882994, -0.0125493193, 0.0364120826, 0.0634241924, 0.0245512743, 0.0446283445, -0.1356801689, -0.0567688122, 0.0614087135, 0.0362996124, -0.0038331111, 0.0554982945, -0.1152793914, 0.0042119883, -0.0116061587, 0.1087699234, 0.0061862087, 0.0191327222, -0.0820083916, -0.0556713156, 0.0857946798, 0.0378834382, -0.0664513633, 0.1083374619, 0.0291403197, 0.2129866928, -0.1389904022, -0.1423648000, 0.0104413629, -0.0102141704, 0.1527455300, 0.0146788396, 0.0862355158, 0.0345299244, 0.1039934680, 0.0204326101, -0.1888545752, 0.0972594172, -0.0076264828, -0.0941457897, -0.0296035558, 0.0402280502, -0.0193873886, -0.0343843549, -0.1440321803, -0.0914068297, -0.0885904431, 0.0325593613, -0.0394770876, 0.0546575338, 0.0500660092, -0.1674647480, 0.1014979482, -0.0617879145, -0.1098367721, -0.1266377270, 0.0101918774, -0.0027413154, 0.0231866967, -0.0547228567, 0.0148538584, -0.1152041331, 0.0800269544, -0.1018047184, -0.0345264189, -0.0574544147, 0.0444177911, 0.1401870102, 0.1176712736, 0.0364252292, -0.0393280797, 0.0693686232, -0.0197661389, -0.1623550951, -0.0289461520, 0.0262659863, 0.0308414027, 0.0036636977, -0.0580961630, 0.0387811325, -0.0927400663, -0.1500378400, -0.1227679774, -0.0541695692, -0.0520401187, 0.0841421112, 0.0319138542, 0.0341105238, 0.1191286743, -0.1371212900, 0.1093309149, -0.0563408099, -0.0435558222, -0.0229448695, -0.0414149165, -0.0329991803, -0.0606053136, 0.0406856202, -0.0542275049, -0.1166400760, 0.1129092425, 0.0865312815, 0.0473968945, -0.0521174818, 0.0154835340, 0.0601283908, -0.0119249029, -0.1353187561, 0.0177143831, 0.1340375245, -0.0596124977, 0.0269222241, -0.0323043279, 0.0214539189, -0.0410794988, -0.0398412421, -0.0656476021, -0.0075828652, -0.0049340613, 0.0548741706, -0.0716574118, 0.0847112909, 0.0359554216, 0.0526292808, -0.0089582549, -0.0235578250, 0.0008566499, 0.0086082164, -0.0365982130, -0.0288331993, 0.0860244781, -0.1308498532, -0.0058122333, 0.0440196358, 0.0072295680, -0.0193891022, -0.0328285135, -0.0022684780, 0.0986410305, -0.0001185421, 0.0200012960, 0.0685875192, -0.0874614716, -0.0499814078, 0.0497042350, -0.0436607189, 0.0047844998, 0.0261782780, 0.0194428638, 0.0987129807, -0.0860513151, -0.0292406790, 0.0605772808, -0.0069661387, 0.0252355468, -0.0146786869, -0.0370684005, 0.0274603460, 0.0798488483, 0.0209400281, 0.0016067318, 0.0334218964, -0.2019661814, 0.0927755758, 0.0663385540, -0.0152523564, -0.0965156630, 0.0459141731, 0.0374056809, 0.0305597335, 0.0620689020, -0.0195922945, 0.0302728470, -0.0842711180, -0.0073480210, -0.1456816941, -0.0648022220, 0.0392568298, -0.0604419634, 0.0104657449, 0.0368821137, 0.1133495942, 0.0631218329, -0.0169442650, -0.0135654528, 0.0317076780, 0.1917054504, 0.0360490456, 0.0907635689, -0.0761791319, 0.0175195914, 0.0108138723, -0.0538007841, 0.0966963246, -0.0752002895, -0.0159121938, 0.0048701023, 0.0654621869, -0.0580351688, 0.0885092989, -0.1338476539, -0.0196131039, -0.0030163683, 0.0756855011, -0.0218575206, 0.0008883448, 0.0732625797, -0.0200984962, -0.0251437053, 0.0029845561, 0.0124091627, 0.0491337702, 0.2079846710, -0.0495235696, 0.0427392386, -0.0154045960, -0.0287356209, -0.0047948584, -0.0454489067, 0.0916578770, 0.0391620845, 0.0077590710, 0.0447215065, -0.0605244860, 0.0882947519, 0.0969108716, 0.0682038069, 0.0161041506, -0.0518336110, 0.0226812754, 0.0865999013, 0.0577201620, -0.0504786670, -0.0447623990, -0.0644680336, 0.0151253054, 0.1464352012, -0.0303323325, 0.0219482202, 0.1028373837, -0.0829865560, 0.0596280321, 0.0253146999, -0.0583907589, -0.1170640588, 0.0445804521, 0.0231173933, -0.0187045336, -0.0467711091, -0.0443520918, 0.0941847190, -0.1564298272, 0.1267288476, 0.1586075723, -0.0112721650, -0.0701969042, -0.0057512266, -0.0745620653, 0.0469645560, -0.1170727313, 0.1958216578, -0.0200942662, -0.0845825300, -0.1119346768, 0.1978602707, 0.0132879196, 0.0108483993, 0.0969065949, 0.0225294065, 0.0117045240, -0.0460381992, 0.1152733192, -0.0640747249, -0.0394524671, 0.0682514012, -0.0200073197, -0.0604560375, 0.0726174936, 0.0033643355, -0.0195468981, -0.0458915494, 0.0066137165, -0.0465930626, 0.1016768068, 0.0571145602, 0.0075422153, 0.0524615794, 0.1221189052, 0.0167992879, -0.0976928547, 0.0010104583, 0.0001379144, 0.0757946670, 0.0452345721, -0.0603239536, -0.0158682708, 0.0451360494, -0.0731595531, 0.0164650436, -0.0777827501, 0.0481488779, -0.0289343949, 0.1247369125, 0.0136989169, 0.0448055230, -0.0227404665, 0.0623464100, -0.0459728874, -0.0221276060, 0.0542019643, 0.0353943184, 0.1026238129, -0.1249515563, 0.1294037849, -0.0143958693, -0.0109234713, 0.0186783094, 0.0348670147, 0.0813304335, -0.0471869297, 0.1008105427, 0.0015442549, -0.0488565490, -0.0562082492, -0.1338271350, 0.0069877049, 0.0260943454, -0.1830782443, 0.0229967088, 0.0338523276, -0.0290249698, 0.1199262962, -0.1301999092, 0.0627972111, 0.1257266998, -0.0160606485, -0.0472263955, -0.0298975836, 0.0340609364, 0.0180656705, 0.1275107116, 0.0557429492, -0.0277472772, -0.0498916395, -0.1108853593, 0.0689229295, -0.0068132277, -0.0730557740, -0.0548207983, 0.1409676522, -0.0462194309, 0.0584179685, 0.1454260945, 0.0761805847, 0.0601432659, 0.0403185785, -0.0403406657, 0.1076218411, -0.1357114464, -0.0670022368, -0.1146066338, 0.0028775549, 0.0298363678, 0.1016044840, 0.0074692387, -0.0937364548, 0.0153041882, 0.1182646081, -0.1297179759, -0.0627714545, -0.0043702717, -0.0155619178, 0.0221018307, -0.1003612429, -0.0509835966, -0.0765524134, 0.0696337670, 0.0389387757, -0.1078180373, 0.0282241311, 0.0686834231, 0.0727314651, 0.0561598204, -0.0048167426, -0.0060866619, 0.0216433834, 0.0690794587, -0.0182072390, 0.1274560094, -0.1158990711, 0.0438199565, 0.0053810533, -0.0044807089, -0.0328717679, 0.0639142916, -0.0147383837, -0.0422781147, -0.0385005288, -0.0008237211, -0.0540297553, -0.1124680787, -0.0935438350, 0.0137540996, 0.0393236652, 0.0488475971, -0.0315022804, -0.0325820707, 0.0515605472, 0.0160010830, -0.0245846193, -0.0752840862, -0.0704943165, 0.0055581708, -0.0309076160, 0.1565570831, -0.0061383210, -0.0758301765, -0.0248267464, 0.0990415663, -0.0308204889, 0.0855563730, 0.0100081349, 0.0004940878, -0.0902556479, -0.1308629513, -0.0929276198, 0.0607528575, 0.0183513220, 0.1011545882, 0.1170359403, -0.0394858196, 0.0191009641, 0.0893873796, -0.0407590568, -0.0600364693, -0.1099921018, -0.0037617069, -0.1300385594, 0.0008110628, -0.2201590240, 0.0156919360, -0.1579349637, -0.0341982916, -0.0080366703, -0.0021162869, -0.0369988494, -0.0430029258, 0.0306881797, 0.0454979651, 0.1455965638, -0.0096627763, -0.0368090309, -0.0413182117, -0.0602202937, -0.0197916031, -0.1382804364, -0.0034182889, -0.0144357681, -0.0667837635, -0.0034599309, 0.0869013518, -0.0182152502, 0.0465915576, 0.0593978912, -0.0068550245, -0.0804979876, 0.0548899956, 0.0004607821, 0.0321507342, 0.0620163269, -0.0149445171, 0.0283273868, 0.1171456873, -0.0434286818, 0.0174708460, -0.0044822982, 0.0062012547, -0.0219609290, 0.0925544724, 0.0137959477, -0.1067658812, -0.0909146965, 0.0929402038, -0.0228248108, -0.0540430918, -0.0176563524, -0.0388022214, 0.1527292728, -0.1045176834, 0.0429168716, 0.1238495857, 0.0562749095, 0.1277507097, 0.0617677271, 0.0204500966, -0.0274555814, 0.0951493829, 0.1100512296, 0.0192934461, -0.1007599011, 0.1571574509, -0.0969733521, 0.0027146533, -0.0781436414, 0.0226941239, -0.0046320162, -0.0387472212, -0.0747602284, -0.0815186501, 0.0193726625, 0.0479372926, 0.1245889738, 0.0427578688, 0.0108715575, 0.0595745966, 0.1175717935, 0.0277317204, 0.0016472792, -0.0855635479, -0.0335571803, -0.0071580373, -0.0353940465, -0.0823481902, 0.0451973155, -0.1833462268, -0.0687188879, 0.0520951487, 0.1624656320, 0.0431727394, -0.0096174758, -0.0827065408, 0.0412739329, -0.0475106724, -0.0601005517, -0.0257435068, 0.1413125843, -0.0237005353, -0.0706165954, -0.0444177985, 0.1029062420, 0.0584344864, -0.0036805435, -0.0367733017, -0.0609911159, 0.0267498698, -0.0804392770, -0.0486627445, 0.0239197873, -0.0966713503, -0.0700847507, 0.0345211886, 0.0506449975, -0.0124727199, 0.1112950072, 0.0079627763, 0.0530223399, 0.0755321681, 0.0146533279, -0.0834426656, -0.0269785859, 0.0473606847, 0.1547155231, -0.0026937907, -0.0044212672, 0.0113442652, 0.0410760194, -0.0681351870, -0.0828756914, 0.0393861607, 0.0767870694, 0.0327792652, -0.0679854080, 0.0059033362, 0.0053374157, -0.0383277386, 0.0978104621, -0.0003700974, -0.1672420800, -0.0564956069, -0.0629116595, 0.0767704099, 0.0238102917, 0.0517283753, 0.0374743827, -0.0352223590, 0.0542140678, 0.0663705841, -0.0040758876, -0.1051977426, -0.0163384750, -0.0941017494, -0.0427647866, -0.1476846188, 0.0157019906, 0.0261804871, 0.0468050353, 0.0011828614, -0.1247313768, 0.0873521864, 0.0306109563, 0.0645663515, 0.1079079062, -0.0249716993, 0.0267342199, -0.0161734074, -0.1124610156, 0.0361044556, -0.0920799226, 0.0326791182, -0.0829594061, 0.0448140278, -0.0853079706, 0.0098046064, 0.0851523057, 0.0945533067, -0.1277863532, -0.0161262527, 0.0009801284, 0.0186094418, 0.0516485907, -0.0070180595, 0.0379682742, -0.0518942587, 0.1243582591, -0.1354758739, -0.0220569912, 0.0242959522, 0.0771454051, -0.1188363135, -0.0725714713, 0.0446702167, -0.0143196443, 0.0257101338, 0.0643897727, 0.0308513064, -0.0471103862, 0.0622560307, -0.0543813743, -0.0905355811, 0.0090278964, -0.0236170031, 0.0362678170, -0.1294143051, -0.0318511315, 0.1045411527, 0.1103832200, -0.0241130274, -0.0677421764, -0.0893854275, 0.0743147209, 0.0451766700, -0.0555066913, 0.0162986405, 0.0753442720, 0.0128413495, 0.0025989171, 0.1666243225, 0.0442231633, -0.0527011082, 0.0138729904, -0.0571094640, -0.0571455024, -0.0447815396, 0.0185686294, 0.1295010448, -0.1752229333, 0.0773347244, -0.0902581736, -0.1064964235, 0.0460647419, 0.0012936256, 0.1306561679, -0.0136052901, 0.0804888159, -0.1065714061, -0.0401889086, -0.0772298425, -0.0871016309, 0.1134505644, -0.0113059068, 0.0857912973, 0.0456842259, -0.0145390751, 0.0583004877, -0.0143902097, -0.0820883140, 0.0423004478, 0.0072578033, 0.1278780401, -0.1672682166, -0.1251005977, 0.0261712838, 0.0261784494, 0.0978911519, 0.1633833051, -0.0755279660, 0.0215856023, -0.1165714934, -0.0113742836, -0.0297925118, -0.0170775596, 0.0698067769, -0.0346136391, 0.0385495573, -0.0374560133, -0.0378672853, 0.0230291076, -0.0681493580, -0.0480624139, 0.0061229127, 0.0017430182, 0.1637613177, 0.1077333391, 0.0494112335, -0.0574284717, 0.0699080154, -0.0040275445, -0.0466629975, -0.0044872123, 0.0049612159, 0.0273011010, 0.1191526130, -0.0090479851, 0.0212971494, 0.0833798051, 0.0012696976, 0.0541309007, -0.1232688800, -0.0102769751, -0.0342930332, 0.0720620304, -0.0183763392, -0.0123477960, 0.0555570871, 0.0980523676, 0.0092543550, 0.0006269056, 0.0860495418, -0.0545116179, -0.0990815982, 0.0689746290, 0.0319504403, 0.1296007186, -0.0194797684, 0.1334611326, 0.0025022784, 0.1130394638, -0.0634028465, 0.0907612741, -0.0346150734, 0.1081825569, 0.0212266129, -0.0071011605, -0.1577250510, 0.0127087003, -0.0161887612, 0.0777130052, -0.0495980419, -0.1147914305, 0.0410934575, -0.0136109199, -0.0084283035, -0.0991396010, 0.0161814820, -0.0909506381, -0.0850256085, 0.0311975200, 0.0262271855, -0.0543154553, 0.0052265059, -0.0740982592, -0.1010350585, 0.0236951765, -0.0404117219, 0.0009673903, 0.0933640227, 0.1406838894, 0.0137177836, 0.0142975617, 0.0305673927, -0.0384727046, 0.0212879404, -0.1076334864, -0.1807871759, -0.1040121764, -0.0232442208, -0.0258281864, -0.0107664960, 0.0843922123, -0.0519232452, 0.0917819440, -0.0781100392, 0.0303287562, 0.0249654986, -0.0313130096, 0.0763164684, 0.0284189694, -0.1181743965, 0.0150005100, -0.0334127024, -0.0055378657, 0.1020735055, 0.0392202400, 0.2265837193, 0.0791329518, 0.0379412174, 0.0148699312, -0.1012107432, 0.0297506545, -0.0398633927, 0.0600458048, 0.0900810212, -0.0209007841, 0.1168376282, 0.0970095098, -0.0003144214, 0.0533315763, 0.1198065504, -0.0190767255, -0.1142710671, -0.0016721291, -0.0672956333, -0.0179087836, -0.0279950835, -0.1644302160, -0.0708189830, -0.0808215365, -0.0134537481, 0.0047452678, 0.0363306664, -0.0908398330, -0.0593534373, 0.0006799657, 0.0172081683, -0.1025488824, -0.0264166836, 0.0873677880, -0.0519733354, 0.2028293312, 0.0086492840, -0.1301887184, -0.0096908212, -0.0620099679, 0.0421788134, -0.0129757309, -0.0330829956, -0.0181575380, 0.0305054337, -0.0086277779, 0.0921347439, -0.0758526996, -0.0759154633, 0.0565035939, -0.0872880369, 0.1580936760, 0.0866160095, 0.0387138128, 0.0088447277, -0.0445083417, 0.1470991969, 0.0564328730, 0.1120970100, 0.1260632128, -0.0216156356, 0.0248429347, 0.1680707932, 0.0915800408, -0.0366946422, 0.0442784466, -0.0037663393, 0.0809541270, 0.0107512018, -0.0076266201, -0.0452483371, 0.0465665907, -0.0335163176, -0.0149789369, -0.0620545633, -0.0683755130, 0.1115529761, -0.0431631431, 0.0496666022, -0.0613471344, 0.0761069059, -0.0085977763, -0.0690781921, -0.0453908071, 0.0911213681, 0.0443948321, 0.1010235474, -0.0280681588, 0.0717717409, -0.0764284059, -0.0451567322, -0.0202522893, 0.2041472346, -0.0228829626, 0.0063841077, 0.0120986504, -0.0076927682, -0.0276638698, -0.0881273374, 0.1338026375, -0.0257163495, -0.0827764943, -0.0751709193, -0.0157523304, 0.1193426251, 0.1394133121, 0.0553549565, 0.0114694415, -0.0261066183, -0.0065649785, 0.0804116800, 0.0540329218, -0.0646554157, 0.0817549080, 0.0206010975, 0.0125330491, 0.0474072620, 0.0237169955, -0.0293363258, 0.1680801809, -0.0982848853, -0.0393921956, 0.0638839304, -0.0202524047, 0.0147748683, 0.0099832788, 0.0792658553, 0.0275687296, -0.0172568895, -0.0606447011, -0.0615025721, 0.1419193149, 0.0600613691, 0.1298645139, 0.0956009999, -0.0390919447, 0.0691560581, -0.0261703897, -0.1034549028, 0.0516957976, 0.1236477271, 0.0466449410, 0.1034744680, -0.0806906819, -0.0432729945, -0.0001283580, -0.0566828363, -0.0495740548, -0.0902566686, -0.0486853682, -0.1569111198, -0.0353699178, -0.0052090697, -0.0568792745, 0.0483037531, 0.0014585442, 0.0459063128, 0.1632204652, 0.1214326769, 0.0170099419, 0.0311729200, -0.0172077101, 0.0905383602, -0.0545797087, 0.0189880356, -0.0221760701, -0.0283779558, -0.0033731146, 0.0224179700, 0.0464448035, -0.0287415590, 0.0408944748, -0.0155507522, -0.0257965773, 0.0217073653, 0.0337009318, -0.0624256879, -0.0005379009, 0.0316332020, -0.0018256041, 0.0465296060, 0.0317090824, -0.0057539954, 0.1235500127, 0.1151935160, -0.0178771503, -0.0792539045, 0.0904237106, -0.0833234563, 0.1204637736, -0.0632646531, 0.0652517155, -0.0154791716, -0.0242096819, -0.0228782147, -0.0324221849, -0.0518893003, -0.0859816372, -0.0415066071, 0.2315807939, -0.0994800702, 0.0068763779, 0.0179055929, -0.0764032602, -0.0174198207, -0.0791917220, 0.0455329306, -0.0027383883, -0.0410422273, 0.0092835948, 0.1119442657, -0.0190520454, 0.1437467188, 0.0246780217, -0.0379000492, 0.1232945323, 0.0531162061, 0.0721218958, 0.0084200520, 0.0734452903, 0.0147440732, 0.0768534169, 0.1160160527, 0.0240672659, 0.0082819108, -0.0185450166, -0.1346161067, 0.0212217364, 0.0941186994, 0.0030795829, -0.0113283182, 0.0305348132, 0.0865174532, 0.1124342456, 0.0455137715, 0.0038050811, 0.0577386767, -0.0768547878, 0.0690501630, -0.1076007634, 0.0270817913, 0.1041374728, 0.0930207223, 0.1301448345, -0.0100798113, -0.0442834012, 0.0402038731, -0.0941441432, -0.0479829423, 0.0172627792, -0.0678248033, -0.0737165064, -0.0693100989, 0.0359935239, -0.0613838695, -0.0327425860, -0.0176009368, -0.0944989324, 0.0360624827, 0.0126195122, -0.0852849111, 0.0664915517, 0.0638878644, -0.1339413971, 0.0120234182, -0.1155891493, 0.0015198805, 0.0201177858, -0.0785854086, -0.0391300619, -0.1703895777, -0.0191824827, -0.0151642468, 0.0233739540, -0.0395953134, 0.0005577869, -0.0118628182, 0.0927481502, 0.0224352926, -0.0003237779, 0.0413632989, 0.0225195736, -0.0656892732, -0.0030597956, -0.1410961896, 0.0025788590, 0.0679620430, 0.1468770206, 0.0129776029, 0.0527920611, 0.0221565720, 0.0485071838, -0.0607361197, -0.0135802953, -0.1266713142, -0.0669988170, 0.0898435488, -0.1178777963, -0.0159122366, -0.0557528250, 0.1138598695, 0.0845283195, 0.0309929866, -0.0536586009, 0.0227615610, -0.1228865981, 0.0614303313, -0.0253090970, -0.0771376491, -0.0518765002, 0.0045795604, 0.0266994387, 0.1353143007, 0.0681277737, 0.0768123120, 0.0892382115, 0.0777030289, 0.0644261688, 0.1392060667, 0.0960660055, 0.0085058957, -0.0825871676, -0.0355225168, 0.1695966870, 0.0100749070, 0.0995742604, -0.0149491625, -0.0505507924, -0.0042998195, -0.0745973289, 0.0037742308, 0.1197706982, 0.1187536791, -0.0098602101, 0.1060368344, 0.0122072101, 0.0372754410, -0.0544392504, 0.0197212379, -0.0584455393, -0.0340591036, 0.0199159812, 0.0290445182, 0.0649258122, 0.0191334486, 0.1350387484, -0.0078826481, 0.0209361557, -0.0358316451, -0.0659391060, -0.0834989697, -0.0545119420, 0.1016482264, -0.0891520828, -0.0120064402, 0.0522167608, 0.0437708870, 0.0550410338, -0.1150337830, -0.0120201921, 0.1232414395, -0.0492829904, 0.0555075072, 0.0102883093, 0.0637817010, -0.0367451794, -0.0325009599, 0.1103187352, -0.0177848376, 0.0382388756, -0.0281873271, 0.0997599587, 0.1042369828, -0.0276161321, -0.0787480697, 0.0086294152, 0.0014213353, 0.0980085954, -0.0471116044, 0.0899123698, -0.0599121414, 0.0263860021, -0.0256807674, 0.0361648165, -0.0013357876, 0.0315956734, -0.0749315396, 0.0382055528, 0.1081862450, -0.0030867495, -0.0188848246, -0.1730483770, 0.1009101421, 0.0312778316, -0.0906409174, 0.0857165009, -0.0219733678, 0.0817865953, -0.0279203635, 0.0599416383, 0.0718353167, 0.0549611896, -0.0817376897, 0.1005249247, 0.0020084055, -0.0561665893, -0.0667237788, 0.0025226620, -0.0379375033, -0.0357030928, -0.0617794171, -0.1051131338, 0.0149234962, 0.0644256026, 0.0386016183, 0.0583066419, 0.0776788518, 0.0976755545, -0.0756842270, 0.0131476633, 0.0876484066, -0.0335266255, -0.0210303813, 0.0247933138, 0.0610174015, 0.0532818809, 0.1345490962, 0.0826379359, 0.1192129254, -0.0051073879, -0.0133566931, -0.0880486295, -0.0761151239, 0.0776925012, -0.0509505160, -0.0011566275, 0.0094923051, -0.0970023125, -0.0321645811, 0.0415054448, 0.0409713686, 0.0995046496, -0.1093815938, 0.0326935686, 0.0008116022, 0.0912749767, -0.0671162382, 0.0019455270, 0.1057260260, 0.0384671688, -0.1506964564, -0.0453070551, 0.0547312573, -0.0457888655, -0.0476186201, 0.0372766741, -0.0104039600, -0.0501677841, 0.0979735479, -0.0495993346, -0.0490480401, 0.0103852153, 0.1118334755, -0.0139551423, 0.1435064077, -0.0110206604, 0.0900179893, 0.0612610392, 0.1020466983, 0.1268599331, -0.1267576516, -0.1289321631, -0.0725555569, 0.0466165431, -0.0754610747, 0.0070553087, 0.0033178218, 0.0127109522, -0.0562406108, 0.1409181505, 0.0224854574, 0.0346302427, -0.0800244063, 0.0552093200, -0.0388487540, -0.0908293277, 0.0253349766, 0.0449545756, 0.0282615591, -0.0724533275, -0.0484433658, -0.1208187044, -0.0123066455, -0.0668840110, 0.0295559727, -0.0553556308, -0.1079138517, 0.0790138990, -0.0263350811, -0.0325441398, -0.0486284755, -0.1025338843, 0.1187313944, 0.0287821628, -0.0139450412, -0.1325370073, 0.0107572200, -0.0191549268, -0.0869397223, -0.0140897725, 0.0452214256, 0.0508027300, -0.0120841023, 0.1023729444, -0.0550459847, -0.0816410780, -0.0056686094, 0.0693611577, -0.0805182531, 0.0782096013, -0.1367020309, -0.1180835739, -0.1435937136, 0.0000632011, 0.0416413210, 0.0799092948, 0.0935767516, -0.0299787298, -0.0219098702, -0.0907265022, 0.1442249566, -0.0158786494, 0.0753485411, -0.1328509450, 0.2289616913, -0.0554805063, -0.0300220121, -0.0324718468, -0.0968572050, 0.0426217169, 0.0374857746, -0.1256224513, -0.0362186469, 0.0729748756, -0.0106772427, 0.0807955638, 0.0025412382, 0.0157603510, 0.0738354474, 0.0489929467, -0.0640624613, -0.0849216059, 0.0274757594, 0.0648229346, 0.0880272985, -0.0875575766, -0.0511489101, 0.0461507663, 0.0670300275, 0.0076080938, 0.1518688947, 0.0118933404, -0.0247446597, -0.0681833774, -0.0138942078, 0.0223678835, 0.0128529714, 0.0219705924, 0.0631995946, -0.0087299319, 0.0353764705, 0.0843173862, 0.0014275797, -0.0329424441, 0.0573027134, 0.0799521431, -0.0219799243, -0.0724125952, 0.1023778021, -0.0630804449, -0.0572757050, -0.0990079641, -0.0820396841, 0.0019363271, 0.1382771134, 0.0016426839, 0.0456579141, 0.0642153323, -0.0296709258, 0.0464969985, -0.0022811168, -0.1545809805, -0.0158867966, -0.0290146694, 0.0892185345, 0.0000634175, 0.0222103987, -0.1015830934, -0.2025145143, 0.1372317970, -0.0410696454, -0.1170173660, -0.0597133674, -0.0250100773, -0.0552718826, 0.0350660123, 0.0142264860, 0.0832743421, -0.0832097083, -0.1683369577, 0.0764320493, -0.0525389649, 0.1138205454, -0.1358443797, -0.0672087520, 0.2252301574, 0.0601741709, -0.0776746050, 0.0646279007, 0.0692762807, -0.1295151561, -0.0213824250, -0.1007284001, 0.0507174991, 0.0784177259, -0.1710261852, -0.0167398266, -0.0766365156, 0.0390346833, -0.0239930302, 0.0435198769, 0.0445699804, 0.1007275060, 0.0921317786, -0.1063382402, 0.0325230919, -0.0032432899, 0.1188816950, -0.0319208913, 0.0470351502, 0.0852489620, -0.0656340495, 0.0774716660, 0.0735978186, -0.0496528670, 0.0027467608, -0.0645919591, 0.0110355662, 0.0368628055, -0.0967720002, 0.0136512332, 0.0550848581, 0.0113053024, 0.0169088673, 0.0964246765, 0.0211093891, -0.0293138027, -0.0157345813, -0.0500507094, -0.0202160925, -0.0821611956, -0.0749089047, 0.0268164463, 0.0723717585, -0.0331458338, -0.0076342919, -0.0932448581, 0.0851133093, 0.0991246849, -0.0038434039, -0.0340527631, -0.0271868762, 0.0075957463, -0.0626703650, -0.0087955613, 0.0398868807, 0.0573109761, 0.0315342210, 0.0677603781, 0.0262894128, -0.0425517373, 0.0078034131, -0.0585119203, 0.0353124849, 0.0416405126, -0.0460229404, 0.0305548552, -0.0475460105, -0.0685383826, 0.0005049333, -0.0845628530, 0.0128968786, -0.0610322282, -0.0784866288, 0.0900008902, 0.0088540632, 0.0215029269, 0.0147752948, 0.1225510687, 0.0952373222, -0.0645575374, -0.0258951299, -0.0619464032, 0.0201956611, -0.0157368984, 0.0089062070, -0.0565569177, -0.0608784892, -0.0454397611, -0.0313483365, 0.0094681475, 0.0162555184, -0.1198162138, 0.1221451908, 0.0022815098, 0.1509755850, 0.0460943282, -0.0912542269, -0.0302943960, 0.0858768597, -0.0966049358, -0.0170033760, -0.0723416582, -0.0819594041, -0.0357995033, -0.1131826937, -0.0824202970, 0.1083959341, 0.0782526806, 0.1113502681, -0.0260744970, 0.0550533198, -0.0971193314, 0.0450710431, -0.0137293674, -0.0442503393, -0.0229540095, -0.0555912741, 0.0280042756, -0.2353598773, -0.0825921074, 0.0256664343, -0.0180627257, -0.0859073251, 0.0135063166, -0.1264574528, 0.0195785780, 0.0163807720, -0.0089878291, -0.0165600814, 0.0371745676, -0.1454461515, 0.0223152190, 0.0582361966, 0.0399692394, 0.0879121348, -0.0161898527, -0.0212785602, -0.0207768790, -0.0042510768, -0.0847457200, -0.0007276193, 0.0296225529, 0.0355771817, 0.0656809509, -0.1434885561, 0.1103365868, -0.0734668076, -0.1416606903, 0.0404459164, -0.0171590187, 0.0668823794, -0.0705231652, 0.1015010178, -0.0451941490, 0.0121551557, 0.0346628390, 0.0162665192, 0.0034821287, -0.0499013066, 0.0821553916, 0.0154743260, 0.0299751721, -0.0458532795, 0.0654623136, -0.0252058133, 0.0662432164, 0.0327283368, -0.0322084501, -0.0805906355, 0.0872346014, 0.0744778141, -0.0034571299, -0.0593621507, -0.0028212341, -0.0543014593, -0.0191315692, 0.0587071441, 0.0190322883, 0.0138535621, -0.0252665970, 0.0654376671, -0.0051951194, 0.1464342922, -0.0529325232, 0.0576984137, -0.0064154221, 0.1134537756, 0.0524416342, -0.0787272900, -0.0470012017, 0.0285066292, 0.1059783325, 0.0134082679, 0.0835340619, -0.1023154631, 0.0158219859, 0.0970030949, -0.1342091262, 0.0451489948, -0.0684172362, 0.0283767767, -0.0316992700, -0.0519642010, -0.1950390488, 0.0401989892, -0.0718551427, 0.0497017503, 0.0077965972, 0.0108161289, -0.0149460640, -0.0301005132, -0.0258916132, 0.0038671314, 0.0538168214, 0.0767965540, -0.1336864084, 0.0285977125, -0.0372134447, 0.0836344063, -0.0077419882, 0.0386725217, 0.1242773831, 0.0804221034, 0.0195074994, -0.0610695817, -0.1178823337, 0.0298497807, 0.0770899057, -0.0562019572, -0.0692154691, -0.0135114109, 0.0825954229, 0.0244388785, 0.1291837990, 0.1134321243, -0.0393846110, 0.0097247744, -0.0193938669, 0.0362882316, 0.0132992817, 0.0157054160, -0.0463324413, 0.0681406707, -0.0218333341, -0.0071438183, -0.0823621526, -0.0403802507, 0.0296696667, -0.0549549386, -0.0682195723, -0.0120547879, -0.0015871279, 0.0838576034, 0.0266309250, -0.0301652048, -0.1150110587, 0.0033466548, -0.1121366397, -0.0919611454, -0.0745705590, 0.0253003407, -0.0487531833, 0.0888977945, 0.0135543356, 0.0212985221, -0.0863673612, -0.0650963187, 0.1324547082, 0.0878598541, -0.0504916906, -0.0347299166, -0.0661880225, 0.0733875856, -0.1297556907, 0.1245532259, 0.0341386683, -0.0342825837, 0.0223902911, -0.1424617767, -0.0118460581, 0.0383026041, 0.0046950337, -0.0462434515, -0.0197036527, -0.1882354915, 0.0315472223, 0.1493653059, -0.0459515825, -0.0010160586, -0.0023582429, -0.0624068715, -0.0662506074, 0.0183883030, -0.0259613413, 0.0041141645, -0.0084364489, -0.0769527480, -0.1568551064, -0.0891119316, 0.0169455335, -0.0128936227, 0.0554550029, -0.0078207534, 0.0669511855, -0.1747251153, -0.1518613547, -0.0424167924, -0.0456943922, 0.0592486039, -0.0609217808, 0.0074310433, 0.0927394256, -0.1145614088, 0.0644325912, -0.0148049369, 0.1685271412, -0.2264283150, -0.0426052548, 0.0746231154, -0.0133890333, 0.0298199560, -0.0053226696, -0.0377098471, -0.0702412874, 0.0486767329, -0.0679131076, -0.0734774470, -0.0875116885, 0.0772348940, 0.1346514672, 0.0627566427, 0.0245429650, -0.0384799540, 0.1535148472, 0.0389804207, 0.0189215876, 0.0541251600, -0.0393541269, -0.0901140571, -0.0384707563, -0.0882621482, 0.0412543677, -0.0867711008, 0.1175252944, -0.0257679764, 0.0415526181, -0.0239055157, -0.0580428056, -0.0205521751, 0.1259305328, -0.0164377782, 0.0851850733, -0.0441453606, -0.0345698521, -0.0416659079, 0.2356464416, -0.0059638210, 0.1705359668, 0.0116980830, 0.0344101042, -0.0580127202, 0.0891711935, 0.0885265395, 0.0998811722, -0.0267194957, -0.0328298211, 0.0563941598, 0.0187225696, -0.0141440304, 0.1012814790, -0.0461325683, 0.1022681668, -0.0436030664, 0.0160252303, -0.0372115336, -0.0919434279, -0.0404086336, -0.0219917875, -0.0320935100, -0.0388906486, -0.0195951480, -0.0886779130, 0.1164390966, -0.0120771881, -0.0181812625, -0.1019514427, -0.1606146842, 0.0115898922, 0.0295061711, -0.0084264688, -0.0561610162, -0.0951296389, 0.0853839964, -0.0772688314, 0.0592972599, -0.0336215310, -0.0769059062, -0.1308676302, 0.0460419580, -0.0695414171, 0.0801626518, 0.0454365686, 0.1095173657, 0.0700821355, -0.0755514205, 0.0243936405, -0.1165014356, 0.0598479733, 0.2021500468, -0.0249780733, 0.0278361700, -0.0052380161, -0.0526633933, -0.0213189591, 0.0353063196, 0.0682551712, -0.0379342474, 0.1420702338, -0.0305560306, -0.0680030659, -0.0672610104, 0.0251586642, 0.0873964205, -0.0346904993, 0.0246044658, 0.1676981300, 0.0920135155, 0.0234706048, -0.0354568660, -0.0046170703, 0.0583841912, 0.1181492582, 0.0758509561, 0.1076278910, -0.1042157039, 0.0250996798, 0.0025100813, 0.0237243325, 0.0926276520, -0.0718462691, -0.0253615044, 0.0307919495, 0.0274910517, -0.0407574773, 0.0524535328, 0.0645730719, -0.0305205435, -0.0514378771, 0.0297851115, -0.0179262068, 0.1017222404, -0.0653647408, 0.0075040213, 0.0537102632, -0.1061027348, 0.0724340677, -0.1020979956, 0.0520404018, -0.0222525559, 0.0101168035, 0.0816921219, -0.0089511117, -0.0624868572, 0.0724982768, -0.0751619712, 0.0257477276, -0.0424333252, 0.0492570475, 0.0167373698, -0.0765802041, 0.0422870442, -0.0656020418, 0.0643376261, -0.0260237902, 0.0294355191, 0.0508296005, 0.0493939258, -0.1090065539, 0.0289781839, 0.1227847114, -0.0566655286, 0.1225901544, 0.0353229269, -0.0295747127, -0.0223862547, 0.0528139956, -0.1070456579, -0.1069694310, 0.0547233745, 0.0659974590, -0.1096249074, -0.1089569628, -0.1411187947, -0.1392191947, 0.1552545130, 0.1090090647, 0.0280576088, 0.0522038005, -0.0582728609, -0.0807906613, 0.0856498629, 0.0550023392, 0.0793410987, 0.0810700729, -0.0214582421, 0.0954708830, 0.1207977459, 0.0430313013, 0.0580686629, 0.0058339611, 0.0404506959, 0.0216417760, 0.0116207199, -0.0493581966, 0.0162102059, 0.0006693891, -0.0050915289, -0.0087878779, 0.0402085111, 0.0307905897, 0.0129825808, 0.0138152260, 0.1250777841, 0.0121096037, -0.0110182296, -0.0570736900, 0.0376929939, -0.0844492167, -0.0174588636, -0.0301210992, 0.0122036627, 0.1187449470, 0.0083659505, 0.0236513112, 0.0563088581, 0.0720243081, 0.1752024144, -0.0942231342, 0.0927440450, -0.0148296356, 0.0311610531, 0.0175379924, 0.1187493056, 0.0566248037, -0.0306202676, 0.1068841144, -0.0692394078, -0.0611472055, 0.0281057134, -0.1013481095, -0.0214833226, -0.0866606086, 0.0002425257, 0.0686990172, 0.0606279634, 0.0774856284, -0.0676301941, -0.0868197456, -0.0849679112, 0.0517001972, -0.0398345254, 0.0147633553, 0.1635966152, 0.0577775352, -0.0226966795, -0.0186477043, 0.1297928393, -0.1170225143, 0.0224597920, 0.0074839471, 0.0282028150, 0.1508803964, -0.0657682121, 0.0907536894, 0.0764011219, -0.0524853282, -0.0892165676, 0.0619943142, -0.0611783452, 0.0011352908, -0.0953963771, -0.0432214737, -0.0205036923, -0.0778187513, 0.0145587428, -0.0164593291, 0.0551559404, -0.0483700447, -0.0108330594, -0.1193162873, 0.0416306816, -0.0183647834, -0.0325213261, -0.0771726370, 0.0749869794, -0.0031272925, -0.0420708358, -0.1037629247, -0.1882089972, 0.0213161428, 0.0586244799, -0.0284912121, 0.0535201617, 0.0519086607, 0.0466791950, 0.0632172227, 0.0806377903, 0.0234055538, 0.0211325288, 0.0594181828, -0.0092708869, 0.0429276079, 0.0013148834, 0.0903240293, 0.0224973056, -0.1190274805, -0.0047181132, -0.0160035621, -0.0284520313, -0.0339198932, -0.0411360487, -0.0867768303, 0.0177466106, -0.1588685066, -0.0836223736, -0.0483720824, 0.1110832542, -0.0632986873, 0.0257276315, 0.1503231972, -0.0505031683, 0.0027496752, 0.0345229916, -0.1051457673, -0.0676233321, 0.0148480590, 0.1063885763, 0.1172972545, 0.0170117877, -0.0369869806, -0.0477876477, -0.0120311044, 0.0131130759, 0.0313990936, -0.0287486818, 0.0790631622, -0.0629714951, 0.1195499897, 0.0775295496, 0.0077607674, 0.0285669118, -0.1749311388, -0.1637426019, -0.0446634106, 0.0289059263, 0.0512772389, -0.0456462875, -0.0991242155, -0.0700417385, -0.0086030578, -0.0473438911, 0.0585063323, 0.0668201521, 0.0899436474, -0.0268646758, -0.0312055275, -0.1198064238, 0.0943204314, 0.0603663623, 0.1539462656, -0.0204944126, 0.0059433095, -0.0550015047, -0.1392594427, 0.0781626180, 0.0145094525, -0.0364834331, -0.0391694121, 0.0054635191, 0.0232738759, -0.0668938458, -0.0326205306, -0.0090607656, -0.0185495168, -0.0289772656, 0.0271292236, 0.0555284582, 0.0314397812, -0.0456488095, -0.0299897827, -0.1678526849, -0.0822169483, 0.0905898884, -0.1333469301, -0.0772225410, 0.0627783909, 0.0248614941, -0.1642881036, -0.0600276999, -0.0382382907, 0.0688564256, 0.0690037534, 0.0965466127, 0.0593817383, -0.1331329346, 0.0190670285, -0.0175036639, -0.0063748285, 0.0466921516, 0.0318346024, -0.0063976301, 0.1095487326, -0.0457003266, -0.0248580910, 0.0790950134, 0.0188486297, -0.0305072162, 0.1904267967, -0.0161713436, -0.0623929501, 0.0066760387, 0.0311738662, -0.0589355603, 0.0119939605, 0.0080313254, 0.1432473361, 0.1340806931, -0.0735957325, 0.0096084215, -0.0253711231, -0.0530544110, 0.0128358155, 0.0543851852, -0.0784101933, 0.0478839651, 0.0646991059, 0.0245799534, -0.0423282422, -0.1249556318, -0.0302038714, -0.0660123453, -0.0117536411, -0.0480868965, 0.0597954430, 0.1073118597, -0.0814952031, 0.0512593500, -0.0471651964, -0.0887801573, -0.0305091143, 0.0224004611, 0.0108097531, -0.1184006780, 0.0135866310, 0.0035670025, 0.0408965759, 0.0920545906, 0.0626764745, -0.0560667329, 0.0422295108, 0.0595956668, 0.1498498917, 0.0479982570, 0.0169028658, -0.0014657987, 0.0313475952, -0.0804198682, -0.0373996347, 0.0604366250, 0.0101007624, -0.0167655777, -0.0589304008, -0.0627523661, -0.0434311368, 0.0830914155, 0.0499138683, 0.0047184401, 0.0285720509, -0.0190469697, -0.1029644161, -0.0073390566, 0.0203084759, 0.0688369572, -0.0617966317, -0.0504315905, -0.0834240317, -0.0643421784, 0.1020654738, 0.0086418223, 0.0099071776, 0.0373652652, 0.0900162831, 0.0492705554, -0.0143724829, 0.0241657849, -0.1533185244, -0.0544809140, 0.2052186131, 0.0814298838, 0.0095113609, -0.1694381237, 0.0858095214, -0.1413100362, -0.0510120094, 0.0400550738, 0.0589392781, -0.0064772628, 0.1223721728, 0.0016882814, 0.0347540192, -0.1399486810, 0.1247543991, -0.0410501510, 0.1298716664, -0.0795547664, 0.0364196450, -0.0233836975, -0.0538739413, -0.0832749233, 0.1270591468, 0.0334951654, 0.0551265888, 0.0991401002, 0.0283244792, -0.1076874435, 0.0051317336, -0.0420662500, 0.1352971792, -0.0288319848, -0.0966038778, -0.0440706387, -0.0184215494, -0.1301267445, -0.1513875723, 0.0619284585, -0.0280950535, -0.0865283832, 0.0106164282, -0.0242577605, -0.1478531212, 0.0008454201, 0.0028275345, 0.0474129692, -0.0588842258, 0.1805342734, -0.1174284071, 0.0397255868, 0.0155505938, -0.0479554869, 0.0596086681, 0.0891036168, 0.0406481922, -0.0276604947, -0.1307109594, -0.0317443386, 0.0695872307, 0.0862920433, 0.0309157334, 0.0124908658, -0.0081289532, -0.0564712957, 0.0619253367, -0.0517986566, -0.1162263080, 0.0853286013, 0.0074175070, 0.0442060642, -0.0080140270, 0.1017877907, -0.0044057677, -0.0291017201, -0.1032245457, 0.1361754537, -0.0609238446, -0.0007457756, -0.0378899574, -0.0188203976, 0.0683004111, 0.0131243533, -0.0850572288, 0.0030027756, -0.1184003651, -0.1297751069, 0.0284832958, 0.0310733151, -0.0103980461, -0.0208449159, -0.0249440428, 0.0146700405, -0.0120904902, -0.0411234349, -0.0976207107, 0.0965464562, 0.1489404589, -0.0550945364, -0.0490696616, -0.0704554766, 0.0427579880, -0.0098183714, -0.0143354423, 0.0029776085, 0.0239946675, 0.0470629968, 0.0276608132, 0.0384093225, -0.0887029171, 0.0268022306, -0.1052622125, -0.0147999059, 0.0144125726, -0.0028566017, -0.0336806364, -0.0978395343, 0.0267205164, 0.0037141773, 0.0259340592, 0.0042960821, -0.0012403447, -0.0001355750, 0.0251399651, 0.0785889626, -0.0567320958, 0.0035874066, 0.0543211028, -0.1675462425, 0.0854080915, 0.0172547530, -0.0423299596, -0.0558422208, -0.1150535122, -0.0132639147, 0.0278711151, -0.0347063765, 0.1027844399, 0.0481357202, -0.1518563479, -0.0405009948, 0.0134609900, 0.0500462800, 0.0516361147, 0.0705919415, -0.0793028399, -0.0229373891, 0.0812798366, 0.0480242074, 0.0386766419, 0.0518763661, -0.0463515930, -0.0859696418, -0.0240877233, -0.0680546835, -0.0733434036, 0.0293956697, 0.0463233069, 0.0012175567, -0.0281401332, 0.0268180128, 0.0077259401, 0.0507600047, -0.0924177989, 0.0745330453, 0.0658551306, -0.1297017038, -0.1737214774, -0.0401437059, 0.0681920126, 0.0816740468, 0.1057202742, -0.0388217419, -0.0499846786, -0.0203650519, -0.0137087433, -0.0336699039, 0.0355461910, -0.0897349268, -0.0357907936, 0.0328779146, -0.0581307150, -0.0043546935, -0.0317645818, 0.1178496405, 0.0157176983, 0.0338793807, 0.0074432008, 0.0875567198, -0.0275791287, -0.1005794108, -0.0377473794, 0.0010486786, -0.0477116555, 0.0893515348, -0.1433667541, -0.0125700152, -0.0082995370, 0.0337619223, 0.1138113737, -0.0330683514, 0.0678351745, -0.0363827609, -0.0574694052, -0.0121313957, 0.1223437414, 0.0330734551, -0.1599393040, 0.0230269935, 0.0443147644, 0.0085282018, 0.0185147934, -0.0311538763, -0.1129528955, 0.0061782408, 0.0224119704, -0.1127377599, -0.0017353923, -0.0064132744, -0.0618585870, 0.1395099461, -0.0201731082, -0.0412312038, 0.1291087270, -0.0090131871, 0.0005816562, -0.1263366938, 0.0495478362, 0.0125218770, 0.0342937000, -0.0307718851, -0.1305950284, -0.0336993039, -0.0534338988, -0.0660338849, 0.0842562467, 0.0266714804, 0.0200351048, -0.0125989495, -0.2085271478, -0.0409129672, 0.0565029010, 0.0486448780, -0.0071814647, 0.0051957336, 0.1127856746, -0.0448197946, -0.0894851089, -0.1084483936, -0.0288550034, -0.0829359367, -0.0200606361, -0.0407080837, 0.0621495619, 0.1368448138, 0.0883601904, -0.0292730536, -0.0979287177, -0.1051505506, -0.0915898234, 0.2047487348, 0.0274697281, 0.0444600917, 0.0286773778, 0.0337085351, 0.0318662152, 0.0032204899, -0.0895812362, -0.0550569221, -0.0908870399, -0.0908526629, 0.1495943815, 0.1386282444, -0.0245346446, 0.0147691071, 0.1054968089, -0.0853425562, -0.0576460436, -0.0479503758, 0.1103215888, 0.0023586650, 0.0090000732, 0.0490824655, -0.2358644307, 0.0002469149, 0.0740290582, 0.0192895569, 0.0112448158, -0.0061397613, -0.0511599369, -0.0468773060, 0.0075537427, 0.0892152488, 0.0206484292, 0.0517542623, -0.0189149920, -0.0367052630, 0.0343516096, 0.0666187778, -0.0322482102, -0.2083904743, -0.0053819646, -0.0232416838, -0.0010691959, 0.0431020260, 0.0588631742, 0.0146197593, 0.0353153236, 0.0436694734, 0.0181538500, -0.0200695209, -0.0186990909, 0.0958373770, 0.1079803407, 0.0811302289, -0.2023453414, -0.1162489355, -0.0473936982, -0.1495496631, 0.0882326439, -0.0078598745, -0.1086884141, 0.0949503183, -0.0618045442, -0.0773581192, -0.0804851875, -0.0811339170, 0.0158661716, 0.0043689962, -0.0064089000, -0.1305815279, 0.0459652841, 0.0128565468, -0.0083268909, -0.0800693184, 0.0297032576, -0.0171296019, 0.0934663415, 0.0974896699, -0.0073483819, -0.0731851235, -0.1167698130, 0.0326425768, -0.0155748604, -0.0814703777, -0.1504341215, 0.0036891280, -0.1280105114, -0.0623432398, -0.0403691567, -0.1351804584, -0.1013188288, -0.1300390363, -0.0040783971, -0.0566153303, -0.0242436733, -0.0134042753, -0.0781579167, -0.0514426380, 0.0062181470, 0.0829360336, -0.0438973010, -0.0468402952, 0.0216169283, 0.0162168629, 0.0625289381, 0.0417812653, -0.0752958208, 0.1188117340, -0.0450590365, 0.0773163214, -0.1056306213, -0.0247344673, 0.1281137764, -0.0761959702, 0.0035453553, -0.0945589319, 0.0850185826, -0.0701036304, 0.0936943367, -0.0498043448, 0.0165708642, 0.0749828666, 0.0245211367, -0.1192657501, -0.0214949343, 0.0367474742, -0.0500521027, -0.1567771286, -0.0443398505, -0.0268782936, -0.0148945749, -0.1566572189, -0.0009779452, -0.0513140373, 0.0710382015, 0.0813879594, 0.0430160835, 0.0553743280, -0.1319199800, 0.0163256582, -0.0284523610, 0.0267557856, -0.1529416293, -0.0602633618, -0.0370045826, 0.0116974749, -0.0447358415, -0.0006536027, -0.1109491065, -0.0068882382, -0.0354483686, 0.1406551003, 0.0217333864, 0.0363661759, 0.0153408386, 0.0722881332, 0.0116534457, 0.0134805311, 0.0978096798, -0.0798938647, 0.1110172197, 0.0311114006, 0.0244700219, -0.0138628352, 0.0175344590, 0.0442537181, 0.0737095326, -0.0996210203, 0.0008989411, -0.0586072356, 0.0385575891, -0.0819564760, 0.0991363376, 0.0854599774, 0.0777767301, 0.0619900860, 0.0009736791, 0.0653079599, -0.0351425484, -0.0511408895, 0.1196696982, 0.0038188191, 0.0490204208, 0.1222775728, 0.0224898141, -0.0026190891, 0.0648491532, 0.0514386483, -0.0533721484, 0.0113019198, -0.1026367471, -0.0050890981, -0.1248247921, -0.0445713289, -0.0871678814, -0.0150394505, 0.0263588820, 0.0073534534, -0.0023556754, -0.0859412551, 0.0684718415, -0.0274811424, 0.0035710852, -0.0305239987, -0.0256695580, 0.0378404334, -0.0072996556, 0.0855268389, -0.1331073195, 0.0739320219, 0.0481598601, 0.0335072540, -0.0017332475, 0.1548721939, 0.0811799467, -0.0227211677, -0.0402041376, -0.0139744058, -0.0791006014, 0.0621257164, 0.0556085482, -0.0652421489, 0.1616679281, -0.0750854388, 0.0025778066, -0.0736849159, -0.0272606853, 0.0566473976, -0.0789989159, 0.1544837207, -0.0189985167, -0.0736262202, 0.0858856514, -0.0499897078, 0.1022274345, 0.0068949712, 0.1005779058, -0.0554636158, -0.0240889452, -0.1251842231, -0.0599499047, 0.0568371266, -0.0109267551, -0.0103726219, -0.1084909290, -0.0181209911, -0.1155978069, 0.0750704035, 0.0564980358, -0.0710344166, -0.1328301728, 0.0995332524, -0.0893980786, -0.0395484865, 0.0919994116, -0.0404459238, -0.0054937960, -0.0808707699, -0.0522194654, -0.0165020712, -0.0193712786, 0.1698382199, 0.1143947840, -0.0633289292, 0.0759065524, -0.0216604136, 0.0358116701, -0.1475044787, 0.0911238119, -0.0109000001, -0.0178017542, -0.0145779056, -0.0124798659, 0.0482875556, 0.0221521370, -0.0873868987, 0.0657668188, -0.0295694396, 0.0959638432, -0.0248548351, 0.0654800832, -0.1785187721, -0.0428598970, 0.0255477428, -0.0973425210, -0.0296957437, -0.0383881778, -0.0626093820, -0.0309295300, -0.0481867492, -0.0138879027, -0.0307552125, 0.0740647316, 0.0697054416, -0.0403112508, 0.0356067382, 0.0510748774, -0.0116738565, -0.0772497579, -0.0226122458, -0.0407867990, -0.0126745906, 0.1055931747, 0.0708677247, -0.0236958750, -0.0475908034, 0.0298002753, 0.0444321409, 0.0855852216, -0.0671590194, 0.0812451541, -0.0707063302, 0.0041421074, 0.0303493030, -0.0081774117, 0.0909292772, -0.1579951048, -0.0963981599, -0.0872639939, 0.0923763290, -0.0697962493, 0.1027413309, 0.0423254780, -0.0633075610, 0.0591240861, 0.0698990002, 0.0026162183, -0.0501670912, 0.0401526801, -0.0874490589, 0.0304645840, 0.0448819920, -0.0582993291, 0.0330382474, -0.0377233140, 0.0482209884, -0.1208497807, 0.0781038329, -0.1019103080, -0.0327227488, -0.1978987753, -0.0414804034, 0.0841670185, -0.0467249230, -0.0414234474, -0.0479703844, 0.0586630069, 0.0420233645, 0.0158403423, 0.1060176790, 0.0470191538, 0.0170484819, -0.0375081450, -0.0532102771, -0.1386985928, 0.0468275845, 0.1575864106, 0.0541193858, -0.0025407549, 0.1034925058, -0.0832204148, 0.0147624435, -0.0615372099, 0.0885870233, -0.0504485816, 0.0721323192, 0.0211113822, -0.0732477009, 0.0018883393, -0.0746013075, -0.0072997604, -0.0864000544, -0.0101248976, -0.1097388044, -0.0036798201, -0.0481237806, -0.0123311989, 0.1472635716, -0.0673960373, 0.0498721637, -0.0086232433, 0.0362032689, 0.1363678426, -0.0048696734, 0.1349058449, 0.0424458086, -0.0429169722, 0.0049796249, 0.0562924296, -0.0741148964, -0.0626651123, -0.0727149993, -0.0145890610, 0.0115805967, -0.0128438817, -0.0432598107, 0.0522197261, -0.0022110553, 0.0259778574, 0.0484045520, -0.0738740787, -0.1541149169, 0.0431433059, 0.0022424862, 0.0369972289, -0.0066488488, -0.0131940534, 0.0412313901, -0.1290749907, 0.0243368931, -0.1221685559, 0.0153793423, -0.0704838857, 0.0436753295, 0.0490212813, 0.0657795146, 0.1341465414, 0.0101233013, 0.1203477010, 0.1156898811, 0.0021305825, 0.1493026912, 0.0280991569, 0.1667034328, -0.0046737669, 0.0159947984, 0.0156824905, 0.0055762497, -0.0557278469, 0.0587405078, -0.2427223623, 0.0474772677, 0.0484147407, -0.1463589519, -0.0096462928, -0.0705056787, -0.0145472325, -0.0043310653, -0.0313468874, -0.0019934820, 0.0649155453, -0.0300399065, -0.0206552446, 0.0145215653, 0.0006703073, -0.0119507303, -0.0226663686, -0.0451234579, -0.0834893361, 0.0074747317, -0.0307162292, -0.0728331208, -0.0075054020, 0.0733923018, -0.0850068480, -0.0210044477, -0.0447507203, -0.0618629158, 0.0125231678, -0.0152512230, -0.0256481189, 0.0373851955, -0.0469949841, -0.0254916772, 0.0048953490, 0.0700958669, -0.0396130234, -0.0996003971, 0.1050500646, 0.0860845670, -0.1628003120, -0.0450826138, 0.0168559551, -0.0862572864, 0.0506322049, -0.0085641611, 0.0821258128, 0.0643460825, 0.0479730070, -0.1092948765, -0.1175519675, 0.0547250696, 0.0979159847, -0.0880491957, 0.1192744821, 0.0333468765, 0.0085617974, -0.0128689809, 0.0042721392, -0.0779632255, 0.1151428521, -0.0715246499, -0.0852883607, 0.0192833152, -0.0724728927, 0.0185891185, -0.0865932852, -0.0253062285, 0.0320864171, 0.0028740680, 0.0483958907, 0.0147623494, -0.0457759313, -0.0109022260, 0.0416490920, -0.0600882992, 0.0156252235, -0.0437314436, -0.0061945869, -0.0366932340, -0.0403950065, -0.0180591922, -0.0472536646, -0.0767893344, -0.0670101345, -0.0014024918, 0.0025575720, 0.0035786652, 0.0222838875, -0.0018446188, -0.0574048571, 0.0022584624, 0.0134500628, -0.0820365325, 0.1142453924, -0.0911371931, -0.0028136068, 0.1704083532, 0.0475954786, 0.0453574210, 0.0963594392, 0.0585719682, -0.1575682461, -0.0648887232, -0.0522256568, -0.0057692905, -0.1336843669, -0.0908349380, 0.0327585451, 0.0883067250, 0.0565033667, 0.0644153655, -0.0785537660, 0.0596780218, -0.0245769098, 0.1558388025, -0.0749316812, -0.0858307183, -0.0056589688, -0.0010452742, 0.0896898136, -0.1497991383, -0.0576284975, 0.1436493099, -0.0707606450, -0.0250876080, 0.0131573929, -0.1031016409, 0.0842981562, -0.0056350203, -0.0577298850, 0.0986604318, -0.0880892351, 0.0760941729, -0.0315329172, -0.0837587565, 0.0052713118, 0.0395283736, -0.0017309269, 0.0352791697, 0.0831430629, -0.1525478959, -0.0306257401, -0.0323196538, -0.0551380999, -0.1322286427, -0.0639863685, -0.0439877510, 0.0926580429, 0.0737336501, 0.0036328663, 0.1027777120, 0.1669843048, -0.0454878584, 0.0235359911, 0.0001923481, -0.0333692729, -0.0902306810, 0.0002938311, -0.1172727495, -0.0195205044, -0.0036183062, -0.0336221196, -0.0729752630, 0.0298431944, -0.0796681717, 0.1121705920, -0.1435133368, 0.0336019546, 0.1027871966, 0.0406303294, 0.1200116053, 0.0504473671, -0.0947663710, 0.0580108874, -0.1518631130, -0.0280074459, 0.1615038067, 0.0473292619, -0.0702739283, -0.0523693711, 0.1473442167, 0.0218294822, 0.0135477409, -0.0374736562, -0.0746306404, 0.0246183760, -0.0405298695, -0.0663734898, -0.0028921701, -0.1267636716, -0.1146365404, -0.0899796486, 0.0272820815, -0.0033180281, -0.0000168746, 0.0744485557, 0.0140214581, -0.0189612992, -0.0442242287, 0.1239375994, -0.0223476291, -0.0376279429, -0.0150596425, -0.0217709169, -0.1101031378, -0.0965976492, 0.0648166984, -0.0734520927, 0.0366563089, -0.0935817957, 0.0033755838, -0.0878720656, 0.0175351799, 0.1670075953, -0.0239852406, -0.0072854282, 0.0563811176, 0.0327232219, -0.0987107605, 0.0280069876, 0.0052501280, -0.0056214603, 0.1931168735, 0.0212478917, -0.0483696163, 0.0353458114, -0.1001530662, -0.0268104021, 0.1062767804, -0.1033308730, -0.0932149142, -0.0181940738, 0.0641310960, 0.0242455360, -0.0283165649, 0.0977594256, -0.0731404573, 0.1237110570, 0.0206456352, -0.1505507976, -0.0180899873, 0.0088675357, 0.1032159626, -0.0481738113, 0.0597816780, -0.0816223100, -0.0354500748, 0.1028102115, 0.2232692391, -0.0795005336, -0.0318878926, 0.0052154278, 0.0240297932, 0.0464275517, 0.0447365977, 0.0602147207, 0.0125789084, -0.0850288719, 0.0153260734, -0.0226714239, -0.0598413981, -0.0759554058, 0.0118618356, 0.0762698129, 0.0411015414, -0.1013757288, 0.0448821485, 0.0977407396, 0.0094249398, 0.0780894309, 0.1196239293, -0.0566728227, -0.1923245341, -0.0483761057, 0.0013087591, -0.0026324131, 0.0147161651, -0.0081510553, 0.0271591060, 0.0681440234, -0.1509347260, -0.0177397504, -0.0243165046, -0.0078090006, 0.0653155223, -0.0696044788, -0.0738300756, -0.0355946310, -0.0276930481, -0.0082769971, 0.0341163948, -0.0632768944, -0.1204370111, 0.0338980742, -0.0367820188, -0.0277521126, 0.0188182406, -0.0756432936, 0.0528795049, 0.0651786327, 0.1038498878, 0.1020459309, 0.0129808467, 0.0495751090, 0.0483478680, -0.1434285939, -0.1003829315, -0.0083940281, 0.1494860649, 0.0329776518, -0.0559476577, 0.1665795743, -0.0117206667, -0.0816083550, 0.0338822789, 0.0006818696, 0.2294836491, -0.0131839579, 0.0392271057, -0.0038646692, -0.0384459682, 0.0144224903, -0.0248075128, -0.0572881699, -0.0235824902, -0.0218515340, 0.0689238235, -0.0867212564, -0.0365583859, -0.0897089168, 0.0263988487, -0.1836275905, -0.0336785205, 0.0422564037, -0.0361336991, 0.0801789835, -0.0881173313, 0.0866875127, -0.0255460553, -0.0511394441, -0.0464277528, -0.0833422616, -0.1384871006, 0.0083991867, -0.1128187329, 0.0308669973, 0.0308369324, 0.0130991656, 0.0082481001, 0.0496747978, -0.0190415345, -0.0613430366, -0.0264599696, 0.0454367027, 0.0097396644, -0.0825930610, -0.0626195222, 0.0709741861, -0.0807865337, 0.0486034043, 0.0241464581, -0.0222720001, 0.0855836123, 0.0382413007, 0.0015286807, 0.0879831016, -0.1183849946, 0.0193732828, 0.0334632471, -0.0320091024, -0.0268062353, 0.0522387289, -0.0755693093, -0.0380912013, 0.0154540874, -0.0575908981, 0.0114242006, 0.1050452441, 0.0054437052, -0.0000555424, -0.0861303657, 0.0716978312, -0.0327193551, 0.2520886660, 0.0009985231, 0.1015156731, 0.1062363014, 0.0691523999, -0.0463007651, 0.0737033188, -0.0088435672, 0.0064601526, 0.0186969098, -0.0534208640, 0.0279486533, -0.0531391725, -0.0624281578, -0.0447120070, 0.0295342226, 0.1512639523, -0.0798031837, -0.0091510750, 0.0319913030, 0.1316270530, -0.1136095449, -0.0316566341, -0.0918492824, -0.1095037311, 0.1644145548, -0.0277097486, -0.0056483997, 0.0197065864, -0.0695725009, 0.0282146987, -0.1285853386, -0.0456154943, 0.0445936285, -0.1420509815, 0.0266372561, -0.1383787841, 0.0441394076, -0.0351090133, 0.0213601366, 0.0173459072, 0.1067091450, 0.0388414338, -0.0995675251, 0.0599000156, 0.0164370891, 0.0692786351, 0.0380514413, 0.0540587008, -0.1235242784, 0.0396672897, -0.0658117756, 0.0490726717, 0.0026289166, -0.0162950959, 0.0192054417, -0.0158451460, -0.0711417645, 0.0191159826, -0.0033251338, 0.1296518743, -0.0180890467, 0.1578094512, 0.0390858352, 0.0567206256, 0.0699546412, 0.0577555746, 0.0039243251, 0.0207023080, -0.0406040214, -0.0305459090, -0.1245177686, -0.0688324496, -0.0285182446, -0.0600591786, -0.0360770226, 0.0416836515, -0.0061715096, -0.0472927913, -0.0562515743, 0.1144636720, 0.0109699657, -0.1663677245, 0.0304381680, -0.0632786080, -0.0254619569, 0.0560192987, -0.0561464392, 0.0565192886, -0.0102614379, -0.1398585737, -0.0167297330, 0.0047333571, -0.0877041891, -0.0046649622, 0.0128353229, 0.0573192388, -0.0802691430, -0.0301989429, 0.0088150585, 0.0182282794, -0.1612573117, 0.1611495316, -0.0348560140, -0.0082549509, 0.0185699854, -0.0589990839, -0.0371826217, -0.1435625851, 0.0618567578, -0.0786792338, -0.1292018294, -0.0660220683, 0.0001942406, 0.0370719545, 0.0291145258, -0.1327935755, -0.1204737350, -0.0473462865, -0.0826601535, 0.0607401989, 0.0349418409, 0.0884669349, -0.0603555441, 0.0246660728, 0.0438024141, -0.0328710526, -0.0149841178, -0.0799156502, 0.0220463164, -0.0043678517, -0.0116942311, -0.0921401307, -0.0414548144, -0.1038211361, -0.0081774788, 0.0334389545, 0.0537484661, -0.1114806980, 0.0875930712, 0.0066134105, -0.0636567995, 0.0250895228, -0.0135200992, 0.0331158675, -0.0684269592, 0.1556681991, -0.0513270423, 0.0261999890, 0.0110560218, -0.0503302403, 0.0536907464, -0.1103993729, -0.0695358813, 0.0732742250, 0.0252784118, -0.1148107648, 0.0868304968, -0.0868847668, -0.0092522809, -0.0982456356, -0.0431937203, -0.0418629572, -0.0211704448, 0.0292853266, -0.0604148470, -0.0028673389, -0.0169983879, 0.1148470342, 0.0730230659, 0.1065893397, 0.0130669307, -0.1370020956, -0.0342948176, -0.0034428022, -0.0529253781, -0.0155648757, 0.0247762017, 0.0163955763, -0.0311015006, -0.0545471124, 0.0717905760, -0.0294684544, 0.1634828448, 0.0511554144, -0.0041156700, 0.0998410732, 0.0362298936, -0.0358734578, 0.0230266936, 0.0106164617, 0.1173718944, -0.1065327898, -0.0853766799, -0.0364752263, -0.0982322767, -0.0336061791, -0.0861996710, 0.0999226496, -0.0154372193, -0.0195496995, 0.0579357967, 0.0250406992, 0.0298175644, 0.0218252465, 0.0900538042, 0.1436972618, 0.1398483515, -0.0111175571, 0.0398831703, 0.0442640334, -0.0169920996, 0.0275391340, -0.0467948690, -0.0815606564, -0.0316979177, -0.0658602268, -0.0092862807, 0.1048513204, -0.0039580045, -0.0277910419, -0.0601669960, -0.0585861728, 0.0370649360, -0.0286518335, -0.1088256016, -0.0047971201, -0.0057827458, -0.1525360197, -0.0263848882, -0.0851070210, -0.0978970379, 0.0633676350, 0.0867993087, -0.0504559353, 0.0784900188, 0.0067549753, 0.0900742486, 0.0451051816, -0.0641292334, -0.0753724277, 0.0158920176, -0.0317474194, -0.0934867635, -0.0845352560, 0.0670676529, 0.0158821903, 0.0447373949, -0.0498020761, -0.1284186095, 0.0361169614, -0.1091077477, 0.0246495903, -0.1594336331, 0.0077310484, 0.0980413929, 0.1502618045, 0.0277464017, 0.1558220536, -0.0075140381, 0.1053064242, -0.0900451243, 0.0348745361, -0.0883578509, -0.0318670981, -0.1382228434, 0.0997156650, 0.0299050231, 0.0403351225, 0.0334170423, -0.0449735709, -0.0615342148, -0.0648332089, -0.0895715281, -0.0173911117, -0.0283697490, -0.0216802396, -0.0295863710, -0.1007817462, -0.0328428037, -0.0388194397, -0.0347716771, 0.0144968126, 0.0088062584, -0.0977960303, -0.0398909487, -0.0503130630, 0.0518660396, 0.0540480129, 0.0078146830, -0.0210271385, -0.0121299876, -0.1277933717, -0.0694704056, 0.0565707162, 0.0794261470, 0.0295732860, 0.0604988672, -0.0097714970, 0.0866389126, -0.0286517739, -0.0960823223, -0.0492460765, -0.0771711320, 0.0286584329, -0.0034119000, -0.2039972246, -0.0685563684, 0.0184892025, 0.0902102664, 0.0087452373, 0.0428763591, -0.0917806178, -0.0894554406, 0.0464563407, -0.0628024116, -0.0008549771, 0.0488097221, 0.1189720333, 0.0151227014, -0.0232562609, -0.0070173875, -0.0382772274, -0.0251742378, -0.0206337832, -0.0619580597, 0.0946729407, 0.0840373784, 0.0401425436, -0.1126754880, -0.0902987346, -0.1694603562, 0.0835608989, -0.0780607089, -0.0506187156, -0.0921992809, 0.0401165672, 0.0684765056, -0.0613235869, -0.0116449986, -0.0318617895, 0.1084692106, 0.0283603035, 0.0253354311, 0.1408595741, 0.0202399865, 0.0356393196, 0.0408030190, 0.0559384115, -0.0643032566, 0.0693564638, 0.0030223923, 0.0435915254, -0.0819082782, 0.0206444729, -0.0799347758, 0.0396143086, -0.0343552493, 0.2091327757, -0.0023949321, 0.0568064824, 0.0133220199, 0.0390854701, 0.0046823961, 0.0546211526, 0.1589768827, 0.0501854494, -0.0034153464, -0.0585945509, 0.0652138740, -0.0457058437, 0.0881086662, 0.0083249705, 0.0919781402, 0.1619237810, 0.0661019757, -0.0128752859, 0.1226200685, 0.0770915300, 0.1182203144, 0.0168529376, -0.0284430180, -0.0725426227, -0.0034081526, -0.0991383046, -0.0112714004, 0.0514362715, 0.0067252824, 0.0498488210, 0.0369632393, 0.0541598722, -0.0260620415, 0.1383482218, 0.0483798832, 0.0268014167, 0.1044966727, 0.0031726956, 0.0686856583, -0.1468718946, -0.0409344211, -0.0288015921, 0.0940233245, -0.0643163919, 0.0967029482, 0.0256476849, -0.0577510595, 0.0046982691, 0.0477246530, -0.0771017298, 0.0385286584, -0.0432593450, -0.1361763179, 0.0070451298, 0.1042865366, 0.0825294852, -0.0046344483, -0.0424629636, -0.0496735089, 0.0691716298, 0.0549110472, -0.1234448701, 0.0173098817, 0.1428439766, -0.0159033481, -0.1383660436, -0.0141496835, -0.0479157120, -0.0204783212, -0.0070735971, -0.0162415002, 0.0741974935, -0.0851177126, -0.0699300542, -0.0528420955, 0.0706781447, -0.1244148389, -0.0128850080, 0.1249240264, 0.0770046934, 0.0212823004, -0.0787036568, 0.0128977485, 0.0457236469, 0.0920685828, -0.0495974086, 0.0770859122, 0.0845830888, -0.0239601806, -0.1044792086, -0.0658198595, -0.0174686257, 0.0296993572, 0.1223329827, -0.0878525451, 0.0628952980, 0.0432459787, 0.0520362966, -0.0241219625, 0.0077417064, 0.0137025695, 0.0871609002, 0.1106712222, 0.0546364635, -0.0150601994, 0.1291846335, 0.0531359985, 0.0311428774, 0.1184514835, -0.0665647238, -0.1579587907, -0.0075150593, 0.0210849345, 0.0625542775, 0.0469379947, 0.1226245090, -0.1494277418, -0.0105230669, -0.0592760406, 0.0237120204, 0.1911052912, 0.0150468973, 0.0417711549, -0.0804786757, -0.0470047481, -0.0509653613, 0.0756479800, -0.0799071863, 0.0306429397, 0.0707329735, 0.0479322188, 0.1420831382, -0.0278916694, -0.0407209210, 0.0660070330, 0.0343937688, -0.0163827948, 0.0349557810, 0.0311057139, 0.0039452380, -0.0434575789, -0.0121552972, 0.0349706449, 0.0634623691, 0.0102192620, -0.0569828078, -0.0402218848, 0.0213992428, 0.0576500669, 0.0004786910, 0.0736590475, 0.0951107219, 0.0878901780, -0.1059084386, 0.0297087021, -0.0537699200, -0.0993792638, -0.1012912020, 0.1086705327, 0.0449734330, 0.0959072411, -0.0345076360, 0.0142147243, 0.0478292927, -0.0238586832, -0.0943752900, 0.0273881331, -0.0132635543, 0.1640172452, -0.1323967427, 0.0254299119, 0.1023035124, 0.0739452466, 0.1097171530, 0.0988258868, -0.0050108000, 0.0505249687, -0.0265126321, -0.0626013428, 0.0363334641, 0.0985035151, -0.0956176668, -0.0352452844, 0.1001021788, 0.0975890830, -0.1467389315, -0.0725755468, -0.0141220316, -0.0803017467, 0.0470345952, 0.0649773180, -0.0979055837, 0.0662165433, -0.0089275194, -0.0594188198, 0.0563969053, -0.0162366480, 0.0887143761, 0.0223271027, -0.0885013938, -0.0465792008, -0.0374653079, 0.0997190177, -0.0191755388, -0.0246701408, -0.0354722664, -0.0460020229, 0.0445899889, -0.0110144522, 0.1164561287, -0.1051905006, -0.0955139846, 0.0774532259, -0.0509090349, 0.0573167615, 0.0677829608, -0.0310959350, -0.0098182783, -0.0355714858, 0.0545794480, -0.0128921624, -0.0087199369, -0.0002455036, 0.0484330580, 0.0734664500, 0.1259142309, 0.0066768881, 0.0638543889, -0.1481057554, -0.0750052631, 0.1239281297, -0.0218882207, -0.0162657928, 0.0828218535, -0.0555464067, 0.0370043181, 0.0572126880, -0.0210378319, 0.0061979517, -0.0761749744, -0.1007934585, -0.0057462649, -0.1465859115, 0.1118129045, -0.1020651087, 0.0058332072, 0.0778645948, 0.0077988869, 0.0933266431, -0.0301165860, -0.1138734818, 0.0039483244, -0.0213698726, -0.0190051291, -0.0205409378, 0.0004140263, 0.0841689035, -0.1362027228, 0.0428113788, -0.0756426603, 0.0333981477, -0.0650568083, 0.0139783397, 0.0054036826, -0.0869542211, -0.0378356986, -0.0058534215, -0.0622363277, -0.0722225159, 0.1259802729, 0.0649330169, 0.0919575244, -0.0388897434, 0.0995601639, 0.1132867932, 0.0458438471, 0.0208465774, 0.1212172732, 0.0677817464, -0.0258410964, 0.1611796618, -0.1081293598, -0.0301046893, -0.0691547915, 0.0225890279, 0.0250986516, 0.0501859337, -0.0458913557, 0.0055643041, -0.0215157140, 0.0475269482, -0.0317979306, 0.0192622319, -0.1340170801, -0.1704284549, 0.0197648071, 0.0152710415, -0.0394509360, 0.0250572041, -0.0652296767, 0.0114134587, 0.0226041414, 0.0547649413, -0.0129149836, 0.0777538121, -0.1534263194, -0.0590776727, -0.0958944485, 0.0314636938, 0.0744216219, 0.1510059536, 0.0758858994, 0.0561729223, 0.1418334842, -0.0082186805, -0.0143411942, 0.0839818269, 0.1229648516, -0.0554194115, 0.2033530921, -0.0545596145, 0.0441603810, -0.0719588026, 0.0437596142, -0.0409455150, 0.0864212364, 0.0301426444, -0.1152363718, -0.0466394387, 0.0850324854, 0.0120931212, -0.0451942012, 0.0435509682, -0.1613576263, -0.0500819683, 0.0379291736, 0.0022530819, 0.0553278960, -0.0710299015, -0.0046429490, -0.0237239264, 0.0372073390, -0.0801470205, -0.0083764615, 0.0926817283, -0.0179973915, -0.0184827447, 0.0146457367, -0.0595569722, 0.0310983956, -0.0543851666, 0.0583000705, 0.0851559192, -0.0188385341, 0.0540957637, -0.2121519595, -0.0733502209, -0.0572358407, 0.0882510319, -0.0744066760, 0.1053467989, 0.0912630334, 0.1229989454, 0.0331372544, 0.0362273976, 0.1320142448, 0.0591782928, 0.0495609120, 0.0027466160, 0.0982737169, -0.0146402605, -0.1136924028, 0.0336254984, 0.1422251910, -0.0385487415, 0.0838745907, -0.0671824738, -0.0277118403, -0.0501613505, -0.0180163663, 0.0877561495, 0.0402381830, -0.0539609045, -0.0152837615, 0.0397017151, -0.0498121046, -0.0185677260, -0.0242269803, -0.0492701158, -0.0725005940, -0.1291615814, -0.0608680472, 0.1154650152, 0.0323854201, 0.0281507336, 0.0416640602, 0.0266464259, 0.0442383327, 0.0125778634, -0.0790173858, 0.0004988030, 0.0008770087, 0.0507639609, 0.0425509848, 0.0321084745, -0.0547702014, 0.0977160707, 0.0302176848, 0.0699120611, -0.0511188693, -0.0066027930, 0.0015699600, 0.0047015678, 0.0503586605, 0.1395435333, -0.0162316822, -0.0253014192, -0.0089646783, 0.0488245077, 0.0087452196, -0.0080643836, 0.0185125731, -0.0057999860, -0.0489930063, -0.0838282034, -0.0075387545, -0.0253983587, 0.0280698426, 0.1784319431, 0.0479027852, 0.0303851292, 0.0090635903, -0.1090325117, 0.0572792403, -0.0518945046, 0.0415771678, 0.0134284114, 0.1114765108, -0.0512204394, 0.0600397401, -0.0911961794, 0.0265600067, -0.1323946118, 0.0247456152, -0.0862939432, -0.0967280269, 0.0510844514, -0.0017063137, 0.0705825910, -0.0704988912, 0.0139517775, -0.0566735640, -0.1030925363, -0.0007862760, 0.0579807684, 0.0994861498, 0.0672943890, -0.0072763516, -0.0276461840, -0.0101027982, 0.1094548553, -0.1124222949, -0.0734563917, 0.0712270513, -0.0299134403, 0.0772227049, 0.0193010867, 0.0438813977, 0.0828649849, 0.0156748369, -0.1100645959, 0.0779670775, -0.0150872786, -0.0881457180, 0.0222379174, -0.0998459533, -0.0012861402, -0.0140842227, 0.0206602141, 0.0278174244, -0.0407310612, -0.0920409337, -0.0472968258, 0.0446638428, 0.0675975978, 0.0033659269, 0.0282183848, 0.0272420179, -0.1342649907, 0.0229880437, -0.0513940714, 0.0616263375, 0.0454452559, -0.0409515500, -0.0226958748, 0.0888959840, 0.0444914848, 0.0304943994, -0.0049036937, 0.0510147028, 0.0902286470, -0.0548101366, 0.0637539029, 0.0102316402, 0.0464539640, -0.0013219677, 0.1945177466, 0.1832171232, -0.0110834129, 0.0212539658, -0.0575336665, 0.1077973321, 0.1028791219, -0.0670459569, -0.0444100983, 0.0506111942, 0.1267665625, -0.1230279654, -0.0410772562, -0.0213797148, 0.0333906189, 0.0628036261, -0.0358176753, 0.0830346197, -0.0582418069, 0.0358424000, 0.0463559814, -0.0763090327, -0.0315323286, -0.0370523818, 0.0105693918, -0.0207097437, -0.1139502451, 0.0232474152, -0.0079960581, -0.1134333685, -0.0992316380, 0.0518009998, -0.0461403467, 0.1325153410, 0.1211447939, -0.0359859429, -0.1691324711, 0.1101891920, 0.0042711529, 0.0197463185, 0.0334422067, 0.0507236682, 0.0913405567, -0.1002996191, -0.0586386845, 0.1049394086, 0.1511006504, -0.0003673178, 0.0501975603, -0.0563614219, -0.0012742010, -0.1127307042, 0.0929522663, 0.0421521105, 0.0075024278, 0.0773373693, -0.0543087162, -0.1660446078, -0.0057243854, -0.0047835084, 0.0817060843, -0.1406041980, 0.0089966748, -0.0326995589, 0.0147578986, -0.1040204391, -0.1432521194, -0.0320877768, 0.0172465686, -0.0163162798, -0.1725312173, 0.0624313653, -0.0880366713, -0.0935786366, 0.0519211590, 0.0414604284, 0.1012777612, -0.0999454781, -0.0894827247, -0.0378298163, -0.0597676784, 0.1288729161, 0.0763045028, 0.0619955324, -0.0471583195, 0.0689748526, 0.0913254470, -0.0670897961, -0.0214243233, -0.0616586804, 0.0696759075, 0.1025025323, -0.0149946231, -0.0334175080, 0.0667722672, 0.0430059433, -0.0315978415, 0.0319192857, -0.1043577865, -0.0793515518, 0.1467440128, -0.0580347441, -0.0964673907, -0.0112396628, -0.0061501153, 0.0778324679, -0.0574481487, 0.0067467056, -0.0318674371, -0.1489427686, 0.0192225371, 0.0260268115, -0.0211815070, -0.0025991627, -0.0372228511, 0.0677591041, 0.0277661979, -0.0927481428, 0.0064424919, -0.0060236454, 0.1275876611, -0.1548964083, -0.0064326157, 0.1469834000, 0.1564591378, -0.0358795151, -0.0261993725, 0.0762699470, 0.1080753878, -0.0241805259, 0.0199070219, -0.0616932474, -0.0085210642, 0.0704920739, -0.0008517439, 0.0455486998, 0.0762872621, 0.0727714524, -0.0389625728, -0.0048675588, 0.0188654754, 0.1282287687, 0.0275819153, -0.0641147345, -0.1067786291, 0.0748654604, -0.0381553099, -0.1083438993, -0.0599650480, 0.0511394106, -0.1614619642, -0.0143050672, 0.0554661453, -0.0499482229, 0.0858420208, -0.0979197398, -0.0230557639, 0.0549021848, -0.0472215451, -0.0297919400, -0.0079067182, 0.0482682362, 0.0722405687, 0.0365989432, 0.0420209356, 0.0586385019, 0.0489246920, -0.0149029829, -0.0206626914, -0.0010904328, 0.0022358994, -0.0703336895, -0.0428984202, 0.1327599138, -0.0767850652, -0.0076385024, 0.0836599693, -0.0319274887, -0.0231071357, 0.0145640522, 0.0391830839, -0.0628881380, 0.0723499730, 0.0091014570, -0.0392951854, -0.0400401466, 0.0609331392, -0.0174983237, -0.1131041497, -0.0741596818, 0.0318343714, -0.0372202620, -0.0149762081, 0.0300967116, 0.0443351902, -0.0206911322, -0.0064320508, -0.0741908997, -0.0049577970, -0.1139096841, -0.0186180733, 0.0016803693, -0.0389242880, 0.0849521682, 0.1685882211, -0.0310809743, 0.0968144536, 0.1281162351, -0.0052684010, -0.1216677502, -0.0094752945, -0.1478084624, -0.0869892836, -0.0974712446, -0.0156025011, -0.0411434248, 0.0437319502, -0.0429492071, -0.1810752153, -0.0759855956, -0.0286976080, -0.0799524859, -0.0567509532, 0.0406314321, 0.0075223623, 0.1118655354, 0.0122126881, 0.0841018409, 0.0429241955, 0.0021417567, 0.0316882171, -0.0722286552, -0.0870586708, 0.0645171180, -0.0904256701, 0.0850359946, 0.0008919042, -0.1447639912, 0.0507337339, 0.0460438542, 0.1209826469, -0.0970158800, 0.0855957866, 0.0457963236, 0.1137239188, -0.0517333820, -0.0266663022, -0.0476261713, -0.0458683223, -0.0124258371, 0.0644227862, -0.0580499433, 0.0426969342, 0.0787359849, 0.0180351753, 0.0845709741, 0.1314214468, 0.1408732533, 0.1286141127, -0.0573434420, -0.0028486163, 0.0425237827, -0.0295802336, 0.1115273610, 0.0116278026, -0.0209677219, -0.0552464463, 0.0397380330, -0.0763063654, 0.1519259959, 0.0329097994, 0.0256813411, 0.0283341352, -0.1912746429, 0.0244392678, 0.0514996909, 0.0382959358, 0.0450460464, 0.0877138674, -0.0520443022, 0.1311626732, 0.0269604493, -0.1012798548, 0.0529234782, 0.0108365659, 0.0352445133, -0.0114817163, 0.0145466514, -0.0052669630, -0.0528374650, 0.1369594932, -0.0897743851, 0.0117700361, -0.0357104614, -0.0747602433, 0.1372008175, -0.0723178908, -0.0272294413, 0.0053889398, -0.0304940008, 0.0457099229, 0.1452904344, -0.1145821437, -0.0431256779, -0.0979104415, 0.0589186735, 0.0019814065, -0.0875750408, -0.0759381726, -0.0327883586, -0.0136244297, 0.0503837280, 0.0485162735, -0.0151212588, 0.0577182472, 0.0181519687, 0.0368832201, 0.0727193430, -0.0376656093, 0.0029691425, -0.0491624847, -0.0129581811, 0.0553994030, 0.0261954553, 0.0252345353, -0.1083845049, 0.1158079803, 0.0851196423, 0.0899307430, 0.1214795336, -0.0540547594, -0.0977652445, -0.0443780236, 0.0391365252, -0.0253874883, 0.0602067895, 0.1182386354, 0.0780748203, 0.0205622818, -0.0565849692, 0.0017092167, 0.0095822299, 0.0843275934, -0.0428747609, -0.0293011274, 0.0097819716, -0.0727222264, 0.0044083837, -0.0563948341, 0.0322096311, 0.0230826978, 0.0076097054, -0.0518469214, 0.0859182030, -0.0340463258, -0.0009337125, 0.0254252590, 0.1167181656, -0.0135148633, -0.1009491682, 0.0134824514, -0.0313057825, 0.0750166178, 0.0257277451, -0.0440232866, 0.0328228101, 0.0275677536, 0.0044037695, 0.0319350138, -0.0110491142, -0.0203383174, -0.0446399152, -0.0226221085, 0.0241334047, -0.1508755386, -0.1217648014, -0.2919116914, 0.0279671792, -0.0986320078, -0.0699011162, 0.0161373019, -0.0421652012, -0.0777697265, 0.0172840916, -0.0240743458, 0.0305056423, 0.1444257498, 0.0906579867, -0.0187824424, -0.0865427852, 0.0481899045, -0.0584863275, -0.0434683561, -0.0596412644, 0.0494514145, -0.0221983679, 0.1254409552, -0.0086905938, -0.0023217713, 0.1519605070, -0.0275215991, -0.0945634246, 0.0945398733, -0.0708509088, 0.0180711169, 0.0631533936, -0.0766053572, -0.0404647328, -0.2071695775, -0.0651698932, -0.0325251445, 0.0048729545, -0.0465713926, 0.0399562977, 0.0196217746, -0.0679723993, -0.0950760841, -0.0424812548, -0.1515470147, 0.0269396771, 0.1558212638, 0.0600685887, -0.0216862839, 0.1059580818, 0.0536355674, 0.0212743729, 0.0141887181, 0.0617212057, -0.0422723666, 0.0009161184, 0.0928194970, -0.0603965521, -0.0168453064, -0.0381307974, 0.0093583735, 0.0523041710, 0.0103246765, 0.0314778127, -0.0952803344, -0.0572235398, -0.0343874134, -0.0375536382, 0.1347072423, -0.1183331236, -0.1293091178, -0.1107482165, 0.0151065020, 0.0153637361, -0.0677309856, -0.1013801098, 0.0484587848, -0.0642342865, 0.0416154265, -0.0676647350, -0.0599380247, -0.0769780502, 0.0778080896, 0.0768279210, -0.0502447113, 0.0979326218, 0.1037206054, 0.0120066069, 0.0048234025, 0.0356659815, -0.0264682174, 0.0926870927, -0.1100408435, 0.0403645672, -0.1882293522, 0.0523962714, 0.0039826105, -0.1114536896, -0.0792177618, 0.0191581715, 0.0987845734, -0.0630191565, -0.0690571591, -0.0204021260, 0.0232577585, -0.0569858737, -0.0454842634, -0.0078470297, 0.2375300229, 0.0430481806, 0.0827986151, -0.1033125520, -0.1604378223, -0.0043901317, -0.0497578867, 0.0823393911, -0.0626534671, 0.0341930352, 0.0033654217, 0.1082161739, -0.0378191955, 0.0675249174, -0.1573194563, -0.0939289480, -0.1452156901, 0.0366499871, -0.0321759284, -0.0066675209, 0.0029600551, -0.0189755112, 0.0388950855, 0.1217862368, -0.1579012275, -0.1816930920, 0.0272367261, -0.0937497169, -0.1111188233, 0.1032962427, -0.0488390811, -0.0230974276, 0.1155578569, -0.0790019110, 0.2137192041, -0.0969283953, -0.0696480200, 0.0379321650, 0.0596871153, 0.0879747123, -0.1184374988, 0.0205701869, 0.0322466157, -0.1947765350, 0.0225871634, -0.1509409845, -0.0522170179, -0.0677262396, 0.0768515319, 0.0172330588, -0.0106190164, -0.0571189299, 0.0013994451, 0.1032353342, 0.0430852361, 0.0252755582, -0.0325053521, -0.0157652367, 0.0288621373, -0.0294385441, 0.0479543917, -0.0057512796, 0.1001038924, -0.0137513010, 0.0334393382, -0.0117008146, -0.0611706004, -0.0618306473, -0.0153368823, 0.0138094258, -0.0028244469, 0.1240374818, -0.0975575298, 0.0731429309, 0.0111477701, 0.0354357101, -0.0617680140, 0.0249231402, -0.0633586496, -0.0601521432, -0.0862222016, -0.0234986152, -0.0968356356, -0.0302599426, 0.0235003326, -0.0926485285, 0.0966430828, 0.0774887428, 0.0821690112, -0.0292621534, -0.0517963804, 0.0515581854, 0.0727890581, 0.0518145189, -0.1131441519, -0.0201762747, -0.0004870011, 0.0018286256, 0.0421799235, -0.0309772789, -0.0240505785, -0.0599044636, 0.0113255884, 0.0417466983, 0.1204221174, 0.0746816993, 0.0218144953, 0.0234536175, 0.0482814834, -0.0766568929, -0.1370885968, -0.0378873013, 0.0538097657, -0.0729958639, -0.0939824060, -0.0011327928, 0.1290340722, -0.0655585006, -0.0436979793, 0.1174815521, 0.0114555992, -0.0342930853, -0.0765622556, -0.0308886785, -0.0481440201, 0.0641983300, 0.0141120339, 0.0335088335, 0.0203112643, 0.0562716126, 0.1271772981, 0.0572148077, -0.0383748300, -0.0438864380, -0.0341724865, 0.0194569901, -0.0375059769, -0.0944750607, 0.0330497250, 0.0751659274, 0.0187452920, -0.0359512754, 0.0500763915, 0.1084657907, -0.0303579904, 0.0129980305, -0.0277130343, 0.0182741955, -0.0784523487, 0.0633504391, -0.0216528177, 0.0153398383, 0.0418798737, -0.0912146792, -0.0083618527, 0.0128663797, -0.0786332637, 0.0249883756, -0.0396330543, -0.0504351184, -0.0229623169, -0.0584860332, -0.1280939281, 0.0198202599, -0.0386066921, -0.0071730129, -0.0881530568, -0.0691036135, 0.0279197562, 0.0517685041, -0.1321152300, -0.0205863919, -0.0135834003, 0.0507239178, -0.0981204659, -0.0247404128, 0.0386552587, -0.0628420040, -0.0036330689, 0.0885048583, -0.0733207241, 0.0202648323, -0.0303449109, -0.1324910820, 0.0233828630, -0.0534796976, 0.1542758346, 0.0740938187, -0.0434714183, 0.0893323123, -0.0034038657, -0.0140626617, -0.0299725011, -0.0332289599, 0.0044979397, -0.1535345465, 0.1324218214, 0.0191057920, 0.0756707937, -0.1148897111, 0.0104894228, -0.1294385940, -0.0528685041, 0.0831159130, -0.0501211919, 0.0204458497, -0.0686640292, 0.1159912497, 0.0215488710, -0.0354775973, 0.0258158725, -0.0578645691, -0.0574373715, 0.1367809325, 0.0682330877, 0.0303871892, -0.0377105549, 0.0140652284, 0.0638792366, -0.0400141850, -0.1199125946, 0.0157701634, 0.0664115697, -0.0270844754, -0.0883442387, -0.0157499518, -0.1475313306, -0.0233532432, -0.0548914038, -0.0603910536, 0.0235392191, 0.1939250678, 0.0010790909, 0.0609688088, -0.1081938669, -0.0814054236, -0.1108386070, -0.0217210278, -0.0328640677, -0.0974027812, -0.0230241958, -0.1972207576, -0.0201898701, -0.0151448175, -0.1402137876, -0.0013054349, -0.0648263544, -0.0570847020, -0.0892721713, 0.0415387563, 0.0194440484, -0.0634986013, -0.0641915947, 0.0129809566, 0.0141002191, 0.0033400208, -0.0262011327, 0.0785484910, 0.0422893576, 0.0180629492, 0.1571724415, -0.0078690872, -0.0671209097, -0.0524867550, 0.1389238238, -0.0123443604, 0.0820899010, 0.0285209306, -0.0006799558, -0.0311616808, -0.0583350658, 0.0957695022, -0.0833498836, 0.0014309641, -0.0593888909, 0.1920001060, -0.0066749295, 0.0105936825, 0.1851657033, -0.0543783270, 0.0560190976, 0.0828463584, -0.0529394783, -0.1448543966, 0.1024172157, 0.0712859035, 0.0589272082, -0.0661136955, -0.0368865579, -0.0462631956, 0.0328634791, 0.0548898131, 0.0487535335, -0.1438703984, -0.0061015859, -0.0263379514, -0.0501753241, 0.0454736724, -0.0055083996, -0.0310195033, 0.0506872237, 0.0465339981, 0.0615393706, 0.1502780616, 0.0514094085, 0.1292214543, -0.0167854801, 0.0121896742, 0.0512742326, 0.0110346191, -0.1268585026, -0.0375264809, -0.0000331532, -0.1301995665, 0.1051794589, 0.0585831068, -0.0440675095, -0.1330138296, -0.0143639063, -0.0565713719, -0.0675263107, 0.0193524137, 0.0294837393, -0.0068544075, 0.0133218989, 0.0581137985, 0.0350951254, -0.1542121172, 0.0195124745, -0.0374858677, -0.0143425744, 0.0247030947, 0.1176906750, -0.0205475502, -0.0286861360, -0.0332943127, -0.0290443078, 0.0495603643, 0.0647016987, 0.0122510670, -0.0874996260, 0.0021510720, 0.0006989008, 0.0761244819, 0.0990036279, 0.0279622767, 0.0403322391, 0.1155111045, -0.0175368991, 0.0078269402, -0.0835312754, 0.0858349875, -0.0462128893, 0.0664611012, -0.1245126724, 0.0901911706, -0.0268800724, -0.0183117725, -0.0255597867, 0.0323713347, 0.1111272499, 0.0573791899, -0.0587721728, -0.0108140931, -0.0412184186, 0.0560248978, -0.1064948738, -0.0113928132, -0.0391123220, -0.0132518681, 0.0338689536, -0.0547543988, -0.0140975239, 0.0425447635, -0.0392712355, 0.0429515913, 0.0022771778, 0.0446275063, 0.0255186930, 0.0862375721, 0.0393141136, 0.0404548384, 0.1503701061, -0.0974267945, -0.0106370179, -0.0831747204, 0.0207985099, -0.0074526994, -0.0490207970, -0.0706707984, -0.0502047352, -0.0160262436, -0.0297120214, 0.0511171743, 0.0388949960, -0.0722722784, -0.1693976969, -0.0113854716, 0.0800786614, 0.0716218129, -0.0622286610, 0.1737981439, 0.1151082069, 0.0043653138, 0.0885299891, 0.0419294834, 0.0451982319, -0.0181136709, -0.0062342398, 0.0012221327, 0.0313068032, 0.0466483496, -0.0185155831, -0.0543144532, -0.0236048847, -0.0880889520, -0.0566682518, 0.0102249607, 0.0495385788, -0.0739660263, -0.0125581156, -0.0674949810, 0.0805588216, -0.1029460728, -0.0354532935, 0.0701500624, 0.0000253757, 0.1505530775, -0.1032085866, -0.0964352787, -0.0641198531, 0.0892853290, -0.0018147565, -0.0756162181, -0.1137927175, -0.0126340538, -0.0316436663, -0.0265475530, -0.0446324386, -0.0906755328, -0.0847937316, -0.0674322993, -0.0107743349, -0.1079426855, -0.0393040739, -0.0173108596, -0.0445599332, -0.0140244346, -0.0814435706, 0.0526738241, 0.0142039675, -0.1927466691, -0.0338524580, 0.0053719282, -0.0281959344, 0.0081666075, -0.0510239713, 0.0236978848, 0.0004702937, -0.0299108028, -0.1237670928, 0.1316459477, -0.0079609212, 0.0630120337, 0.0670651421, 0.0549126789, 0.0840980560, -0.0564327836, -0.0835626200, -0.0696476847, -0.1807591021, 0.0696386844, -0.1119957715, -0.0223394036, 0.0137882335, -0.0150191020, 0.0135267004, 0.0845371708, -0.0024956204, 0.0879767388, -0.0119228149, 0.0838374719, 0.0454312861, -0.0768858790, -0.0781266540, 0.0805502459, 0.0102012940, -0.0626847893, -0.0308504645, -0.0089203650, 0.0678634420, 0.0242216811, -0.1248545200, -0.0734797046, -0.0864608288, 0.1046725139, 0.1331050247, 0.0304203834, 0.1261728257, -0.1340468824, -0.0217079241, 0.0718699619, -0.0940956548, 0.0233408399, -0.0000431603, 0.0770065710, 0.0032639969, 0.0774971247, 0.0857537463, 0.0596701130, 0.0417088419, -0.0248622932, 0.0793555155, -0.1079033166, -0.0213991217, -0.0125867054, -0.0330615640, -0.0548048466, -0.0361591727, 0.0063210586, -0.0311318990, -0.0522832200, 0.1129891127, 0.0654494762, -0.0786561519, -0.0039947890, 0.0983390883, 0.0492212698, -0.0536565855, 0.1173156649, -0.0130114555, -0.0224057138, -0.1130190045, -0.1087303534, 0.0055247508, -0.0842570066, 0.0194164701, 0.0298571140, -0.0177655071, 0.2018235922, -0.0035832655, 0.1263309270, -0.0880443752, 0.0866747648, -0.0722376555, 0.0864158869, -0.1133594215, -0.0437081121, 0.0035669785, 0.0276347566, -0.0225531645, -0.0146362595, 0.0512467884, -0.0009136163, 0.0353421494, -0.0065519409, 0.0161346905, 0.0450027399, -0.0698278323, 0.1161867827, 0.0814123303, -0.0485359281, 0.2011140287, -0.0016130693, -0.0185606331, -0.1123075411, -0.0521269143, 0.0183866844, 0.1152690127, 0.0691499934, -0.0167231448, 0.0044743386, -0.0342402384, 0.0056024678, -0.0240394715, 0.0633440539, 0.0672645792, -0.0050855963, 0.0921284705, -0.0441483036, 0.1236200035, 0.0558697730, 0.0236939769, -0.0434811525, 0.0364292637, -0.0305769145, 0.0859688893, -0.0500532761, -0.0580252036, -0.0469257608, -0.1012292951, 0.1297944784, 0.0943252817, -0.0623699501, -0.0441752560, 0.0073897811, -0.0349360518, -0.0028052460, -0.0417244136, -0.0063859001, 0.1030976474, 0.0853234082, -0.1795161068, -0.0888008401, -0.1247336045, -0.1930611134, -0.0010564271, 0.0619971193, -0.0972785875, -0.0972199440, 0.1124972254, -0.0506792255, -0.1896686256, 0.0572126433, 0.0797597095, -0.0386762433, -0.0607368089, 0.0077884346, -0.0335081145, -0.0216365792, 0.0451957509, -0.0650175512, 0.0214542300, -0.0977612138, -0.0494853705, -0.0245420765, 0.0111896917, 0.1024601310, -0.0643469095, -0.0013803169, 0.0093690455, 0.0102514140, 0.0886709094, -0.0060865218, 0.0517496131, -0.0134109817, 0.1059506834, 0.0691083968, -0.0754624382, 0.0877805427, -0.0260051899, -0.0595125966, 0.0224007294, -0.0778664798, -0.0336694494, 0.0186921731, -0.0248486344, 0.0919341594, -0.1619910598, -0.0212223660, 0.0095077530, 0.0245362781, 0.0704726651, -0.0510144383, 0.0319261253, 0.0010193475, 0.0190091617, 0.1488117725, 0.0421225131, -0.0682354122, 0.0111414967, -0.0326553658, 0.0773668662, 0.0627490282, -0.1911074221, 0.0419804864, -0.0548407361, -0.0749919936, -0.1021824479, -0.0350562111, 0.0321843959, 0.0668592080, -0.0117185228, -0.0126886843, 0.0669756979, -0.0063783512, 0.0609179921, 0.0392741933, 0.0069694929, 0.0206115972, 0.0107755736, 0.0246337447, 0.1734241694, 0.0331205726, 0.0170763321, 0.1016394198, 0.0284133591, 0.0587904677, 0.1320403665, -0.0325959325, 0.0224807449, -0.0543352626, -0.0785239190, 0.0201919489, -0.0294924565, -0.0463109612, 0.0884173140, 0.1296076626, 0.0923928395, 0.0738393441, 0.0051871464, 0.0471529402, -0.0326794833, -0.0948875844, 0.0278391838, 0.1462392360, -0.0326075628, -0.0765080303, -0.0289056264, -0.0151871480, -0.1433393061, -0.0580042452, -0.0413619652, 0.0188174527, 0.0167726092, 0.0066840700, 0.0763458386, -0.0964739993, 0.1092023924, -0.0901839286, 0.0113468086, -0.1273643970, -0.0594189353, -0.0167030301, -0.0164332129, 0.1267665327, -0.0150261838, -0.0094285868, -0.0506345332, -0.1276485324, 0.1100384071, -0.1109001264, -0.0766586661, -0.0062107104, 0.0139325438, 0.0199946631, 0.0077563412, -0.0729744583, 0.0704050735, 0.1002032906, 0.1182285994, -0.0787127614, -0.0459378585, 0.0288218558, 0.0771963522, -0.1231510416, -0.0988449305, 0.0265960880, 0.0197656155, -0.0420589894, 0.1275993437, 0.0007131128, -0.0341585129, -0.0478774719, 0.0328574032, 0.0224702321, 0.0013407432, -0.0122770732, -0.1519341469, 0.0181267634, 0.1281828880, 0.0730027333, -0.0346684866, 0.0820766836, -0.0089680254, 0.1242840365, -0.0481191240, 0.0539903678, -0.0774661824, -0.0444758013, 0.1174195111, -0.0394672342, -0.0547097325, 0.0061739124, 0.1004420146, -0.0061569400, 0.1006072164, 0.0866587088, -0.0039820634, -0.0396718383, -0.0193856619, -0.1361407042, -0.1127939671, 0.1175881401, -0.1080746129, -0.1619014442, -0.0680009723, 0.0367731936, -0.0006424822, -0.1132407933, 0.0517671667, -0.0083944555, 0.0634509027, -0.0342797972, 0.0315629095, 0.0325004458, 0.0829060823, 0.0078201517, -0.0470825210, -0.0229556337, -0.1426957548, -0.1016686484, 0.0785433128, -0.0506659485, -0.0430812016, 0.0093025658, -0.1177171171, 0.0578820147, -0.0401725248, -0.0935670957, 0.0300312117, -0.0209150780, 0.1133447066, -0.0257768594, -0.0090559199, 0.0400423706, 0.0076889619, -0.0278166421, -0.0648744851, 0.1269846857, 0.0038018674, 0.0989403874, 0.1086425558, -0.0527396165, -0.0706621110, -0.0427843817, 0.0058833510, -0.1539205313, -0.0861492157, -0.0744572133, -0.0288418885, -0.0309539475, -0.0681057349, -0.0433990359, 0.0085008442, -0.0819488019, -0.1057286114, 0.0180593804, 0.0259312466, -0.1422869265, 0.0148456506, 0.0298012476, 0.0123322885, -0.0865613297, -0.0271528028, -0.0454958938, -0.0793943256, 0.0407228023, -0.0596625023, 0.0211298577, -0.0642980859, 0.0556695499, -0.1332339942, 0.0519561693, 0.0242063589, -0.0690473914, 0.0671756268, -0.0415359549, -0.0179394092, -0.0483088717, -0.0784562007, 0.0574413054, 0.0325009190, 0.0419828556, -0.0099253310, -0.0562007241, 0.0381047539, 0.0280177258, -0.0200152770, 0.0577619113, -0.0308033135, -0.0736598819, -0.1278275102, -0.0599927865, -0.1810747683, 0.0001165606, -0.0751879141, -0.0105305668, 0.0466919169, -0.0163364112, 0.0373536050, -0.0433934107, 0.0495079830, 0.1261624992, -0.0943664014, -0.0887557194, 0.0492191873, 0.2023403049, -0.0114180725, 0.0484977812, -0.0854507536, -0.0969893485, -0.0637407899, -0.0939871818, 0.0679930896, -0.0568012446, -0.0417081974, 0.0174395740, 0.0413821675, 0.0734468773, 0.0111074056, -0.1554003209, 0.0314350463, 0.0433033779, -0.0050921217, -0.0391909070, -0.0344321392, -0.0261514299, 0.1570014209, -0.0861491486, -0.0848699436, 0.0646267235, 0.0057558678, 0.0603806786, -0.0497490764, -0.0380145535, -0.0300601497, 0.0647631958, -0.0457547382, -0.0335771851, 0.1022729874, 0.0929780751, -0.1787020862, 0.0925122872, -0.0457001887, 0.0440306030, 0.0502772108, -0.0069076829, 0.1152502149, 0.0050788261, 0.1931288540, 0.0201933011, -0.0056789480, -0.0499329083, -0.0606809705, 0.0505859107, -0.0178497378, -0.0813403875, 0.0200171079, 0.0160975084, -0.0669578165, -0.0666227564, 0.0064127445, 0.0023062006, 0.0328313336, -0.0381253585, 0.1177028567, 0.0803667605, 0.0676966831, 0.0295108631, 0.0614508279, -0.0145285595, 0.0245349519, 0.0558122098, -0.0870397240, -0.0707681552, -0.1690956503, -0.0686461702, -0.0439482704, -0.0767942220, -0.0647479817, -0.0379035361, 0.0623644888, 0.0578968525, -0.0615847409, 0.0671865046, -0.0137932254, -0.0360469036, -0.0428204201, 0.0546444133, 0.1111192331, 0.0304354951, 0.0460998304, -0.0910952985, 0.1315860450, -0.0814007446, -0.0167402569, -0.0243338533, 0.0049822712, -0.1343841553, 0.0322184749, -0.0412086286, 0.0849607438, -0.0341493115, 0.1397858858, -0.0284794625, -0.0811166167, -0.0253730230, -0.0198889226, 0.1095710248, -0.0186314955, 0.0770670325, 0.0860188305, -0.1048616841, 0.0355219729, -0.0242737085, -0.0872083157, -0.0858056247, 0.0750871748, -0.0276570395, -0.0489980578, -0.0287668873, -0.0051782816, -0.1801211685, -0.0095752422, -0.0141395368, 0.0644943342, 0.0290363282, -0.0444329605, 0.0009279512, -0.1612805128, -0.0440497547, 0.0879110023, 0.0152575001, -0.0388930328, -0.1050397083, 0.0155326873, 0.0457741059, 0.0454096459, -0.0450620800, 0.0897060931, -0.0724771246, 0.0028177253, 0.1018959209, 0.0439217240, -0.0716549754, 0.0636446178, 0.0547749326, 0.0242377631, -0.0265366007, 0.0569781363, 0.0627172813, -0.0803354159, 0.0079359524, 0.1285460591, 0.1277737021, 0.0039183833, 0.0492308512, 0.0524923392, -0.0852641612, -0.0535432175, -0.0110549694, -0.0307408385, -0.0040512681, -0.0453139022, 0.1180724651, -0.0172621068, -0.1019297093, 0.0954908803, 0.0549706817, 0.1199548617, -0.0958702043, -0.1025773808, -0.0337483808, 0.0622941926, 0.0596031025, 0.1072695404, -0.0549782366, -0.0229129139, -0.0571854487, 0.0173467025, -0.0501099043, 0.0276574679, 0.1585374773, -0.1160501018, -0.0814550668, -0.0303091779, 0.0017382354, 0.0635559335, -0.0086803772, 0.1148734242, 0.2034984529, 0.1061773598, -0.1079808027, 0.0108693019, 0.0788946077, -0.0457316563, 0.0817298964, -0.0546668805, -0.0076993825, -0.1124291420, 0.0007832227, 0.0441356376, 0.1470772177, -0.0039961301, 0.0270872507, -0.0699002743, 0.0078797508, 0.0294473562, 0.0629884675, -0.0625095516, 0.0121605294, 0.0127607323, -0.0030574938, 0.0487778261, -0.1327920705, -0.0011299662, -0.0915674716, -0.0481340662, -0.0042260136, -0.0949000791, -0.1116961390, 0.0283793472, 0.0732015073, -0.0619168058, 0.0674677119, -0.0553033799, -0.0106350565, -0.0090103652, 0.0228703152, 0.0705509037, -0.0780678689, -0.0547614656, 0.0946907029, 0.0025362140, -0.0349747911, 0.0517577231, -0.1108353361, -0.0061910832, 0.1245959774, -0.1244107038, 0.0531743355, -0.0459219590, -0.0965547711, -0.0329497568, 0.0657215565, -0.0942743644, 0.0883842334, -0.0943334848, 0.0665981695, 0.0196619052, 0.0390402898, 0.0041188570, 0.1019832119, -0.0565256923, 0.0077699078, 0.0042748414, 0.0630834028, 0.0072439052, -0.0111956131, 0.0619144291, -0.0405255407, 0.1760440618, -0.0497750416, 0.1294643730, -0.0256157257, 0.0385464095, 0.0830954760, -0.1028657928, 0.0941889435, 0.0025636014, 0.0975353122, 0.0777668506, -0.1495542675, 0.0502360761, 0.1036153138, -0.0407762527, 0.0658104718, -0.0599329770, 0.0090226512, 0.0470563807, 0.0645312890, 0.0874612108, -0.0174325798, 0.1310267299, 0.0820053145, 0.0446244925, -0.0433057770, 0.0691445023, 0.0222500712, 0.0020383811, -0.0011009686, -0.0359102525, -0.0563890859, -0.1534777433, 0.0071050376, 0.0356967002, 0.1886519641, 0.0356289409, 0.0230213441, -0.1152103692, -0.0033391779, 0.1049393266, -0.0392108150, 0.0275532361, -0.0284291022, 0.1270761043, 0.0372840129, 0.0064791925, -0.0226780027, -0.0257499143, 0.0210742205, 0.0168778636, -0.0508174710, 0.1085216030, -0.0776504204, -0.0730784833, 0.1777681410, 0.1026803255, 0.0277476832, 0.0297698155, 0.0151665993, -0.1104161665, 0.0554491431, 0.0451044478, 0.0272494815, 0.0026070662, -0.0486917756, -0.0773693621, -0.0282691270, 0.0647570267, -0.0562971011, -0.0201629996, 0.0326167420, 0.0152480090, 0.0228837878, 0.0292139817, -0.1061978191, 0.0720179528, -0.0949578956, -0.0593812801, -0.1143791825, -0.0420065075, -0.0427338034, -0.1757574528, -0.0535847098, -0.0456881709, 0.0625260845, 0.0024728682, -0.1271989942, 0.0075557325, 0.1923224926, -0.0047347667, -0.0131903701, -0.0476812907, 0.0756038874, -0.0633307695, -0.0027831495, -0.0561767519, 0.0265889056, 0.0636747852, 0.0086170081, -0.0604806729, -0.0237902552, 0.0983244851, 0.0308694504, -0.0281001702, -0.0561696440, -0.0837151781, 0.0587792210, 0.0258661956, -0.0388485678, -0.1235398278, 0.0120088421, 0.0983008146, -0.0175479446, 0.0065940330, -0.0582096502, 0.0910587311, -0.0186894760, 0.0225290190, 0.1215357631, 0.0579033680, -0.0738814473, -0.0580474846, 0.0476274937, -0.0522404984, 0.1329358518, 0.0796031952, 0.0024459977, -0.0360423066, -0.0342724174, 0.0244617518, 0.0124587435, 0.0740300789, 0.0082985405, 0.0928651392, 0.0811782330, 0.0076564774, 0.0139608178, -0.0310944617, -0.1590267271, -0.0408333652, 0.1232244298, 0.0191057883, -0.0101979896, 0.0547853038, -0.0024951026, 0.0422951505, -0.0619967282, -0.0108520817, 0.0480468050, -0.0924407467, -0.0720177963, -0.0530545302, 0.0190847311, 0.0880179182, -0.1651725173, 0.0003063283, 0.0433212034, 0.1001072675, -0.0295760110, -0.0776291266, 0.0158333462, 0.0723210275, -0.0202225633, -0.0740301833, 0.0598211661, 0.0196058955, -0.0221847761, 0.0505108759, 0.0990600362, -0.0001144856, -0.0179074537, -0.0822946131, 0.1480679810, 0.0183132160, 0.0941964686, 0.1168727279, -0.1191965640, 0.1286475509, 0.0788529366, -0.0004806630, 0.1430866122, -0.0193685088, -0.0385393463, -0.0270617977, 0.0886660069, 0.0921614021, -0.0568711050, -0.0486906022, -0.1149438322, -0.0992212445, 0.0260490328, 0.0331820175, -0.0686265901, 0.0655696318, -0.1656807512, 0.0022317749, 0.0396315567, 0.0417159609, 0.0254218969, 0.0552067161, 0.0113964109, 0.0630701929, -0.0336170122, 0.0139087792, -0.0753941536, -0.0333301313, -0.0370738916, 0.0952921957, 0.0314890407, -0.0771408230, 0.1127915904, 0.0164522454, -0.1361004114, 0.1381180733, 0.1370840669, -0.1127750352, 0.0030198246, -0.1095080823, -0.2132590711, 0.1756879389, 0.0423987024, 0.0388542265, -0.0267396383, 0.0478038117, -0.0258559827, 0.0257038753, -0.1145443544, 0.0585722402, -0.0308586247, -0.1015692800, 0.0279657897, 0.1750857532, -0.0050149634, -0.0018419055, 0.1082808450, -0.0498427004, -0.0436201170, -0.0060503781, -0.0686002448, -0.0582253560, -0.0573397875, -0.0260819644, 0.0665109307, -0.0088759027, -0.0960218385, -0.0093122385, 0.0399462432, -0.0458056293, 0.0555273965, -0.0555788688, -0.0765346736, 0.0069094729, -0.0013828648, -0.0970483497, -0.0209566094, -0.0107515529, 0.0930376351, 0.0510263965, -0.0799816102, 0.0906377882, 0.0959290266, 0.0399774313, 0.0128225796, -0.1799441874, 0.0196743757, 0.0250120685, -0.0475982800, -0.0803252757, 0.0883257836, -0.1241479963, -0.1941649616, -0.0085219592, 0.0549973994, -0.0410023332, 0.1054449975, -0.0035401480, -0.1282322258, -0.0044867098, 0.0890104622, -0.1232252941, 0.0213876255, 0.0577723756, 0.0367158651, 0.0128054079, 0.0290326923, -0.0023982823, -0.0058151819, -0.1002568156, 0.0016612448, -0.0744306594, 0.0099318791, 0.0078210514, 0.1085149720, -0.0075994986, -0.0226247702, 0.1066143438, 0.0431473255, -0.0844988748, -0.0328571126, -0.0593546480, -0.0292680580, 0.0178143382, 0.1178804934, -0.1290911734, 0.0275612995, -0.0617698543, 0.0581940189, 0.0385733619, -0.0422698967, -0.0813486874, 0.0440010130, 0.1129487902, -0.0115951411, 0.0037528942, 0.0487409607, 0.0206665583, 0.0877848342, 0.0415753722, 0.0599999353, -0.1336957514, 0.0676083192, -0.0750586390, 0.0830149502, -0.0043303240, -0.0097679431, -0.0549019724, -0.0564804040, -0.1740157753, 0.0671103150, -0.0261323862, -0.0111199096, -0.0551997684, -0.0692955703, -0.0182322171, -0.1383608878, 0.0204255544, 0.0302567706, -0.0805731863, -0.0531445853, -0.0235482324, -0.0160987675, -0.0265145749, 0.0940082371, 0.0575578175, -0.0497621112, -0.0433803014, 0.0312467366, 0.1042604968, -0.1041205525, -0.0070926002, 0.1170938611, 0.0493748263, 0.0452029593, -0.0419481136, 0.0122774467, -0.0448745973, -0.1202445328, 0.0525399595, -0.0071094818, 0.0496792421, -0.0012531271, -0.1354999840, 0.1257775724, -0.0489602610, 0.0105785206, -0.0404610708, -0.1228308603, 0.1089512855, 0.0658280328, -0.0229627155, 0.0352110267, -0.0307335779, 0.0622337759, -0.0377139412, -0.0087133404, -0.0586587191, -0.0624462180, -0.0240722299, 0.0264887437, -0.0467449874, -0.0495871827, -0.0508041978, -0.0038583279, 0.0005639195, -0.0238891356, 0.1306847930, -0.0294540413, 0.0616812482, -0.0000187188, 0.1370034069, -0.0549560487, 0.0604545884, 0.0106717683, 0.0488772430, -0.0889778286, 0.0025749970, -0.0398125798, 0.0056162328, -0.0028449330, 0.1034679189, -0.0218360983, 0.0363931209, -0.0112860631, -0.1473901868, 0.0487186201, 0.0420259498, -0.0365006253, 0.1070848405, -0.0382844098, -0.1374452263, -0.0780567154, 0.0199393984, -0.0292853527, -0.0249283910, 0.0562591627, -0.0715072155, 0.0219632946, -0.0036302265, -0.0415608063, -0.0707454905, -0.0746528804, 0.0073435651, 0.0261186436, -0.0199038088, -0.0905996710, 0.0800468028, -0.0184228756, -0.0033658948, -0.0175457913, 0.0477007553, -0.0106198043, 0.0361922160, -0.0734850094, -0.0629052073, -0.1793605536, 0.0228331555, -0.0891999453, 0.0029035863, 0.0383032225, -0.0455952138, 0.2191266716, 0.0868361071, 0.1608951092, -0.0360276736, -0.0998163149, 0.0760471299, 0.0396122225, -0.0357160307, -0.1077975333, -0.0151435435, 0.0784773231, -0.0011386361, 0.0304760784, -0.1326299757, 0.0758993775, 0.0530196875, 0.1170201451, -0.1236464307, 0.0539870225, 0.1270593703, 0.0007687733, 0.0695712715, 0.1345672905, -0.0136134569, -0.0708992779, 0.0294727627, 0.0889424533, -0.0176578723, 0.0741093010, -0.0541681349, -0.0385410823, -0.0152411833, 0.0243520048, 0.0018049031, -0.0352950133, 0.0277531855, 0.1026156992, 0.1152295545, 0.0322916768, -0.0446167663, 0.0294726975, -0.1472951472, -0.1163967103, -0.0665702671, -0.0611613058, 0.0486873239, 0.0886717662, 0.0691188872, 0.0443415418, -0.0604714863, -0.1426006705, -0.0318408161, 0.2070517093, -0.0700299591, -0.0479609296, -0.0500792637, 0.1070885211, -0.0332106128, 0.1320616901, -0.0139954984, -0.0060274415, -0.0195820220, -0.0971781313, -0.0285050906, -0.0132708326, 0.1237997934, 0.1009191424, -0.1388371140, -0.0777639151, -0.0650975704, -0.0204045400, -0.0039838590, -0.1310961843, -0.0884480998, 0.1128043011, 0.0367402099, 0.1029679924, -0.0011180723, 0.1027905419, 0.0013139928, -0.0213689506, -0.0343877077, 0.0376116373, -0.1318804622, 0.0116781304, -0.0035342255, -0.0997565538, -0.0580363274, 0.0549454615, 0.0598020032, -0.0323682800, -0.0707146600, -0.0824548155, 0.0672155619, 0.0934778303, 0.0167836584, 0.0212072581, 0.1291631013, 0.0562959909, 0.0231963228, -0.0064403173, 0.0007148907, 0.0756453350, -0.0238468591, -0.0066398717, 0.0580491796, -0.0748123974, -0.0897632763, -0.0342609212, -0.0462256745, -0.1224338785, 0.0675182492, -0.0191667676, -0.0139603596, -0.0477645285, 0.0484599248, -0.0598705485, 0.1083471850, 0.0028344505, 0.0483666584, -0.0230582207, -0.0113815162, 0.0559680201, -0.0049357181, 0.0303270482, 0.0013219691, 0.1042039841, 0.0824506879, 0.0448318161, -0.0461342596, -0.0045512524, 0.0477862097, -0.0685846657, -0.0290346965, -0.0274253823, -0.0682878792, 0.0522745326, -0.0286856741, -0.0703785047, -0.0961940512, 0.1109158769, -0.1044827923, -0.0954665169, 0.1476716101, 0.0009450465, 0.0156811792, 0.0710651651, -0.0183933321, 0.0419355705, 0.0307479799, 0.0936067849, -0.0849314556, 0.0315646045, 0.1061092243, -0.0245784093, -0.0373941734, -0.0038735271, -0.0361240581, 0.0793523937, -0.0521106459, -0.0173385739, -0.0023365575, 0.0105877295, -0.0097114779, -0.0813976452, -0.0867259428, 0.0504378006, 0.0030348878, 0.0041566156, 0.0259012897, -0.1383235753, 0.1543983668, 0.1941325814, -0.0710473955, 0.0986145586, 0.0442682132, -0.0018850216, 0.2163198441, -0.0226524621, -0.0022217575, 0.0182733368, 0.0320789218, 0.0407730266, -0.0547614135, -0.0622929111, 0.0249418393, -0.0095252050, -0.0537495390, 0.0277448911, -0.0397819057, 0.1251425445, 0.0111160502, -0.1408770531, 0.0069610961, -0.1276090145, -0.0884914175, -0.0196086653, -0.0782793462, -0.0032891892, -0.0177694950, -0.0000020079, 0.0063070357, -0.0864054561, -0.0327885337, -0.0450833440, 0.1052251980, -0.0439239256, 0.1711182147, 0.0677894577, 0.0121339038, -0.0579751097, 0.0048357672, -0.0689134598, -0.0138060190, 0.0705033168, 0.0590541139, -0.0475801937, -0.0753936768, 0.0015880363, 0.0513778254, -0.0533596501, -0.0147000421, -0.1565048695, 0.0545259938, -0.0362968259, 0.0024255428, 0.0406338498, -0.0031923428, -0.1129088327, 0.0903795734, 0.0020425939, -0.0662174821, -0.1015500128, -0.1010242850, -0.0150041841, -0.0375401154, -0.0221031867, 0.0363477767, -0.0097911730, 0.0320021473, 0.1632764041, -0.0582992025, -0.0987507999, 0.0647522286, -0.0503858998, 0.0251237825, 0.0103323860, 0.0032415092, -0.0124899503, -0.0077492706, 0.0132504646, -0.0874170288, 0.0280969013, -0.1255181283, -0.1010647193, -0.0678163618, -0.0407341532, 0.0078155566, 0.0139140338, 0.0143236481, -0.1871667951, 0.0112948455, 0.1161277518, 0.0258704685, -0.0659050643, -0.0157659650, -0.0583338365, 0.0161980204, -0.0446488596, -0.0677593499, -0.0334266014, -0.0400951505, -0.0402486064, -0.1665176004, -0.0348057561, -0.0296020508, -0.0961348861, -0.0185023211, 0.0802841783, 0.0480891913, -0.0607101917, -0.1083109230, -0.0989799052, -0.0008264314, 0.0169765241, 0.1594696343, -0.1093111336, 0.0266486332, 0.0305478610, -0.0033707046, -0.0391229242, -0.0043051136, -0.0930362493, -0.0186546594, 0.0147796115, -0.0295999236, -0.1035388261, 0.0143304588, 0.0844803751, 0.0553108826, 0.0063562607, -0.0374727584, -0.0096213389, 0.1543234140, -0.0948978662, -0.0016814945, 0.0971979052, 0.1258109808, 0.0785619467, 0.1218122244, -0.0596174859, -0.0007399885, -0.1028536707, 0.0685731918, 0.1119812280, 0.0264310464, 0.0587458014, -0.0568590760, 0.0138644949, 0.0726322904, 0.0090203136, -0.0179457534, -0.0726754442, -0.0533334576, 0.0433483571, 0.0183825847, 0.0227747001, 0.1324133277, 0.1071170494, -0.0010405430, 0.0169129111, -0.0020172941, -0.0582131259, 0.0672747716, -0.0501837805, 0.0899558961, -0.0632862374, 0.0988865644, 0.0462186784, 0.1027884632, 0.0282693077, -0.0885416642, 0.1748296916, -0.1285485178, -0.0160740074, -0.0580239706, 0.0332611389, -0.0273706429, -0.0387605689, 0.1242624521, -0.0268329270, -0.0761715323, 0.0945401937, 0.0566450655, 0.0841745064, -0.0337633081, 0.0075569190, 0.0001249518, -0.0708104819, 0.0477921404, -0.0526503026, -0.0587707385, 0.0143146589, -0.0672938973, 0.0152733950, -0.1110944152, -0.0603966564, -0.0335518792, 0.0249007978, -0.1145993471, -0.0882388204, -0.0760149583, 0.0419089161, 0.1105341166, -0.0104028722, -0.1066796929, 0.0229667239, 0.0042157588, -0.0125410240, -0.0263805129, -0.1272631139, 0.0596010089, -0.0140192881, -0.0320328176, 0.1339304596, 0.0038964516, -0.1563188583, 0.0013303000, 0.0251950100, 0.1172482371, -0.0260617919, -0.0632575229, 0.0514158458, 0.0104184896, -0.0952233002, -0.0732981563, 0.0336015224, 0.0155394003, 0.0424471796, -0.1072046012, -0.0340377465, -0.0061542215, 0.0449639186, 0.0280672796, 0.0768139586, -0.0674260110, 0.0112181138, 0.1014146507, 0.1347247362, -0.0460766293, 0.0677126050, 0.0237142257, -0.0346345343, 0.0507278144, -0.1026969850, 0.0117646893, 0.0242838971, 0.0374410525, 0.0328615829, 0.1187074035, 0.0213177018, 0.1049023345, 0.0660047606, -0.0842193961, -0.0023181569, 0.0647730529, 0.1455126703, -0.0338727012, -0.0624798760, -0.0295404233, 0.1750788242, -0.0361868106, -0.0359381177, 0.0427813828, -0.0569520406, 0.1137766391, -0.0049199983, -0.1185812503, -0.0529014692, 0.0354440399, 0.0491262190, 0.0417724550, 0.0318954140, -0.0423825011, 0.0891953111, 0.0724816471, -0.0549145453, -0.0531378686, -0.0951053128, 0.0557629988, 0.0919160396, -0.0790359750, -0.0866176188, 0.0584000684, 0.0750147402, 0.0780055523, 0.0348040611, -0.0194381308, 0.0977886245, 0.0353864357, -0.0793284252, 0.1494373977, -0.0449044406, 0.1124389768, 0.0071575604, -0.0009104870, 0.0705633089, 0.0860916227, 0.0328020118, -0.0430985764, -0.0279448405, 0.0548963398, -0.1339029223, 0.0263491627, -0.0760931373, -0.0439743400, -0.0707997531, -0.0233736932, 0.0620893613, -0.1774274111, -0.0409722105, 0.0487746410, -0.0025117956, 0.1024917066, 0.0827789158, -0.0300713386, 0.0471634641, 0.0415377952, -0.0337213278, -0.0354047827, 0.1431431472, 0.0695073605, 0.0448176190, 0.0326779336, 0.0880918652, -0.0193207208, -0.1034359336, 0.0329008177, 0.2012161165, 0.0099298852, 0.0382997356, 0.0011275725, 0.0802420676, -0.0870710686, 0.0619252548, 0.0153936557, -0.0990666449, 0.0813274160, 0.0962302089, 0.0841764063, 0.0259268284, -0.0110048447, 0.0304748360, -0.1809882522, 0.0185630787, 0.0082141180, -0.0456426665, 0.0352281332, -0.0519988015, -0.0877583399, -0.0623392761, -0.0411899164, 0.1376004517, -0.0418226793, -0.1030315831, -0.0467872135, -0.0358862728, -0.0348319262, 0.0445031561, -0.0617927052, -0.0380740128, -0.0564285107, 0.0712737963, -0.1351317614, 0.0018755011, -0.0194654837, 0.0547281094, -0.0982864052, 0.0251169018, 0.0093043651, -0.0495874509, -0.0635254607, 0.0337897018, 0.0075851521, 0.0653970316, -0.0109446784, -0.0169425160, 0.1192671955, 0.0601174235, 0.0138412295, 0.0015507862, -0.0207870081, 0.0348271802, 0.0128961429, 0.0249890499, -0.0099889133, -0.2063776553, -0.1408621520, 0.0513334647, -0.0467876568, -0.0008335412, 0.0269557312, -0.0133018792, 0.1177072376, -0.0068619279, -0.1175400093, 0.0902050212, -0.0193899646, -0.0766092688, 0.0316738151, -0.1105165333, -0.1284109801, 0.0234934799, -0.0513150282, 0.0406769142, -0.0439502075, -0.0949834585, 0.0809818357, 0.0069172848, -0.0518583320, 0.0139281480, 0.0409597531, -0.0105331261, -0.0111976229, -0.0298914406, 0.0433547981, 0.0019316133, 0.0655898750, 0.0735835284, -0.0788259357, -0.0119330920, 0.0478850752, -0.0139587261, -0.0133258952, 0.0516517125, 0.0772910342, 0.0963019282, 0.0142891053, 0.1085349619, -0.0596741661, 0.0824578628, -0.1584256142, 0.0692224503, -0.0324590243, -0.0278308187, 0.0299699642, 0.0049329149, -0.0508337431, 0.0206844024, 0.0629770383, 0.0237382539, -0.0064747911, -0.0157020278, -0.0587500073, 0.0162848625, 0.0620083474, 0.0004847981, 0.0064319307, 0.1765277833, 0.0488092452, -0.0936288089, 0.0921736658, -0.0424062237, 0.0631294101, -0.0552152544, -0.0209825300, 0.1873811334, 0.0531931929, 0.1736010909, -0.0028926134, -0.0005189604, 0.0523873307, 0.0249209665, -0.0130822808, 0.0394813120, 0.0154138971, 0.1402093619, 0.0323559754, 0.1053849086, 0.0930664688, -0.0816066936, 0.0208705589, -0.0071198316, 0.1198506653, -0.0370780416, 0.0077383965, -0.0318663716, 0.0915634558, 0.0380007997, -0.1374321431, -0.1602825820, -0.2031627446, -0.0251967739, 0.0409954861, -0.1138631850, 0.0731082261, -0.0613151528, -0.0383647457, 0.0542065203, -0.0578413829, -0.0778406411, 0.0562486723, -0.0071620829, 0.1490768790, 0.0839376748, -0.0219539441, 0.0408539921, -0.0507569686, 0.0348319560, 0.0178423524, 0.1446238160, -0.0288247857, -0.0822842419, -0.1033611745, 0.0174134411, 0.0140807070, -0.1335326135, -0.0598014221, -0.0471300744, 0.0693758503, -0.0354756638, 0.0259722210, -0.0484705754, -0.1134266928, 0.0207119174, 0.0053359098, -0.0164799597, -0.1207241938, -0.1565084159, -0.0348522849, 0.0784007311, 0.0167192183, 0.0313057303, 0.0738142207, 0.0347679220, 0.0558546446, 0.0458494686, 0.0656123608, 0.0507352129, 0.0145765748, -0.0257775374, -0.1446127295, 0.0577327684, 0.0381686129, 0.1156726927, 0.0468025021, -0.0986859724, -0.0309021585, -0.0538911149, 0.0076822648, -0.0053557176, 0.0388106629, 0.1563872546, -0.0519808233, 0.0270863660, 0.0152078178, 0.0975393653, 0.0129186753, 0.0664686561, 0.0607624799, 0.0213225931, 0.0394557975, 0.0548190922, -0.0854169354, -0.0154596241, 0.0867867395, 0.0804861635, -0.0749706924, 0.1229081824, -0.0123558957, 0.0358812287, 0.0697111040, 0.0979018062, -0.0538801663, 0.0464646071, 0.2059062421, -0.1069939956, 0.0112840142, 0.0381005257, 0.0893472806, 0.0439325236, -0.0455315597, -0.0265220739, 0.0663185194, 0.0405578986, 0.0465190299, 0.1127621159, -0.0220712144, 0.0017044097, 0.0021583568, -0.0281080231, -0.0831092894, -0.0450288057, 0.0065839924, -0.0687826797, 0.0913237035, 0.0511542223, 0.0349282622, -0.1314287186, -0.0115053058, 0.0892957598, -0.0351143666, 0.0819962472, -0.0315854289, -0.0375613272, -0.1294054985, 0.0287298188, 0.0871245712, 0.1481699347, -0.0874547958, -0.0392546952, -0.0058615915, 0.0048703365, -0.0156271420, 0.0729655400, -0.0253340900, -0.0187231582, -0.0212328024, -0.0009057764, -0.0705656782, -0.0349139310, -0.0497040823, -0.0041632801, -0.0736758336, 0.0226387531, -0.0133604165, 0.0017578066, -0.0880107805, 0.1724610627, 0.1064857170, 0.0251931828, -0.0412932932, -0.0563287251, -0.0200071745, 0.0609932616, -0.0664860904, -0.0710442960, 0.1283752024, 0.0902849883, -0.0246884730, 0.0113181528, 0.0193731841, 0.0391327851, 0.1294743866, -0.0809638128, 0.0885480121, -0.0310181584, 0.1609989107, 0.0123898620, -0.0356245153, -0.0159881040, -0.0012784153, -0.0200615600, -0.0707451254, -0.0193834379, 0.0196673200, -0.0139255319, 0.1577603519, -0.0624284483, -0.0769410953, 0.0523951352, -0.1252582520, -0.1541839987, 0.0120351119, 0.0798424184, -0.0185160451, -0.0226059482, 0.0370322019, -0.0025297906, 0.0449897200, -0.0850487873, 0.2017247230, 0.0318620652, -0.0533709899, -0.1327239871, 0.0625162870, -0.0752204284, -0.0138609316, -0.0428769886, 0.0118639357, 0.0306013562, 0.0495510101, 0.0461266190, -0.0213532224, -0.0878372341, -0.0502980500, 0.0084181651, -0.0436178371, -0.0141365901, -0.0657577664, -0.0021338938, -0.0407389104, -0.0195689071, -0.0981158242, -0.0282863230, -0.0288069081, 0.1293083727, -0.0951823592, -0.0119215660, 0.0435609035, 0.0373653099, 0.0337276943, -0.0896517932, -0.0461294167, 0.0184067823, 0.0106783491, -0.0704081059, 0.0468961075, -0.0963191465, -0.1201469973, 0.0576586947, -0.0124343131, 0.0866601765, 0.0745305195, 0.0540224910, -0.0891473293, -0.1336327791, 0.0669051632, -0.0043248259, 0.0175881982, -0.1065745056, 0.1463721097, 0.1168583483, -0.0620230883, 0.0814760998, -0.0128745921, -0.0666267797, 0.0370426066, -0.1743107140, 0.0091283508, -0.0687298924, -0.0209930129, 0.0781879127, 0.0104221320, 0.0308173634, -0.0669365674, 0.0774119273, 0.0789114386, 0.0483643897, 0.1355339438, 0.1919383258, -0.0912313312, 0.0586198084, -0.0194514915, -0.0047832169, -0.0211006831, -0.1037386954, 0.0723484606, 0.0044321422, 0.0448795035, 0.0574061945, -0.0675897598, 0.0886729807, -0.0192972645, 0.0346820466, -0.1134783477, 0.0003902800, -0.0709204972, 0.0921325088, 0.0627883002, 0.1295140833, 0.0123053584, 0.0159803703, 0.0280193016, 0.0855239183, -0.0887988508, -0.0489620529, -0.0931116492, -0.0077827573, 0.0065558366, 0.1932911128, 0.0336780846, -0.0317232683, -0.0749934688, 0.0718668029, -0.0833846256, -0.1196982414, 0.0451214463, -0.0948565081, -0.1786514372, 0.1059375927, -0.0128264483, -0.0171980448, 0.1050819829, 0.0421284214, -0.1103581488, -0.0283968523, -0.0228176378, -0.0896272659, 0.0346078388, -0.0154818725, -0.1033569425, -0.0376233831, 0.0422974899, -0.0082026552, 0.0492062233, 0.0395511910, 0.0282704309, -0.1114180088, 0.0137371887, -0.0888889059, 0.0241060257, 0.0716203824, -0.0681231841, 0.0549366362, -0.1043793857, -0.0914425477, -0.0134510882, -0.0443500653, -0.0614694916, -0.0790699720, -0.0280599352, 0.0994920582, 0.0404593833, -0.0033283178, -0.0701771230, -0.0554627068, -0.0651813745, -0.0557493269, -0.0103216656, 0.0576980673, 0.0606158562, -0.0236496627, 0.0211403593, -0.0365977362, -0.0632625148, -0.0003567711, 0.1832825840, -0.0028083064, -0.0270071104, 0.0523627363, -0.2173160911, -0.0813969076, 0.1059167981, 0.0511913747, 0.0914997309, 0.0334547050, -0.0184178241, -0.0673234463, 0.0156041086, -0.0710532814, 0.0063561201, 0.0516199991, -0.0170107577, -0.1263965815, 0.0047518853, 0.0133545063, 0.0735757723, -0.0883861184, 0.0848633274, -0.0467542037, 0.0480023436, 0.0018962547, -0.0349507928, -0.0083947191, -0.0810060874, -0.0080373129, -0.0770394653, 0.1624768078, -0.0424435921, 0.0117939133, 0.0137847289, -0.0314071849, -0.0983052924, -0.0280557796, 0.0763322338, -0.0382254012, 0.0422418788, 0.1118968800, -0.0536235198, 0.0292684138, -0.0339458622, -0.0014701550, -0.0651870295, -0.1164708063, -0.0290156156, 0.0650293529, 0.0456985757, 0.1011873633, -0.0265931096, 0.0269409344, 0.0724623948, -0.0180571880, -0.0261897072, 0.0690119341, 0.1454278827, 0.0218554940, 0.0329804085, 0.0874833688, 0.1446740180, 0.0076029655, 0.0730091408, -0.0848767459, -0.0592547953, -0.1230731159, 0.0799238905, 0.0700049326, 0.0430715084, -0.0132096726, 0.0018353388, -0.1617519557, 0.1241374463, -0.0063810297, -0.0405281447, 0.1457950324, 0.0646398887, 0.0052015074, 0.0090425201, 0.0030536167, -0.0248767696, -0.0593161173, 0.0432827733, -0.1176293865, 0.0457243584, -0.0003934875, -0.0497777499, -0.0948338509, 0.0748839453, 0.0883191824, -0.0527049266, -0.0659505278, 0.0522944853, 0.0257965215, 0.0141652543, 0.1095872447, 0.0980747044, -0.1248972937, -0.0136047341, 0.0194732547, -0.0979475677, -0.0661287531, -0.1023923606, 0.0851225033, -0.0836775303, -0.0292976685, 0.0743517727, 0.0277467668, -0.0884556025, 0.1630162001, 0.0134050446, -0.0173837394, 0.0078423321, 0.0441909134, 0.0924688876, 0.0367452651, -0.1356006563, -0.1200300083, -0.0981453955, 0.1155677065, -0.1107470095, -0.0699051917, 0.1259454340, 0.0249750447, 0.0636489913, 0.0452796705, -0.0410164297, 0.1172260791, 0.0284202863, -0.2004572302, 0.0285522211, 0.0849907398, -0.0221065022, 0.0107346466, -0.0253302865, 0.0131431464, 0.0887200087, 0.0595664755, -0.0372706912, -0.0449531302, -0.1174240783, 0.0377750285, 0.0344348922, -0.0367541127, -0.0870800614, -0.0857351050, 0.0455484167, 0.1043711454, -0.0556046404, 0.0787366927, 0.1604897678, 0.0330283679, 0.0493105687, -0.0464459136, 0.0763121247, 0.0609051026, 0.0888618082, -0.0806495026, -0.0493904278, 0.0383039415, -0.0343866646, -0.0387888886, -0.0559362173, 0.0348871984, 0.0828972012, -0.0756858960, -0.0589608215, -0.0583299547, 0.0507391319, -0.0119229704, 0.0137857124, 0.0682742968, 0.0244986434, -0.0489637963, 0.0376471728, 0.0575883649, 0.0183788799, 0.0106945056, 0.0610451698, -0.0755450130, 0.0154665513, -0.0390840434, -0.0376212820, -0.0416210219, -0.2166543156, -0.0522882640, 0.0875033289, -0.0369830057, -0.0098443478, -0.0416724235, 0.0938862860, 0.0028988272, 0.0395238772, 0.1349530220, -0.0080316691, -0.0636609644, 0.0063141584, -0.0440418944, -0.0120147504, -0.0334661752, 0.0811826438, -0.0281324051, 0.2012373209, -0.0959909782, -0.0531466231, -0.0830993205, -0.0971594155, -0.0183903351, 0.0129243769, 0.0383100286, -0.0163935442, 0.0567948483, -0.0090288995, 0.0748335347, -0.0651359707, -0.0198745858, 0.0715372264, -0.0254260339, 0.0192136839, -0.0837401152, 0.0855871215, -0.0164376236, -0.0051376782, -0.0590520315, 0.1171844900, -0.0642879680, -0.1032077223, -0.0227630697, -0.0864675939, -0.0438857712, 0.0089184344, 0.0531886593, -0.0194613487, 0.0645401925, -0.0177201293, -0.0491161197, -0.0353847705, 0.0718392953, -0.0638198331, -0.0274996646, 0.0940399468, -0.0416374877, -0.1329602897, 0.0425578915, -0.1365898997, -0.0144339856, -0.0422672555, 0.1358965188, -0.0821191519, 0.0340243615, -0.0070078224, -0.0620884933, 0.0196352936, -0.0230647251, -0.0181131288, -0.0546705946, -0.0312944911, -0.0517756380, 0.0412037559, -0.0303079300, -0.1128852591, 0.0641426072, 0.0292737056, 0.1068364233, -0.0660910010, 0.0133399591, 0.0333894417, 0.0090714321, 0.0831190944, 0.0909796208, 0.0187549982, -0.0271551870, 0.0159647390, -0.2050961554, 0.1064126939, -0.0791822672, -0.0682227165, 0.0475009046, 0.0042795017, 0.0636841804, 0.1177744195, -0.1339969486, 0.0073002316, -0.0345131941, 0.1420203596, -0.0273867510, -0.1292947084, 0.0367816091, 0.0257339627, 0.0747834146, 0.0039417576, -0.0884123594, -0.0020286608, 0.1002235115, 0.0667877793, -0.0873320103, -0.0173571669, -0.0812475756, -0.0318186283, -0.0612307787, 0.0201871172, 0.0717204139, -0.0547695830, -0.0542389862, 0.0103303688, -0.0807667375, 0.0659582093, 0.1514244229, -0.0160689466, 0.0339202881, -0.0343540162, -0.1250603795, 0.0974903330, -0.0649047717, 0.2113222033, 0.0906026065, 0.0784404129, -0.0058875158, 0.0583931915, -0.0512430780, 0.1036479920, -0.0771480799, -0.1508185416, 0.0291814283, -0.0181014258, 0.1316020489, -0.0528931990, -0.0671372935, 0.0173920766, 0.0562951788, -0.0332418419, -0.0884089470, 0.0706862509, 0.0848838240, 0.0015659183, -0.1870959252, -0.1125318855, 0.1086336672, -0.1318373084, -0.1090176105, -0.0611527488, 0.0078613264, 0.0418847911, -0.0383992009, -0.1156286076, -0.1180157661, 0.0669605732, -0.0093368562, 0.0000789836, 0.0297720563, -0.0071229078, 0.0086915959, 0.0164805390, -0.0748832300, 0.1152369007, -0.0652048960, 0.0310234446, 0.0521186441, 0.0328656584, 0.0002253242, -0.0597669035, 0.0799609497, -0.0546338521, 0.1208548173, 0.0157530867, -0.0541101471, 0.0503164753, 0.0828538090, -0.0021206774, -0.0684306473, -0.0247996561, 0.0457562730, 0.0872711241, -0.0295372978, -0.0657018125, 0.0071845464, 0.0752691329, -0.0506557673, -0.0358477384, 0.0251957234, 0.0620657504, -0.0896367282, -0.1513271332, -0.0817118809, -0.0380908288, -0.1350368112, 0.1318643093, 0.0477906205, 0.0710079819, -0.0011352487, 0.0330254398, -0.1129532382, -0.0535078235, 0.0939960182, -0.1511455774, -0.0729342401, 0.0719026774, -0.1579218060, 0.1174216196, -0.0220644549, 0.0567440018, 0.1226142347, 0.0355637074, 0.0539734624, 0.0607950650, -0.0531960726, 0.0526509210, -0.0645103529, -0.0707608163, -0.0366830118, -0.0374163017, 0.0002370793, 0.0136832856, 0.0094139995, -0.0836494863, 0.0721340925, -0.0489786193, -0.1688319445, 0.0018111896, -0.0728086606, -0.0139788212, 0.0254307203, -0.0446166359, 0.1033448130, 0.0410321988, 0.1005224213, 0.0139649473, -0.1117754579, 0.0566498376, 0.0541374832, 0.0352653787, -0.1228338778, 0.0617287457, -0.0419140793, 0.0001159068, -0.0480898879, -0.0131996786, -0.0250394456, 0.0633717775, -0.0125534981, 0.0218602307, 0.0106083862, -0.0172680207, 0.0601378791, 0.0579995960, -0.0187681690, -0.0266807675, -0.1117372513, 0.0051203370, -0.0168877468, 0.0312501006, -0.0327364504, 0.0386823826, -0.0116321556, -0.0842811987, -0.0098645315, -0.1125836819, -0.1561610103, 0.1298021972, 0.1045083255, 0.0810763240, -0.0171915498, 0.0076313121, -0.1031413972, 0.0313698463, -0.1200188696, -0.0641195104, 0.0501450114, -0.0165079441, 0.0433789529, -0.0365209728, -0.0324721225, -0.0327170417, -0.0234622117, -0.0549128391, -0.0069713490, 0.0064149201, 0.0335817635, 0.0604757778, -0.0159908831, -0.0354324989, 0.0552080944, -0.0907818899, 0.0523643270, 0.0176968277, -0.0985972583, 0.0328923650, -0.0397318900, -0.0277373753, 0.0818228051, 0.0119383633, 0.0620068982, 0.0809409842, -0.0650190562, -0.0294261314, -0.0991292819, 0.0362158343, 0.0680450648, 0.0447401367, 0.0010654954, 0.0126230456, -0.0114672957, -0.0013749088, 0.0106423963, 0.0304995626, 0.1443002522, -0.0277913734, -0.0808499083, -0.1286766529, -0.0532920957, -0.0632780269, 0.1233299673, -0.1000588685, -0.0568329245, 0.0275106989, -0.0938590914, 0.0063881390, 0.0187817272, 0.1010593623, 0.0100847743, 0.1235833839, 0.1019612551, 0.0884520710, -0.0302453469, 0.0589238182, -0.0532906838, -0.0205268096, 0.0154350661, -0.0180577636, -0.0439841002, 0.0307757147, -0.0152836125, -0.0014735616, -0.0586308613, 0.0473990813, -0.1303367019, -0.0487849414, -0.0079614632, -0.0149686206, 0.0716992542, -0.0533082746, 0.0219752230, 0.0524367988, 0.0000364371, 0.1048468873, 0.1593164802, 0.0120423399, -0.0221630856, -0.0583658144, 0.0404905491, -0.1259366125, 0.1920831501, 0.0486131012, -0.0627041087, 0.1079681441, 0.0385635681, 0.0292307101, -0.0546416901, -0.0234949198, 0.0314041004, 0.0652468354, -0.1129938290, -0.0172597989, -0.0882622302, 0.0282568615, 0.0579663552, -0.0312673077, 0.0229274239, -0.0242370330, -0.0552039146, 0.0982014537, -0.0174989086, 0.1762616932, -0.0361821800, -0.1070596874, 0.0126601495, -0.1457218975, -0.0361554697, -0.1565066576, -0.0130398199, -0.1038611680, 0.0607800856, 0.0856286883, -0.1015388072, 0.0104311109, 0.0544806719, -0.1036178693, 0.0846226662, -0.0352855325, -0.0234346837, -0.0483165197, -0.1667973399, 0.0562832355, 0.1040702909, -0.1104605794, -0.0374433398, -0.1345830262, -0.0222072955, -0.0229785517, -0.0265470855, -0.0502704382, -0.0755249634, 0.0878531709, 0.0046208799, -0.0335002132, -0.0610927418, 0.0311708935, 0.0203129873, 0.0006321743, 0.0399199724, -0.0353840142, 0.0755043328, -0.0443672650, -0.0594675839, 0.0028932597, -0.0117936106, 0.0822731927, -0.1105228662, 0.1790425479, -0.0583785772, 0.0593229719, 0.0404395536, -0.0130891856, -0.0042319167, 0.0341950059, -0.0125544760, -0.0996039286, -0.1091670990, -0.0031214561, 0.0231412165, 0.0657324493, -0.0464613363, 0.0002441704, 0.0486585982, 0.0316578075, 0.0772503316, -0.0484779552, 0.0158926472, -0.0259500723, -0.0468944460, -0.1237780675, 0.0478261411, 0.0177817158, -0.1308588535, 0.0134334099, -0.0212837234, 0.0214957446, 0.0085683968, 0.0408830456, 0.1397092193, -0.0577551313, -0.0238442495, -0.0533563532, 0.0459873565, -0.0387053639, 0.0376791619, -0.0628919601, -0.2006560564, -0.0448265448, 0.0815040767, -0.0694248825, 0.0732041150, 0.0021381006, -0.0546973348, 0.0973252058, -0.0473898835, 0.1109015718, -0.0933773741, 0.0520643406, -0.0119932303, -0.0009616092, -0.2408719063, -0.0569479801, -0.0308527350, -0.0786059424, -0.0714345798, -0.0173612610, -0.0127318660, 0.0286966078, -0.0025710724, 0.0424776450, 0.0615802854, 0.0686028376, 0.0529213175, -0.1111283675, -0.0819783509, 0.0443582051, 0.1159751341, 0.0456679165, 0.0309225973, 0.0740859658, 0.0041009123, -0.0399681702, 0.0555177145, 0.0045683864, -0.0892472714, 0.0085946945, -0.0264910292, -0.1358937174, 0.0612087026, 0.0185013209, -0.0485900678, -0.0099756904, -0.0844388455, -0.0682832971, -0.0429242887, -0.0785738230, 0.0526504666, -0.0918667316, -0.0485736579, -0.1367432028, 0.0205142498, -0.1378026009, 0.0023756139, -0.0679569840, 0.0458549708, -0.0256934091, 0.0455100462, 0.0309519246, -0.0556361452, -0.0838446543, 0.0696947575, 0.1913329810, 0.1374941170, -0.0401936434, -0.0436099395, 0.0362624787, -0.0261083394, -0.0238056164, 0.0741428733, 0.0297135562, -0.1260551363, -0.0475534275, 0.0379428230, -0.0050551509, 0.0959422886, -0.0204732046, 0.0594042800, 0.0658277199, 0.0727588534, 0.1570872068, -0.0415143371, -0.0818426311, -0.0639913678, 0.0059059411, -0.0193362758, -0.0502297692, 0.0848183930, 0.0285522547, -0.0796438307, -0.0287722759, 0.0514067337, -0.1338180006, -0.0035358642, 0.1016178206, 0.0171828419, 0.0133423097, 0.0089426301, 0.0116054956, 0.1488594711, 0.0181632992, 0.0225667655, 0.0292179026, -0.0012551975, 0.0380071290, 0.1202037185, -0.0021207137, 0.0751365423, -0.0365697555, -0.0347828791, 0.0263777841, 0.0465733558, -0.1397954971, -0.0286446791, -0.1216766015, -0.1582129598, 0.2014767677, -0.0194674022, 0.0147752520, 0.0289260950, 0.0534738488, -0.0245739333, 0.1399212629, 0.0123948138, -0.0925468877, 0.0786585063, 0.0673614144, -0.0936536342, -0.0301018916, 0.0515996143, -0.0581758320, 0.0943253487, -0.1145189181, 0.0710052475, -0.0790084973, -0.0209275167, 0.0238217488, 0.0047285557, 0.1300711185, -0.0063840612, 0.1173689514, 0.0063374639, 0.0234636217, 0.0622051880, -0.0355662853, -0.1197897941, -0.0970478952, 0.1277338713, -0.1435904950, 0.0664453357, 0.0126937255, 0.0082211271, 0.0788155571, 0.0142890699, -0.0533627570, 0.1021808535, 0.0309796557, -0.0570854582, -0.0866883099, -0.0430756770, 0.1133940816, -0.0683646873, -0.0233399346, -0.0159859806, -0.0107449312, 0.0041728914, -0.0888220593, -0.1457060874, -0.1043714285, 0.0543770269, 0.0461925119, -0.0158520378, -0.0441996269, -0.0255522206, -0.0082128085, 0.0035521658, 0.0021724571, -0.0619527511, -0.0273394715, 0.0766807571, -0.0373235717, -0.0122012496, -0.0372408777, 0.0927090049, -0.0549318977, 0.0263205357, -0.0876965374, 0.1428554803, -0.0515968949, -0.0468304455, -0.0198723022, 0.0266252831, -0.0458346084, 0.1068311930, 0.0901547745, -0.0734398067, 0.0753635019, 0.0181043670, -0.0546631925, 0.0295535829, -0.0981210545, 0.0197536312, 0.1005668566, -0.0166452732, -0.0689777210, -0.1710995436, -0.0502184965, 0.0102256415, 0.0292495675, -0.1165070757, 0.0481084622, 0.0555475913, -0.0121395728, 0.0315834433, -0.0157554373, -0.0473021828, -0.0069405437, 0.0053942106, 0.0391725190, 0.1132753491, 0.1074521691, 0.0641798452, 0.0091653615, 0.0367446654, -0.0833196267, 0.0051812418, -0.0155316889, 0.0230541341, -0.0133197447, 0.0256253108, -0.0901792347, -0.0203537364, 0.0356146470, -0.0675795674, -0.0918105617, 0.0167168435, 0.0097171720, -0.0113641601, -0.0031824559, 0.0143333124, 0.0262017213, -0.1146128550, 0.0557688251, -0.0507724918, 0.0736980960, 0.0407925509, -0.0389755554, -0.0395454466, -0.1127964184, 0.1099193990, -0.1114204973, 0.1840863824, -0.1017205268, -0.0354833268, -0.1354964077, 0.1139390022, 0.1289773285, 0.0429244861, 0.0088134035, 0.0031432202, 0.0339812934, -0.0526648611, -0.0295715127, 0.0154907443, -0.0317478850, 0.0151356086, -0.0414045677, -0.0250193439, 0.1599838436, 0.0970339775, -0.0104215303, 0.0756556541, 0.1083170474, 0.0293060467, 0.0526232533, -0.1112173498, 0.0128358845, 0.0729548037, 0.0334044099, -0.0858638063, -0.0085806306, -0.0814106688, -0.0346058868, -0.0857033432, 0.0061605554, 0.0996044800, -0.0647818372, -0.0520544574, -0.0655697063, 0.0213316437, -0.0088780997, -0.0843829960, 0.0155496020, -0.0426569134, -0.0258583780, 0.0448600613, 0.0043410398, -0.0847260728, -0.0561801568, 0.0349428318, 0.0303515811, -0.0488939174, 0.0044621760, -0.1202034205, 0.1466056854, 0.0534336939, -0.0123191038, -0.1364742965, -0.0943349972, 0.0319052674, 0.0830482319, -0.0692447722, 0.1150830314, -0.1130163595, 0.0684254766, 0.0681715310, 0.2067272961, 0.0364696085, -0.0646659583, 0.0356341489, -0.0033448264, 0.0805910900, -0.0310726017, 0.0983532444, -0.0288422983, 0.0849309191, -0.0443967655, 0.0706469566, -0.0597100183, 0.0609956644, 0.0811170265, 0.1478090435, -0.0249157324, 0.0969303548, -0.0212630443, 0.0611592382, 0.0787285566, -0.0271552242, 0.0687757656, 0.0421057008, 0.0560427606, -0.0191774368, 0.0786112323, 0.0829094946, 0.0609320924, -0.0243072957, 0.0664968491, 0.1401616782, -0.0554397628, -0.0467667691, -0.0861147270, 0.1835812181, -0.0590419024, 0.0410062484, 0.2051462084, -0.0238391533, -0.0475467406, -0.1138591319, -0.0336332135, -0.0307162832, 0.0635839328, 0.1195860803, -0.0253823772, 0.0745273754, -0.0118216993, -0.0061023189, 0.0457010418, -0.0099594668, 0.0552568063, -0.0541720800, 0.0258070864, -0.0235195793, -0.0524275638, 0.1057921052, 0.1442394555, 0.0700693801, 0.0300005693, 0.0116185695, 0.1440067440, 0.0441159718, 0.0503747277, -0.0550305583, 0.0399527699, 0.0173276234, -0.0051437719, -0.0154139521, -0.0357388668, -0.0527734794, -0.0277980231, -0.0283132363, -0.0016250927, 0.1216711625, 0.0660582855, 0.0616303384, 0.1052722037, 0.0883360952, -0.0303155258, 0.0410699844, -0.0033670655, 0.0694784299, -0.0031281337, -0.0550392196, 0.0471919030, 0.1082320213, 0.0365753621, 0.0930735692, 0.0987287834, 0.0793284029, -0.0165605284, 0.1254572272, 0.1136403531, 0.1170448512, 0.0895108506, -0.1557684839, -0.0938159302, -0.0140485670, 0.0292075090, -0.0129401470, 0.0056254398, 0.0713546798, 0.0767862350, -0.0294452421, 0.0321682021, 0.1224843264, -0.0653635934, -0.2303572595, 0.0177566148, 0.0089673335, -0.0793954656, -0.0063299164, 0.0416534059, 0.0523568615, -0.1292989254, -0.0439152196, 0.1222744957, 0.0114359781, 0.0112370960, -0.0821857005, 0.0422016010, -0.0769252256, -0.0154897310, 0.0214121938, 0.1847969890, -0.0551401228, -0.0228010211, -0.0251165405, 0.1095357239, 0.1246912777, -0.0718976483, 0.0625706911, -0.0122026410, 0.0017832145, 0.0122959651, -0.0982883722, 0.0706373826, 0.0777813941, 0.0907012373, 0.0146470610, -0.0716877133, -0.0438352823, -0.1365570873, -0.0271427520, -0.0065672230, -0.0483866669, -0.0207591355, 0.1124473363, 0.1322855949, 0.0246460065, 0.1059930474, -0.0873098150, -0.0292755533, -0.0128839426, -0.0977308974, 0.0219862461, 0.0568118840, 0.0926635116, 0.0427506194, 0.0878008604, -0.0870915502, -0.0547905378, -0.0402630940, -0.0523943081, 0.0816681981, 0.0137099028, -0.0529295765, -0.0715778843, 0.0763496086, -0.0723970905, -0.1419071853, -0.0555840358, -0.0286711231, -0.0260442924, -0.1925996691, -0.0945299342, -0.0109142885, 0.0010167733, -0.0597050339, 0.0239820555, -0.0042596385, -0.0463213176, 0.0531425849, 0.1178617403, 0.0035185814, -0.0262690224, 0.0868647620, -0.0739123449, 0.0311725251, 0.0122974031, -0.0250795763, 0.0855097398, -0.0219061878, -0.0850971341, -0.1108117625, -0.0616290271, -0.0340101197, -0.0111840181, 0.0593129732, -0.0352118164, 0.1296026409, 0.0819325373, -0.1168580428, -0.0613579750, -0.0043794904, -0.0334876627, -0.0421196558, 0.0053841248, -0.0377261601, 0.0723905712, 0.0483196862, 0.0735367835, -0.0470952950, -0.0772852078, -0.0300260093, 0.1220603213, -0.0015972499, 0.0651995391, -0.0809937343, 0.0058323443, -0.0843101814, -0.0728929788, 0.0934675410, 0.0001156479, -0.1129031330, 0.0185165759, 0.0367444009, -0.0192849860, 0.0995970219, -0.0390144512, 0.0498861820, 0.0112082846, -0.1245236993, 0.0677977726, 0.0425520167, -0.1335875094, 0.0027208664, 0.1231847256, -0.0277722701, 0.0016177334, -0.0474610999, 0.0467205420, -0.1018856838, -0.1007496566, -0.0717959628, -0.0844224840, -0.0481916070, 0.0655962825, -0.1042975932, -0.0669946373, -0.0307391509, -0.0687686950, 0.0076433802, 0.0006189831, 0.0319484286, -0.0480148569, -0.0457156710, -0.0459423214, 0.0738895163, -0.1024343148, 0.1193909943, 0.0510579683, -0.0489656962, 0.0791781247, -0.0330872163, -0.0245975405, -0.0097681461, 0.0438128114, 0.0760272890, 0.0444253609, 0.0583142228, 0.0275825039, -0.0065887198, 0.0326898806, -0.0449468568, 0.0095005529, -0.0345122814, 0.1403192729, 0.1003650650, 0.0205438025, -0.0554049201, 0.0211288575, 0.0139939096, -0.0915005133, 0.1496708542, -0.0334369093, -0.0341848806, 0.0060587651, 0.0186668932, -0.0260660984, -0.0068364614, -0.0223548003, 0.2116506100, 0.0537818931, -0.0086937491, -0.0069238544, -0.1339605600, 0.0023583621, -0.1266005486, -0.0483946204, 0.0101014487, 0.0076021291, 0.0924968719, 0.0609991066, 0.0229315348, -0.0069649331, -0.0928435698, -0.1351809502, -0.0390755348, -0.0324044041, 0.0232245717, 0.0472885855, -0.0646938905, 0.0992576480, 0.0522333086, -0.0430636629, -0.0742292702, 0.0678732544, -0.0628190786, -0.1603261530, 0.1210504174, 0.0690700263, 0.0978109911, -0.0059006717, 0.0284565464, 0.0359384716, -0.0632800832, -0.0452464968, 0.0190565679, -0.0574859083, -0.1062334254, -0.0084187109, 0.0007412896, 0.0112281255, -0.1088819429, -0.0278107971, -0.0633407086, -0.0846186802, -0.0597315505, -0.0557282344, -0.0295533091, 0.0173174608, 0.0155189447, -0.0019618170, -0.0059677027, 0.0163306128, -0.0271493383, -0.1047515720, 0.0781572461, 0.0498260409, -0.1241121888, -0.0107781999, -0.0844759718, 0.0345323309, 0.0969651937, 0.1467739642, -0.1392385066, 0.0444128141, 0.1059447378, 0.0189362466, 0.0612873584, -0.0635710433, -0.0107286554, -0.0356263034, 0.0025175679, -0.0341125913, 0.0673957318, 0.0319846235, 0.0059229508, -0.0602127239, 0.0900549144, -0.1069704071, 0.0887756050, -0.0260473005, -0.0356757790, 0.0771114826, 0.0964240655, -0.0681502074, 0.0680311918, -0.0861427560, 0.0768786967, -0.0805730671, -0.0267311893, 0.0728438869, -0.0758555233, 0.0952955410, 0.0295420773, -0.0251225382, 0.0695365518, 0.1286807805, -0.0759966373, 0.0754347146, 0.1201630980, -0.1702384949, 0.0324910656, -0.1267063618, -0.1000177711, 0.0590732396, -0.0451954901, -0.0682629794, -0.0030431412, 0.0159973837, -0.0369909145, -0.0882767439, 0.0358175561, 0.0128113180, -0.0408902243, -0.0478106998, -0.0886718929, 0.0041560754, 0.0085554868, -0.0488376170, 0.0051119933, -0.1459538192, -0.0099788923, 0.0389207229, 0.0500421748, 0.0323229358, 0.0276245624, 0.0739609450, 0.0232672803, 0.0017160550, -0.0125398971, 0.2171390057, -0.0913919508, 0.0530200675, 0.0693456382, -0.0394476354, -0.0501391292, -0.0414434485, -0.0109267626, 0.0756153911, 0.0879162550, -0.0519374758, 0.0756000653, 0.1369663179, -0.0349457636, -0.1153092682, -0.0726914331, -0.0750287846, -0.0086273914, 0.0029273294, 0.0188510213, 0.1021057442, -0.0458797589, -0.0480112620, -0.0869754404, -0.0343117602, 0.0537804402, 0.0471305475, -0.0391434841, -0.1533682346, 0.0236558784, 0.0189385079, -0.0186596103, 0.0485806167, 0.0883527771, 0.0807928145, 0.0784297213, 0.0808876157, 0.0740811080, -0.0035387464, 0.0988499820, -0.0326916277, 0.1450372487, 0.0408618823, -0.0000031069, -0.0655010790, 0.0065303436, -0.0375550874, -0.0341852643, -0.0367692597, -0.0795828402, -0.1529339105, -0.0606895313, 0.0400801189, 0.0125600295, 0.0388606489, -0.1051043868, -0.0823355615, -0.0144819682, 0.0162727460, -0.0152154975, -0.2381171435, 0.0099230986, -0.0405307934, -0.0377682485, 0.1081242114, -0.0637340471, -0.1044171378, -0.0829434991, -0.0877676532, 0.0284751989, 0.0361366794, 0.1262756586, -0.1204169467, 0.0694714338, -0.0264477283, -0.0076477509, 0.0492198765, 0.1158536375, -0.0539121330, 0.1140692160, 0.0199258290, -0.0267966073, -0.0086285817, -0.0049238484, -0.0914253443, -0.0002421644, -0.1461444199, 0.0522535406, 0.1241065785, -0.0032997981, 0.0326486975, -0.0457619205, 0.0060149617, -0.0069743786, 0.0326080769, 0.0962707698, 0.0077051222, -0.0131907482, -0.0345741659, -0.0555936396, 0.1054111123, 0.0825969204, -0.0535294041, 0.0210232995, -0.0005204733, -0.1402153373, -0.0927859768, -0.0861780867, -0.0018877219, -0.0409561507, -0.0247744564, 0.1408064812, 0.0968303233, 0.0001222491, -0.0660927519, 0.0189281348, 0.0046591051, -0.0703293979, 0.0925609767, 0.0270933285, 0.0777461082, -0.0249659065, -0.0661329031, -0.1003039926, 0.0644877180, -0.0231432877, -0.0259362608, -0.0276091807, -0.0225209743, -0.1093116254, -0.0433107391, 0.0304679852, -0.0254950784, 0.0032824315, 0.0366890319, -0.0670143217, -0.0210552551, 0.0442043617, -0.0643735975, -0.0118750520, -0.0219085142, 0.0237831511, -0.1306914836, -0.1001079530, -0.0426782109, 0.0233586356, 0.0679594725, -0.0177467763, -0.1098078117, 0.1068353951, 0.0128587335, 0.0459238365, -0.0354026929, 0.0175494514, 0.0207513198, -0.0078125130, -0.1001876742, -0.0187806375, 0.0045976667, -0.1289944649, -0.0246413238, -0.0501869917, -0.0978045389, 0.0044179889, -0.0090849316, 0.1984637231, -0.0041399542, -0.0094053233, -0.0584233403, -0.0130308028, -0.0171165541, 0.0136295538, 0.0904466808, 0.0535890013, -0.0306115132, -0.1566439569, -0.0789471567, 0.0064053945, 0.0971602798, -0.0065594856, -0.0126128718, 0.0119052222, -0.0310458373, 0.0113930423, 0.0265768394, 0.0642483607, 0.0472346842, -0.0555724427, -0.0616685152, -0.0895786807, -0.1028879732, 0.0495598987, 0.0813269988, 0.0288544651, -0.0633969381, 0.0828657299, -0.0134858517, 0.1094691530, -0.0281499363, 0.2946588099, -0.0600714870, -0.0741346180, -0.0998343155, -0.0326110721, -0.0629992187, 0.0660115182, -0.0353731997, 0.1181156710, -0.0517288744, 0.0370643325, 0.1136721522, -0.1113073304, -0.0218838304, -0.0289608054, 0.0067760013, -0.0323070250, -0.0320166387, 0.0447740220, -0.0232890118, 0.0156457890, 0.0722613782, 0.0346169993, 0.0771936029, 0.0049126707, -0.0889991745, -0.0614573695, 0.0717587546, -0.0256294888, -0.1043155342, -0.0723464042, 0.0603467226, 0.0226338655, -0.0496776253, -0.1570173800, -0.0342980810, 0.0974394679, -0.1467420906, -0.1346539557, -0.0196729638, 0.0288065895, 0.0142952185, -0.0028401911, -0.1069912016, 0.0455611534, -0.0297566894, 0.1221554279, 0.0761171430, -0.0496934056, 0.0519230813, 0.0689400584, -0.0140044577, 0.0634010658, -0.0247836374, 0.0543767326, -0.0498515815, -0.0007663919, 0.0217543226, 0.0281161889, 0.0480653755, -0.0552941784, 0.0476027280, 0.0665307119, 0.1821832955, 0.0641153306, 0.0420402437, -0.0663890168, 0.0818460509, 0.0582589880, -0.0199211817, -0.0179068185, -0.0250290819, 0.0711110011, 0.0497881882, -0.0181687586, -0.1186434254, 0.0284858942, 0.0864911973, 0.0070185778, -0.0430234671, 0.0303796381, 0.0480045117, -0.1037262678, 0.1402389407, 0.1613722444, 0.0555453487, -0.0733386874, -0.0044035059, -0.0753954947, 0.0493699200, -0.0524155088, -0.0804797709, -0.1046857908, 0.0320720337, -0.1260359883, 0.0295572765, -0.0647404492, -0.0209044237, 0.0844260454, 0.0516384505, -0.0039489679, -0.1839850992, 0.0962901413, -0.0468771420, 0.0494982153, -0.0343336277, -0.0806523114, -0.0137990247, 0.1123578846, 0.0688797235, -0.0580314659, -0.0879899114, -0.0002012569, -0.0199721511, 0.0309687108, -0.0258887038, 0.0930192247, 0.0107803149, 0.1371837258, 0.0919853002, 0.0313679725, -0.0907368064, 0.0107974755, 0.0516967326, 0.0440233722, -0.0654934123, 0.0165120922, -0.0431744047, -0.0815369189, 0.0855470747, -0.1775781363, -0.1064288840, 0.0162333585, -0.0297805630, -0.0176197141, -0.1620202512, 0.0125848427, -0.0086163031, -0.0237500146, 0.0628587604, -0.0688789412, -0.0701457784, -0.0881990790, 0.0713790432, -0.1332114786, -0.0172566250, 0.0719080865, 0.0003278956, -0.0085515352, 0.0568054765, -0.0708488449, 0.0504433475, -0.0033495231, 0.0311420299, -0.0381105356, 0.0335051119, 0.0186503157, -0.0633785874, -0.0583288148, -0.0213831533, -0.0642214566, 0.0257707313, 0.0124011673, 0.0612077899, -0.0362482294, 0.0187359825, 0.0069548460, 0.0544436723, 0.0597194210, 0.0427975692, 0.0871164352, 0.0337148011, 0.0035760980, -0.1394005567, 0.0135243190, -0.0609737039, 0.1010193527, 0.0442423709, 0.1528026760, -0.1362774968, -0.0584347248, -0.1091910154, 0.0012985375, 0.0124943200, 0.1077950150, -0.0731717795, -0.0866803750, 0.0345002860, 0.1517371535, -0.0443974286, 0.0324184485, 0.0143930018, 0.0241246969, -0.0043937284, -0.0759073794, 0.0797989815, 0.0781133249, 0.0605490133, -0.0289658159, 0.0108484402, -0.0078918925, 0.1044031382, 0.0804387629, -0.0938954502, -0.0472682640, -0.0956088081, 0.0539852157, 0.0217991211, -0.0259154141, -0.0698338747, -0.0823677108, -0.0114660636, 0.1267023385, -0.0750562176, 0.0434084237, -0.0065246029, 0.0176609978, 0.0692260712, 0.0419524461, -0.0876070634, -0.0081943972, -0.0675423220, -0.0659096390, 0.1122445539, -0.1204710901, 0.0265190154, -0.0016313195, -0.1681359112, -0.0443210676, -0.1221453995, 0.1123995334, -0.1370606422, -0.0613995194, -0.1167994887, 0.0808776170, -0.0452559181, -0.0212281644, -0.0046667019, 0.0324286260, -0.0085428143, -0.1596239507, 0.0640014112, -0.0655179396, -0.0057964982, -0.0950206891, -0.0706819668, -0.0882466212, -0.0666794553, -0.0866379142, 0.1133057699, -0.0129889883, -0.0145627586, 0.1040117294, 0.0776595548, -0.0815912336, -0.0036235508, 0.2640924156, -0.0634855777, -0.0068814084, 0.0214677472, -0.0279475935, -0.0011689630, -0.1383988559, 0.0757990256, 0.0498432182, -0.0831130743, -0.1111046970, -0.0786300227, 0.0042865444, -0.1286176741, 0.0173090920, 0.1326202303, -0.0390671305, -0.0759616792, -0.0712247267, -0.0568877980, -0.0626543164, 0.1038819104, -0.0027939470, -0.1056626439, 0.0598930866, 0.0485172421, 0.0015217662, 0.0197979156, -0.0876652226, 0.1026349440, -0.0923893750, -0.0202053897, -0.0694173574, -0.0352855548, -0.0369979478, 0.0453843996, -0.1346645653, 0.0186482295, -0.0121843368, 0.0349187553, -0.0395918190, 0.1291129440, 0.0194968227, 0.0154024391, -0.0568793863, 0.0715525374, -0.0344968960, 0.0071622469, -0.0482338481, 0.0243569203, 0.1058483347, -0.0789800882, 0.0191048663, 0.0541143753, -0.0116981938, 0.1318401843, 0.0713970587, 0.0707379356, -0.0037139580, 0.1081733555, -0.0905968547, -0.0468766913, 0.0180495493, 0.0093796551, -0.0757325888, -0.0350821540, 0.0567634329, -0.0017279461, -0.0976330489, 0.0435391814, -0.0573634654, 0.0579459108, 0.1055742428, 0.0036637448, 0.0109947696, 0.0549972020, -0.0440106429, 0.0449468493, 0.0948884562, 0.0113898367, 0.0383370146, 0.0210632905, 0.1414454430, -0.0355331972, -0.0373441502, 0.1150425375, 0.0820683017, 0.0263658427, -0.0908243358, -0.0823774114, 0.0053705089, 0.0359108858, -0.1417308599, -0.0218945425, -0.0063133035, 0.0379092097, -0.0971734375, 0.0063371677, -0.0599719696, 0.0351854339, -0.0550887547, -0.0402118154, -0.0112132430, 0.0025615077, -0.0336789191, 0.0072026234, -0.0331925005, -0.0605385453, 0.0018412776, 0.1158418655, -0.0023070276, -0.0645466819, 0.1489265263, 0.0165071990, -0.0465896428, -0.0421565138, -0.0694807768, 0.0909756273, 0.0745126456, 0.0637366623, -0.0293289237, 0.0878806710, -0.0246915929, 0.0976865292, -0.0841621757, -0.1079605594, 0.0315007828, 0.1908640265, -0.0047086067, 0.0393989384, 0.1243738607, -0.0710530132, -0.0827303305, -0.0240691453, 0.0217409171, -0.0067249853, 0.0907599777, 0.0549378544, 0.0426840335, 0.0214238912, 0.0235153288, -0.0727916434, 0.0728890970, -0.0712906793, 0.0294259321, 0.0979641974, 0.0865269676, -0.0254144110, 0.0227365494, -0.1185607091, -0.0652550757, -0.1374841630, 0.0201854520, 0.0406622626, 0.0489543974, 0.0216496456, 0.0228548478, 0.0599212050, 0.0811567456, -0.0113179833, -0.0101686344, -0.1038070172, -0.0944061652, -0.1032999456, 0.0790236667, 0.0079960870, 0.1475046575, 0.0018034764, 0.0988409668, -0.0505401418, -0.0051585175, 0.1277496368, -0.0610507652, 0.0053357570, 0.1011038348, 0.0441074222, 0.0999951810, 0.0102460627, 0.1362835914, 0.0952678323, -0.0741197839, -0.0305836145, -0.0412150696, -0.0974755585, -0.1288470328, 0.0222017020, 0.0529549494, -0.0473173074, -0.0064396169, 0.0030358434, 0.0775542110, 0.0271502379, -0.0427048840, 0.0478496403, 0.1665263325, 0.0169473849, -0.0495662056, 0.0352464020, 0.0250144545, -0.1027746573, -0.1237705052, -0.0916353464, 0.0112119727, -0.0083157681, 0.0799109489, -0.1152604371, 0.0780601576, -0.0391030014, 0.0558229052, -0.0654188767, 0.0110124610, 0.0221095681, 0.1029515117, -0.0704929233, 0.0829258040, 0.0135628907, 0.1276498884, 0.0070000198, 0.0038160533, 0.0539798699, -0.0748430640, -0.0176676251, 0.0046146885, -0.0463393778, 0.0219526067, -0.0951198861, -0.0070330845, -0.0350475609, 0.1114818975, -0.0747057125, 0.1160867512, 0.0898927897, -0.0743875206, 0.0368309319, 0.0292264558, 0.0459057204, -0.0971339643, -0.0757698342, 0.0075503411, -0.0187149122, 0.0446240641, 0.0917592794, -0.1159701571, -0.0179406554, -0.0578576960, -0.0230013132, -0.0234704725, 0.1177061945, -0.0954045802, 0.0922625661, 0.0591502413, 0.0008602571, 0.0294682384, 0.0091950558, -0.1284541488, 0.0584382191, -0.0999817327, 0.0380025692, 0.0511964969, 0.0219414756, 0.1121021733, 0.1173398867, -0.1618148386, 0.0778798908, -0.1112486124, -0.0959665701, 0.0771864429, -0.1152567044, 0.0214026719, 0.0424395725, -0.0339448825, -0.0633408725, 0.0876641870, 0.0071242247, 0.0487126708, 0.0393759161, 0.1026707590, -0.0285843238, -0.0019494058, -0.0172694102, 0.0915820524, 0.0184554569, 0.1257169396, -0.0383253470, 0.1257815063, 0.1113806367, -0.0515190959, 0.0040337592, 0.0872187540, -0.0915054679, 0.0453306176, 0.0550932474, 0.0170381106, -0.0587880723, -0.0185915101, -0.0082112206, -0.0796313807, -0.0493070073, 0.0020740218, -0.0076113865, 0.0164975822, -0.0338693969, 0.1372501701, -0.0765470192, 0.1690923721, 0.0024582706, -0.0441220477, 0.0008788072, 0.0191276390, 0.0173557252, -0.0016199760, -0.1173063591, 0.0460086428, -0.0851448998, -0.0386840031, -0.0084599406, 0.0070923180, -0.0594728105, 0.0154441819, 0.0362710878, -0.0306256451, -0.0549985766, -0.0713288337, -0.0323775709, 0.0294701867, -0.1545088291, -0.0616148971, 0.1055625230, 0.0540918149, -0.0307213254, 0.0669733360, -0.1739659011, -0.0991544276, 0.0640810728, -0.0303090028, -0.0618869737, -0.0459506586, 0.0602648966, -0.0113330185, 0.0708622634, -0.0077991635, -0.0081394315, -0.0977392122, -0.1327508688, 0.0141515005, -0.0115528442, 0.1840226650, 0.0176362731, -0.0926732868, -0.0269249957, 0.0466834903, -0.0304793883, -0.1107516736, -0.0371427909, 0.1011420935, -0.1036779955, 0.0133088827, -0.1282738149, -0.0402908027, -0.0900990367, -0.0192615017, 0.0527571663, -0.0040435735, 0.0638473704, 0.0269138254, 0.0418189652, 0.0818596557, -0.0156097449, 0.0355139337, -0.0939540416, 0.0013800655, -0.1017091647, 0.0303238127, -0.0996694565, -0.0531761125, -0.0343731530, 0.0853013471, 0.0286241639, -0.0917626247, -0.1795757115, 0.0476272702, 0.0827458054, -0.0965566933, -0.0251154527, 0.0516350828, -0.0091028148, -0.0307630077, 0.0559487566, -0.0081865452, -0.0146715306, -0.0074130022, -0.0563724115, 0.0098462757, -0.0175725482, -0.0535190403, 0.0102220252, 0.0587040335, -0.1202444881, -0.0265741646, 0.1035832539, -0.1265791655, 0.0698874220, -0.0140195955, -0.0790321901, 0.0426158495, -0.0740828738, 0.0277258027, 0.0363839194, -0.0519461446, -0.0828388929, 0.1193085238, -0.0324449614, -0.0074406005, 0.0583590679, -0.0795724392, -0.0058796238, 0.1094251722, -0.1268257499, 0.0287388563, -0.0381123982, -0.0084474795, 0.0437338427, 0.0145878904, -0.0614853986, 0.0639082864, -0.0574110150, -0.0824556202, -0.0115004070, 0.0541984737, -0.1716108322, -0.0690281838, 0.0067138518, -0.1576033831, -0.0630515814, -0.0095942635, 0.0541801117, 0.1042823344, 0.0152227376, -0.0462548174, 0.0714792013, -0.0575292446, 0.0757387877, -0.0450675674, -0.0985236838, -0.0191290267, -0.1020997316, -0.0867071375, 0.0175600760, -0.1216463074, 0.1444903761, 0.0377009660, -0.0613943748, 0.0508254617, 0.0046644947, 0.1380183250, -0.0729235709, -0.0204063766, 0.0553107597, 0.0628475770, 0.0548529252, 0.0441784784, 0.1276177168, -0.0068754582, 0.2153955847, -0.0706693977, 0.0201080367, -0.0261289496, -0.0783341378, -0.1535960734, 0.0212922618, 0.1228991821, 0.0499415807, 0.0573613644, -0.0218846053, -0.0832581371, -0.0554938726, 0.0605121851, 0.0992463827, -0.0691372007, 0.0436315052, -0.0025813896, 0.0689835176, 0.0163769629, -0.0398493335, -0.0677970275, -0.0595396385, -0.0305830091, 0.0443506651, 0.0068498328, 0.1121197715, 0.0302382782, -0.0098018683, -0.0884615034, -0.0101478100, 0.0123138987, 0.0699625984, -0.0121422019, 0.0143470168, -0.0958542228, -0.1089893430, -0.0139244981, -0.0533748940, -0.0052942000, 0.0363066122, 0.0907269120, -0.1006715000, 0.0175354462, -0.0105991382, 0.0774996653, 0.0458683521, -0.0535652190, 0.0101240352, 0.0877073258, -0.1308071315, -0.0930489749, 0.0368500277, -0.1059259400, -0.0851666629, 0.0028203512, 0.0070749950, 0.0024343894, 0.0343431532, -0.0717250332, 0.0120297000, 0.0515832752, 0.0881558806, -0.0909307450, -0.0461867899, -0.0543730259, 0.0391725972, -0.0813250169, 0.1745709181, 0.1247767508, -0.0075413641, -0.0978001207, -0.0169155225, 0.0343500078, -0.0167536736, 0.0906774253, -0.1260187030, 0.0538511723, -0.0599906184, -0.0409262106, -0.0304141752, 0.0716932490, -0.0097474465, 0.0432421416, 0.1003070772, 0.0589110628, 0.1588654667, -0.1219614148, 0.0218703281, 0.1372509450, -0.0249290541, -0.0123342015, 0.0400021933, 0.0146468813, -0.0415039361, 0.0150628174, 0.0215979591, -0.1560515016, 0.0001216750, -0.1087556109, 0.0072105182, 0.0565745123, -0.1083581746, -0.0720501170, 0.1218158528, -0.0045074299, -0.1413282305, -0.0695730150, -0.1126750782, 0.1041465104, -0.0939189270, 0.1406883299, -0.0570683405, -0.0312155373, 0.1216392964, 0.0949047208, 0.0852961838, 0.1842774153, -0.0064137429, 0.0548377894, -0.0290845148, 0.0436748154, -0.0403600708, 0.0502978340, 0.0398494452, -0.0660652369, -0.0489436984, -0.0234382283, -0.2221780270, -0.0292177070, -0.0481940731, 0.0352843478, -0.0556186400, 0.0157208554, 0.1127573103, -0.0095907971, 0.0833432451, 0.0905469358, -0.0058559738, -0.0013100803, -0.0531682707, 0.0089291520, -0.0770306736, -0.0409929901, 0.0571951382, 0.0396211594, -0.0353645906, -0.0762355253, 0.1606835872, 0.0399766378, -0.0281796083, -0.1997706443, -0.0052011721, 0.0375400223, -0.0433268659, -0.0891491175, 0.0611004159, -0.0114815217, 0.0368058309, 0.0799037889, -0.1356934309, 0.0049273567, -0.0201485530, -0.0007649064, 0.0315008797, 0.0368930027, -0.1351322681, -0.0685234815, -0.0025613196, -0.0152202621, -0.0529351942, 0.1002097204, -0.0052734921, 0.1051693857, 0.0974677131, -0.1054180115, -0.0610214137, -0.0503876098, -0.0422344506, -0.1677692235, -0.0584571697, -0.0476695113, -0.1354605407, -0.0545365773, -0.0277684405, 0.0331179351, 0.1131473854, -0.0629102215, 0.0052745696, -0.0046338551, 0.0092489086, -0.0489160642, 0.1048624814, 0.0609583221, 0.0180345252, -0.0062779039, -0.0048214253, 0.1445268244, -0.0316292979, 0.1389907300, 0.0383700877, 0.0627390668, -0.1469938755, -0.0125767495, 0.0502400473, -0.0406229943, 0.0457435697, -0.1029812023, 0.0991041362, 0.0099916309, 0.0154983588, -0.0807164013, 0.0436414182, -0.0727336109, -0.0657882169, 0.0092347134, 0.0202937108, -0.0923127681, 0.0171782747, 0.0027193576, -0.0338012092, 0.0521545261, -0.0830185786, 0.0600442067, -0.0097399661, 0.0118363807, 0.0853422880, -0.0111665744, 0.0157216378, 0.0543882847, 0.0653076246, 0.0931284651, 0.0989172757, 0.0388405658, -0.0168574788, -0.0980624035, 0.0321085416, 0.0236477442, -0.1459183693, 0.0376209095, -0.0103375399, 0.0174606442, 0.0128801074, 0.1084438562, -0.0235346258, 0.0919067264, -0.0315905474, 0.0047696768, 0.0050950265, -0.0926930755, 0.0280923434, -0.0641571954, 0.1074378416, -0.0171426740, -0.0028126482, 0.0287220217, -0.0238619447, -0.0351988189, 0.0730249435, 0.0584645309, 0.0063925385, 0.0558712333, 0.0838753730, -0.0073943529, 0.0181342810, 0.0467185676, -0.0571811013, -0.0058359499, 0.1421170831, 0.0518807061, -0.0969309285, -0.0072328448, -0.0663849041, -0.0290260054, -0.0442068540, 0.0218894705, -0.0187651310, 0.0549375266, -0.0683008283, -0.1101954654, 0.0999527723, -0.0174982641, -0.0229345877, 0.0303725004, 0.1435143948, -0.0408686362, -0.0070193377, -0.0846218914, 0.0014051697, 0.0379190594, 0.0011133780, 0.0240169093, 0.1034325212, -0.0307098553, -0.0323096439, -0.0925656781, -0.0232336707, -0.0778100491, -0.0496682972, -0.0234100688, -0.0201964900, -0.0362543687, 0.0262194350, 0.0332608968, -0.0401259959, 0.0591123812, -0.0246337876, -0.0027679354, 0.0520889908, -0.0672957078, 0.0124110710, 0.0185646769, 0.0055462769, 0.0868734866, -0.1613655835, 0.1234214008, 0.1164064854, 0.0589395687, -0.0294295941, -0.0505549014, 0.0618960448, 0.0252160914, -0.0589767732, -0.0218420420, 0.0791103318, 0.0598170944, 0.0110621862, -0.0107997507, 0.0144482190, 0.0074409861, -0.0289609954, 0.0318480544, -0.0755322874, -0.1422931254, 0.0128557961, 0.1671366245, 0.0377669707, -0.1262147576, 0.0801431686, 0.0404676311, -0.0718459561, 0.0576571710, -0.0454970822, 0.0331878178, -0.0595081225, -0.0061962102, 0.0228028148, 0.0822434723, 0.0314593948, 0.0103757624, 0.0263422504, -0.0705689266, -0.0996466428, -0.0842677206, -0.0309350267, 0.1348352432, -0.0227772817, -0.0155175477, 0.0051002884, 0.0335382298, 0.0273816697, 0.1337496042, -0.0895933509, -0.0597035326, 0.0047257394, -0.0233801343, -0.0465102792, -0.1614561230, -0.0610695817, 0.0214625318, 0.0898279026, 0.0176165793, 0.1615642309, 0.0680074543, -0.0594233796, 0.0500769466, -0.0090081394, 0.0425419398, -0.0123609863, 0.0827699676, -0.0747764260, 0.0450593270, -0.0169674139, 0.0537774637, -0.1856840551, -0.0554812662, 0.1034829468, -0.1548289806, -0.0465613306, 0.0197057091, -0.0225611869, -0.0603235587, -0.0671770126, 0.0819952562, -0.0728312582, -0.0023438307, 0.0206393898, -0.0646952167, 0.0114630125, 0.0422804020, -0.0803653970, -0.0307703428, -0.0043672021, -0.1873136312, 0.0366939120, -0.0028339885, 0.0684191510, 0.0851857066, 0.1807720810, 0.0523753166, 0.0703606009, 0.0714991540, -0.1662670821, -0.0568471774, 0.0062835794, -0.0451275110, -0.0250662640, -0.0608354807, 0.0744707510, 0.0844836682, -0.0695822909, 0.0356299840, 0.0251230206, -0.0397402868, -0.0029858924, 0.0969097018, -0.1969449073, 0.0079569165, -0.0645133406, 0.0175544322, -0.0754936486, -0.0781586990, 0.0780758485, 0.0466393232, -0.0734178275, -0.0327216573, -0.0880162343, 0.0052574133, 0.1567220986, 0.0240656193, -0.0356355235, -0.0689072460, 0.0518664233, 0.0118316906, -0.0831771940, -0.0458886772, -0.1488515437, 0.1127831489, 0.0161500536, 0.0322351456, 0.0362009145, 0.0099481437, -0.0462096594, -0.0642926842, 0.0606021695, -0.0130134132, 0.0413207076, 0.1248201132, -0.0233818665, 0.0731126219, 0.0450172871, -0.0110755907, -0.0224111006, -0.0106596276, 0.0775932074, 0.0722922087, -0.1514098197, -0.0101315491, 0.0067006312, -0.0474365130, 0.0931247398, -0.1706905216, 0.0993524343, 0.0513036624, 0.1044067815, -0.1115494967, 0.0306933317, 0.0224816799, -0.0981996879, 0.0374952070, 0.0687158629, -0.0041004927, -0.0444054380, 0.0247581527, 0.0833342075, 0.0389854610, -0.0010521663, 0.0283707045, -0.0120149422, 0.0321385972, -0.1362832338, -0.0775552765, -0.0790302753, -0.0647718683, 0.0051451596, 0.0097938692, -0.0222105794, -0.0177536383, -0.0049405047, 0.1529257149, 0.0980721712, 0.0182293579, 0.1889919192, -0.0632895231, 0.0359362774, 0.1017096490, 0.0587047301, 0.0023257555, -0.1017669514, -0.0853242278, -0.0974042267, 0.0486628041, 0.0220679212, -0.0316372216, -0.0322684646, 0.0272562057, 0.0795482397, 0.0626400709, 0.0190801136, 0.0610020645, -0.0394384302, -0.1377924979, 0.0691503584, -0.0530289747, 0.0271542352, -0.0134028681, 0.0189391393, -0.0442336500, -0.0017547309, -0.0065697916, 0.1163347363, 0.1124110743, 0.0339496285, -0.0513897017, 0.1188714206, -0.0572858788, 0.0598213375, -0.0818585008, 0.0280639604, 0.0993125737, -0.0574527830, -0.0616192371, 0.0422428474, -0.1133515313, 0.0321815722, -0.0641999766, 0.0233819224, 0.0137711465, -0.1172832772, 0.1084188968, 0.0284993220, 0.0022985637, -0.0640431568, -0.0479515195, -0.0367471427, 0.0934267044, 0.0764206946, -0.0495530963, 0.0490474887, 0.0607392155, 0.0781722516, 0.0582449287, 0.0910236239, 0.0440015793, -0.0169802625, -0.0006392822, 0.0298350640, -0.0648247078, 0.1274645776, -0.1767233759, -0.0310450699, -0.0433485880, -0.0633979440, 0.0427555405, -0.0291106552, 0.0194531865, 0.0735215917, 0.0727292895, -0.0515337437, -0.1129108295, 0.0250535421, -0.0773486272, -0.0517880917, -0.0144297406, -0.0165460147, -0.0153488265, -0.0893438309, -0.2044919580, -0.0009237006, 0.0146154799, 0.0732392520, 0.0153394155, 0.0297680143, 0.0814000070, -0.0654264987, 0.1140538603, 0.0409904756, -0.0929196775, 0.0863761380, 0.0132669862, 0.0361146070, 0.0142740896, 0.1905822456, -0.0176035278, -0.0700863674, -0.0224361215, -0.0208486859, 0.0339097343, -0.0784420818, 0.0101640280, -0.0597220808, -0.0160919428, -0.0125945881, -0.0264476705, 0.1949657798, -0.0211562142, 0.1560678482, 0.1329297423, 0.0571958236, -0.0245390497, 0.0044936482, -0.0365148969, 0.0623053983, 0.0067932159, -0.0934680849, 0.0366425589, 0.0159098655, 0.0008285046, 0.0073733339, 0.0417131633, -0.0075853877, 0.0060765427, -0.0745455101, -0.0072852653, 0.0825154483, -0.0521718301, -0.0577404387, -0.0390241668, -0.0860119835, -0.0522181839, -0.0312500782, -0.0175662488, -0.0551222339, -0.0667153373, -0.0897768289, 0.0669757053, 0.0799166113, -0.0452122800, 0.1561284363, -0.0037469864, -0.0889603719, -0.0336386673, -0.0140574072, -0.2169213891, -0.0108683649, 0.1411156952, 0.0072582699, 0.0386696458, -0.0089820139, 0.1123650819, 0.0506203026, 0.0186446682, -0.0960310996, 0.1441750079, -0.0136410967, 0.1584451497, -0.0276243873, -0.0578242429, -0.0530586988, -0.0461357757, -0.0233300589, 0.1908754408, -0.0078678988, -0.0239373911, 0.0348419212, 0.0377550423, -0.0555893183, 0.0281388871, -0.0460251570, 0.0485429093, -0.0010877592, -0.1322556138, -0.0355596319, -0.0079778656, 0.0204829872, -0.0886421874, 0.0539379567, -0.0259255394, 0.1131304651, 0.0558707081, 0.0627666861, 0.0033770613, -0.0441413224, 0.0937709436, -0.1099568829, 0.0138984136, -0.0958844572, 0.0365929529, 0.0709780306, 0.0073332619, 0.0196604654, 0.1328942329, 0.1525764614, 0.1353932768, 0.0383895189, 0.1132951379, 0.0386831388, 0.0542716756, -0.1888729036, -0.0531174131, -0.0307962969, 0.0725686178, 0.0621894673, 0.0136925522, 0.0267555155, -0.0402067602, 0.0869331658, -0.0734845325, -0.0194999017, -0.0514128171, 0.0262889750, 0.0334031694, -0.0622231215, -0.0353424735, 0.0243268404, 0.1593238413, 0.0551395826, 0.1005324721, 0.0515417159, 0.0347742029, 0.0829693154, -0.0677574426, 0.0290796347, 0.0794468969, 0.0350755341, -0.0038839709, -0.0643839464, 0.0656046197, 0.0557054169, 0.0654826090, -0.0535023510, -0.0723118708, -0.0106199104, 0.0197882205, -0.0612245873, -0.0294357687, -0.0732895136, 0.0763979480, 0.0664808378, -0.0802674294, -0.1276323497, 0.0556826852, -0.0251777992, 0.0964379534, -0.0152919963, -0.0012330655, 0.1234208047, 0.0441520885, -0.0689927638, 0.0303761400, -0.0954737365, -0.0295181889, 0.0705778748, 0.1117581204, 0.1183176339, -0.0258772653, 0.0409745350, -0.0700956136, 0.0012209420, -0.0109064784, -0.0229318850, 0.0027739499, 0.0912682116, -0.0283748545, -0.1863659322, -0.0010287296, -0.0157959945, -0.0617480651, 0.0701547936, -0.0498641394, 0.0766761377, -0.1250439584, 0.0512731001, -0.0057358947, 0.1713574529, 0.0839575231, -0.0515322313, -0.1850907803, 0.0124102458, -0.0371646211, -0.0743366480, -0.0558790416, -0.0089788809, 0.0576374941, -0.0003394745, -0.0681035146, -0.0519940592, 0.0029663071, -0.0251660235, 0.0098705953, -0.0846983045, -0.0142071526, -0.0881613642, -0.1154157817, -0.1003650278, 0.0485909656, -0.0730027035, -0.0515364930, -0.0672769174, 0.1429575831, 0.0196468234, 0.1496068239, -0.1211056411, -0.0821843222, 0.0286547467, 0.0759145319, -0.0235755108, -0.0675304160, -0.0022667907, 0.0067231227, 0.0342757292, 0.0685843676, -0.0208337344, -0.0363311693, -0.0974509642, 0.0423173085, -0.0333988033, 0.0108595416, 0.0865876079, 0.0897173658, 0.0209721848, 0.0315413103, -0.0393826589, 0.0232545137, -0.0133632887, -0.1638613343, -0.0468993224, -0.0613915324, -0.0140543506, 0.0452263504, -0.0060396362, 0.0341422670, -0.0281840675, 0.0016645123, 0.1076915562, -0.1416327506, 0.0552377924, -0.0509670936, -0.0648078024, 0.0585565567, -0.0923504308, 0.0157443173, 0.0070428220, 0.0755519420, 0.0381548069, 0.0615191497, 0.1055041254, 0.1087291986, -0.0930004418, -0.0904586688, 0.0812418163, -0.1588892341, -0.1215072796, 0.0310202762, 0.0629436076, -0.0171880797, -0.0669474527, -0.0220184848, -0.0122876074, -0.0734782219, 0.0386548974, 0.0848115832, 0.0132576851, 0.0974766314, 0.0331805609, 0.0489187948, 0.0097869057, -0.1712564975, -0.0563205332, -0.0424482860, 0.0227257013, 0.1434863955, -0.0009964297, -0.1053059623, 0.0404998437, 0.0188171640, 0.0067450292, 0.0406822190, 0.0090468321, 0.0209490284, -0.1125801951, 0.0206477884, 0.0280883815, -0.0468101762, 0.0549824610, 0.0901309997, -0.0633263215, -0.1026789695, -0.0163000599, -0.0501180440, 0.0179172531, 0.0013402607, -0.0667430237, 0.0841320306, 0.1063190922, 0.0659006909, 0.0652722269, -0.0159855671, -0.0150964111, 0.1041597351, -0.0619943440, 0.0353250504, -0.0046067806, 0.0148197934, 0.0724041313, -0.0203283094, 0.0863423049, 0.0413411371, -0.0583488122, 0.0103052845, 0.0990147293, -0.0490174592, 0.0914027169, -0.0547090024, 0.0627098233, -0.0202358961, 0.0339830518, -0.0498804711, 0.0211065039, -0.1063966751, -0.0002108272, 0.0573379472, -0.0740791559, 0.0948133171, -0.1196410358, -0.0941161290, -0.1668998897, 0.1772404611, 0.0928126574, -0.0376191325, -0.0847929120, -0.0005392638, 0.0157497600, 0.0534396991, 0.0873058513, -0.0288731046, 0.0336496606, -0.1136594042, -0.0308890715, -0.0492307357, -0.1172956303, -0.0264326986, -0.0577399209, 0.0234991945, -0.1632309854, -0.0351271816, 0.1007019877, 0.0842357799, 0.1179835573, -0.0006602556, -0.0130445603, 0.1215555891, -0.0896594971, 0.0571889579, -0.0660966635, 0.1045343280, -0.0663969070, 0.0611842796, -0.1221797317, 0.0117887473, 0.0006981343, 0.0114688296, -0.0693921819, 0.0016393960, 0.0094587691, -0.0594704226, -0.1315867156, -0.1265602112, 0.0782749131, -0.0306684114, 0.0865242630, 0.1429973245, -0.0097577441, 0.1330661029, -0.0246840101, 0.0387367569, -0.0049488405, 0.0065198666, 0.0663722828, -0.0618096292, 0.1342433989, 0.0763009936, -0.0100960750, 0.1146112829, -0.0133629479, 0.0290625542, -0.0495910756, 0.0227504820, 0.0580595732, -0.0098743495, 0.0112241320, 0.0226080194, -0.0338889137, -0.0167453922, 0.0266313590, -0.0454479866, 0.1365609765, -0.0056672767, 0.0252773631, -0.0203507766, 0.0319298171, -0.0937665403, 0.0582197681, 0.0255883671, -0.0314324386, -0.1442354620, -0.0061832964, -0.0087835332, -0.0511568971, 0.0665850416, 0.0422700122, -0.0391572602, -0.0804289132, -0.0770576745, -0.1178901494, -0.0318621919, -0.1477407366, 0.0450719595, 0.0806912929, -0.1015809998, 0.0937753990, 0.0475074276, -0.1329543442, 0.0158155933, -0.0654240698, 0.0859951302, -0.0559654348, 0.0677150860, -0.0009157427, -0.0521950126, 0.0747347176, 0.1113870814, 0.0960067287, 0.0894975811, 0.0145906359, -0.0431746133, 0.0059798937, 0.0300416723, 0.0953279734, 0.1237596348, -0.0780280307, 0.0082565863, 0.0113654621, 0.0168148465, 0.0473028645, 0.0987544507, -0.0182856135, 0.0086592315, -0.0343373120, 0.0032129260, -0.1605092138, 0.0510858670, 0.0087404093, -0.0349309370, 0.0277517326, 0.0364666581, -0.0983118415, 0.0907247886, 0.1032334343, 0.0187702794, -0.0394496433, 0.0699460804, -0.1366643608, -0.0957204178, -0.0818077996, -0.0007997388, -0.0810800493, 0.0812863335, -0.0216128957, -0.0271167569, 0.1011642814, -0.0391221605, -0.0368934534, -0.0606958680, 0.0497205146, 0.0037946049, -0.1359701455, -0.0427044034, -0.0460332073, 0.0023573083, -0.0215935260, 0.0177669004, -0.0143259503, 0.0259879157, -0.0552833825, 0.0741528124, -0.0342492610, 0.0994597375, -0.0406806730, -0.0668340102, 0.0689477026, -0.0781887621, 0.0326935537, 0.1135077253, -0.0431703590, -0.0326866657, -0.0213460568, 0.1680344045, 0.0369749442, 0.0422446840, -0.0770605057, 0.0804917887, -0.0324857831, 0.0260920208, 0.0301185716, -0.0467683114, -0.1005584747, 0.0948666260, -0.0163961984, 0.0213907473, -0.0504841097, -0.0226345584, -0.0978815630, 0.0401887186, -0.0362263657, 0.0165000148, 0.0518024638, 0.1943063587, -0.0528121740, 0.0315439627, -0.0412738845, 0.0617858097, 0.0251527280, 0.0313727222, 0.0193037298, 0.0223498829, 0.0352086239, -0.0896536112, -0.0580238812, 0.0063729277, -0.0338577777, 0.0677432045, -0.0002426766, 0.0221720003, 0.0869924203, -0.0337497965, -0.0520155206, -0.0015739459, 0.0373160131, 0.0406285189, 0.0540261716, -0.1261652708, 0.0470895655, 0.0694855303, -0.0257500298, -0.0061875992, 0.0359867588, 0.0100368261, 0.0449622050, 0.0076730554, 0.0098634753, -0.0933460221, -0.0350878127, -0.0035536638, -0.0843846500, 0.1314355135, -0.2272938490, -0.0477894880, 0.0510453321, 0.0005919561, -0.0037386196, -0.0359508023, -0.0190175828, -0.0881606489, -0.1551053226, -0.0272037499, 0.0191876423, 0.0848668143, 0.1169159338, -0.0466403291, 0.1036360040, -0.1168191582, 0.0243065320, 0.1195481271, 0.1405323744, -0.0271580964, 0.0644341558, -0.0344848260, -0.0768124685, -0.0424099490, 0.0307093337, 0.0436927825, -0.1691566408, 0.0563697219, 0.1038999185, -0.0305951945, 0.0599076822, 0.0247647539, 0.0346819423, 0.0103603965, -0.0211613066, 0.0615088269, 0.1682179123, 0.0392635837, -0.1655184776, -0.0372719765, -0.0001293924, -0.0998702198, -0.0921016932, 0.0734294131, -0.0318305455, 0.0429488569, -0.0201394334, 0.0042130873, 0.0376523882, -0.0856778771, 0.0834047347, 0.0667572469, -0.1008398011, 0.0814898610, -0.0075369142, -0.0064623114, 0.0126427673, -0.0546396263, 0.0308154002, 0.0349717811, -0.1172951832, -0.0629617870, 0.0586405322, -0.0434838608, -0.0570391268, -0.0046766456, 0.2212887704, 0.0160961375, -0.1190445423, -0.0875876769, -0.0654393062, -0.0905586928, 0.0842252225, 0.0406102426, 0.0290599465, 0.0193514042, 0.1347545385, -0.0730765089, 0.1539514810, -0.0137194432, -0.0382592566, 0.1218322814, 0.0413465388, 0.0845005661, -0.0710429773, -0.0341121107, 0.0549216755, -0.0540807731, -0.0127665550, 0.0981018841, 0.0010966412, -0.0353386737, -0.0062595084, -0.0527222008, -0.0015531126, 0.0443908721, 0.0518987328, -0.0392019451, 0.0280437581, 0.0092781726, -0.0452112854, 0.1527548432, 0.0565723330, 0.0084976843, -0.0470710993, -0.0712708086, -0.1546747237, -0.1765119880, -0.0016748840, 0.1144179031, 0.1287387460, -0.0660649091, -0.1544001251, -0.0876756310, -0.0724984258, -0.0710759833, 0.0842943788, -0.0735255703, 0.0458348058, -0.1046470627, 0.1179157868, 0.1251543611, -0.0534684360, 0.1923099458, 0.0281272624, 0.0130728558, 0.0546979979, 0.0844727606, 0.0962820128, -0.0262956712, 0.0547277741, 0.0934759080, 0.0507875048, 0.1115614772, -0.0952727646, -0.0420396179, -0.0158902556, -0.0595317744, 0.1117628440, 0.0046693012, -0.0130557679, 0.0449104309, 0.0124710184, 0.1290362626, 0.0265274942, 0.1107908562, -0.1613356024, -0.0172045305, -0.0764944255, 0.0653052852, -0.0282610096, -0.0866866261, 0.0517405868, 0.0417095572, 0.0905874521, -0.0131799784, 0.0231542960, 0.0513281189, 0.0998274311, -0.1255227178, -0.0405154712, 0.0137879830, -0.1623284966, 0.0284877196, -0.0731291249, 0.0426567048, -0.0290661883, 0.0423451848, -0.0159098245, 0.0843959749, -0.0243836064, 0.0322754532, 0.0724473000, -0.0035426430, 0.0852821618, 0.0464805886, -0.0504380018, -0.0190205555, -0.0692446083, 0.0390477628, -0.1566732228, -0.0281362738, -0.0153973764, -0.0830969214, 0.1347675771, -0.0142358430, -0.0902595818, -0.0036959331, 0.0798085034, 0.0388140678, 0.0480328575, -0.0477219895, -0.0321953595, 0.0448790118, -0.1038234532, -0.1121454388, -0.0482461080, 0.0692541003, -0.0413752571, 0.0412169695, -0.0271441154, 0.0015118723, -0.0130928913, 0.0025533494, -0.0423665531, 0.0328306742, -0.1679546982, -0.0841118470, -0.0355441645, 0.1301805824, 0.0501784682, -0.0874062628, -0.1183722168, -0.0388782099, 0.0786888525, 0.0154077262, -0.1010599583, -0.0493694991, 0.1192225218, 0.0079481946, -0.0442951918, -0.1077975631, -0.0582203455, 0.0422149859, -0.0400713794, 0.0489642955, -0.0776071623, -0.0285872482, 0.0869427770, -0.0729146600, 0.0854865462, -0.0025005527, 0.0110746492, 0.0166742075, -0.1271796823, -0.0093204994, -0.0686206892, -0.0282851737, 0.0355167314, 0.0707700402, -0.1134276018, -0.0503178425, -0.0329942442, -0.0938740894, 0.0168890953, -0.0537196323, 0.0332362950, 0.0434707031, 0.0563712567, -0.0240140744, -0.0532564074, -0.0271991529, -0.0148792714, 0.0352306142, 0.0084819775, 0.0554415695, -0.0900363401, 0.0746045709, -0.0329854265, 0.0887363777, 0.0992373824, -0.0314779654, -0.1370713413, -0.0737985075, -0.0563104898, 0.0325916894, 0.0143920574, -0.0180012733, 0.0121248523, -0.0537384152, -0.0522328652};
# 16 "firmware/parameters.h" 2
# 1 "firmware/weights/b2.h" 1
# 12 "firmware/weights/b2.h"
model_default_t b2[192] = {};
# 17 "firmware/parameters.h" 2
# 1 "firmware/weights/br2.h" 1
# 12 "firmware/weights/br2.h"
model_default_t br2[192] = {};
# 18 "firmware/parameters.h" 2
# 1 "firmware/weights/w3.h" 1
# 12 "firmware/weights/w3.h"
model_default_t w3[12288] = {-0.2288564444, 0.0653015599, -0.2572892308, 0.1434184611, -0.0124016982, 0.1551533639, -0.2316661328, -0.1941512078, -0.1715511233, -0.0077578137, -0.2003028691, -0.0276526436, -0.0771637559, 0.0987993032, -0.1309160590, 0.2116449177, 0.1733506173, -0.0323751867, -0.1240802556, 0.1879620254, 0.1036592424, -0.0597922541, 0.1045573875, -0.0418450609, -0.2681173980, 0.0101721464, 0.0660373122, -0.1633917242, 0.0221768860, 0.0660578758, -0.0306928847, 0.0465997793, 0.1203839108, -0.2088529021, 0.0265833121, -0.1032831222, 0.0636129305, -0.1805329323, 0.0221257117, -0.0460954607, 0.0106044076, 0.1178782731, -0.1595059782, -0.2735866308, 0.1633713692, 0.1255774796, 0.0484537929, 0.0717722997, 0.1148102134, -0.2525891066, 0.0739406943, 0.1726401895, -0.0319754966, 0.0808347538, 0.0241638795, -0.2149791569, -0.0508049391, 0.1965840608, -0.1237974018, 0.0105549656, 0.1679528803, 0.1367407590, -0.0538136028, -0.1837423444, -0.0888320431, 0.1094845161, 0.0881500021, -0.2122941911, 0.0341479294, -0.1852856278, 0.2551280260, -0.0915767401, 0.0218680799, -0.0086481925, -0.0612812154, 0.2151925862, -0.2249207646, 0.0770699456, 0.0429824218, 0.0155529520, -0.0073670000, -0.1630515605, -0.0987021923, -0.0177658126, 0.1503609568, 0.0475813299, -0.1432739049, 0.1276138127, 0.0827242881, 0.2802457213, 0.2157338709, 0.1991312206, -0.1300956011, -0.0241254494, 0.0251475647, -0.1787433177, -0.1383889914, -0.0920482650, -0.1183500215, -0.1421096474, -0.0564677157, -0.1622264683, -0.1318937093, 0.1335897744, -0.2742899060, 0.2183216661, -0.1434719861, -0.1923516244, 0.1654981375, 0.1232800484, 0.0024376495, -0.0174726397, 0.0676117912, -0.0878402814, -0.2154309452, 0.0322771631, -0.0826361105, 0.1439352036, 0.2509703040, 0.1025242433, 0.1231456101, 0.1731252521, -0.0905192047, 0.0561015718, 0.0680657178, -0.0234462488, -0.2131674290, 0.0962243676, 0.1975313872, 0.1821734458, 0.1259439439, 0.0562331341, 0.2283127308, 0.0040812325, 0.0261693057, -0.1223122999, 0.0378888398, 0.2717721462, 0.0390712209, -0.0250485279, 0.1200700998, 0.1535632908, -0.0121513531, -0.0804592147, 0.2512425482, 0.0372834988, 0.0788198113, 0.2254537791, 0.1445259154, 0.1194935292, -0.0474895835, -0.1339794993, -0.0353663228, -0.0751972720, 0.0479801744, 0.2204804271, 0.1092692167, -0.1577047855, -0.0248132087, 0.1122130454, 0.1374056041, -0.0831523985, 0.1128464267, -0.1752466708, -0.1175634339, -0.0613895319, -0.0341330506, -0.2569645047, 0.0175411012, 0.1592008471, 0.0985561684, -0.1903309375, -0.0922688171, -0.0820698366, 0.1207766905, 0.0228205174, 0.0357493721, -0.1494179070, 0.1093693301, -0.0408724993, -0.0886680856, 0.1975747496, -0.1213073507, 0.1077894717, 0.0244954601, -0.2133300900, -0.1167766079, -0.1385434568, 0.0725205317, -0.2196189761, 0.0185259152, 0.0948976651, 0.0751078427, -0.1298278868, 0.0426795147, 0.1510826051, -0.1029864177, -0.0100687351, -0.0748013780, 0.0893768445, -0.1746477932, -0.0945188180, -0.0669610873, 0.0532963686, 0.0117483698, 0.0335945040, -0.0433866866, -0.1872940511, 0.1065210477, -0.2831163406, -0.0955292508, -0.1849465966, -0.0336219557, 0.2521069348, -0.1477762014, 0.1475215703, -0.0507644936, -0.1326835603, 0.1072870120, 0.2293056399, 0.0648670048, -0.0522787198, 0.0992719010, 0.0144763589, 0.2412645519, 0.1067154258, -0.0471939519, 0.0762476474, -0.0672676861, -0.1418185979, -0.1349548846, 0.0413351879, -0.0818552971, 0.0915120095, -0.0846926346, -0.1010780260, -0.1211654916, 0.1338226646, -0.0585945696, -0.0217325259, -0.0537010357, -0.0290072225, 0.1360817552, -0.1010439470, 0.1567469090, -0.0841644928, -0.0013627559, -0.0604429692, 0.0384287573, 0.0484421365, -0.0822773278, -0.1307026744, 0.2720716894, -0.1458055079, -0.1106963605, 0.0093663409, -0.0094385445, -0.0312786736, 0.0111035202, 0.0349047147, 0.2088926584, -0.1879218519, 0.1688043773, 0.0830527321, 0.0669110641, -0.0427869558, 0.1209405884, -0.1731601954, -0.0568782985, 0.1230931580, -0.0090594534, -0.0328872465, -0.0529319607, 0.1002434641, 0.0741873831, -0.0398943499, 0.1164680496, -0.2065997124, -0.0481889062, 0.0775934011, 0.1580326557, 0.0556145906, -0.0834413394, 0.0825523585, 0.0226409938, 0.2143737674, 0.1781249791, 0.0950182453, 0.0443109795, -0.0674383268, -0.0308564473, 0.0660506636, -0.0666832700, 0.0540840216, 0.0972861573, -0.2173996866, 0.1123810783, -0.0779184401, -0.0336959958, -0.1566541791, 0.0194406658, 0.0931596830, 0.2825984359, -0.0693014488, -0.0833322778, 0.0929419100, 0.0138747953, -0.0981139913, -0.1198093891, 0.0297004785, -0.1885250360, -0.1312005222, -0.0083446307, 0.0830549598, 0.0124582388, -0.2463677078, -0.1419419050, -0.1136108786, -0.0659673363, 0.0854990780, -0.2018104494, -0.1326767802, 0.0116969217, -0.0321062431, -0.1240032837, 0.1765055060, 0.0554790162, -0.1018565074, 0.0947623700, -0.0288607534, -0.2624208331, -0.0830988437, -0.0828886032, -0.0186270960, -0.1823522449, -0.2301480621, 0.0159171429, -0.0318428427, -0.0452252403, -0.0718863979, 0.0671064854, -0.0631451979, 0.0206224527, -0.2330800742, -0.1153443679, -0.2338291109, 0.1849217564, -0.2504961789, -0.0448411256, 0.0977395847, -0.1139720976, 0.0181465223, 0.1240110397, 0.0842607096, -0.0376201123, -0.0227071177, -0.0421373695, 0.1635314375, -0.0332113653, -0.0165522397, -0.1000180319, -0.0499807820, 0.0007515260, -0.0438162647, 0.1218723655, 0.0448608100, 0.0484991036, -0.1588418037, 0.0023689265, -0.1403521299, 0.0133764446, 0.0677565038, 0.0864491239, 0.1232761815, -0.1995916367, -0.0003056531, 0.2709866762, -0.1786384135, -0.0516509786, 0.1236447617, 0.2368960977, -0.0080155311, 0.1854586303, 0.1354100108, -0.0129836258, 0.1125997677, -0.1361343116, 0.0286383592, 0.0896042883, 0.1198641360, 0.0073527424, -0.0892006084, -0.2086896151, 0.0684590712, -0.0898400396, 0.1825204492, 0.1372072846, -0.0645009726, -0.2219824195, -0.0503753424, -0.1749304831, -0.2164441496, -0.1226167679, -0.0168554261, -0.0304297060, -0.2033072412, -0.0653702244, -0.2602066994, -0.0143337762, -0.0218999777, 0.0285199862, -0.1448499113, -0.1024840176, -0.1267929673, 0.1503517926, -0.0435643345, 0.0061278464, 0.0200549792, -0.0893232599, 0.0702173039, -0.1559611261, -0.0697288066, 0.0503587537, -0.1036609337, -0.1479831040, 0.1714398265, 0.0868711546, 0.0387134328, 0.2155794054, -0.0008462840, -0.0831277519, 0.0904857069, 0.1305942088, -0.1358664781, 0.0433855057, -0.0333016366, -0.2065191269, -0.2057671845, -0.0074195913, 0.0539486259, -0.0824827999, 0.1561126858, -0.0330970436, 0.0003692648, 0.1225177869, 0.0635776147, 0.0352439061, 0.0448016934, -0.0992206559, 0.0027885530, -0.0606161729, -0.0165795460, 0.1115497798, -0.1078514233, -0.1489247978, 0.0976498947, 0.1210547239, 0.0573682860, 0.1136195883, -0.1496089101, -0.0028723921, -0.0454505458, 0.0050397981, 0.0716642067, 0.0344738737, -0.1676830947, 0.0092260716, 0.0797386840, -0.0241603106, 0.0324494801, -0.0808263123, -0.0666527227, -0.0783448592, 0.0972999930, 0.0204816144, -0.0733166933, -0.0487802662, -0.0732199848, 0.1890932769, 0.0871531293, 0.0965982452, 0.1102512181, -0.0408974029, 0.2474645525, 0.0925576091, 0.1633704752, -0.1072656959, -0.1270230860, 0.0611731037, -0.0285655428, 0.1882097721, 0.2644435465, 0.0490834489, -0.2229368985, -0.0078955255, 0.0246836357, 0.0132479165, 0.0754492134, -0.0534561872, -0.0410299115, -0.1982676536, -0.2322382629, -0.2444593161, 0.0130793052, 0.1689965576, -0.1797729731, -0.1366876215, -0.0803321898, -0.1005470753, -0.0121807046, -0.1162422821, -0.0968436077, 0.0772180110, -0.0430246815, 0.1218384728, 0.0543537773, -0.0626085699, 0.2002374232, 0.1643061787, -0.0836968347, -0.0788937435, 0.1290005147, -0.1217150018, 0.0914746895, 0.0524659902, 0.0346258320, -0.0427008159, -0.0077597424, -0.0719046369, 0.1363327503, 0.0782801509, -0.1379853785, -0.0257295389, -0.2829544246, 0.0037755773, 0.0212548934, 0.0427596308, -0.1768484861, -0.1466898918, -0.1803527772, 0.0814067125, 0.1280871481, -0.0790444314, 0.1364805400, 0.2621320188, -0.0482022427, 0.2351318747, 0.2024360746, 0.0178387240, 0.2137955278, -0.0034393293, -0.0763039887, 0.0916959792, -0.2508037686, -0.0446854867, -0.0748054758, 0.0419135876, 0.0039362768, -0.1418818384, 0.1527239233, 0.0597275905, 0.1774406135, -0.1140595526, 0.1127747446, -0.1565554440, -0.0888768956, 0.2036789060, -0.1398072094, -0.0738677531, -0.1256239712, -0.1369520575, -0.1477688998, -0.0330252759, 0.2542840540, 0.1214065179, -0.2417323589, -0.1487864405, 0.0512188263, 0.0475228354, -0.0105373133, 0.0277502090, -0.1521059424, -0.1523016244, -0.1481197774, 0.0083223134, 0.1851734072, -0.1294455528, 0.0463424772, -0.2148883492, 0.1536690295, -0.0143289948, -0.1568382978, 0.2029885054, 0.1041910797, 0.0775217414, -0.1481236964, -0.0494114235, -0.2270294726, 0.1000512764, 0.1910118163, 0.1041719094, -0.0043382710, 0.0928009525, -0.0888854414, 0.1664597988, 0.0377532355, 0.0663274303, -0.1823060960, -0.0399446823, -0.0664946139, -0.0734862164, 0.0918003619, -0.0894042104, -0.1896559447, 0.0249813590, 0.0058065569, -0.0015613830, 0.0934334099, -0.0869732276, -0.0910014883, -0.1436158866, -0.2354964763, -0.0218771864, -0.1247748062, 0.1964232177, 0.0165609308, -0.1392004490, -0.1650136113, -0.1300174147, -0.0560430475, -0.0009043700, 0.2185859829, 0.0354522243, -0.0869464502, -0.1875904500, -0.1392620355, 0.0508912914, 0.0089079691, 0.1097924709, 0.0876022652, -0.0173272174, 0.0601896420, 0.0327959061, 0.0914752111, 0.1072388738, -0.0490210988, -0.1206826419, 0.0284978822, -0.0241007283, 0.1056224108, 0.2236921787, -0.1908068508, 0.0404713340, 0.2187402397, -0.1139508784, -0.1783359945, -0.1435658932, -0.2322534919, -0.2765504718, -0.1096437946, 0.0289210677, 0.1681990325, -0.1090723798, -0.1085277647, 0.2282692641, 0.0358253457, -0.0271346904, -0.0478179604, -0.1616833657, -0.0495316051, 0.0758050978, 0.0677619874, 0.1204440296, -0.2208766043, -0.1945111006, 0.0093629286, 0.0489115044, 0.0172103867, 0.0377540439, 0.1188733056, -0.0233600736, -0.0714014843, -0.2709742486, 0.0291022360, 0.0043426855, 0.0782894716, 0.1137739867, 0.1346793324, 0.0692015812, 0.0077429484, -0.1263314337, 0.1715821922, -0.1203689799, -0.0578170568, 0.0365712345, 0.0917589143, -0.1170174181, 0.2758352458, -0.1701861024, -0.1058166549, -0.0402382761, -0.0121947862, -0.0691565499, 0.1039025486, 0.0615624860, -0.0320118032, -0.1864107549, 0.1064531878, 0.1276882291, 0.0151654258, -0.0578553639, -0.0206120219, 0.1780141145, -0.2535771728, 0.1428977996, -0.1046261340, -0.1862294376, 0.0429674536, -0.0386319607, -0.2579119503, 0.0029333769, 0.1327799410, 0.0356863625, 0.2495577037, 0.1349197030, 0.1963853985, -0.0772027001, 0.1319741309, 0.0995943695, -0.0311709456, -0.1680896580, -0.0435065106, 0.1980698109, 0.0496515781, 0.0676031783, 0.0197520331, 0.1895276010, 0.1150701791, 0.2045060843, 0.0338427275, -0.0962414891, 0.0058185933, -0.1746986210, -0.0323112570, -0.0004856039, 0.1149329990, -0.0303950533, -0.1621941030, 0.1288339496, 0.1459241807, 0.0634792075, -0.2177815288, -0.0139327543, -0.0338924751, -0.0310170222, 0.0239221100, 0.0695096478, 0.0595631041, -0.0658157319, -0.0980607718, 0.0114437575, -0.0663223937, -0.1663694829, 0.0385361500, -0.0028218066, 0.1281341016, -0.0248385090, -0.0418780930, 0.0280316845, -0.0340726227, -0.2707569897, -0.0430379063, 0.0741085932, -0.0619026273, 0.1195479184, 0.1315540373, 0.0084467996, -0.2811077237, 0.1074081287, -0.0266639534, 0.0377254114, 0.0964154601, 0.0416880026, 0.1183457598, -0.0812352672, 0.0058886637, -0.2798436880, -0.1528425664, 0.0783898309, -0.1611267328, 0.1538143158, 0.1294503063, -0.0741311163, -0.0129706310, -0.0323531292, -0.1736223847, 0.1642058045, -0.1744357198, -0.1686607152, -0.0365764573, -0.2685887516, -0.0240790546, -0.0118690161, -0.1994318217, -0.1512008011, -0.0717727169, -0.0896887407, -0.0327032693, 0.0593834631, 0.2367793471, 0.0207654294, -0.0487739481, 0.0621264391, -0.2135619223, -0.0606584698, 0.0745433420, 0.2294743061, 0.0282931142, -0.1113117784, 0.1383789927, 0.1635312587, -0.0108817415, 0.0806331187, 0.1731685549, 0.1517399102, -0.1217552871, 0.1666209400, 0.2202097178, 0.0571598001, 0.0869622007, -0.0925330743, 0.1504039466, 0.2329055071, 0.0475576855, 0.2173490375, 0.2100764960, -0.1518328190, -0.0967702419, -0.0421790220, -0.1653467268, 0.0832711235, -0.0256936327, 0.1541989446, 0.0626282021, 0.2202464938, -0.0060500726, -0.0095761716, -0.2166054547, 0.0587589256, 0.0575605705, 0.0322173648, -0.0805174559, -0.2217475474, 0.1426701546, 0.0487263426, -0.0390515253, 0.0020562874, -0.0191927608, 0.1868187934, 0.1153247282, -0.1000085771, 0.0039985590, 0.1991668791, 0.0630251840, 0.1315280199, 0.2804133296, 0.0802250579, 0.0667126030, 0.1446655244, -0.1452612132, -0.0232603215, 0.1458197236, -0.0487938486, -0.0712122023, 0.0525992997, -0.0861800313, -0.0078020096, 0.0359358937, -0.1092992425, -0.2271433622, -0.0459883176, 0.0243785847, 0.1253378987, -0.2199570388, -0.0977009460, -0.1399732679, 0.2330809087, 0.1277704984, -0.1134627908, 0.2506301105, 0.0823739171, -0.0970622599, -0.1995607316, -0.2535317838, -0.0652605519, -0.0643503070, -0.0045619910, -0.0769123733, 0.2286739349, -0.0732187405, -0.2028847337, 0.0456731543, 0.2575086057, -0.0504667498, -0.0075548827, 0.0664485618, -0.0051345183, -0.1662753224, -0.0372133292, 0.0922811255, 0.1076264605, -0.0107301231, 0.0892303735, -0.0939637721, 0.1505922973, -0.2197017521, 0.0672738701, -0.1411049217, 0.0044266442, -0.0948700830, 0.0890389755, 0.1177395433, -0.1008446142, -0.1664466560, -0.0077287978, -0.2778933048, -0.0359794162, -0.0882632434, 0.0347447433, 0.0438471995, -0.0469619855, 0.1325945258, -0.0052625854, -0.1768147349, 0.1727229208, 0.0308905151, -0.1181673780, 0.0050692870, 0.0719976425, -0.0175026897, 0.0068747518, -0.0484156609, -0.1465498060, -0.0073998324, 0.1063289344, -0.1063869447, -0.0842778310, 0.0727131814, -0.1514124423, 0.0770668760, 0.0113414386, 0.1082906500, -0.0556508042, -0.1596924067, 0.1462144107, 0.0755289197, 0.0232076067, 0.0920828357, 0.1996532679, -0.0166442711, 0.0060802079, 0.1903332025, 0.0024282895, -0.1445431858, 0.0566281937, 0.0107435454, -0.0058858097, -0.1561381221, -0.2637824416, -0.0380055830, -0.0499998033, 0.0039735534, -0.2191271335, 0.0412968807, -0.0726461187, -0.0156694874, -0.0718345270, 0.0303589683, -0.0594990328, 0.0046119737, 0.0576803647, -0.1268278211, 0.0229036286, -0.2754466236, 0.1089360118, -0.1585554332, -0.0394544303, -0.0957117900, -0.0587566495, 0.0077658305, 0.1372701228, 0.0331199020, -0.1366186440, 0.0211644638, -0.1354644001, -0.1092090979, -0.0964215696, -0.1780135632, -0.0731626824, -0.1311357468, 0.1651086807, 0.1917904764, 0.0764296055, 0.1712081283, -0.2153158933, 0.0201027300, 0.1107343584, 0.0822008550, -0.0568873771, 0.2300469726, 0.2363062054, -0.0356594250, 0.1322596371, 0.0358168669, 0.0685414299, -0.0798610374, 0.0490138978, 0.0337192826, 0.0416341312, -0.0965213925, 0.1965155452, 0.1317028105, 0.0185499452, 0.0913332477, -0.1803554147, -0.0976656005, 0.1468922198, -0.0338060297, 0.1211144030, 0.0080966763, 0.0037981744, -0.0372184478, -0.0086655132, 0.1257949024, -0.0610556863, -0.1081263497, 0.0044750129, 0.2218077928, 0.1181597039, 0.0402907580, 0.0765758082, 0.0286735091, 0.1241924688, 0.0082968427, -0.1163039133, 0.2389445007, 0.2341766953, -0.1707003713, -0.2306140065, 0.1795233935, -0.0228382144, -0.1136930808, -0.1415845156, 0.1479481310, 0.0582992993, -0.0534794368, -0.0015857957, -0.0084115127, 0.1106476113, 0.2096014917, -0.2322306186, -0.0169703085, 0.0301997215, 0.2500590086, -0.0013900532, -0.0007317450, 0.0240687318, 0.0339361429, 0.1697732955, -0.1480945051, -0.0977179036, -0.1476172656, -0.2289463580, 0.0532733575, -0.2217291147, -0.0423860885, 0.1395335197, -0.1491304040, -0.1589897573, 0.0099925185, -0.2110356539, 0.1480717212, 0.1959214211, 0.0569316708, -0.0130282668, -0.1012305915, -0.1016708240, -0.0166648384, -0.0830163658, 0.0874680802, -0.0040898221, -0.0630351976, 0.0829478428, 0.2161632031, 0.1162463054, 0.0896982104, 0.1835862994, 0.0971165970, 0.2588395178, 0.0076342667, -0.0789876655, 0.0205949284, 0.0722043887, 0.0494896621, 0.0571283810, -0.1156433448, 0.0651025623, 0.0564034991, 0.1382152438, -0.0542471670, -0.0566788055, 0.1094764248, -0.1300572902, -0.2094290107, 0.0121333916, -0.1111380830, 0.2584074736, -0.0013058898, 0.0972726122, -0.0905845016, -0.1850104630, 0.0454420447, -0.0073359730, 0.0963048115, 0.0182820782, 0.1035118476, 0.0150989927, -0.2139812857, -0.1090639681, -0.0046828189, 0.0286670197, -0.0234721992, 0.0275035258, 0.1726602763, -0.0511279777, 0.0799942613, 0.0745595470, 0.1172686517, -0.0113427117, -0.1987268627, 0.0047873198, -0.1051372364, -0.0045377137, -0.0365431681, 0.0892483592, 0.1163975820, -0.0373337418, 0.0215931572, 0.0978758782, 0.0576592796, -0.1467583477, -0.0889350176, 0.2745362520, 0.0098072505, -0.0783605725, 0.1492632776, -0.0375710651, 0.0723279566, 0.1784178615, -0.0116138160, 0.2403214872, 0.0221701358, 0.1556797028, -0.0518444665, 0.0582980663, -0.2244510204, -0.0926992670, 0.1827536672, -0.1313434243, 0.1820490807, 0.1343846619, 0.1948273927, -0.0157522149, 0.1644721478, -0.0054964116, -0.0494019650, 0.0670062825, -0.0529993698, 0.2119006813, -0.0426001325, 0.2569836378, -0.1036082879, 0.1130419001, 0.0755615905, -0.0915802643, -0.1122025475, -0.1801101118, 0.0449843258, -0.0944892913, -0.1595049500, 0.0519336201, -0.0633587688, -0.0771479532, -0.0763082877, 0.0780630112, 0.0803505778, 0.0536345877, -0.0148721049, 0.1882722378, -0.1714057624, 0.2345657200, -0.0074035302, 0.1629267633, -0.1607982665, 0.0445444174, 0.0126416460, -0.1631315202, 0.0283326916, -0.0031711385, -0.1866132915, -0.1356961429, 0.0139561975, -0.1589758843, -0.1407200396, 0.0510326736, -0.0822251216, -0.1109627411, 0.0945832133, 0.1062160209, 0.0686451122, -0.0626374632, 0.0229160823, 0.1616130322, -0.0924002528, -0.0033933448, 0.0750368461, -0.0509836264, -0.0115137463, 0.0967482477, 0.0732824281, 0.2649058700, 0.1433833688, -0.0353535041, 0.0821236297, 0.2256745249, 0.1286745071, 0.1280026287, -0.0982655063, 0.1044834852, 0.1301442683, -0.1424895078, -0.0534500219, 0.0330271088, 0.0843978822, -0.0448890701, 0.1959224939, 0.0224224720, 0.0588399284, 0.0755324513, -0.0666907355, -0.0579791032, 0.0349953473, 0.1761513501, 0.0825159177, -0.1345658749, -0.0277080331, -0.0499207787, -0.0606780909, 0.2573755682, 0.0553266779, -0.0141892247, 0.1375066191, -0.0078984732, -0.0451011769, -0.0799145997, 0.0643297434, 0.0373714976, -0.0064087133, 0.1545370817, 0.0225666128, 0.0523867048, -0.1434098780, -0.2025099248, -0.2786795199, -0.0452629402, -0.0572152026, 0.2462816536, -0.0056444262, -0.0334869958, 0.0206997730, -0.0832783952, 0.1881107390, 0.0548621230, 0.1139069423, -0.0374656580, -0.0314001068, -0.0216537323, 0.1171371490, 0.1640836447, -0.1637578011, 0.0489309914, 0.0974149480, 0.0703832284, 0.1895430535, 0.0497709885, 0.0194950104, 0.0252669174, -0.0896302462, 0.2001720667, 0.0292403623, -0.1885180920, 0.1567472219, 0.0271742586, -0.1433477998, 0.1596713364, 0.2359296978, -0.2484600544, -0.0011880732, 0.0612490885, -0.1109034047, 0.2717541456, -0.0507282838, -0.0996606499, -0.0306327380, -0.0150357764, 0.0220706854, -0.1160911396, 0.0020723285, 0.1504592150, 0.0330796652, 0.1302187145, -0.0146886595, -0.1634685695, 0.0518647358, -0.1593636274, 0.1937405467, 0.0452324674, 0.0088346554, 0.0405358300, 0.0939927697, 0.1207668483, -0.0974031612, 0.0220634248, 0.0838343576, -0.0383950584, -0.0448981747, -0.1460584551, -0.1029338837, -0.0273804385, -0.0910153091, 0.1249761730, -0.0755742192, -0.2298010886, -0.1435431838, 0.0844412744, -0.0149370236, -0.0732735395, 0.1274121553, -0.0054904041, -0.0013853828, 0.1813354343, 0.0532896928, -0.0032592299, -0.0928936601, -0.0023519977, 0.0006330215, -0.0602417663, -0.2438874394, 0.1465754956, 0.0329296254, -0.0158701558, -0.0066263527, -0.0007241769, -0.0632301942, 0.1083180830, -0.1302893758, 0.0777375475, -0.0209817328, -0.1361171156, 0.0138188787, 0.1850822568, 0.1417597532, -0.0783610940, 0.1783155352, -0.0358569585, 0.2438226938, -0.0024455218, 0.0544435419, 0.1975391209, 0.1622172147, -0.0162460245, 0.1533651650, -0.1628320217, -0.1255951822, 0.1261167973, -0.1655699313, -0.1071255058, -0.1756576598, 0.0834867284, 0.0512439273, 0.1893450469, 0.0664287955, -0.2006141096, -0.0549264587, 0.1157011539, -0.0151831834, 0.0180111174, -0.0258039292, 0.0274933297, 0.1885457039, -0.0545788892, 0.2460911125, -0.1737084091, -0.1095395237, 0.0455529168, 0.0933400989, -0.0297369603, -0.1408704072, 0.0312064569, -0.1443839818, -0.0614815876, -0.1257524043, -0.0344267152, 0.0122256223, -0.0601233467, 0.1469955295, -0.1117521524, -0.0162498001, -0.0452707484, 0.0905354396, -0.1348867118, -0.2491781563, -0.0728539154, -0.0792211294, 0.0739682689, -0.0546812676, 0.0602234118, -0.0548334941, 0.0280804932, -0.0242477600, 0.0110411858, -0.0203996021, -0.0301808640, 0.0571268909, 0.0906425864, -0.0978704169, -0.0194592457, -0.1365493536, -0.0431862511, 0.0406044759, -0.1279720515, -0.0364348553, -0.1263673007, -0.0741501749, -0.1556550711, 0.1014143229, 0.0693741664, 0.1111661717, -0.0805753320, -0.1319175810, -0.0653876737, -0.0420753919, 0.2777172625, 0.1158109978, 0.1111537442, -0.1646467298, 0.0620307066, -0.2703338861, -0.0437203087, -0.1301019341, 0.2517928481, -0.1329204440, -0.0609166808, -0.0370528810, -0.1627881974, -0.2004629672, 0.0161622558, -0.0615534745, -0.0235524122, 0.1313064694, -0.1278033406, -0.1542393714, -0.0273184627, 0.1503931284, 0.1246776059, 0.0517048724, 0.0674236044, -0.0329417959, -0.0729862079, 0.0605655983, 0.0924510509, -0.1579032838, -0.0413768552, -0.0198935419, 0.1167861521, 0.0134006580, 0.1425639242, -0.0378269926, 0.0348839238, -0.1521216035, -0.0637285262, -0.0728866160, 0.1106112152, -0.0267284531, -0.0000915655, -0.0352815464, 0.1125762463, 0.1468104124, -0.1353810728, -0.0284741018, -0.0633808747, -0.0245962758, 0.0707559139, 0.0564388447, -0.2614128590, 0.0059725903, 0.1956249774, 0.0908780321, -0.1455554217, 0.0353527404, 0.0441968702, -0.0123468637, 0.1131802723, 0.0292397011, 0.0436598696, 0.0768304765, 0.1939791143, -0.1171581224, -0.1070595980, 0.0491093956, 0.1369286925, 0.1084078550, -0.0889158696, -0.1152716875, 0.0786116943, 0.1320143789, -0.0234204140, 0.0195152573, -0.2405972928, 0.0590143278, -0.1414108723, -0.2132514417, 0.1281843483, 0.2162846327, 0.2808037102, 0.1892673075, -0.0118504371, -0.0769773200, -0.2148559391, -0.1053615883, 0.0962584838, 0.0100510577, -0.1283878386, 0.0290934145, -0.2040821910, 0.0922477245, -0.1818867326, 0.2033472806, -0.1645390093, -0.0006769401, 0.0149229141, -0.2221483737, -0.1668524444, 0.0658064112, 0.2408802062, 0.1476167440, -0.2013025284, 0.1035201401, -0.1927026659, -0.0431327336, 0.0683173165, -0.0632400736, 0.2362416089, 0.0658930242, 0.0346054360, -0.0202178545, -0.0851565450, 0.0183576979, 0.2089508176, 0.0397655480, 0.0005696042, 0.0580627359, 0.2450535446, 0.0615945980, 0.1553440243, 0.0738202408, 0.0765390992, 0.2831516266, 0.1138755828, 0.0814974904, 0.0205378756, 0.0312457923, 0.0184790120, 0.1209982857, -0.0394455902, -0.0312226918, 0.0786256939, 0.0588486381, -0.0962232947, 0.1141609550, 0.2117294818, 0.0505284742, 0.0672480315, -0.0277915504, 0.0646149293, 0.0141490512, 0.0525572412, 0.2573722005, 0.0827412829, -0.1864295453, -0.0854282081, -0.0980462059, -0.0703889206, -0.0969003290, 0.0395271815, -0.0672965720, 0.0394905694, 0.0972426310, -0.2687353492, 0.1311585009, -0.0302262474, -0.0287931990, 0.1033179760, 0.1774462312, 0.2272420526, -0.1086319461, -0.1482753754, -0.1065993384, -0.0408214964, 0.1862008721, 0.0755210444, -0.0963557437, -0.1809245646, 0.2493041456, 0.1267089099, -0.2402048856, 0.1167997494, -0.0573344119, -0.0144678270, 0.0966660678, 0.1879037917, -0.0202937089, -0.0381092392, -0.1877515018, 0.0216201544, -0.2379339933, 0.0461281650, 0.0007093797, 0.1323811859, -0.0121298442, 0.1673833430, -0.0467140861, 0.0240324326, 0.2266398966, 0.0521133058, -0.0262841061, 0.1088986769, 0.1734319925, -0.0478234515, -0.0464324094, 0.2149731368, -0.0249262489, -0.0383916236, 0.1845780760, -0.0400378816, 0.0834209993, -0.0955885202, 0.0105469860, 0.2327737957, -0.0061007035, 0.1484580934, 0.0321973599, -0.0271366443, -0.0549445748, 0.0958889797, -0.1707428694, -0.0909388885, -0.2224190235, -0.1283775717, 0.2689516544, -0.0042078150, 0.1214939430, -0.1348100454, 0.0883513913, 0.0307901129, 0.0062551843, 0.2156049758, 0.1635302007, -0.1669662148, 0.0366246700, 0.0769559667, -0.0137225138, 0.0466233864, -0.1135328710, -0.1295095384, -0.0464676768, 0.1833306700, -0.0799636245, -0.1386413723, -0.1083114967, 0.1141107008, -0.0033011900, -0.0439569950, 0.0696379319, -0.0569744706, -0.1996028721, 0.0159734357, -0.1689302176, 0.1753224730, -0.0402133875, 0.0512997247, -0.1389870048, 0.0525099672, 0.0530475266, 0.0745499730, 0.0465208814, 0.1481488347, 0.0133961467, -0.1880533844, -0.1568761319, -0.0556084551, 0.2213653177, 0.1922653913, -0.0897841752, 0.0259249210, -0.0171786137, -0.1390067190, 0.2394087166, -0.0370903574, 0.0462862663, 0.0203377232, -0.1391051561, 0.1325757056, -0.1703110039, -0.1846079677, -0.0200096238, 0.0169193652, 0.1541074514, -0.0103019783, -0.0600691848, 0.0742703900, -0.1434825361, 0.0051666554, 0.0896874219, -0.1726832837, 0.1089484394, -0.2118314356, 0.2246311903, 0.0852260962, 0.1835427135, 0.0013945927, 0.1270180047, 0.0883695483, -0.2786489725, -0.0064004017, -0.0758449212, -0.2598374784, -0.2024412304, -0.2669968903, -0.0131780095, 0.0443586968, 0.0096882684, 0.0496962033, 0.0068728039, -0.0655802190, -0.1032245234, 0.1193964109, -0.0030833227, -0.0050806184, 0.0625127703, 0.1113125384, 0.0462785885, 0.0042583412, 0.0841930583, 0.0364309214, 0.0310760625, 0.0725029483, 0.0584727563, 0.1017594934, 0.1624842435, -0.0510536730, 0.0273778997, -0.1503977329, 0.2116251290, 0.0286716558, 0.2615285218, 0.0287707783, 0.0902814642, 0.2015860826, -0.0512009859, 0.0331401788, 0.2581171095, 0.0143702952, -0.0434811451, 0.2129298598, 0.0659566596, -0.2189267874, 0.0811711922, -0.0649712831, -0.0334877335, 0.0187570453, -0.0952574387, 0.0190395024, 0.2405322194, -0.1559485942, -0.0862302631, -0.1228172183, 0.1858923435, -0.1421570182, -0.0093982527, 0.1917613298, -0.1172912866, -0.0994925573, 0.1048804671, 0.0510874279, -0.0334473439, -0.0918719620, 0.0634446219, 0.0802702010, 0.1825176924, -0.1995401382, -0.0208663885, 0.1121740788, -0.1730973721, -0.0166560002, -0.1153006777, 0.1824102253, -0.0591663346, 0.0398463644, 0.0804630667, 0.2127541900, -0.0613900237, 0.0910419822, 0.0412234142, 0.2045049369, 0.0705095530, 0.0086629167, 0.1362245530, 0.0419624522, -0.0928193554, -0.0526618101, 0.0170014966, 0.0873798281, 0.0098730130, 0.1438281089, 0.0807773992, -0.2571192980, 0.1580876112, 0.1096316278, -0.1310372204, 0.1505075842, 0.0226026159, 0.0149070770, 0.2317446321, 0.2080125213, 0.2585137188, 0.2721755505, 0.0458913781, -0.0113253398, 0.0227246117, -0.0351265222, 0.1363264471, 0.0265269931, 0.0019086509, -0.0161616374, 0.2071911693, -0.1534621865, 0.0541478917, 0.0369460844, 0.2030957192, 0.2345083207, 0.0387581997, -0.0833858028, -0.1154659688, 0.1742443442, 0.0262389742, -0.0251066238, -0.0514556691, 0.0242205672, 0.1362868696, 0.0766887367, 0.0536760762, -0.1084209308, 0.1303882003, -0.0457640551, 0.1832020581, -0.1181740612, -0.0315971859, 0.0186751895, -0.0053132218, 0.0766217411, 0.0232591182, -0.2075919211, 0.0643381178, 0.2207816839, 0.1895001233, -0.0395000502, 0.0344964005, -0.0604457706, -0.1750628799, -0.0021647906, -0.0863620117, -0.0384902023, 0.1203703508, 0.1457163990, -0.0092260977, 0.1467489749, 0.0816909298, 0.0132301608, -0.1958648413, -0.1944054663, -0.0464163348, -0.1278114766, -0.0414366648, -0.1086765826, -0.0509749986, 0.0065142750, 0.0357106142, 0.0452816039, -0.2125528008, 0.0515721291, -0.0962618813, -0.1662442982, 0.0801397637, -0.1695950776, 0.0180498436, -0.2237071842, 0.1534754485, -0.0740085319, 0.1095595285, -0.1571549773, -0.1643191576, 0.0858244449, -0.2167576402, -0.1506893635, -0.2109443247, 0.2316420972, 0.1947156042, -0.1531852186, -0.1528932750, 0.0891051665, 0.0396205038, -0.0114332698, 0.0289820340, 0.1474561691, -0.0304885898, -0.2116214335, 0.0032786962, 0.0069352100, 0.1260998249, 0.1397602558, 0.0614588633, 0.1224965900, -0.2115293145, -0.0728830248, -0.0406835936, -0.2176776528, -0.0507552028, 0.0178863108, -0.0375714861, -0.0535835586, 0.0593782328, -0.0064884145, -0.1441013664, -0.0757696629, 0.2258838713, -0.2538714409, -0.0523325503, -0.0380979069, -0.0760565698, -0.0072274534, -0.1603360325, 0.0115870321, 0.0179770812, -0.1811746806, -0.1210444942, 0.0240665767, 0.0952118263, -0.2771086991, -0.2554059029, 0.1393505186, 0.0412151888, 0.1773030609, -0.1162648574, 0.0547163635, 0.0411236696, -0.1480395347, -0.0294642989, 0.0520321354, -0.1090586558, -0.1266211569, -0.0572663397, 0.1271983981, 0.0362551622, 0.0040029292, 0.2783714235, -0.0209950153, -0.1476729810, -0.2127659917, -0.1146731004, -0.1661570966, -0.0279753357, -0.2076046467, -0.1097969934, 0.2373311371, 0.1819899380, -0.1724019945, 0.2534758151, -0.1690325141, -0.2583194077, -0.1658184230, -0.2674778998, -0.0678449124, 0.1378830522, 0.0495975502, 0.0572193004, 0.0197847039, 0.0362720229, -0.1420496255, 0.1243145019, -0.2573913336, -0.1960538030, 0.0317800231, -0.0011475511, -0.0469856523, -0.0592139438, -0.2119267732, -0.0591009296, -0.1098117903, 0.1319803149, -0.1162336618, -0.0800775737, -0.0016583104, -0.1284731925, -0.1255829781, -0.2277220637, 0.1452253163, -0.0881116092, -0.1333732754, -0.0075278534, 0.2207164913, -0.0305742379, 0.0431138203, 0.1405540854, -0.0817012638, 0.1062197983, 0.1231772676, 0.1502910703, 0.2540005744, -0.1306254268, -0.1211393774, -0.0666187108, 0.0333181731, -0.1088087782, -0.2144654393, -0.0100128800, 0.1364865303, -0.1100089997, 0.1762534529, -0.1708494872, -0.0013990452, -0.0310912207, 0.1071393341, 0.0219022818, -0.0498260781, -0.0130408164, 0.1281474084, -0.0340716727, 0.0520699769, -0.1566793472, 0.0524946153, 0.1058032438, -0.0773210749, -0.0236085542, 0.0166865550, -0.1021571681, -0.0084276441, 0.0928582549, -0.0161933061, 0.0162531175, -0.1318898499, 0.0219252203, -0.0967224538, 0.0277860202, -0.1956277043, -0.1028009728, 0.1392517984, 0.0710860491, 0.0031479818, 0.2283631861, -0.0305250287, -0.0682813600, -0.0659768879, -0.0836128816, -0.0264889896, 0.0709124058, 0.2068991512, -0.1480790228, -0.1290657818, 0.0428364351, -0.1671631783, -0.0027632243, -0.1295525730, 0.1061531827, -0.0169076417, -0.1896936446, 0.0167409591, 0.0970813185, 0.0310758613, -0.1634095311, -0.0467799641, 0.0142848166, 0.2718145847, 0.0421990380, -0.0312008131, -0.1871892959, 0.1105138361, 0.2480418682, 0.0325270817, -0.1359783858, 0.0048842011, 0.2297828496, -0.0245814677, 0.1493028104, -0.0875465721, -0.2532821596, -0.0644342899, 0.0142035745, -0.1998266727, -0.1991754472, 0.1287463009, -0.2722212672, -0.0026365644, -0.0048925108, -0.0225925893, -0.1348765343, 0.1955453008, -0.1088212505, -0.0410830900, 0.2687411010, -0.1877624393, -0.0115988292, -0.0710859075, 0.2282595485, 0.2380846143, 0.0873838961, 0.0426169634, -0.1405158341, 0.1272725761, 0.0402908176, -0.2775385976, 0.1951437145, 0.0489424430, -0.1947108060, 0.0526758656, 0.0964589640, -0.0025933851, -0.1088601649, 0.1034286693, 0.2320400625, -0.2245627046, -0.0133263823, -0.0145801753, 0.2506216764, -0.1348668784, -0.1856186092, -0.1117251292, 0.1658221632, -0.0990773290, 0.1269958615, 0.2066050619, -0.0963786095, -0.0036394875, -0.1355665326, -0.1143436730, 0.0351090543, -0.0538093448, 0.0114263613, -0.0662705004, 0.0805024877, 0.2408730835, -0.0425596349, -0.1601938903, 0.0785536319, 0.2158483118, 0.1492647380, 0.1612255126, 0.2412566096, -0.2310180217, -0.1595686525, 0.2627040744, -0.1668251157, -0.0556796752, -0.2490126938, -0.0380561687, -0.1272915453, -0.1435160041, 0.0302258246, 0.0360975824, 0.0391298495, 0.2751987576, -0.0683776066, -0.0304440875, -0.0459547415, 0.1719070971, -0.1270885020, -0.1001919061, -0.0918020010, 0.0894476697, 0.1779135317, -0.0146092791, -0.0832624435, -0.1825309396, -0.0657838434, 0.0227414407, 0.0027094116, -0.2255254090, -0.0447707176, 0.0987310857, -0.0223731045, -0.0278365500, -0.0180583671, -0.0065290327, 0.0300878119, 0.2133632600, -0.0231494755, -0.0539007373, -0.0077191321, 0.1473852843, 0.1288855672, 0.1465413123, 0.0200026352, -0.0486289933, -0.2149142176, -0.0540969074, 0.0703628883, -0.1252454370, -0.1437862664, 0.0584315658, 0.1530729830, 0.1437786818, 0.1583860070, -0.0554851927, 0.0723040029, -0.0046893856, -0.0531280451, -0.0335836448, -0.0513891391, 0.1104296818, -0.0910651386, 0.1075043157, -0.1684200913, 0.0467198081, -0.0885167867, -0.1488287300, 0.0752629861, 0.0771113783, -0.1394153833, 0.1949854344, 0.0568674020, -0.1367889196, -0.1603109986, -0.0363232009, -0.1413184851, -0.1999971271, -0.2664439976, -0.0564580746, -0.0962831974, -0.1836051196, -0.0976149738, 0.0570353642, 0.0949745625, -0.2673344314, -0.0367593281, -0.1783539951, -0.0710515529, 0.2126156837, -0.0869267434, 0.0793286562, 0.0652664006, -0.2183782011, -0.0630273819, -0.0504396148, -0.0976876542, 0.1933833063, 0.1464770883, 0.0777340308, -0.0324222520, 0.0576603040, -0.1679856181, 0.0975376666, 0.2436592728, -0.1799442619, -0.1693976372, -0.0131150717, 0.0820817351, -0.0245738626, -0.2098047137, -0.0263155010, -0.1632915586, -0.0025065343, 0.1064155325, -0.2658722103, 0.1224504784, 0.1346998960, -0.1106639430, -0.0093222940, 0.0350859948, -0.1824747324, -0.0934108794, 0.1011348516, 0.0031439040, -0.2312196195, 0.0283492319, -0.1431081891, 0.0165678244, -0.1928355694, -0.0751965791, 0.1014713272, -0.2372868061, -0.1448076069, -0.0787376165, -0.0937552080, -0.0998424664, 0.0453747548, -0.0697936937, -0.0705852956, 0.1456315517, 0.1682749987, -0.0147737851, 0.0797433853, 0.0360203311, 0.1771772504, -0.1744203269, 0.0362025052, 0.0090289302, -0.0517065749, -0.2766247988, -0.2238635868, -0.1978163868, 0.0881280378, 0.1653788835, 0.1625640392, -0.1383479834, -0.0573898219, 0.1313311756, 0.0727219135, -0.0029135640, 0.0324781574, -0.0505949669, -0.0975306779, 0.1186960116, -0.2520740926, 0.0836292505, 0.0034971552, -0.0079969764, -0.0378945768, 0.2482604384, 0.0604552291, 0.0669278949, -0.1638848782, -0.2367481887, -0.2077877074, -0.0115040243, -0.0861244649, 0.2153362036, 0.0549426451, 0.0725257024, 0.0560168326, -0.1706736833, 0.0301684234, 0.2167553008, 0.1198558733, -0.0555592552, -0.1106781885, 0.1733271778, 0.1204200238, -0.1075781211, -0.1728261411, 0.0347480364, -0.0914900303, 0.1055261716, -0.1392063498, 0.0661154911, -0.0016104211, -0.0885607377, -0.0124929743, -0.0946484953, 0.0519482903, 0.0682669431, -0.0190293305, 0.2212920040, 0.2803461254, -0.0974080637, 0.0836541280, -0.1573727131, -0.2387852818, -0.1003499180, 0.0862872154, -0.2342678010, 0.1340306997, -0.0070129703, 0.1382988840, -0.1654450148, 0.0526218973, 0.1633497328, -0.0717442855, 0.0227970462, 0.0001002223, 0.2397950292, -0.1945173740, 0.0861364603, -0.2664031386, 0.0024349994, -0.1309523433, 0.0881417170, -0.1217114106, 0.0978714228, 0.0191235542, 0.0325422511, 0.0090305470, -0.0765670985, -0.0647180751, 0.0865498036, -0.1094994023, -0.0391208045, 0.0190432873, 0.1725649834, -0.1102486551, -0.0965053812, 0.0293922815, -0.0264035314, -0.0655589104, -0.0777731240, -0.0718651861, 0.1049447805, -0.1399532706, 0.1274968982, -0.0945509076, 0.1083189696, -0.0364883654, -0.0756519809, -0.0094633969, 0.0399930105, 0.1270476729, -0.0935201421, -0.1982940137, -0.1454132050, 0.0625978485, 0.0107604060, -0.1802366972, -0.0862609670, 0.0017977392, -0.0407023095, 0.1758023053, -0.0098240627, -0.0458429717, 0.0663448051, 0.0763072893, -0.1733137965, -0.1201259941, 0.0133138178, 0.0288271066, 0.1289656311, 0.0995318517, -0.0151357092, 0.1904272884, 0.1693624854, -0.0579621866, 0.1274839044, 0.0423625112, -0.1449573040, 0.1079312563, 0.0632483289, -0.0108688008, 0.0431184098, 0.0864829421, 0.0131195039, -0.0480560288, 0.0623035356, 0.1104401723, -0.0971369818, 0.0074028494, -0.0335108601, 0.0397201031, 0.0278335977, 0.1998372227, -0.2408717722, -0.1168999001, 0.0261600893, -0.0155902160, -0.0197541080, -0.0725042224, -0.0782491937, -0.1189645603, 0.0409308113, 0.0921026543, -0.1445860416, 0.1063912511, -0.1021726504, 0.0389565900, -0.1425939053, 0.1071183383, -0.0894604176, -0.1948893666, -0.0645886362, -0.0546535999, 0.0871324316, -0.0069687515, -0.1417136490, -0.2117549330, 0.0018121013, 0.0092843175, 0.1359420717, 0.0226790812, 0.1783684194, 0.1732421219, 0.1551288962, 0.0198899321, -0.0601612367, -0.0446053930, 0.1055881456, 0.0868493021, -0.0533882454, -0.1159196645, -0.0326749571, -0.1903896779, -0.0111826388, -0.0031051368, -0.0456125103, 0.2443242818, -0.0695089996, 0.0555963777, -0.0583773665, -0.0120277153, 0.2135917097, 0.0605818816, 0.0573141687, -0.0275416542, -0.1629045308, -0.1310860515, 0.0114669045, -0.0116172638, 0.0640444234, -0.1329744160, 0.1151603907, -0.1326252222, 0.2096302658, -0.0956026539, 0.0445635915, 0.0952973440, 0.0505475178, 0.0350682624, -0.1162611321, 0.1072482169, 0.1526190192, 0.0444208831, -0.1037835702, -0.1579478681, 0.0256437100, -0.0744794086, 0.1724584103, 0.1062246040, -0.0624730065, 0.1147933602, -0.0740257204, -0.0268745981, 0.1409126818, -0.1392332464, -0.0173135828, 0.1942663342, 0.0973192230, 0.0025659187, -0.0346202031, 0.0256671775, 0.0285789128, -0.0595957637, -0.2169220448, -0.0344616696, 0.1080637127, 0.1050564647, -0.0467478894, -0.1505984366, -0.0424590632, 0.1662747264, -0.1213408038, -0.1151489541, 0.1373070329, 0.0147190560, -0.0089736441, -0.0517678335, 0.0754800513, 0.1578910798, -0.2535245121, -0.0928229615, -0.0187637862, -0.1900708824, -0.1256437451, 0.0133172171, -0.0256440789, 0.0737957731, 0.1726669222, 0.0098184338, -0.0472543016, -0.1268123388, 0.0744183138, 0.1209509745, -0.1561784148, 0.0442301109, 0.1091772094, 0.2413537204, -0.2688820064, -0.2228951752, 0.1879563481, -0.1967577338, 0.0176765583, -0.0822814032, -0.1582585722, -0.1185021996, -0.1746355295, 0.0089517832, 0.0511623546, -0.0101935565, 0.2383869141, 0.0379602909, -0.0474519245, -0.0604165979, 0.0891058967, -0.1306232959, 0.2361476421, 0.1605614126, -0.2163679749, -0.2368906885, 0.0666479617, 0.0484244116, 0.2141694576, 0.1246186346, -0.0255468134, -0.1831574440, -0.0613743514, -0.0711346045, -0.2655379176, 0.1635198444, 0.1536847204, -0.0834735408, -0.0767886713, 0.0060272547, -0.0447185189, 0.2049192786, 0.1475048512, 0.1285587102, 0.0407118499, 0.0700737238, 0.1890257597, 0.0802883431, 0.0740595534, -0.1456151456, 0.0465369858, -0.0644694194, -0.1248129383, 0.1511553228, -0.1962196976, -0.0267852470, -0.1316966861, 0.0898782760, -0.0782065839, -0.0535414703, -0.1628784686, -0.2470999211, -0.2500382662, -0.2270316929, 0.0560562760, -0.1459198594, 0.1720385700, 0.1381912529, 0.0842249021, 0.1982186139, -0.0466425791, 0.0103509147, 0.2278220505, -0.0502081625, -0.1789157540, 0.2548335791, -0.0969885215, 0.0480819643, 0.1472242326, 0.1168001220, 0.0442049801, 0.0171070490, 0.0366479941, 0.1386806667, -0.0569670610, -0.2262765616, -0.0486823320, 0.0803321302, 0.2260805219, 0.2478119880, 0.1480541080, 0.0821049586, 0.0019995044, -0.0103801833, -0.1053190455, 0.2184537649, 0.0904211402, 0.0673314705, 0.0561348572, -0.1779693961, -0.0956319347, 0.0223611593, 0.1887291223, -0.0192499515, -0.0853425488, 0.0720060989, 0.1071912870, -0.0200861115, -0.2067748755, -0.2497225106, 0.0081251087, 0.0461281352, -0.0485726595, -0.1856259257, -0.0633178353, 0.0392439812, 0.2052223980, 0.0258964468, -0.0710228831, 0.1699875593, 0.1885822862, -0.1223565117, 0.2664202154, 0.1774707735, 0.0257704630, 0.0360256881, 0.0168050230, 0.1856312901, -0.0777368098, 0.0248980261, 0.0622304231, -0.0571046509, 0.1177127287, 0.0427402966, -0.0313010290, 0.1144848689, 0.0319672227, 0.0789704546, -0.2036571801, -0.0089550121, -0.2544403374, 0.0393437557, -0.0292526074, 0.1341971010, -0.0418656431, 0.2096617073, -0.0912879556, -0.1223373190, 0.0148719698, 0.0126966937, 0.1601422280, -0.1296941042, 0.0597099885, 0.0467756614, 0.1203434840, -0.1742435843, -0.0937689021, -0.1593622714, 0.0941451192, -0.1310165226, -0.0939338431, -0.0264963433, -0.2265164852, 0.1790751368, -0.1942159235, 0.0983815491, 0.0535063483, 0.0204766057, -0.1940421015, -0.0643763617, 0.1686510146, 0.1798056811, 0.2479190677, 0.1021777093, -0.1983341128, -0.1108998060, -0.2259667814, -0.0629531220, 0.0014063529, -0.0581523031, 0.0897846892, 0.0194755979, 0.0824158341, 0.1029945984, -0.0516667739, -0.0424962379, -0.0892367885, 0.1531415433, -0.1208370924, -0.0890524238, -0.0510974713, 0.0443368070, -0.1778210998, 0.2254125625, 0.1892818809, 0.0439348966, -0.0556684770, 0.0081130806, -0.1037827805, 0.0118532265, 0.0665774420, 0.0391753949, -0.1046440154, -0.2838519514, -0.1527220607, -0.0087966705, 0.0384701081, 0.2748853862, 0.1332073659, 0.0021356924, 0.0407193787, 0.0094025880, -0.1098799109, -0.0567917004, 0.1669416577, -0.0613052696, 0.0760102794, 0.1150589362, -0.1355130821, 0.0225077868, 0.0476800650, -0.0687752888, 0.0439446047, -0.0749597847, 0.0637259111, 0.2672670782, -0.2518766522, -0.0564497299, -0.2066761404, 0.0380922072, -0.0941866785, 0.2273073643, 0.0556509420, -0.0452233255, 0.1537194252, -0.0679195151, 0.0087382169, 0.0648350418, 0.1107914373, 0.1229070872, 0.1665786952, 0.0837865472, 0.1437599808, 0.1178675592, -0.1402595788, -0.0793602616, 0.1459808201, 0.1125737280, 0.0805915445, -0.0310780574, 0.1892780364, 0.1039617583, -0.0007369666, -0.0007573990, 0.1156125218, 0.0492504910, 0.1513603777, 0.0421427339, 0.1676044613, 0.0588711947, 0.0086192321, -0.0992670953, 0.1055764556, 0.0335804261, 0.0135053257, -0.1698298156, 0.0094771665, 0.0771355033, -0.1379753202, 0.1940785944, -0.0305888001, 0.0323158205, -0.0328607969, -0.1143366545, -0.0983909592, -0.0473686531, -0.2224557251, 0.1644169986, -0.0733791962, 0.0831074715, 0.2378639132, 0.0097298650, 0.2667695582, 0.1279307753, 0.0719480366, 0.0479550138, 0.1490145326, 0.1247613952, 0.0747731328, -0.0902684405, 0.0412139781, -0.0736660659, 0.0419848748, -0.2510466278, -0.1939685047, 0.0806107968, 0.1664403677, -0.2260047793, 0.0339896642, -0.0503335446, 0.1285292655, -0.1597411335, -0.0285251345, -0.0465013199, 0.0260357261, 0.1808182150, 0.1802062541, 0.0018608699, 0.0564604774, -0.0251427870, -0.1995979249, -0.0908518657, 0.0939687341, -0.1165364459, -0.0878201053, -0.0060648336, -0.0914269462, 0.0751000941, 0.0947661325, -0.2307674736, 0.1431518048, -0.2465063632, -0.0512632206, -0.0544388033, 0.0423658341, -0.0608315803, -0.2287259996, 0.0809311420, -0.0168109406, -0.0299243815, 0.0524026230, -0.1309499592, -0.1090289503, -0.0764259547, 0.0356525555, -0.0575082302, 0.0498199128, 0.1713204831, -0.0253408868, -0.1626577824, -0.1757505983, -0.1762699932, -0.2139127851, -0.1188952252, 0.0547868647, 0.1357178986, -0.1267794818, 0.1606403738, -0.1036395282, -0.1367623806, -0.1135947853, -0.1500035524, 0.0307311844, 0.2103682756, 0.0390729532, 0.2369533330, 0.1510313302, 0.0295986757, -0.2287468612, -0.0889891461, 0.1012965143, -0.1267117262, -0.0116923684, -0.0160431825, -0.0760200545, -0.0171567649, 0.0469674133, -0.0677495152, -0.1151990145, 0.1991139054, 0.0327288695, -0.1249924377, -0.1283857822, 0.1889996529, -0.0551035069, 0.0075367228, 0.0802783370, -0.0110621471, -0.1449595541, -0.0277455933, 0.0188301448, 0.0893298462, -0.0929946154, 0.1273877323, 0.0853842422, 0.0878860578, -0.1005098000, -0.1143281907, 0.1352346092, -0.0341825671, -0.0454705581, -0.0698567703, 0.0031118067, 0.1431250721, -0.1832789034, -0.0107774492, 0.0433762148, -0.1177970245, 0.2295590490, 0.1711854339, -0.0124760475, -0.0901418403, 0.0299113821, -0.2797532976, 0.1601629406, 0.0242123716, -0.1296352893, -0.0076443534, 0.2560913265, 0.0837801322, 0.2248425484, 0.1508189738, 0.1621018648, 0.0402762331, 0.0394974686, -0.1076388136, -0.1487850845, -0.0763621181, -0.0209928956, 0.0229410734, 0.0010437039, -0.2479218841, 0.2716392875, -0.1047473326, 0.0509206578, -0.0624808520, -0.0444682948, 0.1218805686, -0.0204036031, 0.0431606695, -0.2561533451, -0.0002135224, -0.0541021787, 0.0145926662, -0.2450130135, -0.0462394506, -0.1685897261, -0.1272134185, 0.0612742193, 0.0425719693, 0.1366486996, -0.1948429495, 0.0472513661, -0.0577742271, -0.1709136218, -0.1123052165, 0.2640244663, 0.2076939195, 0.2248820513, 0.0181817543, 0.1259288639, -0.0026192702, -0.0579647683, 0.0521815121, 0.0153372744, 0.1174189448, 0.1307975054, -0.0722472966, -0.0979395434, 0.1687942892, -0.1011060998, 0.0709622875, -0.0561135598, 0.1700464785, 0.0150127476, -0.0570893548, 0.1160835028, -0.1779964715, -0.0580935851, -0.0033242633, -0.0910368860, 0.2304431796, 0.1129203439, -0.1016503349, -0.1075792313, 0.0441980474, 0.0403621495, -0.1200394407, -0.0006923152, -0.0366159566, 0.0542458966, 0.2171974629, 0.0655197948, 0.2670719922, -0.0289860722, -0.0782100484, 0.0789025649, 0.0389139280, -0.0116522396, 0.1013664678, 0.1594532281, -0.1026286706, 0.0140949162, 0.0170515906, 0.1434432119, -0.1359417289, -0.1305823177, 0.0479294881, 0.0834724754, 0.0149169248, -0.2004005462, -0.0772586092, 0.0611893423, 0.1684238166, 0.0022828646, 0.1580645591, -0.0058856425, -0.0557386987, 0.0220225416, 0.1005959809, 0.0321449637, -0.0884576589, 0.0568735935, -0.0812361240, 0.2189681679, 0.0025419670, -0.0883915871, -0.1355768293, 0.0568878688, -0.1259353608, -0.0320242643, 0.0590101704, -0.2474419028, 0.2042695135, -0.0289340802, 0.0875918046, -0.0614985116, -0.0538268946, -0.0876953155, -0.0310245510, -0.0624391921, 0.1347035617, -0.2141400725, 0.0885207728, -0.1643034965, -0.0633839816, 0.0092066210, -0.2110482901, 0.1850185245, -0.0145581635, 0.1873502582, 0.0714656487, 0.1138621867, 0.1822092086, 0.0828488022, -0.0219750497, -0.0886448771, -0.1038026661, 0.1844511777, 0.0169893578, -0.0411843248, -0.1787346005, -0.1199611202, -0.0294188913, 0.0005796149, -0.0315495655, 0.0073330943, 0.0015447078, 0.0129828416, 0.0454087667, 0.2105824649, 0.0121468892, -0.0319336765, -0.0054790634, 0.0788259059, 0.0307552889, -0.0103298547, 0.1476693898, -0.0254229289, -0.1008627564, 0.2476024777, 0.0123145049, -0.0696209520, -0.0256141368, -0.1260107309, 0.1845767498, -0.1450304538, -0.0481562838, -0.2433906496, -0.0406511426, 0.1544648558, 0.0659552515, -0.0636838973, 0.2024470121, -0.1441712677, 0.2162052840, -0.0600365959, 0.1660102308, -0.1375164837, -0.2230587453, 0.0962262899, -0.1297716498, 0.2665316761, 0.1160218567, 0.2314377576, -0.0654539168, 0.1790926605, 0.0198722072, 0.0172521006, 0.0726808980, 0.0849850923, 0.0144937858, 0.2158293575, 0.1689022481, -0.2206354588, 0.1410968006, -0.0514710695, 0.0690265894, -0.1635036916, 0.0733716711, -0.0054223347, 0.0850942656, 0.0872799754, 0.2186661214, -0.0569600835, -0.0726170391, 0.0991694108, 0.0977341756, -0.1119292006, -0.0346382931, -0.0073719448, -0.0150398174, 0.2012899816, -0.2682485580, -0.0125690093, -0.0236213263, 0.1026888937, -0.0882939100, -0.2278275043, 0.2733349502, -0.1418272406, -0.0133165242, 0.1458215564, -0.1561971456, -0.0143773165, -0.0295227617, 0.0943958312, 0.0938695595, -0.1275981665, -0.0132402619, -0.1309632212, -0.1825709045, 0.0779781714, 0.0712864324, -0.0252789576, 0.2008630782, 0.2230524719, -0.1232375056, -0.0769842789, 0.2683928609, 0.1435251534, 0.2767325640, 0.2588440478, 0.1635701507, 0.0906400755, -0.0862936229, -0.0677706748, -0.1516964436, -0.0786257684, -0.0200597737, -0.1438847184, 0.0575312562, -0.2444327921, -0.0501261279, -0.0492062457, -0.1000400409, 0.2124739289, 0.0980809703, 0.0158527438, -0.2565361559, 0.1413608342, 0.0646906793, -0.1654914320, 0.1371164918, 0.0489003137, 0.0620542876, -0.0194630045, 0.0159466919, -0.1832443476, -0.2259507477, -0.1747021973, 0.1586387157, 0.0048997807, 0.0116197653, -0.1177938282, 0.1980845928, 0.1556158811, -0.1356069893, -0.0449068137, -0.0387894996, 0.1583906263, 0.0269724745, 0.0467150025, -0.1466963887, -0.0316682719, -0.2253960967, 0.2522042394, 0.0977811068, 0.1121147722, 0.1379271001, -0.1867599189, -0.1403136402, 0.1579821706, -0.1154148877, 0.0213931538, -0.2250761241, 0.1307287961, 0.0176372100, -0.2261626124, 0.1498502046, -0.0207169782, 0.1324578673, -0.1624899209, 0.1433231384, -0.0939500034, 0.2183672786, -0.2150602490, -0.1025069430, 0.0998113304, -0.0619015507, -0.2469748706, 0.1314893961, 0.1373914480, -0.0395725928, -0.0287645049, 0.0577584356, 0.0240852050, 0.1060436592, -0.0269202963, -0.2748076618, 0.1131125614, -0.1188412607, -0.0851186290, -0.0842894539, 0.0389413089, -0.2397494614, 0.0787288174, -0.1522656977, -0.0787334666, 0.1093752235, 0.0122669190, 0.0242328737, 0.1539368927, 0.1690707803, -0.1888547987, -0.0123873949, 0.0081795482, -0.1999212354, 0.1613926291, -0.1498297006, 0.0296000652, 0.0234846976, -0.1147062555, 0.1629528105, -0.0565042682, 0.0236442238, -0.1367691159, 0.1239651665, -0.1921499670, 0.1532468200, 0.1399555504, 0.0385770723, 0.0364146121, 0.1241261214, 0.0527821518, -0.2094586790, -0.1015160382, -0.0711591765, -0.1407421231, -0.0360101312, -0.1915223747, 0.0229128413, 0.0570388325, 0.1480688602, -0.1808656305, 0.0560105965, 0.0255398732, -0.0741833150, -0.0415154956, 0.1167092472, -0.2257407457, -0.0622787476, -0.2350417972, -0.0951982066, 0.0639611930, -0.1762215197, -0.2371825576, -0.2759360969, 0.0393021479, 0.0497982875, -0.1534721851, -0.0530282930, -0.0430359915, -0.0419874676, -0.0091576613, 0.0382353365, 0.0409328379, -0.2094104886, 0.0393520445, -0.2687601149, 0.1582164615, 0.2667125762, -0.1861655414, -0.0578780659, 0.0611030087, 0.1124890894, -0.1743464470, 0.0015048537, 0.0092260195, 0.0476829894, -0.2832182348, 0.0520074740, -0.0271470379, 0.0302318428, -0.0985398516, 0.0577395596, -0.0165329631, 0.0579455644, 0.0881338716, -0.0095217852, 0.0726070851, -0.1606518626, -0.0717018396, -0.1259460747, 0.0426442325, 0.1218535900, -0.1283965558, -0.0999316052, 0.0142306471, -0.0161674283, -0.0526103042, -0.0293333363, 0.2089054734, 0.0997351930, -0.1559971571, -0.0299518295, 0.1027407944, 0.1471136212, 0.2296420187, -0.0468312204, -0.0928913727, -0.0526810698, -0.0663682669, 0.0142287062, 0.0143232541, 0.0816170350, 0.2006037086, -0.2291041762, -0.1727378666, -0.1703446507, 0.1000576839, -0.1191411018, 0.0008061036, 0.1597285718, -0.0495972931, -0.1002912223, -0.0170402676, 0.0813902393, 0.1659408659, 0.0599421486, -0.1417641640, -0.0949884355, -0.0505428053, -0.0256944522, 0.0044108070, -0.1089948267, -0.1059775054, 0.1630489975, 0.0036384950, -0.0243679844, -0.1443820000, -0.1743264645, 0.1057929844, 0.0545170940, 0.0058458433, -0.1477735639, 0.0099809226, -0.1719967872, 0.0099377409, -0.0462255441, -0.1106670946, -0.1853861809, -0.2256672382, -0.1540418714, -0.0630200133, 0.1118526235, -0.1277489960, 0.1530053020, -0.0982166678, 0.1210318431, -0.1096211523, 0.0646332130, -0.2739138901, -0.2316664904, -0.0941325799, 0.0137625718, -0.1628642529, 0.1567863971, -0.2649648786, -0.2236826867, -0.2086317688, 0.0488691553, 0.0117385732, 0.0896438360, -0.0278958920, 0.1160846502, 0.1059757769, -0.0161705706, 0.0617284551, -0.1167714894, 0.1974759996, -0.1765760481, -0.0221479163, -0.0072192298, 0.0933017507, 0.0479790606, -0.1904515177, -0.1003886014, 0.0714123622, -0.0090992432, 0.0508615412, -0.2435031235, -0.0491326563, 0.2171119899, 0.0557104982, -0.1976651400, -0.0844282135, 0.1416818351, 0.1259083003, -0.1384541839, -0.0771420747, 0.0062078075, 0.0103250146, -0.0061707804, -0.0204310548, -0.0338448435, -0.1814419329, -0.0919904113, -0.0952779055, 0.2125354707, 0.0231437534, 0.0039287498, -0.1126920134, -0.1088546515, -0.0469091758, 0.0005420359, 0.0590682738, 0.0236582626, -0.0943097323, -0.0102378624, -0.1500045955, -0.0279746465, -0.0439511165, 0.1316401809, -0.1075401679, 0.1509293020, 0.0417978279, 0.1540580541, 0.0019606154, -0.0780789480, -0.0698199272, -0.0154796951, 0.0069097895, 0.1155126616, 0.0222910400, 0.0699018314, -0.2411918789, -0.2110425234, -0.1069319397, -0.0242796633, -0.1405019313, -0.0509576611, -0.0245721117, 0.1926453263, 0.1102477163, -0.2258535475, -0.1947897822, -0.1171139255, -0.0073002921, -0.0011499614, -0.2525083125, -0.0428558365, 0.0852023959, -0.0351128541, 0.1309509128, -0.2621706724, -0.0550754070, 0.0697850883, -0.1147384942, 0.1362697780, -0.1404618174, -0.1074210405, -0.0553871728, 0.0503402650, -0.0382911116, 0.0582219251, -0.0022984769, 0.0196626615, 0.1153576970, 0.1103282347, -0.1490191668, 0.0516217798, 0.1380263716, 0.0514124371, -0.1376601458, -0.0550168380, 0.0719716847, -0.0400247984, -0.1451779157, 0.0805058926, -0.0270114355, 0.0010724773, -0.0958683565, -0.2224099487, 0.0686127022, 0.1062603816, -0.0121840807, -0.1678098440, -0.1289132237, 0.2146258801, 0.0989573821, 0.1728231013, -0.0229814239, 0.1004638448, -0.2186564207, -0.0598058440, 0.0497429483, 0.0175839011, 0.0386953838, -0.0610937029, 0.0440851562, 0.1400888264, -0.0789457113, 0.0789727196, -0.0837593302, 0.1043836772, -0.1753930449, 0.1658277065, -0.0050533656, 0.1657906920, -0.0130620627, -0.0636626482, 0.1451286525, 0.1445229053, 0.0332575664, -0.0148938308, -0.2000195980, 0.1860301346, 0.0179184116, 0.0907746553, -0.0526341125, 0.1293641329, -0.0747684389, -0.0603674874, -0.2032821476, 0.1604235172, 0.1732734740, -0.0518484376, -0.0888432935, -0.1264218241, 0.1955271363, -0.1600240469, 0.0181366503, 0.1515988857, 0.1373050660, 0.2739499509, -0.1362051815, -0.0361769684, 0.0201515872, 0.1878092289, 0.0024334781, 0.1179002821, -0.0800163373, -0.1683836132, 0.0337181017, -0.2194074541, -0.2066074610, 0.1325943768, -0.0354542248, 0.1162313670, -0.2576194108, -0.1632769853, 0.0831514522, -0.2392082959, -0.2086877972, 0.0011370996, 0.0185190048, -0.0172046144, -0.2053180188, -0.1997724324, -0.0243935622, 0.0155676827, -0.1230021566, -0.0256747771, 0.0576560833, -0.0623899698, 0.0248513911, 0.0230947658, -0.1847692281, 0.0043151844, -0.1420806497, -0.0216899049, 0.2371016294, -0.0193203446, -0.0469634868, -0.0585694648, -0.1449164450, 0.1139854416, 0.0562151112, -0.1488060653, -0.0509357899, -0.2030334622, 0.0145158600, -0.0549566709, -0.0507791266, -0.2252721339, 0.0358388610, 0.1051905453, -0.0801571459, -0.1709754020, -0.0287895165, 0.0795848966, -0.1602207571, 0.0605726987, 0.1810882688, 0.2768462300, -0.0891340598, 0.0155321918, 0.1618611068, -0.1242618859, -0.0240286887, 0.1457715482, -0.1809014529, 0.0204806384, -0.0173182879, -0.2454432547, -0.1922546476, -0.2016683668, -0.2588819563, -0.2493077964, 0.0594125204, 0.1291681081, 0.0841997862, 0.0199031215, -0.1049053445, -0.1247327998, 0.0313816145, -0.1724710912, 0.0503131375, -0.1793545336, -0.0986028165, 0.1030141637, 0.0093783885, -0.0273093600, 0.0591983348, -0.0003766825, -0.1024031714, -0.1402024925, -0.0508924536, 0.1647575349, -0.0023706569, 0.2184810042, -0.1347754002, 0.0938400179, -0.1173373014, -0.0092335306, 0.0457396843, 0.0112725534, 0.1275827438, 0.1504373699, -0.0159747433, -0.0945319310, -0.2010094970, 0.0934610590, -0.1130048111, -0.0636828095, -0.2426724285, -0.1692055613, 0.0156362914, 0.1044004783, -0.1046546251, 0.0074567981, 0.0343585350, -0.0580189899, -0.2140773535, -0.0282830764, -0.0894359797, -0.1176938266, -0.2429937720, 0.0670189261, -0.0552773699, -0.2589707077, -0.0131787593, -0.0208087973, -0.2400163263, 0.2247342765, -0.0813643634, -0.1336293221, 0.0116703110, -0.1382900476, 0.1264319420, -0.0683961958, -0.1696108729, -0.0481227674, 0.1709208935, -0.0727868304, 0.0270423945, 0.2499380708, 0.2294842750, 0.0256777517, 0.0666656494, 0.0350463353, -0.0535346270, 0.0323475339, 0.1426024437, 0.0190407634, 0.1167771816, 0.0015747865, -0.0387747586, -0.1979993731, -0.1102098227, 0.0011393066, -0.0842368975, 0.0489526019, -0.1930992603, 0.0569673702, -0.0029238961, 0.0973026454, 0.0907964855, 0.0715836361, -0.1300591379, -0.1580371559, -0.0634239912, 0.0271367356, -0.0196701679, 0.0592997186, 0.1852833182, -0.2551292479, 0.0415182933, 0.2268879712, -0.1236118004, 0.1253813207, 0.1820095479, 0.2354934216, -0.0643441305, 0.1825208366, 0.0726936311, -0.0274260100, -0.0165262986, -0.1965554655, -0.1733717620, 0.0352318436, -0.0623009242, 0.1837704480, 0.0698618516, -0.0470897555, -0.1076280996, -0.0139815388, 0.0028300243, -0.1398624927, -0.0211765673, -0.0150237093, 0.1052674502, 0.0314582661, 0.2440043837, -0.0311119892, 0.1423843354, -0.0313223712, -0.0224749967, 0.1117139459, 0.0958521292, 0.0559557639, -0.0823664963, -0.0954447463, 0.1095706895, 0.0235032886, 0.0564808100, -0.0530980490, -0.0555867627, -0.0063919276, 0.1391726732, -0.0751713440, -0.0536305159, -0.2240017951, -0.0217460357, 0.0655101389, 0.0907757580, -0.0527926683, 0.0708572790, 0.0832731724, -0.0571966879, -0.0034777576, 0.1738746762, -0.1081977487, -0.0074383509, -0.0366880894, 0.0572939999, -0.1953134239, -0.0812596232, -0.0844632909, -0.0224191416, 0.0060459352, 0.1123773232, 0.0327291861, -0.1318553984, 0.0916289091, 0.0105020190, -0.0260828752, 0.1148398444, 0.1585781425, 0.0183324534, -0.0891196430, -0.0761090964, 0.0747622550, 0.1400625706, -0.1940026134, 0.1482236981, 0.0017151958, 0.0268764552, 0.1138250083, -0.1364981234, -0.1613414139, -0.0721244365, 0.0206139088, -0.0751409754, -0.0105320252, -0.0655995682, -0.1613246500, 0.0658925325, 0.2074729800, -0.2653611898, -0.1496958584, 0.0385766327, 0.0124996528, 0.0490954183, 0.0307629649, -0.0044035693, 0.0273034554, -0.2102257460, -0.0929340795, -0.2389134020, -0.0488762781, -0.0031917868, 0.0901321769, -0.0207195766, 0.0926272273, -0.1814474910, -0.0426194966, 0.0138835618, -0.0083121182, -0.2428697050, 0.0549950898, 0.0309186224, -0.1871542186, -0.1011940539, 0.0916617066, 0.1131752357, 0.1088131443, -0.0092865955, 0.0148050692, -0.0676894411, -0.0482684150, 0.0572749972, -0.0340049081, 0.1213266999, -0.0080125593, -0.1446883678, -0.2096211314, -0.0509695485, 0.0790561214, -0.1597447395, -0.1845868379, -0.0259290915, 0.0762902945, -0.0889137685, 0.0241041724, 0.1471986622, -0.0343029164, -0.0196477491, -0.0421985537, 0.0681439117, 0.1155044362, -0.2257332504, -0.0455590263, -0.0967321694, -0.1043362021, -0.1532312483, -0.2735949457, 0.2133116275, -0.0605398454, 0.2465562075, 0.0064217006, -0.2090346813, -0.0144599257, 0.0486645810, 0.0202730689, -0.0008763454, 0.1818933338, 0.1514167339, 0.2273600399, 0.0746373087, 0.1360082626, -0.1570120007, 0.1039169431, 0.2577464283, -0.0254722741, 0.0538231134, -0.0079455543, -0.0382892974, -0.1083638743, 0.0712531954, -0.1612498015, 0.1030151471, 0.0010024117, 0.2649012804, 0.0316308029, 0.1863937080, 0.0474970378, 0.1785808206, 0.0345978402, -0.1589304358, -0.0566752851, 0.1482001990, -0.0200382974, 0.0210264102, 0.0916722938, -0.0302492529, -0.0634472445, -0.0830763057, 0.1150085554, 0.1696584225, 0.0255563371, 0.1192455888, -0.1678155512, -0.1594306380, -0.1264255196, -0.1143782586, 0.1026699468, -0.1008222997, -0.1395424455, -0.0228944384, -0.1975596547, 0.0588065162, -0.0164984949, 0.0294482578, 0.2794273198, 0.0151086301, 0.0286035743, -0.0298728161, 0.1219936609, -0.1014692709, -0.0304031856, -0.0051829848, 0.1634877324, 0.2024467736, -0.0692030340, 0.1161994115, -0.0482391566, -0.0686140284, -0.0937599242, 0.2474790812, -0.0173520725, -0.0928464979, 0.0804022029, 0.1187096164, -0.0127495844, 0.1414685398, 0.0285567995, 0.0448676720, -0.0739121288, 0.1330590248, 0.0432972275, -0.2108624578, 0.0028221777, 0.0342501402, -0.0648833662, 0.0690148994, -0.1399157345, -0.0047940230, -0.0420859307, 0.2779685855, 0.1008420289, 0.0807821602, -0.0544242337, -0.1196475103, -0.0314773135, 0.1190596297, 0.0787275732, 0.1033980250, -0.0405920930, -0.1380895227, -0.0830653012, -0.1038837209, -0.1336356103, -0.1926567107, -0.0607143790, 0.0443994142, -0.2441439033, 0.1300514787, -0.2052439600, -0.0792311653, 0.1835233420, 0.1195394546, 0.0530942380, 0.1343365759, -0.1298891455, -0.0123813832, -0.0568336658, 0.0217800494, -0.0227335077, 0.1479044706, -0.0402801186, 0.1111526564, 0.2506549954, -0.1333352774, -0.0762468055, -0.0255112220, 0.0828255638, -0.0390777998, -0.0007464127, -0.0631247386, 0.0269397851, -0.0263636466, -0.2749674916, -0.0300841387, 0.1463356465, 0.2712667584, -0.1247410625, -0.1514747441, 0.0513837747, -0.0183290765, 0.0444951244, 0.0649472773, 0.1906306297, 0.1179007441, 0.0672524571, -0.0842458531, -0.0570431314, -0.1116690859, -0.0940046757, 0.2221355587, -0.0561960265, 0.0342959017, -0.0090726437, 0.0625951290, -0.0892970636, 0.1150895581, 0.0908585191, -0.0249172468, 0.0868114904, 0.2376442552, -0.0002628071, 0.1169506535, -0.1902315319, 0.0497797653, -0.1912632436, -0.1065527424, -0.0023658595, -0.0355492160, -0.1133017987, 0.1542163342, 0.0198009610, 0.1070748493, 0.0471970215, 0.0623001233, 0.0176572390, 0.0704865754, -0.0513960756, 0.0202670451, 0.0322984718, 0.0117972102, -0.0682427511, 0.1025065333, 0.0343059562, 0.2304357588, -0.0781211480, 0.0191012267, -0.0003855591, -0.1449659467, 0.2142966241, -0.2107029557, 0.1235192493, 0.1535222828, 0.0234334059, 0.0514241382, -0.1101354659, -0.0501060188, 0.0592118725, -0.1999530494, 0.2041653693, 0.2414994240, 0.0056790453, 0.0553164072, -0.0119907865, 0.2511194050, 0.1223338991, 0.0297364686, 0.1175779402, -0.1433733404, 0.0961069167, 0.1736258268, 0.1413334459, -0.0752179772, 0.0577544197, 0.1910608411, -0.0713168979, -0.1609804183, -0.0851651952, -0.0077026733, -0.0435863212, -0.0211452693, -0.2121440172, -0.0433555432, 0.0942553580, -0.1025293693, 0.1600184143, 0.1744000465, 0.1120371521, -0.0612411313, -0.0657007322, 0.0837186426, 0.1518898606, -0.0374549665, 0.0399914756, -0.0104121817, -0.1507899016, 0.0356989540, -0.1982989460, -0.0687170327, -0.1384795159, 0.2577488422, 0.0389766321, -0.1467920989, -0.0417860001, 0.1334706247, 0.1628675312, 0.0173035637, 0.0173692945, 0.2571250200, -0.1188942194, 0.0030463955, 0.0049708937, -0.1913721114, -0.1759540886, 0.1033009067, -0.0227774177, -0.1356474459, 0.0747346953, 0.1905643791, 0.1273190677, -0.1766241044, 0.0037899672, -0.0000281464, -0.0541219898, 0.1014142409, -0.1935369074, -0.0141447047, -0.1464970410, 0.0908603296, -0.0592003576, -0.0556851961, -0.0913210809, -0.0130390730, -0.0500695184, 0.2612088025, 0.0975314006, -0.0151656289, -0.0384166464, 0.0213793069, -0.0227278937, -0.0705900416, -0.0285562109, -0.0169547964, 0.1179231331, -0.0756127760, -0.0021150620, 0.0228790343, 0.0516181141, -0.1213949621, -0.0707558542, -0.2055264562, 0.0213388819, -0.0866443962, 0.0080755474, 0.0277543366, 0.1180692539, -0.0625028983, 0.0452518910, 0.1607020050, -0.0643493533, -0.1613972038, 0.0505403057, 0.1528727263, 0.0992148370, -0.1433785856, 0.0713912696, 0.0727130920, -0.1941240579, 0.2616371512, 0.0234878995, -0.1972223669, -0.1479631215, 0.1216725633, -0.1584951580, -0.0493750982, -0.0136066368, -0.1113450602, -0.0051758280, 0.1122816876, 0.0499224439, 0.1505232602, -0.1234486103, -0.1536965966, -0.0274655353, 0.0066564521, 0.1497306079, 0.0499734655, -0.1551912278, 0.0479181856, 0.1148990840, 0.2358743250, 0.1997336149, 0.0340076983, -0.1354973912, -0.0891764984, -0.1222430468, -0.0547436550, 0.2398836613, -0.1270507127, -0.0935481116, -0.2466065139, 0.1487026811, -0.0484065302, -0.1989156604, 0.1655541062, 0.2360265404, 0.1599457264, 0.1682689786, 0.2818230093, -0.0178635586, 0.0726304725, -0.1258690506, -0.0782241076, 0.2119735926, -0.2236905992, -0.1626579612, 0.0333460011, -0.0927542597, -0.0056889979, -0.0505536050, 0.0551571175, 0.0316834413, -0.0439838506, 0.0834716931, 0.2045050114, -0.1331083775, -0.0237183142, -0.2424230874, -0.2181183994, 0.0626461208, -0.1395792067, -0.0365286246, -0.0824799463, -0.2219969928, 0.0170684606, -0.0147073604, 0.1464793682, -0.0810569301, -0.0960889086, 0.0846618488, 0.0685636029, -0.0195566621, 0.0264317077, -0.1837403774, -0.2235138565, 0.0476336181, 0.1124267429, -0.1057582051, 0.1362998039, 0.1080894768, 0.2236209959, -0.0167272836, 0.1269926429, -0.1418724507, 0.0231243260, 0.1514077783, -0.0459228456, -0.0564569421, 0.0866546631, 0.0719763413, -0.2135617733, -0.2031668127, -0.0562771931, -0.1430308372, -0.0953392237, 0.0118989209, -0.1254952252, 0.0749475732, 0.2431845665, 0.0602563694, -0.0365506969, 0.2475909293, -0.1703537405, 0.1003978252, -0.0463408530, 0.0409768634, -0.1622553617, 0.2010341287, 0.1803450733, 0.1083923131, 0.2680261433, -0.0942143351, -0.1362130791, -0.2182347327, -0.0988532975, 0.0054367371, -0.0291332304, -0.0822331682, -0.2504643798, 0.2059491575, -0.0517999418, -0.1690478176, -0.0206446592, 0.0613881350, -0.1230890527, 0.0611495115, -0.0010715945, 0.1622552574, 0.0327787213, -0.1264205277, 0.0022747472, -0.0199717581, 0.0947798714, 0.0949499756, -0.0919345617, 0.0303868745, -0.2078344375, -0.0107643697, -0.1376940608, 0.0941107497, 0.0560707040, 0.0919371173, -0.1277568191, 0.0739024356, -0.1170842722, -0.0413110889, 0.0398197472, -0.0873087794, 0.0092462245, 0.1745582372, 0.0978503600, -0.1190779433, 0.1506708115, 0.1530448645, 0.1716835052, -0.0940407813, -0.0350532047, 0.0946568772, 0.0644318461, -0.1695911735, -0.2283953279, 0.0376877896, 0.1008784100, 0.0309049282, -0.0060671335, -0.1871654093, -0.1361695081, 0.0609833151, -0.1156521216, 0.2351133674, 0.2436248511, 0.0360793136, 0.0490246452, 0.1362462342, -0.0683820695, 0.0224331487, 0.0070739826, 0.1068333313, -0.1338802874, 0.0069930255, 0.1059406996, -0.0305239931, -0.0073958864, -0.0665242821, -0.1877652705, 0.0786297247, 0.1715631187, -0.0472752899, 0.0203121025, -0.1495137960, 0.0557675920, -0.0600759238, 0.1008192152, -0.1994613409, -0.1715153605, 0.0424633995, 0.0289331209, 0.1283676624, 0.1461374313, 0.0678791180, 0.0618751459, -0.0457977057, -0.0858755484, 0.0234667137, -0.0591688119, 0.0744745806, -0.0825970024, -0.0779034346, 0.0140244225, 0.0781439617, -0.0012635542, -0.1316785067, -0.0121718934, 0.1491298974, 0.0770978779, 0.0563598610, 0.0064461934, 0.1432618201, -0.1465715468, -0.0683677495, -0.2009872049, 0.1086362153, -0.0379693806, 0.0855509341, -0.0209610630, -0.0074850763, -0.1035198197, 0.0223731287, 0.0899083167, 0.0482028462, 0.1009157822, -0.1342164427, -0.0498497412, 0.0537615530, -0.0290541444, -0.0580404773, 0.1879820973, 0.0023241921, -0.1624288261, -0.0551551916, -0.0039199470, 0.0624978282, 0.1238215193, -0.0234189313, -0.1004844159, 0.0630323663, -0.0213860031, 0.1034392193, 0.0140222926, -0.0361034013, 0.1933827698, -0.0502615012, -0.0667294785, 0.0532574430, 0.1283615977, 0.0096071996, 0.0259595774, 0.0750178993, -0.1133946180, 0.0759179816, -0.1966336071, 0.1908554137, -0.0504283048, -0.1944944412, 0.0741372928, 0.1890415549, 0.2097824663, 0.1607090086, -0.0193023961, -0.1112419739, 0.0644382238, 0.0814530477, 0.1026784778, -0.0622229166, 0.0600833632, 0.1411135495, -0.1553291380, 0.0214279480, 0.0248090308, 0.1201654673, 0.1809284687, 0.0460599586, 0.0503799617, 0.1153915972, -0.0121527817, -0.0523828603, -0.0111702085, -0.0713807940, 0.2513347864, -0.1381304860, -0.0829288289, 0.2802893817, 0.1167517528, 0.1127030775, 0.0658591390, 0.0924462080, -0.1300726831, -0.2394100577, 0.0159593485, -0.0961515754, -0.0191034842, -0.1357974112, 0.2417018265, 0.2086105347, -0.2377355844, -0.2059352547, 0.0272716936, 0.0408005603, -0.1360196322, 0.1943308413, -0.0820911899, 0.0775987133, -0.1015323028, 0.0451884940, 0.2557947636, -0.0342686735, -0.0427358709, -0.0695604086, 0.0585848577, -0.1676534712, 0.1730494797, 0.0811794624, 0.0383229479, 0.2311481237, 0.0002919078, 0.1825007796, -0.0184231605, -0.1048350558, 0.1713128090, -0.0218123812, -0.0057464400, 0.0488204658, -0.0401057713, 0.0322843380, 0.1731207073, 0.1567197889, -0.0901621580, 0.2382788211, -0.1256550699, 0.0412364751, 0.2182603329, -0.0848143399, 0.1163422242, -0.0721786916, -0.2570303977, 0.0997707471, -0.2309026569, -0.1584003121, 0.1214578971, -0.0809931234, 0.0440727919, -0.0740966201, -0.0055082701, 0.0661090165, 0.0952533484, 0.0092205955, -0.1804548800, 0.2254521400, -0.0634004399, 0.0644687861, 0.0791023001, 0.0280727744, -0.1663985848, -0.1213295981, 0.2281731516, -0.0520877875, -0.0689619854, -0.1760110855, 0.1606056541, -0.0189243481, -0.0050509595, 0.1171388552, -0.0769239664, -0.0112622911, -0.1485386640, 0.0562197454, -0.0515104309, 0.1264333129, 0.0475043729, 0.2170038074, 0.1696492583, 0.1339264214, 0.0532365814, 0.0332791172, 0.2622420192, 0.0761461332, 0.0246343613, -0.0207201540, -0.2524267733, -0.0978678092, -0.1740723699, -0.0382687673, -0.0756909847, 0.0244790316, -0.0745856836, 0.1146658212, 0.1135159284, 0.0326868296, -0.0533607118, -0.0561113693, -0.1116604954, -0.0828481317, -0.1336616427, -0.2091437131, 0.0799004212, 0.1297786981, -0.1461768448, 0.0976565778, 0.2424842566, 0.0046402784, 0.0398189873, 0.2480535358, -0.0905438736, 0.0852937326, 0.1206212342, -0.1199198663, 0.2235184610, -0.1007236168, -0.1566876471, -0.0690251738, -0.1187155247, 0.0024087676, 0.2072552890, -0.1079702824, 0.0842711031, -0.0078885900, -0.0130538745, -0.1859215498, 0.0120670618, -0.2022286803, -0.1109013557, 0.0587336421, -0.2002189010, -0.0013613050, 0.2129094452, 0.0675182641, 0.0172239672, -0.0815511122, -0.0747933388, 0.1100127250, 0.1911981404, 0.0163308289, 0.1527262181, -0.0878691003, -0.0218001157, 0.0798171908, 0.1370206475, -0.0038550461, -0.1979832947, 0.0627710298, -0.0035488554, -0.0948083326, 0.1195021942, -0.0619629882, 0.0423780531, 0.1606927663, -0.1178528890, -0.0801712573, -0.1417016536, 0.0024522308, -0.1109779179, -0.2422040105, -0.0193103459, -0.1022195294, -0.1862318218, 0.0198336951, 0.0266755596, -0.0726568997, 0.0486592464, -0.0144098308, -0.0809065178, 0.0868532732, -0.2406634241, -0.0953952596, -0.0206264723, 0.0808621123, 0.0061793933, 0.1580840945, 0.1563855857, -0.0929892734, 0.0356420688, 0.0641102269, 0.1405008733, 0.0900158882, 0.2259987295, -0.1815994233, 0.1723842472, 0.0392378643, 0.0245207828, -0.0638224036, -0.0851803720, -0.2191498131, 0.0783080459, -0.0583702810, -0.1316041499, -0.2132429332, -0.0841674060, -0.0227458980, 0.1042954624, 0.1804075688, 0.1576368809, -0.1311453581, -0.0796572119, -0.1025278047, -0.1780714244, -0.0277959537, -0.0497874618, 0.0796479508, 0.0093238112, 0.0324564576, -0.0158031527, 0.0782675147, 0.0586973540, -0.1363898218, -0.0616236627, 0.0480466932, 0.0075348620, -0.0459874310, 0.0993424952, -0.0293208100, -0.0014621249, -0.0524728484, 0.1520455033, -0.0323097557, 0.0095460340, -0.0634925142, 0.0390514098, -0.1845315993, 0.2322434783, -0.1685366333, -0.2401485741, -0.1226683706, 0.0484686382, -0.0788411275, -0.0048373090, -0.1322567463, 0.1962135434, -0.0929301530, 0.1716976911, -0.1267713159, -0.1886520684, -0.0279784892, 0.0279952139, 0.2027582526, 0.1949504465, 0.0036786904, -0.0596428812, -0.0435701273, -0.0833168998, 0.1356093138, 0.0091012474, 0.1713307947, 0.0089030061, 0.1155319586, -0.0222213417, -0.1672940850, -0.0817390606, 0.0867668614, -0.0462977625, -0.0091715278, -0.1104290336, -0.1869778484, 0.1066341475, -0.0526491515, -0.1203197166, -0.2104409486, 0.1737851501, -0.1276947260, 0.0063876468, -0.2194024771, -0.1373823434, 0.0820539892, 0.1072938740, 0.0477743074, 0.2542914152, 0.0199607667, -0.0268640649, 0.0871917233, -0.1112593561, -0.1366048604, 0.0174725354, -0.2504240572, 0.0089453375, -0.0799660832, -0.2729098201, 0.1242466420, 0.1427654624, -0.0397843644, -0.0336024910, 0.1915310770, 0.0055577410, 0.0057000150, 0.1771841198, -0.1625818312, 0.1069550142, -0.0818461627, 0.1500079632, -0.2777912617, -0.0088232886, -0.0620811768, 0.0908465311, -0.0313488804, -0.1031015292, 0.1721321046, 0.0128879258, 0.1308407038, -0.0677971020, 0.0390073545, -0.1437149197, 0.1493089199, -0.2114565074, -0.0338575430, -0.0157161094, 0.0424510874, 0.1930875629, -0.0097190458, 0.0930774435, 0.1754770577, 0.1333133280, 0.0051862476, 0.0683934540, -0.0711423382, 0.0986688212, -0.2136496156, -0.1140514240, -0.2148799896, 0.2085053027, 0.0211273246, 0.0727167353, 0.1525742710, 0.1767338216, -0.0197899826, 0.0251581054, -0.1559802294, 0.0876189321, 0.0457763635, -0.0048615928, -0.1371053159, -0.0705755651, 0.2194936126, 0.1694466472, -0.0709294155, -0.0735737905, 0.1939937770, -0.1012183949, 0.0637509227, -0.1554972827, -0.1172600836, 0.1746428013, 0.0746352375, -0.2823262215, 0.0932373777, 0.1723808795, 0.0759600103, -0.0398958325, -0.0822437033, 0.0044457894, -0.0574634336, -0.1527639031, -0.0497585982, -0.0594573207, 0.0166183524, 0.0892934352, 0.0992705300, -0.1267957389, -0.0623929724, 0.0556679182, 0.2015383244, 0.0650905594, -0.0517099723, -0.1329589635, 0.0377841666, -0.2218330503, -0.1406230330, 0.0541032664, 0.1400258392, 0.2164987475, 0.0738989264, -0.1213055775, 0.1321474463, -0.0661190823, -0.1660669297, 0.1148438528, 0.0640293881, 0.0102037936, 0.1528494805, -0.1814684272, 0.1251090765, -0.1616372913, 0.0123311607, 0.1788730621, -0.1265348047, -0.0252249967, -0.1277590543, -0.1245260537, -0.0345036201, 0.0953609049, 0.1760620028, -0.0388768949, -0.1326944828, 0.1079870313, -0.1029858440, 0.2831207514, 0.1362101734, -0.1692662835, -0.0036047413, -0.0078100991, 0.1447325796, -0.1054981202, 0.1053216010, 0.0641288534, -0.0574808605, 0.1654795557, -0.0642242506, 0.0171641354, -0.0551082492, 0.0629446581, -0.0298992544, 0.1279267818, -0.1507431567, -0.0600331314, -0.0557492152, -0.1100975871, -0.0915387273, -0.1877949685, -0.1134964079, -0.0306694154, -0.2262072265, -0.0374001861, 0.0767648444, 0.0557878800, 0.0722638294, -0.0191267505, -0.1539922357, -0.1419824809, -0.0403574631, -0.1972727925, -0.1648025066, 0.0283986367, 0.1406239271, 0.0516306050, 0.0558351018, 0.1393415332, -0.0577322170, -0.0868263170, -0.0502318777, 0.0083743464, 0.0470981114, 0.0638318136, -0.1390351802, 0.1197220832, -0.0200145990, 0.2223548889, -0.1678039581, 0.1233313084, -0.0600981005, 0.1797764152, -0.0559713878, 0.0263706259, -0.0624287911, 0.1186148673, -0.2232861072, -0.0173927136, 0.0771113113, -0.2288704813, -0.1045239940, -0.2035639137, -0.1215504408, -0.1113126799, 0.0822205022, -0.0326197781, 0.0079954602, -0.0321647599, 0.1096156240, 0.0045457240, -0.0693377629, 0.0687605664, 0.1724968553, -0.0760446489, 0.0977297798, -0.1152834222, -0.0292988289, 0.0335323885, -0.1051355526, 0.0399181992, 0.2028853148, -0.0414735787, 0.0055885501, -0.1592938155, -0.1055317372, -0.0994340107, -0.0906292424, 0.0487405583, 0.1096129939, 0.0272615235, -0.2421724051, -0.0900282711, 0.0973941013, 0.0355659239, 0.0055708643, -0.2674047649, -0.1785061806, -0.0291101597, -0.0062228586, -0.2561102808, -0.0417005457, -0.0087125888, 0.0061861998, 0.1788719147, -0.0196065158, -0.0116935056, -0.0839362070, -0.0550532863, -0.1167416126, 0.2365276068, -0.1863385290, 0.1455239505, 0.0571279041, -0.2777099907, 0.2799392939, -0.0284947790, 0.0305579379, -0.0910237357, -0.0286134798, -0.1720632166, -0.1637832075, 0.0865772516, -0.0799186304, -0.0134431031, 0.0793776363, -0.2260185033, -0.1432230175, 0.0673694834, -0.0040307255, 0.0358903781, 0.1590966880, -0.0563066565, -0.0331950933, 0.2310200185, 0.0632790476, -0.0703377947, 0.0236786883, 0.0931084976, 0.0215982776, -0.0664832294, -0.2399944365, -0.0697242394, -0.2178328782, 0.0620636754, 0.1247724295, -0.1330603063, -0.1430044919, 0.0111847892, 0.0848677307, -0.1389788091, -0.0462857820, -0.0335880406, 0.0489379391, -0.0718311071, -0.1757682711, -0.0081802467, 0.0156430081, -0.1100084782, 0.1065834165, 0.1253204942, 0.0445952937, 0.1734365821, 0.1472762078, -0.1673002094, -0.0215863641, 0.0211666338, 0.1234514788, 0.1664136201, 0.1020430624, 0.1335289925, 0.1840948611, -0.1086232811, 0.0265518352, 0.0984038711, 0.1946533471, -0.2196632624, 0.1711070985, -0.0600678585, -0.0533804521, 0.0883629471, -0.1460231394, 0.2426236868, 0.1139110103, 0.1321077347, -0.2058771700, 0.0277059432, 0.0315422527, -0.0227027871, 0.1606509089, -0.1307437867, 0.1384079754, -0.2033103853, 0.1428196579, 0.0979109630, -0.0167292580, -0.1188988909, 0.1231237650, 0.1049365476, -0.1736647338, -0.2620347440, -0.1534577459, 0.1178670898, 0.0047175041, -0.0754034966, -0.0835867301, 0.0140914721, -0.1515143812, 0.0014820659, 0.1311859041, -0.2043855786, 0.1561464816, 0.0982956886, 0.0834573656, -0.2094818205, -0.1861966252, -0.0806309134, 0.1218390912, 0.0064781103, -0.1266859025, -0.1000009105, -0.1390237510, -0.1330783516, 0.0374527164, 0.0883299708, -0.2082458287, -0.0620080493, 0.1428579837, 0.0325891562, 0.2113685310, 0.1576717049, 0.1948455572, 0.0047767572, 0.0913300216, 0.0383754708, 0.1549906284, -0.1258435696, -0.0411472544, -0.1105332673, -0.0427332856, -0.2253074050, 0.0958670676, -0.0555967279, -0.1274193525, 0.0380195230, -0.2164645642, 0.0065855058, 0.0503430739, -0.1721462905, -0.2691035271, -0.2771703601, -0.1410032660, -0.0868217275, -0.1535030007, 0.1968633682, -0.1436235905, 0.0192031618, 0.0219758917, 0.0968674868, -0.1884899586, 0.0029345974, 0.1602646559, 0.2387709618, 0.0174518954, 0.1255702972, -0.2020521909, -0.0006769271, 0.1030182913, 0.0176764745, -0.1711358428, 0.0193298273, 0.0647461638, 0.1861979067, -0.2196901590, -0.0408787243, -0.0169028789, -0.1051857620, -0.0716758445, -0.1696920693, 0.1830973923, -0.0148472404, -0.2479328364, -0.2814697027, 0.0242953692, 0.1102649644, -0.1038352624, -0.1218726635, 0.0101113366, 0.1884365976, -0.0678680614, 0.1199970320, -0.0670491382, 0.0534651801, 0.1214366034, -0.1018167287, 0.0537637509, 0.0245808978, 0.0536883548, -0.1280925423, 0.0372719727, -0.2022517174, -0.1084744558, -0.1318845898, -0.0556732416, 0.0373899154, -0.0629332662, 0.0095709171, 0.0202750620, 0.0329130068, -0.1903870851, -0.0604678094, -0.1949137300, 0.0255012419, -0.0062231007, -0.2376057059, -0.1008272469, 0.2404182255, 0.0090669356, -0.0739352405, 0.1986023486, 0.0531017780, 0.1631417871, 0.1706488281, -0.1074308679, -0.1736649871, -0.0232008733, 0.0494906940, -0.1600206196, -0.1525111049, 0.1224037707, -0.0999988243, -0.0556343906, 0.1230361164, -0.0088065425, -0.0174133237, 0.0163470358, -0.1502813697, -0.1741790771, 0.0165240262, 0.1079756021, 0.0166635141, 0.0071110819, 0.1741388440, 0.0140560819, -0.1976095587, 0.0973567665, -0.0642545596, -0.1166964173, 0.1623373777, 0.0572368465, 0.0478587188, -0.1056059673, 0.0285943560, 0.0597549900, -0.0097469920, 0.0282650981, 0.1886827797, -0.0000429563, -0.0675467029, -0.0050240052, -0.1502886564, -0.0056909448, 0.2453425676, 0.0518064201, 0.0724003240, 0.0456757098, -0.1553647369, -0.1480770707, 0.0698889866, 0.0066435910, 0.0360494182, -0.0906181708, -0.0476729237, -0.0309750382, -0.1275121272, 0.1806780100, 0.1849972606, -0.1645464152, 0.1878939122, 0.0300238654, -0.1196668893, 0.1113242432, 0.0486227833, 0.1322943866, 0.1543433964, -0.0667021349, 0.2591530383, -0.0880223438, 0.1899333447, -0.1298756748, -0.0676479116, -0.1381309032, 0.2688062787, 0.0958623514, 0.0729212835, 0.0249538627, 0.1245328411, -0.2277238369, 0.1901485175, 0.0070408946, -0.0100563718, 0.0408080034, -0.1439812928, -0.0906713605, 0.0894586220, -0.0594439209, -0.0526755415, -0.0241680499, -0.0854575709, 0.0541869216, 0.0343054160, -0.0381824747, 0.2835873663, -0.1375312954, 0.0941432714, -0.1018102169, 0.1524529457, -0.1645814776, -0.0370428674, 0.1787132174, -0.0798633099, 0.0248949118, -0.0571329407, -0.0693159103, -0.0987996906, 0.0482036024, 0.1388288587, 0.0300030895, -0.2237998545, -0.2414672375, -0.1670694500, -0.0189874340, -0.0200214144, -0.2244143039, 0.0305480845, -0.0381457508, -0.1629981399, -0.0406401679, -0.0298293959, 0.1909682304, 0.2332464159, 0.0970337242, 0.0945866033, 0.0352308564, 0.1527075022, -0.1220925003, 0.0184573140, -0.0061363168, -0.2047524154, 0.0673049912, 0.0789490789, -0.2140766829, 0.0789076388, -0.0603753701, 0.0121978354, -0.0790856183, 0.2745561302, -0.0015915707, 0.0677723289, -0.0349498540, -0.0070613110, -0.0798575655, 0.1604034603, -0.0417621583, 0.2019577324, 0.0733314827, 0.1229499876, -0.0027769194, -0.0472996645, -0.0795423239, -0.1385500580, -0.0100804344, -0.0762755871, -0.0430216677, 0.1765832007, -0.2400292009, -0.1898752004, -0.1647680998, 0.0769439861, 0.1213214248, -0.2519344687, -0.0806563869, -0.0238442272, -0.1986100674, -0.1852123141, 0.1496898681, -0.0224666316, 0.0016003950, 0.0946092084, -0.1402561218, -0.0159258097, -0.0241472572, -0.0679572225, 0.0650230348, 0.2261089236, 0.1052730978, 0.1021471694, 0.0089720311, 0.0452510342, -0.1844768226, 0.0874992460, -0.0403285623, -0.1426967084, -0.0671067908, 0.2397138178, -0.1157113314, 0.1017239988, -0.0749791637, 0.1835977882, -0.1840441078, -0.1592893749, 0.0511780530, 0.0409407578, -0.1060561538, 0.0014687931, 0.0255120900, -0.1389050931, 0.1234024540, 0.0215090159, 0.1524802148, 0.1250419170, -0.0159492735, 0.0491636284, -0.2319123298, 0.0838678181, 0.0327006020, 0.0059373840, -0.1490116864, -0.0028381795, -0.1762309968, 0.0376912989, -0.0787824616, -0.0171101466, -0.1777709275, -0.2063598037, 0.0399948172, 0.1254143417, 0.1470135152, 0.0245797653, -0.0277351923, 0.2256011516, 0.0578903407, 0.0727905482, 0.0115308911, 0.0489708297, 0.1230363324, 0.0267450083, 0.0227379054, 0.1730527431, -0.0616911091, -0.1791810095, -0.0765213370, 0.1392901093, -0.0335295163, -0.0723866001, 0.0758538246, -0.2490185201, 0.0222050138, -0.0861592740, -0.0607499555, 0.1063690111, -0.2158409506, 0.0029109907, -0.0765028074, -0.2362715602, -0.0106272763, 0.0159219671, -0.2293602377, -0.0466162153, -0.1142009497, -0.2007151246, -0.1084072515, -0.0745143741, 0.1215321049, -0.0022199936, -0.2481301725, 0.1872548014, 0.0549749732, 0.0769777521, -0.0015673040, 0.2147455215, -0.1980013400, -0.0992418304, -0.1634555012, 0.0264161658, -0.0755050778, -0.0968495086, 0.0470828824, -0.1878119707, -0.1797685325, -0.0078404853, 0.1288634688, 0.2249556482, 0.0816151053, -0.1073021069, 0.0199255887, -0.0959545672, -0.1729001850, -0.0605954714, -0.0371938311, -0.1571577638, 0.1816192120, -0.0161020532, -0.0002435323, 0.0188451204, -0.0385236032, -0.1130323559, 0.0641001165, -0.0663056970, -0.0544070639, 0.0831051990, -0.0500627533, 0.0023295842, 0.1236862019, -0.0294806398, 0.1111768559, -0.0246488713, -0.0815059543, -0.0780965015, 0.1315025985, 0.1398745030, -0.0500298478, 0.1822509766, -0.1995404363, -0.0739374459, -0.1706108004, -0.0505124852, 0.1177364588, -0.0709545687, 0.0414933823, -0.1848103851, 0.0885384381, 0.1123508960, 0.0771688819, 0.0552441627, -0.2672331929, -0.2111692876, 0.1099783629, 0.0072885365, 0.0276887808, 0.0891095549, -0.2029597461, 0.0130385067, 0.1832717061, 0.0773135349, 0.1128320247, 0.0857828110, 0.0161984265, 0.2627711594, 0.2487620264, 0.1115455702, 0.2497138083, 0.0102830604, 0.1821810305, 0.2039638758, -0.1369562447, -0.0012350302, 0.0824790522, -0.0956115350, -0.1855661571, -0.2264355719, 0.0416658632, 0.0233225562, -0.1079493910, -0.0133844586, -0.1244014502, -0.0599063411, 0.0547774471, -0.0560514927, -0.0511203595, -0.0937365368, 0.0828390270, -0.0158377420, -0.1596182734, 0.0059409956, 0.0602760613, 0.0470102020, -0.2631589174, -0.0416053087, 0.0361724757, -0.0736277103, 0.2013880014, -0.0597500987, 0.0725106597, -0.1856100112, -0.0340677835, 0.1384431869, 0.2735148072, 0.0765020326, 0.1257262230, 0.0615100525, -0.1352560222, 0.1551754624, -0.0348759070, -0.1038867980, 0.1472735554, 0.0163765531, 0.0617756210, 0.1300405562, 0.1238948926, 0.1864237040, 0.0782646090, -0.1299595237, 0.1920779347, -0.0908308029, 0.1486680359, -0.0628448874, 0.0376352370, -0.2362965196, -0.0087834522, -0.1151995659, 0.0243106671, -0.0412381515, 0.1585496664, -0.2744981050, 0.2402686775, 0.0006048580, -0.2191367745, -0.0263225269, 0.1931947172, -0.1505437195, 0.0070039728, -0.1726351529, -0.1192795113, 0.0677391812, -0.1762759238, -0.1039757580, 0.0310637672, -0.0112118851, 0.1086646318, -0.2026545554, 0.1802552044, 0.1136411279, 0.0988646895, 0.0178397764, -0.0157713424, 0.1623291075, -0.1439479589, -0.0022606282, 0.0655419528, 0.2516801953, -0.1853962094, 0.1603246033, -0.1115254313, -0.2391559035, 0.1376648843, -0.1004401818, -0.1133424044, -0.0439477712, -0.0766512379, -0.0618947931, 0.0136747751, -0.0321219750, -0.2381674200, -0.1267467588, 0.0362778939, -0.0390289091, 0.0405052006, -0.0735383108, -0.0234102700, -0.0987963155, 0.1189088821, 0.0517266430, 0.0437964313, 0.0768368170, 0.2153127640, -0.0601716191, 0.0814186633, 0.0151355602, -0.0519529097, -0.0410678163, -0.0266119484, 0.0239251163, -0.0759316310, -0.0332570449, 0.0929989517, -0.0676814318, 0.1190107316, 0.0139902774, 0.2045948207, -0.1483142376, 0.0707083270, -0.1828791648, -0.1657708436, -0.1361281127, 0.1632442027, -0.0467166454, 0.0916265249, 0.0001076068, -0.2560239732, -0.1932931691, -0.1762575954, -0.0516374074, 0.1937571168, -0.1400452554, -0.1837903708, 0.0082948748, 0.2196584940, 0.1957958192, -0.1286671460, -0.0436750576, 0.0435419194, -0.0022722613, -0.0107333548, -0.0848897398, -0.0003840085, -0.1051032841, 0.0759818181, -0.0996994972, -0.0716211051, 0.0894877836, -0.0241630748, 0.2027489543, 0.0475045852, -0.0824636295, -0.0352437794, 0.0741595551, 0.0717228204, 0.1941127777, 0.1354052573, -0.1645288616, -0.0517532714, 0.1252287924, -0.0533200800, 0.1318143457, 0.0959661081, 0.0404000320, 0.0771132857, 0.0867368430, 0.0777734071, -0.1623359770, -0.1663769782, 0.0967809707, 0.1152904183, -0.0242015328, 0.0473251976, -0.1253125966, 0.0585532673, 0.1184642389, -0.0310836658, 0.0496650226, -0.0766522810, -0.0498408042, -0.0047052191, -0.0303610414, -0.1056796536, 0.0201311763, 0.0235180110, 0.0162331816, -0.1720389873, -0.0980456471, 0.0274914745, -0.0525841825, 0.1416589618, 0.0571150482, 0.1436695307, -0.1458244622, -0.1902351826, -0.0649650171, 0.0250559933, -0.0741497576, -0.0839282647, 0.1501897424, 0.0590240024, -0.1960665435, 0.1018870473, -0.0158082526, 0.1009123549, -0.0136043271, 0.0589779876, 0.2118745297, -0.1609480828, -0.0522388853, 0.1059749052, -0.0297388341, -0.1878691316, -0.2436941266, 0.0543646738, -0.0009042001, 0.1117600352, 0.1077201068, 0.1416552663, -0.1225959063, -0.0185239594, 0.1705546230, 0.1187807545, 0.0533799566, 0.1702599823, 0.1499494165, -0.0356708504, -0.1922984123, -0.0915017948, 0.0501212142, 0.2279860228, -0.0837035924, -0.1916144490, -0.0755626038, -0.0335324071, 0.0323683657, 0.0192684960, -0.0362906680, -0.0583383478, 0.0541138425, -0.0193965975, -0.0723440871, -0.1931181252, -0.0614780635, -0.1176426038, -0.2113110721, -0.0204213317, 0.0289860424, -0.0326125994, 0.0732787400, 0.0510527045, 0.0619054995, -0.1793070883, 0.1361684650, 0.0942348763, 0.1719050407, 0.2457263172, 0.0126256701, -0.2014126480, -0.0494099334, -0.1559411436, -0.0246156566, -0.1131602600, -0.1352056265, -0.1936223209, 0.0979154259, -0.2487202734, -0.1141693667, 0.0829569474, -0.0944758207, -0.1166678518, 0.1160272360, -0.1051834300, -0.2608826756, 0.1526303440, 0.1656039506, -0.0309166089, -0.0420395471, -0.0119316224, 0.0695473999, 0.0053962269, 0.0677176863, -0.0002908748, 0.2793548405, -0.1655888557, -0.2383221984, 0.0177769773, -0.1363997906, -0.0474397764, -0.2360324264, -0.1435157061, 0.1730410308, -0.0727404356, -0.0423430130, -0.0017982105, 0.0679327026, -0.0791774318, 0.1311506927, -0.2682112455, 0.0349004567, -0.1733231694, -0.1675478518, 0.1033351123, 0.0570554808, -0.0853091404, -0.1856166273, 0.0213533361, -0.0898434520, -0.2239798158, -0.0752028972, -0.0149115315, 0.1041774154, -0.2780444324, -0.1353958398, -0.1693436056, 0.0773390010, -0.0777988955, -0.0191591084, -0.1572830975, -0.1264323592, -0.0731999502, 0.2094641477, -0.0164679792, -0.0955440700, -0.0105994949, -0.0996321514, -0.2279623300, 0.0340287797, -0.2454221547, -0.0093994346, 0.1148666069, 0.0733084753, 0.2819271684, -0.1892684996, 0.0053825960, -0.1763681471, -0.0837733224, 0.1867402047, -0.0529217049, -0.1918094009, -0.0997361168, -0.0448057838, 0.2245221883, -0.1873693168, -0.2232800871, 0.0379986167, -0.0984088257, -0.0407168306, 0.0873648301, -0.0071188658, 0.0488929078, -0.1128937602, 0.2836995721, -0.2064083517, -0.0195214208, -0.0361812934, 0.2042646408, 0.1004953533, 0.0793944821, -0.1182713136, -0.0400827080, -0.0038492414, 0.1580931395, 0.2801831663, 0.0554984733, 0.0218798332, -0.0803565010, -0.1731914282, 0.1274186820, -0.1730916947, -0.2151652575, -0.0140114585, 0.2095113397, 0.1181195900, -0.1173255369, 0.1727558374, 0.0596696548, 0.0196309257, -0.1399231851, -0.0304120872, 0.0038958164, -0.1212057695, 0.1394872516, 0.2583174706, 0.1196475029, -0.0339134969, 0.0169261489, 0.1210637689, -0.1151728183, -0.0443513468, -0.0522069521, 0.1046361774, 0.0850338787, -0.0003799244, 0.0515064225, -0.1143533066, 0.0814794227, -0.0276148655, 0.0992306918, 0.0111157745, -0.0411437042, 0.1537020952, -0.0934118927, -0.1060361266, 0.0526611134, 0.0932353511, 0.2450137883, 0.1897417158, 0.0138888611, 0.0822887495, 0.0873544663, 0.0468368120, 0.0481732152, -0.0046010376, -0.1051712111, 0.1163460240, -0.1355577111, -0.0191628896, 0.0332237817, -0.0891838223, 0.0203522667, -0.2437524647, 0.1695773453, 0.0961941183, -0.0815646499, 0.1510298103, -0.0563475452, 0.0337342434, 0.2096579075, 0.0563371927, -0.2168121040, -0.0565987304, -0.0645183250, -0.0712834746, 0.0692615435, -0.1745713204, 0.0199402422, 0.1281539202, -0.2278441787, -0.1992959976, -0.1874514967, 0.1072192416, -0.0361169428, 0.1067403927, -0.0104265902, -0.0774395317, 0.1371314675, 0.0136884041, -0.2311235070, 0.2106714696, -0.0463545993, -0.1457578838, -0.0848451778, -0.0849978551, 0.1178287268, -0.1222906411, -0.1624799967, -0.2021592557, -0.2771877348, -0.0568581335, 0.0643855110, 0.2776731849, -0.0624686815, -0.2309602350, -0.0744458064, -0.1408730000, 0.0037683179, 0.1235987246, -0.0110472953, -0.0051559787, 0.1611422300, 0.0225131102, -0.0376383550, -0.0320931710, -0.2117828429, -0.0468106978, 0.2011216283, -0.0323414169, -0.2139350027, 0.0751166269, -0.2593216300, 0.0461104140, -0.0892263576, 0.1388413608, -0.2659212649, 0.1312647909, 0.1154964268, 0.1713753641, 0.2065609992, 0.0694919527, -0.1075923368, 0.0040856097, -0.0028487933, -0.2152314633, -0.2295141220, 0.0993989408, 0.0402505882, 0.0429327115, 0.1502624601, 0.0018944137, -0.0452259816, 0.0164966695, 0.1706467420, 0.1569800228, 0.1015226096, 0.1421762109, -0.1943331063, 0.0183955748, -0.2628333271, 0.1616384983, -0.1914425194, 0.0833425671, -0.1390405446, 0.0522273742, 0.0268855412, 0.1576583087, -0.0642722473, -0.0020114006, -0.2190181315, -0.0309639052, -0.0739110708, -0.1680921465, -0.0179460570, 0.0047147879, 0.0577599443, 0.0125722773, 0.0672756433, 0.0823687539, -0.0092597026, -0.0139270723, 0.0225633439, -0.0364059098, -0.2308587581, -0.1846535504, 0.2203903645, 0.1906462163, -0.2109326571, 0.0354707278, -0.0078025330, 0.0844665393, 0.1204033047, 0.1050077453, -0.1629123539, -0.0491119772, -0.0638093650, -0.0134093985, -0.1892125458, 0.1197805256, 0.0515388139, 0.1492078453, -0.0267128982, -0.0824799538, 0.1525550634, 0.1401399374, 0.1038771719, -0.0033216337, -0.0570088327, 0.2465012223, 0.1224643663, 0.1120629758, -0.1467058063, -0.1554736048, 0.2316762507, -0.2630439699, -0.1211686656, -0.0758507699, -0.2073765099, -0.0834700167, -0.2111161053, 0.1986508667, 0.1601339132, 0.0764889270, -0.0834528133, -0.0313232094, -0.0835079104, -0.1815708131, -0.1521600485, -0.0424917974, 0.1686166972, 0.0296163149, 0.0667668059, -0.0569865033, -0.1602744460, 0.0311157890, -0.1954406649, -0.0739579499, -0.0198936071, 0.0084802778, 0.0645406246, -0.1555929631, -0.0938223600, -0.1077935100, 0.0607309937, 0.0337955207, -0.0773946568, -0.0544136986, -0.0315875225, 0.1636930257, 0.2018568516, -0.0810888633, 0.1163783595, 0.0377513357, 0.2778775692, -0.0896873847, 0.0018787940, -0.0853971019, 0.0223487969, -0.1095527634, -0.0561814234, -0.0585735105, -0.1267410368, -0.1296946853, -0.0857307613, 0.0527236760, 0.1043211520, 0.0025937818, 0.1293258965, -0.2016751021, 0.0101822130, 0.1247974485, 0.0532124713, 0.0369294658, 0.1795318723, -0.0303610861, -0.0168453697, -0.2292991281, 0.0097217066, 0.1735738516, 0.2511932254, 0.0340896845, -0.0720891654, -0.0837779865, -0.1360292137, -0.0159296002, -0.0290739778, 0.1114612594, 0.0059097693, -0.1058753952, -0.2741720378, 0.0196210947, 0.1074935049, 0.2281968445, 0.0278664138, -0.2151152343, -0.0477316342, -0.2256149799, -0.1114221513, 0.1629894376, 0.1801519990, -0.0641040802, -0.0306810681, 0.0016574336, -0.0040268181, -0.0983714089, -0.0397392809, 0.0243349746, 0.0911100730, -0.1549893171, 0.0306560677, 0.2293697149, -0.0472907126, -0.0258212145, -0.1926118881, -0.0727829412, -0.2102387846, -0.0701988190, -0.2356136888, -0.0042078160, -0.2594815493, -0.2046039999, 0.2163017392, -0.0007449461, -0.0416168235, 0.2618484497, -0.0115496935, 0.0386287458, -0.0561948977, -0.2040303648, -0.1240818575, 0.2113213986, -0.2548737526, 0.0087018833, -0.2731971443, 0.1870256364, -0.1883493513, -0.1949468851, 0.0998775437, -0.1764771938, -0.1472990066, 0.0313923731, 0.0160682984, -0.1287718862, -0.1940029413, 0.0546877459, -0.1878018230, -0.1256018430, 0.1317020506, 0.1523621827, -0.1244462654, -0.0251522921, -0.0572946891, 0.2136516422, 0.1221916527, 0.1381425858, 0.0950666964, -0.0136928642, 0.0138109718, -0.1213691458, 0.0084361853, -0.1874188334, -0.1308404356, -0.0535112582, -0.1021660715, 0.1747450531, -0.0022533562, 0.0438095368, 0.2512595057, -0.0150940139, 0.0029403490, 0.0700631067, -0.0744863227, 0.0191041771, -0.0799788460, 0.0223360285, -0.2178315520, 0.0619871579, -0.2062054425, -0.1277286410, -0.2395559996, -0.1629528254, 0.2214913964, -0.0184695050, -0.0664408132, 0.0840422660, -0.0219712779, -0.0672754720, -0.1753689051, -0.0329886824, -0.0385290161, -0.1207544729, 0.0986730829, -0.0979398489, 0.2378286421, -0.0350863151, 0.0100828046, -0.0055491510, 0.1642471254, -0.1160661504, -0.0462208278, 0.0390252732, 0.1646503657, 0.0720212534, 0.0904115736, -0.1110619307, -0.1695870608, 0.0659639910, -0.2420377433, -0.1883134395, -0.0724757239, -0.0207475889, -0.0082858680, -0.0174660273, -0.0792485997, 0.0748370364, -0.1265823245, 0.0527531207, -0.0990758762, 0.2281078994, 0.0862868801, 0.1341827512, -0.1082634702, 0.1432966441, 0.0738265961, 0.1082410440, -0.0871978700, 0.0918110162, -0.1247432306, -0.1044632271, 0.1848205775, -0.0405376516, 0.0395859666, -0.0023781538, -0.0921771154, 0.1253987402, 0.0873019099, 0.0815997273, -0.0663874000, 0.1003746837, 0.2447982430, 0.0492351539, 0.0201468468, -0.0486626029, -0.1684679687, -0.0549862087, 0.0053927531, 0.1482221186, -0.2724334598, 0.0146879172, 0.1600532085, -0.1438371092, -0.1931184977, 0.0801765621, -0.2596014440, 0.1033322066, -0.0159584060, -0.0204264354, 0.0069396812, -0.0170192178, -0.0195256546, 0.2810438573, -0.0098222075, -0.1288586706, -0.1489261687, 0.0808672234, 0.0142495139, -0.2295024544, 0.0332604684, 0.0895337239, -0.0994754881, 0.2147243470, 0.0433468819, 0.0178454537, 0.1011538804, -0.0760406405, 0.0597886145, 0.1453678906, 0.0769609660, 0.1111503020, -0.1328952461, 0.0287902225, 0.0880429447, -0.0244842917, -0.0341547988, 0.0394500419, -0.0616971664, 0.0298748799, -0.0508012734, -0.1502135098, -0.1131933555, -0.2187120765, -0.0655328259, 0.0088259606, -0.2153255790, -0.0614463389, 0.0671668500, -0.1577817798, -0.2476810366, 0.0985507220, -0.0011609455, -0.1907855123, -0.1671809405, 0.1231031269, 0.1218411848, -0.0955938473, -0.0385293402, -0.0544934720, 0.1979592144, 0.2168953121, -0.0894865692, -0.0348506197, -0.1295739114, 0.0928717777, -0.0239512753, 0.2497740239, -0.1644557714, 0.0750266612, -0.1361583173, -0.2246948928, -0.1928143501, 0.0236564819, -0.0640004277, -0.2206964344, -0.0133836921, -0.0651315898, -0.0115598934, 0.0959194750, -0.0439869873, -0.0540166162, -0.0855601877, 0.0046526045, 0.0385305919, -0.1027153730, -0.0491047390, 0.0584930256, 0.0301963575, -0.0738735050, -0.0792369619, 0.0824595988, -0.1489513516, 0.0664184615, -0.1644427031, 0.0132731944, 0.1835039109, -0.0100902123, -0.1075006053, -0.0368170850, 0.0543650910, 0.0302298889, -0.0267914608, -0.2108026892, 0.0098658856, 0.0277100466, 0.1481668353, 0.0968865007, 0.0079946136, 0.0186849087, -0.2119101882, 0.0309463125, -0.1486938596, 0.0630191863, -0.2773727179, -0.1365084648, 0.1217487752, -0.0646025911, -0.0773877501, 0.0654418394, 0.1298951656, -0.1425621659, -0.0418906435, -0.0767284185, -0.0167379752, -0.1989363581, 0.0409281738, -0.1748316139, -0.0371647142, 0.1452287883, -0.0219516885, -0.0216718856, -0.0857659057, -0.1140200347, 0.2503328323, -0.2495427877, -0.1139661968, -0.0545072332, -0.0983154699, 0.1063275561, -0.2535740137, -0.0096913008, 0.0782398358, -0.0538649783, -0.2599674463, -0.1798615456, -0.1404665560, -0.1350847483, -0.0068406067, 0.1809295565, -0.0893268138, -0.0211372655, 0.0092329253, 0.1780683845, -0.1830704361, 0.0519521721, 0.0541763082, 0.1091547087, 0.1417926699, -0.1686993390, 0.0642952099, -0.0142837660, 0.1480903774, 0.0350522362, -0.0473086908, -0.0825107768, 0.0636952594, 0.0126418062, -0.1015867740, -0.1195775047, -0.0214111190, 0.0609900393, 0.0170102101, -0.0619732365, -0.1273416281, 0.0957917869, 0.0768547431, -0.2030887306, -0.2632057965, -0.0697613209, -0.1317365766, -0.2613222301, 0.0536598228, 0.0808771998, -0.0113805803, -0.2655329406, 0.0729272068, 0.1536455005, 0.1876979768, -0.1911907643, -0.0130145000, -0.0726177767, -0.1308838129, 0.1876643151, -0.0349189863, 0.0578707010, -0.1481319070, -0.0324029699, 0.0924826935, 0.2077744901, -0.0341527797, 0.1113136858, -0.0883356780, 0.0582750142, 0.1957255751, -0.0148784602, -0.0178276394, -0.0100756446, 0.0401494764, -0.0929211751, -0.0789200291, -0.1694925278, -0.1463281214, -0.1090570241, -0.0268823821, -0.0091392882, 0.0088071125, -0.0465874113, -0.0882057399, -0.1904561669, 0.1016121879, 0.0047505950, -0.0333958194, -0.0205737334, 0.0291514955, 0.2083697468, -0.0883068740, 0.0431009270, 0.0397466384, 0.0164096989, 0.1675578356, 0.1242098510, 0.0003951608, 0.0668993741, 0.0340308473, 0.0270481817, 0.0333554707, 0.1013151035, 0.2120333165, 0.1595049649, -0.1534375250, 0.1637333333, -0.0075220899, 0.1524940878, 0.1430499554, 0.0173284858, -0.0359872952, 0.2235120833, -0.0526080914, 0.1945716292, -0.1043520793, -0.2122959197, -0.1169177592, -0.1962556690, 0.0191928335, 0.1391853839, -0.1183388233, 0.0750627071, 0.1860070527, -0.0553141385, -0.0967289880, 0.0151869273, 0.1815413535, 0.1589421928, 0.0061721527, 0.0228966605, -0.0585694276, -0.0456882156, -0.1635400057, 0.0188136045, -0.0144062648, -0.0719958544, -0.0768302977, -0.1639081538, 0.0490052626, -0.1229690537, 0.0809617192, -0.0629394576, 0.0096705183, -0.1141439974, -0.0928043053, 0.1483161002, 0.1826115102, 0.1323432922, -0.1678734422, 0.1042291522, 0.1229278371, -0.2526534498, -0.0646562502, -0.0377792120, 0.1414082646, 0.0038181620, 0.0062085642, -0.0999655500, 0.1212410629, 0.0683897138, 0.1888438463, -0.1178798527, 0.2397149950, 0.0597636960, 0.1549216211, -0.0479815602, -0.0042111427, 0.0425877720, 0.1546121687, 0.0170938745, 0.1062179506, 0.1693724543, 0.0195101127, 0.0359935760, 0.1124178693, -0.1457908154, 0.0562329218, 0.0150932847, -0.1626039892, 0.0035130673, 0.0090211583, 0.0120787770, 0.0413420759, -0.0443029180, -0.0125587154, 0.0644667968, 0.0498812646, -0.1070775241, -0.1088486537, -0.0757903606, -0.1704988629, 0.0424703434, -0.0183730628, 0.1716220081, 0.1294373423, 0.0884627849, -0.1438028961, -0.2351639569, 0.2673706114, -0.1608771980, 0.0748320147, -0.1631796509, -0.0531559959, -0.0351745486, -0.1188662127, 0.0683741122, -0.0181560125, -0.0131252436, 0.1113977805, 0.0954813883, -0.0899564475, 0.0738431662, -0.1315609366, 0.1337897629, 0.1144328862, 0.1638261378, -0.0334692374, 0.0836879089, -0.0716990754, 0.1042041332, 0.1015326679, 0.0989774317, -0.0686016381, 0.1531102061, -0.0925547406, 0.1551029682, -0.0119728735, -0.1358454525, 0.0401213467, -0.1116218865, -0.2753401399, 0.1255028695, 0.0957378894, 0.0737205073, -0.0032477514, -0.0431739725, -0.1104419529, 0.0447385795, 0.0563982837, 0.1144129783, 0.0589737855, -0.1667213142, -0.1183073968, 0.0495042987, 0.0051488611, -0.1004559994, -0.0074731400, 0.0976003781, -0.1834425181, 0.2007350028, 0.1318581402, -0.0348047242, -0.0265049841, -0.2284512967, 0.0532352738, 0.1389471143, -0.0010692520, -0.0220536161, 0.2559125125, -0.0648206845, -0.1039174274, 0.0060647158, -0.0852827430, -0.1809066683, -0.0687270314, 0.0710174069, 0.0006458925, 0.0496559106, 0.0719667152, 0.0495245419, 0.0545815788, -0.0699171200, 0.1108169109, -0.0516188927, -0.1638118476, -0.1959368736, -0.1498876214, -0.0826659724, 0.2733434439, 0.0240926072, -0.0358430818, -0.0835991651, -0.0992016345, 0.1322608292, -0.0474877842, 0.0461854711, -0.0564470328, 0.0960417390, -0.0947614908, 0.0147996927, -0.1336740702, 0.0331933908, 0.1277279705, -0.0797353387, -0.1860721856, 0.0480396636, -0.0495420694, 0.0945715457, 0.0845351368, 0.0434133075, 0.2758145332, -0.1465646178, 0.0742630139, 0.0953953415, 0.1001519859, -0.1862396002, -0.0879952833, 0.1138056442, 0.0573833585, -0.0854841247, -0.0469042882, -0.1022760645, -0.1427392215, -0.1512297690, -0.0455814004, -0.2262949497, -0.0915640071, -0.2097542733, 0.0002105776, 0.0823006928, -0.0313473307, 0.2361009866, 0.0509011932, -0.2228828669, -0.1381047666, -0.2251666188, -0.0881989598, -0.0076176743, 0.2325158119, 0.0710312873, 0.0633280352, 0.1040197089, 0.0074807159, -0.1222391799, -0.0810935944, -0.2223621458, 0.0174941737, -0.2304765582, 0.0867240205, 0.0264888536, 0.0744839013, -0.0477692857, 0.1926682442, 0.0160209835, -0.0693020374, 0.0100336345, -0.1441239268, -0.0252244677, 0.1715122610, 0.0838995650, 0.2125332355, -0.2642701268, 0.2060020268, -0.0112542799, -0.0664615035, 0.0051394477, 0.1158302873, -0.1200541332, 0.2540965974, 0.0098167444, -0.0474550612, 0.1292077452, 0.0135207577, 0.2252426445, 0.0242497362, -0.0830683187, -0.0144926868, -0.0802338347, -0.0842741802, 0.0038645312, -0.1724621356, -0.1729599386, 0.1005298719, -0.1767271906, -0.0375371762, -0.1273666024, 0.1058123037, -0.1965560466, 0.0277809091, 0.0119951377, 0.1516150087, 0.1708996147, -0.1395740062, -0.1764970422, 0.1602654755, -0.1897768527, 0.0068009938, 0.0837660804, -0.0335266627, 0.0239739567, 0.1778800040, -0.0845573843, 0.1285572797, 0.1140081584, -0.1067544594, 0.0188775454, -0.1578041166, -0.0081213266, -0.1889119893, -0.0733982250, 0.0412956253, 0.0062344437, 0.0783476233, -0.1373556852, 0.1971372962, 0.1835767776, 0.0871030763, 0.0203698743, -0.0166324321, 0.0115558207, 0.1043028831, 0.1047296897, 0.1054984257, -0.2334172279, -0.0516155437, 0.2071269006, -0.2107545584, 0.0387386754, 0.2419338375, -0.1056754589, -0.0004177592, -0.0743355528, 0.0616107918, 0.0938183144, 0.0487987734, -0.1144885868, 0.2414833158, -0.0861292332, -0.0941240937, -0.0727340877, -0.1498795301, -0.1444399655, -0.0862590224, -0.1387437135, -0.0633530617, 0.1677983999, -0.1225353554, -0.0090942346, 0.0458053388, -0.1930816770, 0.1074870452, -0.2673580945, 0.0923361927, 0.0784220621, -0.0446048044, -0.1306253076, -0.2156035900, -0.0188837890, -0.0911928639, 0.1038773209, 0.1579057574, 0.1378926337, 0.0609593764, -0.0806399882, -0.0438168310, -0.0018612863, -0.0766502321, 0.0195240602, 0.1559486240, -0.1345790178, 0.1046960354, 0.0349008217, -0.0146761499, -0.1326103657, -0.0186357070, -0.0004844955, -0.1207552701, 0.2192068845, -0.0831206366, -0.0966793671, -0.1682465822, -0.1727984548, -0.0325672030, 0.0890530944, -0.1216756403, -0.2755979002, 0.1482080072, 0.0874740481, -0.1678758860, 0.1409077942, 0.2115278840, -0.1966717839, -0.2012857795, 0.0972658396, -0.2255766541, 0.0500073843, 0.0643841401, 0.1500524879, 0.0036325234, 0.0408147387, -0.0031020048, -0.2127723396, 0.1699800044, 0.0831951499, -0.0199771281, -0.1605507433, -0.1283413917, -0.0911629945, -0.0286719259, 0.1077519208, -0.0090732882, -0.0093356632, -0.1283380091, 0.0245382469, -0.1606719643, -0.2379308045, 0.1179754138, 0.0545058697, -0.1313961893, 0.1839240342, 0.0509528145, -0.0324039087, 0.1463709325, -0.0279183090, -0.0577959530, 0.1182788536, 0.0837018266, -0.0809325799, -0.0759270713, 0.0715424269, 0.0931648090, -0.0895397812, -0.2566784918, -0.0106628342, -0.0897420570, -0.0267289635, 0.0067705954, -0.1189877316, -0.0505776480, -0.0880480781, -0.0194885880, 0.0481700599, 0.0701005980, -0.0257678553, -0.2084836662, -0.0485971086, 0.0554716960, -0.0928563625, -0.0470097251, -0.2584942579, -0.2137041241, 0.0160484631, 0.0931536481, -0.0261641126, 0.0335936919, -0.2121228874, 0.1092933640, 0.0097881164, -0.0885260105, 0.0356392488, -0.0496240593, -0.0618447550, -0.0505547002, 0.0070506153, -0.1181001365, -0.0738034472, 0.2227607220, 0.0075219902, 0.0817676634, -0.0676861927, -0.1266009063, -0.2474217415, 0.0823330358, 0.1440317184, 0.0137049416, 0.0971958712, 0.0911982507, 0.1768393070, 0.0067838370, 0.1049995646, -0.1575244963, 0.0201283488, 0.0938829929, 0.0238383655, 0.0010732182, 0.0701012462, 0.0453356430, 0.2749364376, -0.0543857664, 0.0486566313, -0.0834374055, 0.0705199167, -0.0840604007, -0.1358165443, 0.0653459132, 0.1461124718, -0.0561861061, -0.0121400673, -0.0904098898, 0.2136852592, 0.2392686009, 0.1866111755, -0.0340887085, 0.0457221977, -0.1044918522, 0.1578958631, 0.0847074315, -0.0382448845, 0.0340576917, 0.2504099309, 0.2223165333, -0.1170348972, 0.2818900645, 0.0155496374, 0.0609595291, 0.1486194581, -0.0591741130, -0.0231561717, -0.1451537162, 0.1854530573, -0.1170003116, -0.0495783240, 0.0257494673, -0.1329240948, -0.0740321502, 0.1456660330, -0.2542085350, -0.1631671041, -0.1977817714, 0.1122930348, 0.1686695814, 0.1817028224, 0.2605623603, -0.1394866109, -0.0457267836, 0.0435566604, 0.2361554503, -0.0063860002, -0.2248981148, -0.0612124689, 0.0482813865, -0.0737715587, 0.0513720103, -0.0558401942, -0.1168110147, -0.1519283950, 0.0109187299, 0.0939819366, 0.1322048455, -0.1772433817, 0.0964749381, -0.0769296438, 0.0068018879, -0.0718405917, -0.0965854973, -0.1122996360, -0.0634005666, 0.1893043667, 0.0393436626, 0.1013869047, -0.1619001180, 0.0275799204, -0.0816591904, -0.1504131407, 0.1157575995, -0.0533163510, -0.1195935532, -0.0658618510, -0.0399643928, -0.1418930292, 0.0838362128, -0.0350675099, -0.0453017652, -0.0443421640, 0.1305465996, 0.1208699942, -0.0620639175, 0.1498478800, -0.1218238994, -0.1721329093, -0.1604674459, -0.1342185736, -0.2462194711, 0.1888577640, -0.1479143947, -0.0112745687, 0.0108090034, -0.0359691754, 0.1448488533, 0.2629444897, -0.1985916346, 0.0504737124, -0.0034484107, 0.0880007371, 0.0735916346, 0.0131125273, 0.0908610001, 0.0034887728, -0.2425743788, -0.1118153185, -0.0631584600, -0.0938347951, -0.1136471257, 0.0218206458, -0.0211402401, -0.0587354302, 0.1500079483, 0.0986337736, -0.1373493820, 0.1072665080, -0.1078590676, 0.2102295309, 0.1694019139, 0.1244796365, -0.0457914546, -0.0437232703, 0.1317518800, 0.0813310668, 0.0102854008, 0.1545397937, -0.1584771574, 0.0620390400, 0.0620254315, -0.0453211218, 0.1230191439, 0.1418852359, -0.2329378277, -0.0513863228, -0.0596676059, 0.0026344631, -0.2795838416, -0.0610462576, -0.1528910100, -0.2153922766, -0.1585925519, 0.0101124207, -0.0085246805, 0.1097359136, -0.0310705155, -0.0051321592, -0.0548224524, 0.2591068149, 0.0184701439, 0.0542511307, 0.0805051625, -0.0883485228, -0.0977130756, -0.0974049941, 0.1359914988, 0.0452674218, -0.0055896631, 0.2089996487, -0.0609294251, 0.0059502963, 0.0274691451, 0.0454050340, 0.0119700776, -0.0834738985, 0.0478926003, -0.1188098714, -0.0359325670, 0.1188559383, 0.0683739558, 0.0983998552, -0.2556353211, -0.0490979031, -0.0985397026, -0.0340302587, 0.0574460439, 0.1510257125, -0.2026690394, -0.0206788555, 0.1035813391, 0.1429259926, 0.1360220760, 0.0513638854, -0.1903906167, -0.1575379372, -0.1508251131, -0.1018683910, 0.0560404323, 0.1953340620, 0.1389694065, 0.1075044572, 0.0771216452, -0.2004263401, -0.2171642035, 0.2127880752, -0.0930947140, -0.0065982942, 0.0464319512, -0.0390572287, -0.0046076411, 0.0088425046, 0.0453900695, 0.0879613832, 0.1306717098, 0.0437899344, -0.1037163287, 0.0413172320, -0.1010502130, -0.1875332147, -0.0169533640, -0.2140126228, -0.0482773520, 0.1196048856, 0.0472409949, 0.1457569450, 0.0420934781, -0.0831969976, 0.0854464695, -0.0302434899, -0.0466857776, -0.0726025850, 0.1978286803, 0.0308677237, -0.2700199783, 0.2116178423, 0.2277924567, 0.0150589393, 0.1067929044, -0.1873022169, 0.0814045295, -0.0420420989, -0.2174382061, 0.0159667004, 0.0731544346, 0.0595915206, -0.0381428674, -0.0385303460, -0.1069877520, 0.1488685161, -0.2510288656, 0.0783389434, 0.0171341542, 0.0446406417, 0.0333554894, 0.1648767292, -0.1273382008, 0.1660567820, -0.2106685340, -0.1085086465, -0.0049144411, -0.1127650589, -0.1554766297, -0.0201995708, -0.1135402843, -0.1202438474, 0.2364405245, 0.2702057362, 0.1071231589, 0.0425124466, -0.0828514621, -0.0149055952, -0.2810298204, -0.0040830756, 0.0301844850, 0.1670185477, 0.0571310669, 0.1748594940, -0.2250272036, -0.1033054143, 0.1157302931, 0.1023652330, 0.0376591869, -0.0137495538, 0.2138191611, 0.1148743704, 0.1868690103, -0.0583052933, 0.0522405319, 0.1247890070, -0.0947296545, -0.0001954072, 0.0172063112, 0.1946163177, 0.0109881442, -0.1218920648, -0.1134767309, -0.1645517498, 0.0361152031, -0.0069984002, -0.0060614594, 0.1208625734, 0.0720250756, 0.1547357142, -0.0915754959, 0.1224725544, -0.0026450187, -0.0332923718, 0.1350152344, 0.0340313502, 0.0262728892, 0.1485771984, 0.2330456674, 0.0817085057, -0.0784519911, -0.1927929819, -0.2651717961, -0.1069055647, 0.1703151166, 0.0383176357, -0.0244820975, -0.1155747399, -0.0827586725, -0.0611487217, 0.1746783406, -0.0760900825, -0.1630164683, -0.0338946655, -0.0386296995, -0.0320629142, 0.1224934384, 0.2475386560, 0.1275341213, -0.0917784572, -0.0619556531, -0.0718552768, -0.1059658676, 0.1272623092, 0.1456599534, 0.0014907122, 0.0397747308, -0.2752099037, 0.0888530761, -0.1226551235, -0.2685751021, 0.1269976199, -0.1580193937, 0.1586201340, -0.0764667764, -0.0484385714, -0.1099558026, -0.1241352782, -0.0608363375, -0.0941283852, 0.0803377852, 0.0110693937, -0.0500927679, 0.0369951278, 0.2312083095, 0.0530287251, -0.1957153529, 0.2156906575, -0.0596066602, 0.0024311193, 0.1300781518, 0.0779171064, 0.0551205948, -0.1400598735, -0.0186167117, -0.1239267811, -0.1303547472, 0.0945206136, 0.2243161798, 0.2258503586, -0.2488656789, -0.1422876269, 0.0955957547, 0.0396468900, 0.1822672337, -0.0850697160, -0.1802377850, -0.0143123949, 0.2574461699, -0.1907218695, -0.0123047866, -0.1393427998, -0.0712797642, -0.0833690017, -0.0815242901, 0.0062990864, 0.2430278361, 0.1000102609, -0.1417158395, -0.0545568131, 0.1018632948, 0.1688833982, -0.0204744507, 0.0511415750, 0.2818467617, 0.1519383937, 0.0292251203, -0.1091874465, 0.2174523175, 0.0491447635, 0.0063824411, 0.1370265782, 0.1259658784, 0.0683572292, -0.0070298491, -0.1115086451, 0.0482571013, -0.0345236473, 0.2630169392, -0.1082114801, -0.0095514311, -0.0935379043, 0.0582201779, -0.0069493917, -0.1147246212, -0.1395385265, 0.2027384192, 0.1195672378, 0.1149425507, 0.0083875209, 0.0472322479, -0.0590699501, 0.0326516815, 0.0449658036, 0.0458285175, 0.0971983597, -0.2019328177, 0.1764550060, 0.1072190776, -0.0057204971, -0.0816840082, -0.1482609659, 0.2164493799, -0.0667608902, -0.0239119921, -0.1154082045, -0.0663011372, 0.1337404251, -0.2277066708, 0.0458620638, 0.0468687639, -0.1475705951, 0.1107287630, -0.1330515295, -0.0619392768, -0.1670839936, -0.1236384436, -0.0013679377, 0.0462524481, -0.0544738099, 0.0657636970, -0.1169643104, -0.0753093064, -0.0129177868, -0.0993279964, -0.0703701079, -0.0125956172, 0.1632571071, 0.1296070367, -0.0950106084, -0.1281377971, 0.0420984104, -0.2135675848, 0.2410248518, -0.0352274105, -0.2268045992, 0.1080188230, -0.0530149117, -0.1882457584, 0.0003361635, 0.1820625514, -0.0616804659, 0.0068524238, 0.0766104981, 0.0920868069, 0.0896125734, -0.1025666073, 0.1052812487, 0.0628406331, -0.1819401979, 0.0869772956, -0.0930894837, 0.0784780979, -0.0891215131, 0.1223124415, 0.1535531282, -0.0638064370, 0.0504567474, 0.0766062662, -0.0716946423, -0.1128309220, 0.2812796533, 0.0027931719, 0.1033808663, -0.1645676792, 0.0820052102, -0.0835529864, 0.0512398966, -0.0729730278, -0.0037557378, 0.0644443482, -0.2337202579, -0.1305648088, 0.0624132007, -0.0849201009, 0.0855821222, -0.0002027689, -0.2033962458, -0.0349098220, 0.2215084583, 0.1512002349, -0.2771979570, 0.0824241787, -0.0427854806, -0.1353721321, -0.0026558808, -0.0488829799, -0.0676443949, 0.1590864211, -0.0544877015, -0.0455177687, 0.0855425149, 0.1756953746, 0.0439063460, -0.0072433040, 0.0330262557, 0.0635370910, 0.0986793637, 0.0590855107, 0.0790280178, 0.0607925802, 0.0530392081, -0.1415964067, 0.0146141397, -0.0358477980, -0.0257924758, -0.1633128077, 0.1175406277, -0.2532437444, -0.0047467565, -0.1598663777, -0.0011280718, 0.0434869640, -0.0847836956, -0.1113610864, 0.0051381481, 0.1453387588, -0.0169285592, -0.1288270503, 0.1369387954, -0.0924630836, 0.1683029979, -0.0465211421, 0.0205916446, 0.1416622102, -0.0550709814, 0.1599095315, -0.0336868204, 0.1759442985, 0.1388521791, -0.0911794752, -0.1352670938, -0.0697568133, 0.0448368676, -0.0045311698, -0.0165029634, -0.0755382478, 0.0330064073, -0.0514539890, 0.1847560257, -0.1621470153, 0.0606416315, -0.1844148040, 0.1425907910, -0.0687944219, -0.0503070429, 0.0959622115, -0.0502747335, -0.1884597689, -0.0173685309, -0.1762281656, -0.0804069042, -0.1329094619, -0.2026061416, -0.0818772539, -0.0101486091, 0.1723828763, -0.0593205802, -0.0336343087, -0.1630137861, -0.1667118073, 0.0784531236, -0.0519152358, 0.1925902963, -0.0922383294, -0.0025878698, -0.1561714560, -0.2010562271, -0.1649215221, -0.0804934427, -0.0665072352, -0.0038863851, 0.0069891452, 0.0308702327, -0.1330734193, -0.0119879581, 0.0200424958, 0.1130692437, 0.1102004722, -0.0562731288, 0.0682408661, 0.0280498732, -0.1037245765, 0.1057717726, -0.1269609928, 0.1889747083, 0.1668835282, -0.1222885028, -0.1631371230, -0.1848745793, -0.0404244624, -0.1616948396, -0.1537214369, 0.0013301386, -0.1382960677, 0.0725900531, 0.0207923204, -0.0467505120, 0.0787823051, 0.2606449127, 0.1080802158, -0.0007205685, 0.0601131730, -0.1395134479, 0.0825980604, -0.1798492819, 0.0615889244, 0.0370552614, -0.0494506359, -0.2171688378, -0.0108239828, -0.1024239957, 0.0316607617, 0.0288495701, -0.0537360720, 0.0698427409, 0.2587355971, -0.0598651059, 0.1809913367, 0.1238194332, -0.0859430134, -0.0132762138, 0.0125994151, -0.0116268797, -0.0744106472, 0.1602083594, -0.0529592820, 0.0730493367, -0.0651475340, 0.2229120135, 0.0136877364, 0.0772126466, 0.2251398861, 0.2120474279, 0.0926168635, 0.1864287257, -0.0821781009, 0.0647216588, 0.0400910825, -0.1576396078, 0.0695507452, 0.1458704621, 0.1322609335, -0.0626569688, -0.0805940256, -0.1901827455, -0.2235114574, 0.0472286940, -0.1771215200, -0.2044143677, 0.0248553511, 0.1745647043, -0.1568885595, -0.2109308541, -0.1607625633, -0.0191923976, 0.2176422030, -0.1402570754, 0.2050338537, 0.0869333372, 0.0843357667, 0.0775433779, 0.1468378752, 0.0964659080, -0.0566681102, 0.0105935596, 0.0450450778, -0.0823354200, 0.1163316891, -0.0930824801, 0.2630977929, 0.1727196574, 0.0253617857, 0.0511106476, 0.0756931454, -0.1443072408, -0.0437081605, 0.0216910169, -0.0862738863, -0.1077134311, -0.1004364043, 0.1010839492, -0.0728889406, -0.1077290848, 0.0675316378, 0.1088770851, -0.2688865662, -0.0216020737, 0.0436490402, -0.1551242173, 0.2176226079, -0.1906836927, -0.0266338438, -0.1615042686, -0.1076695994, -0.0453749411, 0.1109111980, -0.0929997787, 0.2752904296, -0.0780649185, 0.1799840033, -0.0981800929, -0.0460835695, -0.1799520552, -0.1854611933, -0.0672123879, -0.0870551392, 0.1844620407, -0.0813903809, 0.0727249607, 0.2448550910, -0.0504359491, 0.1004245579, 0.1243929192, 0.1257082671, -0.0253964029, -0.1811996102, 0.0660863221, -0.1478004605, 0.2596580088, -0.0624188185, 0.0838649273, 0.1441859752, -0.1814305782, 0.1041300967, 0.1309614182, 0.1576699167, 0.0983363092, -0.1815874577, 0.0542258359, -0.0490096062, 0.0283206366, 0.1550345421, -0.1606125385, 0.0419438891, 0.0783345476, 0.0249163490, -0.1680600494, 0.0162095651, 0.0096229874, -0.0069902772, -0.0757038817, 0.0085176891, -0.0032803663, 0.0688302666, -0.0803164542, 0.1433585733, 0.1538421661, -0.0473660044, -0.0315867029, 0.1535774916, -0.1293331832, -0.1459638476, -0.0697893724, -0.0368001908, -0.0243681930, 0.0003242550, 0.2508162558, 0.1297740191, 0.0066024372, 0.0797929689, -0.0191732999, -0.0215920284, 0.0322477296, -0.1313299984, -0.2147543132, 0.0096179573, 0.0288586114, -0.0115308939, -0.0756922960, 0.0487193316, 0.0211022124, 0.2714052796, -0.0607633106, 0.1312172711, 0.0597410798, 0.0743397921, -0.0830940232, -0.1743521541, -0.1966325939, 0.1244889721, -0.0322339945, -0.1540615708, 0.0431965217, 0.0461160578, -0.0975308716, -0.1316472739, -0.0890149251, 0.0829778910, -0.0321299024, 0.0274069253, 0.0115957521, 0.1264706850, -0.0431889743, -0.0857871845, -0.1014607921, 0.0893527269, 0.1911329925, 0.1127826124, -0.1196949482, -0.0169077609, 0.0258931778, -0.0135111185, 0.2677437067, -0.1388994604, 0.2299515009, 0.0061684945, 0.1318108886, 0.0734688938, 0.0611892976, -0.0497159883, -0.2230485082, -0.2544206679, -0.0745686442, -0.0925587341, -0.1530676335, -0.0952358991, -0.0528432056, 0.2346289307, -0.2821613550, 0.0621009469, 0.0390724093, 0.1834649891, -0.0724699274, 0.1179352477, 0.1854379922, -0.1119541004, -0.0239098947, 0.0277565215, 0.0580560677, -0.0244678538, -0.1631816924, 0.1406446546, 0.0870576575, -0.0307695735, -0.1732271761, 0.1807779372, -0.1236173958, 0.0595008768, 0.1542416364, 0.0289861578, 0.0214221086, 0.0698957220, 0.0808888078, -0.0956377834, -0.1372262388, -0.0115176635, 0.0222282261, -0.1225497127, 0.0249448046, 0.0394847468, 0.0747292340, 0.2051742822, 0.0204707980, 0.1274874955, 0.0403503366, 0.0256297123, 0.1143494248, 0.1356880516, -0.2117946595, -0.1529399455, -0.0902143046, 0.0726781934, 0.1038185656, 0.2370125800, -0.0340395421, -0.1936406195, 0.0328739993, 0.0679253712, 0.0749566257, 0.1117315143, 0.1761496663, -0.0051984363, 0.1092730463, -0.1391870230, -0.1426488310, 0.1343106925, 0.0586883798, 0.0895380303, 0.0021650894, -0.0319245011, 0.2057160884, 0.0769155398, 0.1397321969, 0.0227972418, -0.0848613083, -0.1117640212, 0.0512168072, -0.0238049142, -0.1072839200, 0.1601867229, -0.0609430037, -0.1404152066, -0.0268739909, 0.0024644502, 0.0454708599, -0.1746778637, -0.0155512998, -0.0314287320, 0.2701894343, -0.0245691258, -0.0147782099, -0.0888744891, 0.1499681175, -0.1320794374, -0.1644803733, 0.1080574766, 0.0222801734, 0.2030932009, -0.0384375490, -0.1159252003, 0.0946483910, 0.0336814374, 0.0932908058, 0.1360691190, 0.0554955453, 0.0902889371, 0.0493241698, 0.1050493121, -0.0090964101, 0.0383067057, -0.1646759063, 0.2375891358, -0.0609157719, 0.0044506197, -0.0526293889, 0.1205789298, -0.2435261160, -0.1450737417, -0.1142302006, -0.0298855193, 0.0412391536, -0.0369450487, 0.1201884374, -0.1040582433, 0.0453646332, -0.0676715076, -0.0269764271, 0.0368023925, 0.1980386823, 0.0496222116, 0.1806527078, -0.1779495627, 0.1937607974, 0.2230517268, -0.1626930386, -0.1155337244, 0.0081150113, 0.1033852994, -0.0798078477, -0.2431931496, 0.1085024476, 0.0824859068, 0.0665821582, -0.0783853158, -0.1779630482, 0.1652704179, -0.0151350657, 0.0577934161, -0.0530451238, -0.0914782137, 0.0094682546, -0.0665405765, 0.0809885561, 0.0209521763, -0.0643577352, 0.1509083658, -0.0450241417, -0.1542009711, -0.0750477687, 0.1432722062, -0.1210136116, -0.2393337935, 0.1742549390, 0.2425795645, 0.0248986743, 0.0869731307, 0.1967968047, 0.0098756570, 0.0860351920, 0.1098337993, 0.1902563572, 0.0661477372, 0.1089522988, -0.0417994708, -0.0035074379, 0.0221125726, -0.0163209885, 0.0987854749, 0.0096208295, -0.1758291721, -0.1038086712, 0.0895371735, 0.0411595292, -0.1635331661, 0.0060136984, 0.0855006203, -0.0745453909, 0.0764731914, -0.2236988395, -0.2127299309, -0.0236425418, -0.1366294622, -0.2475554794, 0.0874419585, 0.0325846635, -0.0752865523, -0.0461096577, 0.1777936369, 0.1852025688, -0.1525126249, 0.0501561612, 0.0785991549, -0.2422652692, 0.2364196032, 0.0000217754, 0.0760839656, 0.0541734025, -0.0355572775, 0.2226355374, 0.2684724629, -0.0972701535, 0.0017797290, -0.0349685512, 0.0741144270, 0.1168741807, 0.0552489795, -0.1395538598, -0.1746816784, -0.0187153090, 0.0692836121, -0.0599790215, 0.0997491032, -0.0440178700, 0.0914725959, -0.0522113666, -0.0122404927, -0.1112508550, 0.0801611468, 0.0145924166, -0.1420790702, -0.1765258610, -0.2039904594, 0.0694014207, 0.2547733784, 0.0569078587, -0.1806388050, 0.0221729744, 0.0907310769, 0.0310131796, 0.0571538545, 0.0324206725, 0.0878803208, 0.0296222866, 0.1419964582, 0.0669470504, 0.0120772608, -0.2097135186, -0.1138649359, 0.0421143770, 0.1351150870, 0.0328468867, -0.1241211295, 0.0607879981, -0.2099023908, -0.0808946192, -0.0473215804, -0.0072338241, -0.0238179639, 0.0290135350, -0.1198501512, -0.2675222158, 0.1753213555, 0.0728398189, -0.0420208536, -0.1946536750, -0.1811649352, -0.1849342287, -0.1070857793, 0.0356479064, 0.0612425320, 0.1629734486, -0.0466616787, 0.1507129073, -0.0168536175, -0.1433663219, 0.1405095905, -0.0000202067, 0.0447004959, -0.0735402331, -0.0258071199, -0.1112391353, -0.0288854539, -0.0954652354, 0.1768729538, -0.1371984780, 0.0170925613, -0.1435367912, -0.0955430940, 0.0902085081, 0.0473847575, 0.0981696919, 0.1682029068, 0.1050064042, -0.0179986116, 0.0563142486, 0.0826022401, 0.2753052413, 0.0309703797, 0.1034128889, 0.1615600586, 0.1075808331, 0.0815273449, -0.0926227644, -0.0573660433, -0.0162686538, -0.0422150157, -0.0416982472, 0.1506671309, -0.0128406538, -0.1018630117, 0.1088693663, 0.0187275503, -0.0586391501, -0.1083043590, 0.0417138487, 0.1785930097, -0.1666526198, 0.1223886311, 0.1081862077, -0.1438120157, -0.0214322265, 0.1699093133, 0.0923822671, 0.0323327929, -0.0378327593, -0.1202432662, -0.0062918141, -0.1869152188, 0.1249008179, -0.1923736334, 0.0375587195, 0.0432231501, -0.1421828270, -0.1410569251, -0.1273282617, -0.0740942284, 0.0620744713, 0.1758188754, 0.1685160398, -0.0411885381, 0.0044650347, -0.0518302061, -0.0489006974, -0.0045854985, -0.0939506143, 0.1728413254, 0.2079376429, -0.1590989381, 0.1906215400, 0.0707166418, 0.1728170216, 0.0817375407, 0.0168898869, 0.0459248163, 0.1097815707, -0.1097664759, -0.2515058517, 0.2627134025, -0.1949797571, -0.1388548166, 0.1414133906, -0.1477331817, -0.0973665938, -0.1623962373, -0.1423022151, 0.0485842116, -0.1723869443, 0.0470893160, 0.0587635711, -0.1341709197, -0.0435244255, 0.0880440846, 0.1027537137, 0.1626276672, -0.1150525138, -0.0088513559, 0.2321567833, -0.0043480871, -0.2723878920, 0.0301906206, 0.0567947961, 0.0879908726, 0.1984986067, -0.1620690227, 0.1039144322, -0.0981075913, -0.0392180867, -0.1483320892, 0.0789129585, 0.2365010679, -0.1339499652, 0.1406016201, -0.0467333235, -0.1781003326, -0.0292715710, -0.0489341170, -0.0896106437, 0.1191271842, -0.0703197196, -0.0947208628, 0.0680433884, -0.0181784909, -0.1780548543, 0.1708818674, 0.0835699290, 0.0602166392, 0.0971694812, -0.1662360430, -0.0530237705, -0.0389715880, 0.0924128965, -0.1231765449, 0.1358929127, -0.0883260965, 0.0690667406, -0.1044011340, -0.1845111996, -0.0767330229, -0.0413186252, 0.2497342378, 0.0297925789, 0.0531370863, 0.0374900252, -0.0174350031, 0.0878673866, -0.0602268539, -0.0475164503, -0.0436790995, 0.2312648147, -0.0380902514, -0.0150008015, 0.0268452242, -0.1656778306, 0.0029746881, 0.0917216539, -0.2471208572, -0.1114518866, 0.0649231449, -0.1187767014, -0.1600448787, 0.0125407577, 0.1597493440, -0.0014716813, -0.1156054512, -0.0698717386, 0.0750832036, 0.2524825037, 0.0641770139, -0.0688782260, -0.1026227251, -0.1112691984, 0.1083208919, -0.1575222164, 0.0931438804, 0.0905460715, 0.2509988546, -0.1860100925, -0.0213774648, 0.0552817360, -0.0863875151, 0.2451596558, 0.0545062535, -0.1070031002, -0.0275455564, -0.0438341089, 0.0248616505, -0.0563542992, -0.2112038732, -0.2169364542, -0.1959754676, 0.1145071611, -0.0721852630, 0.0037426327, 0.0327909775, -0.0093742274, 0.2280561775, -0.0273826513, 0.1227784008, 0.0876391605, 0.0990892574, -0.0409724005, -0.1098527014, -0.0661643669, -0.1574556082, -0.0143900886, -0.1772338450, 0.0653361231, -0.1321118921, -0.0220224746, -0.1991938651, 0.0981107801, 0.0292974729, 0.0236453079, 0.1540713608, 0.0681729838, 0.0066017555, -0.0907802805, 0.0834187865, -0.0794414505, 0.0805260539, -0.1654742360, 0.0022469100, -0.0111940261, -0.2000221163, 0.1199129224, -0.0568188131, 0.0998646542, -0.0016607851, -0.1565601677, 0.1886251569, -0.0011680068, 0.1247321814, 0.0870525688, -0.0802633390, 0.0394556820, -0.0252779480, 0.0090717440, -0.0243168715, 0.0080197323, 0.0514299907, 0.0803543776, -0.1509224176, -0.1403567642, -0.0720192418, -0.1620709449, 0.0201829169, -0.0327924192, 0.1939907670, -0.0557980351, -0.0293130297, -0.1789145768, 0.0730729625, -0.0571348295, -0.0522253029, 0.0941103771, 0.1000645235, 0.1795752198, -0.0310286283, 0.1587948501, 0.0831879675, -0.0029965523, -0.2217195630, 0.0060348511, 0.0172057711, -0.1429028958, -0.2604697943, -0.1857576817, 0.2368336171, 0.1046419367, 0.0425059609, -0.1988834590, 0.1492462605, -0.0014562537, -0.1414049268, -0.0787760243, 0.0667037070, 0.1580146700, -0.0627198815, -0.0369484872, 0.2542452812, -0.0312328897, 0.0100917099, -0.2279804051, 0.1618613005, -0.1381360590, -0.0707705989, -0.0004376910, -0.0157957282, 0.1142304614, 0.0629025921, 0.2021458447, -0.0496281646, -0.1040715128, -0.0468096323, 0.1117929220, -0.0385452509, 0.2507359982, -0.1322470456, 0.0648499206, -0.0333019383, -0.0576676130, 0.1305289119, 0.1283224672, -0.0496531092, -0.1487473696, -0.2037857324, -0.0980364680, -0.0203134865, -0.0060813027, 0.0482061356, -0.0186335389, 0.1309886873, -0.2465753853, 0.0310607664, 0.1692657620, 0.0722044110, -0.1019275561, 0.0985693783, 0.2757527828, 0.0273478050, -0.0876249820, -0.0643787235, 0.1841905713, 0.1673757136, -0.0452760980, 0.0502775311, 0.1983899176, 0.1212801486, 0.2327490151, -0.0815685913, 0.2744186819, 0.1556714028, 0.0261142310, -0.1777844727, 0.2622579634, -0.0669019967, 0.0479165949, 0.1351762265, 0.1678374410, 0.0565430634, -0.0640336350, -0.0903302506, -0.0528393015, 0.1046723947, -0.0083812755, 0.1145306528, -0.0275422167, -0.2101691067, 0.0091282381, 0.0081721088, 0.2760363817, 0.0302786455, -0.0705075264, 0.1160284057, 0.0254062936, 0.0439661406, -0.1971282810, -0.0997617319, -0.0533259511, -0.1255139858, -0.0165865477, 0.1353700906, 0.0199615099, 0.0122048799, 0.1523071080, -0.0117767351, 0.0150361555, -0.0672794953, 0.0190577265, 0.0303430688, -0.0779938251, 0.1739734113, -0.0868542045, -0.2342923582, 0.2289956808, -0.0739980191, 0.1241013929, -0.0148560964, -0.0676912367, -0.0440512151, 0.1614220738, 0.0654549003, 0.0034681475, 0.0823685676, 0.0636840537, 0.2198726088, 0.0715814382, -0.2722861469, 0.1123077795, 0.0548456013, -0.0427378491, 0.1780192703, 0.1498503834, 0.1560665071, 0.0766552612, -0.1095200405, 0.0714334697, -0.2055707276, -0.0058236760, -0.0017341905, 0.0945918262, -0.1265133619, -0.0873061419, 0.1003131941, 0.1586667746, -0.2454716116, 0.0509388857, 0.1070740297, -0.0999242440, 0.1690638959, 0.1457604319, -0.0670515671, 0.0800657198, -0.0243375339, -0.1894418895, -0.1312011182, -0.0596494228, -0.0421568267, 0.1380665004, -0.1395867318, 0.2123806030, -0.1161398441, 0.1580088139, -0.0534435362, 0.1753571033, 0.0138376905, 0.0995731652, -0.0119750686, -0.0454988927, -0.1352009773, 0.1680397391, -0.2236663103, -0.0244070701, -0.0265819058, -0.2619997859, -0.1117713973, -0.0284393467, 0.1293657422, -0.2068129778, 0.1009689420, 0.0348611623, 0.0525759198, -0.1644175947, 0.1327681243, 0.0975494310, 0.1836800128, 0.1173802614, -0.0311244614, -0.1115957201, 0.1099519059, 0.0192390122, 0.0848270580, 0.2722228169, -0.0666368231, -0.1084052548, -0.0088640498, 0.0792911649, -0.1618531942, 0.0208623707, -0.1321373433, -0.1798028499, 0.1431613863, -0.1979518533, -0.0781861693, -0.0005067068, -0.0464291684, 0.0442751013, -0.0634491816, 0.1152076721, -0.0041925665, 0.0320004970, -0.0722332522, -0.0266247522, -0.0830429718, 0.0930044204, -0.1719996035, -0.0557293445, 0.1634536237, 0.0026111524, -0.0014088053, -0.1526883543, -0.0347234644, 0.0466307141, 0.2745839953, 0.0749545693, 0.0145639572, 0.1142928079, -0.1644444615, -0.1546611637, -0.0156497210, 0.1209362373, 0.2196750045, -0.0777608231, -0.0152377058, -0.0034022559, -0.1248447746, 0.2493267804, 0.2533354163, -0.0182531737, 0.1622334272, -0.0442988724, 0.0972751006, -0.1084337607, 0.0706113651, -0.0386193246, 0.2172532380, -0.0938293412, -0.0530003943, -0.0203644820, 0.1141141802, -0.1739749163, 0.0270553585, 0.0204237774, -0.0426367372, 0.0039331727, -0.0699458495, 0.0978336930, -0.2135037631, -0.0529547594, -0.1403394341, 0.0394319259, 0.0930055752, -0.0944738686, 0.1144077554, 0.0669270232, -0.0040059360, -0.2144207358, 0.0951756239, -0.0844688565, 0.0782875642, -0.0730328709, 0.1216238439, -0.1818524748, 0.0672747120, 0.0059763952, -0.1057638004, -0.0642493144, 0.1966203451, -0.2168261111, 0.0546900965, -0.0552492216, 0.2080242038, 0.2175546288, 0.1293535084, -0.1473033577, -0.1841557324, -0.0511882603, 0.1189356893, -0.0521540865, 0.0763768032, 0.0014308686, -0.0429006554, -0.0726952627, -0.0105660567, -0.0241490323, 0.0861124024, 0.0086030019, -0.0653133988, -0.1472383887, 0.0631815270, 0.0137374457, -0.0125932917, 0.0440471061, 0.0556002818, -0.0177724920, -0.0207271818, -0.0171929076, -0.1126156971, -0.1198296323, 0.1459356993, -0.0848566964, -0.0691757575, 0.0539406128, -0.0056808954, -0.1535790414, 0.2441506237, 0.0217809062, -0.1545452327, -0.0675072074, 0.1360480636, 0.1435596049, -0.0743975192, -0.0958038941, -0.0537707955, -0.0981137305, 0.2112467587, 0.0835968778, -0.0644611493, -0.1105095819, -0.2457558811, 0.0851500630, 0.0972140655, -0.1272787452, 0.2079250664, -0.0258098785, -0.1381724030, 0.2687539756, -0.0385650359, -0.1174903959, 0.0045946231, -0.0971095487, 0.0512174144, -0.1966030151, -0.0647920892, -0.2137314081, -0.0658509657, -0.1303948909, 0.2268496901, -0.0801531523, -0.0572273470, -0.2421223223, -0.0606716834, 0.0617669001, 0.0545506328, 0.0286707040, -0.1336990148, 0.2646550536, -0.1447513551, -0.1500293612, 0.0164857507, -0.0560056753, -0.0678572357, 0.0183995944, 0.0273015164, 0.2070420533, 0.1623326093, 0.0830540285, -0.1927028745, -0.1395539492, 0.0677152202, -0.1021786854, 0.2444199324, 0.1508679092, 0.1912898421, -0.1176828071, -0.0849132463, -0.2240710109, -0.0891361013, -0.0023287800, -0.1975225955, 0.0068405527, 0.1879413426, 0.0042146165, -0.1486765444, -0.0949262604, -0.0446972363, -0.1141928583, -0.0419743024, -0.1446282417, 0.1957917362, -0.0578331910, 0.0222161096, -0.0706765205, 0.0720689744, 0.0692828372, -0.1572766751, 0.2088047713, -0.0437530093, 0.2124392390, -0.1243670210, -0.1330533624, -0.0100059770, 0.0268737394, 0.0778635219, -0.0026180185, 0.0979117528, 0.2401452065, -0.1293812990, -0.0037245571, 0.0573653765, -0.0516227819, 0.2611409724, 0.0320728607, -0.0220092218, -0.0588341951, 0.0941429064, 0.0827328265, -0.0730853304, 0.0847861171, 0.0017896002, 0.0990224034, 0.0064903954, -0.1676556170, 0.0662105381, -0.1030342132, -0.0108734034, -0.1738713086, -0.0637197047, -0.0915102512, 0.1367971152, -0.2010092139, 0.1203742251, 0.0863350257, -0.0655536056, 0.2264416516, -0.1116164401, -0.0539484359, -0.0917924270, 0.0875548795, -0.2471980751, 0.0198566820, 0.0896464363, -0.1065804437, -0.0333235078, -0.1383607090, 0.0540934317, 0.1262708604, -0.0642829388, 0.0960262939, 0.1776208878, -0.1820328534, -0.0453392342, 0.0364641249, -0.1623181999, -0.1537510604, 0.1788715571, -0.1906928420, -0.2551174462, -0.0240165386, -0.2049053609, 0.0360056311, 0.0302614532, -0.0808470026, 0.1003903598, 0.0387495458, 0.2256197035, -0.0514501631, -0.0617796071, 0.2720672190, -0.2186654955, -0.2375918329, -0.0617412925, 0.0084235799, 0.0551772155, 0.2690711021, 0.1242905781, -0.1659533232, -0.1451577097, -0.0005005930, -0.0628258437, 0.1581188887, -0.1411603987, 0.0860276893, -0.0378439836, -0.2704829276, -0.1166839525, -0.0754947141, -0.2190988809, 0.0460942090, 0.1014591157, -0.1000938788, 0.0074507981, 0.0920055062, -0.0247984212, 0.0466884002, 0.1236298382, -0.1346869916, 0.1797688305, -0.0659094453, -0.1466757953, -0.0107899522, 0.1915116757, -0.0346368439, 0.0163846016, 0.2638539076, -0.1275609881, 0.2407861203, -0.1675171852, -0.0102338642, -0.2352702469, -0.0754561722, -0.0446660295, -0.0154282926, 0.0765434802, -0.0557874888, 0.0159406271, -0.0355705507, -0.2134874910, -0.0707333013, -0.0270526130, 0.0800113901, 0.2413291633, -0.1097065434, 0.2193491012, 0.1653677821, 0.0426755138, 0.2451513857, 0.0222937241, 0.1535683572, -0.1019923091, -0.0500394367, 0.1078356281, 0.0265753679, 0.2612361014, -0.0070431172, 0.1980412602, 0.0208348334, 0.1227078885, 0.0850957111, 0.1595578045, -0.1319623142, -0.2702070773, 0.2047082782, -0.1329164356, -0.1889630556, -0.0643725917, 0.1170936897, 0.0208338089, -0.0256429426, -0.1050968096, 0.0264937673, -0.1809730083, 0.0709128678, -0.1181023940, -0.1040120795, -0.0241476055, -0.1678888798, 0.2126378119, -0.0474649295, -0.1399276406, 0.2107565850, 0.0933021456, 0.1081898138, -0.1020613760, 0.0434454009, 0.0607220791, 0.0170190651, 0.0406013392, 0.1719371974, -0.0248156302, -0.0683906451, 0.0770074949, 0.2330522686, 0.1558513343, -0.1338985860, -0.0779902712, 0.0196038336, -0.0377863720, 0.2222253829, 0.0348958746, 0.0469601974, -0.1016319171, -0.0602092855, 0.0778248087, 0.1250902861, -0.1465093940, 0.2740103602, -0.1881869286, -0.0968058184, 0.1504809260, -0.2457303703, 0.2229520530, 0.0125483088, -0.0171017833, -0.0827760920, 0.1280102730, 0.0303013120, -0.1984679848, -0.2240903825, -0.0235657580, 0.0318563432, -0.0481695384, -0.0437782705, -0.1401860863, 0.0525645502, 0.1013544872, -0.0835512578, 0.1117669716, 0.1213585436, 0.0501302853, -0.0289198514, 0.1325744390, -0.0974432155, 0.1674649119, -0.0560312644, 0.1380679458, -0.0710551292, 0.2738326490, 0.2334755659, 0.0844428539, 0.1406677812, 0.0581597500, 0.0219010618, -0.0400461555, 0.2383152395, -0.2276203930, 0.2254168391, 0.0498677753, -0.0552212000, 0.2164169699, 0.1459459811, -0.1712530404, 0.0399648845, -0.0178871378, 0.0012068135, -0.0483486094, 0.0072596972, -0.1002095789, -0.2620814443, -0.0026037078, -0.0757053643, 0.1381660402, -0.0176111907, 0.0276790317, 0.0219983179, -0.2265664637, 0.0486922637, 0.0183966160, -0.1030625105, -0.0731182545, 0.1730743647, 0.1003999710, 0.2206787169, 0.1998114288, 0.2639985383, -0.0906821638, -0.2169718444, 0.0321799330, -0.1767161489, -0.1407140344, -0.0352782980, 0.1033582315, -0.1993562877, -0.0658982918, 0.1688201725, -0.0824943781, 0.0393225960, -0.0631433949, -0.0685393438, 0.0601453632, -0.0609684512, 0.0826564431, 0.0499803126, 0.0199325811, 0.0620110743, 0.0084640142, 0.0914671868, -0.2389407903, -0.1177317351, 0.0886875615, -0.1636147350, -0.0803571492, 0.1236129478, 0.0333894491, 0.1423630118, 0.0496859998, -0.0727581978, -0.0741045102, -0.0815364942, -0.1467522383, -0.0387865156, -0.0418020226, 0.0622102916, -0.1064084098, 0.0460995883, 0.0798231140, 0.2111065388, -0.1039663628, 0.1571135074, -0.0736722648, 0.0946889892, 0.0809754059, 0.1882033497, 0.0053439196, 0.0725101531, 0.2111352831, 0.0272368509, 0.0206132792, -0.0433513671, 0.0455685630, -0.2565985322, -0.0546312295, 0.0176149048, -0.0882007033, -0.0608545095, -0.1952330023, -0.0809117109, 0.1025009751, -0.1457524747, 0.1307020634, 0.0352418087, -0.1614961326, -0.1530789286, -0.1085117161, 0.2151856273, -0.0558868460, -0.0194708407, -0.0756338313, 0.0438511819, -0.1747446507, -0.1096059829, -0.0147245787, 0.0130247083, 0.1653407961, 0.0233472064, -0.2199065387, -0.0931422785, 0.0656583309, 0.0245651696, 0.1619136035, 0.2799246311, 0.1760893613, -0.1250459701, -0.0002323311, -0.0287494976, 0.0932892114, -0.0615812540, 0.2298890501, 0.0953135490, -0.0421247073, -0.1634737253, -0.0770457759, 0.2146919668, 0.1005171612, -0.1800560504, 0.0343471803, 0.2144256830, -0.1150106713, 0.0806519389, -0.0850066543, -0.0812525451, 0.0305408295, 0.0647862107, 0.0541132167, 0.1580922902, -0.0634033531, -0.0459603406, -0.0711033121, -0.0358901769, 0.0071100239, 0.0347746536, 0.2174445242, 0.0301740281, -0.0185699929, 0.2194037884, -0.0679657981, 0.0846257359, -0.0458151400, -0.0057985648, 0.0453842953, 0.2074164301, 0.0992322639, 0.1299466342, -0.0652909651, 0.0437774323, -0.1903884560, -0.1208494157, -0.2762865424, -0.0141362902, -0.0722657517, -0.0171726719, -0.1255687177, 0.1141215265, -0.0106992638, 0.0605176166, -0.0007012907, 0.1442482173, 0.0524722300, 0.0221817363, -0.0173291489, -0.0828003138, -0.0714380145, 0.0878498927, 0.0576648824, 0.2389491796, -0.0006052685, 0.1448905170, -0.0692541972, 0.1103073955, 0.2441821545, 0.2094717175, 0.1397877336, 0.0674465820, 0.0446753204, -0.1089119241, -0.0896608680, -0.1288114339, 0.1927231997, 0.0435044952, 0.1310847700, -0.0093977675, 0.1696838886, 0.0608318821, -0.1674340814, 0.0859872624, 0.1269210279, 0.0300930589, -0.0890610591, 0.0402860940, 0.1935613155, 0.0812525600, 0.1096932292, -0.0201592594, -0.0124374265, 0.0691929981, -0.0126401037, 0.1037035733, 0.0836778805, -0.2005598247, -0.1277322471, -0.0848055705, 0.2289268076, 0.0035133334, -0.0294321533, 0.0984859541, -0.0676946342, 0.1080813780, -0.1990255713, 0.2030650377, 0.1628531814, -0.0494969077, -0.0756759718, -0.0458636582, -0.1249278635, 0.1157198399, -0.1205435991, 0.2136892080, 0.0531645380, -0.0384905487, -0.0359320007, 0.2011763304, 0.1146681011, 0.1723637283, -0.1413434297, 0.0111367926, 0.1110328957, 0.1654819846, 0.0797122046, -0.2388690859, -0.1712790728, 0.0440351702, 0.0785723403, 0.0624851361, 0.0345400088, -0.1205060706, 0.0800306872, -0.0117054600, 0.0402819775, -0.1873013228, -0.0565270931, -0.0347714685, 0.1238397211, -0.1042945087, 0.0375607423, -0.2737156153, 0.0176550392, -0.0724975616, -0.1569960564, 0.0339762010, -0.0940173790, -0.1445681453, -0.1353697330, 0.0658908933, -0.0552250370, 0.0787650421, -0.1003893539, 0.1019775867, -0.0918471813, -0.2370404154, 0.0440614149, 0.0005281967, 0.0550501384, -0.1670742929, -0.0570224971, 0.1688706726, 0.1153074503, -0.0330154635, 0.2184613943, 0.0017636615, 0.1284721643, -0.2831968367, 0.1482574940, -0.0706136599, 0.0072836559, -0.1295994073, -0.1968048662, -0.0732984468, -0.0173600446, -0.0148135368, -0.0055416222, 0.2096724212, 0.1474262476, -0.1452406347, 0.0693604127, -0.1774704754, -0.0907411352, -0.0074882717, 0.0526304394, 0.1490152329, 0.0154016856, 0.2360771000, -0.0757485777, -0.1391663104, 0.0126904324, -0.0322381556, 0.0845943615, 0.0292526167, -0.0625216886, -0.0442856476, 0.0109989811, 0.1750352532, 0.1359086782, 0.1409882456, 0.2492649555, 0.0365743935, 0.1644157618, 0.1051716805, 0.1540068090, -0.2216791064, 0.1141778529, -0.1066335961, -0.0234907195, -0.0819262415, -0.1663230658, -0.0228220597, -0.1720010042, 0.1584510207, 0.2741740048, -0.0569863245, 0.1509020180, -0.0660201162, 0.0253192410, -0.1118422523, -0.0782138854, -0.1627801508, 0.1602393389, -0.0215632822, 0.0192740187, 0.0364323966, 0.0992428139, -0.0645144880, 0.1574831605, 0.1125981212, 0.0410795510, 0.0661370829, 0.0616493374, 0.1671642065, 0.2168601155, -0.1394176632, -0.1753085703, 0.0703822151, 0.2545952797, -0.0263518952, -0.0039904928, -0.0802156702, -0.0751054361, -0.1923471838, 0.0708746016, -0.0571751148, -0.0592848323, 0.0013160354, 0.0031316963, 0.0167212486, 0.2028440088, 0.0386383124, 0.1059615985, -0.0710732043, 0.2326031476, -0.1652574241, 0.1067934781, 0.1253403723, -0.0598010272, 0.0300945826, -0.0754170045, 0.0447906330, -0.0159166288, 0.2581940293, -0.0063124006, 0.1701409221, -0.0851479843, -0.0291826800, 0.0266491696, 0.0496050417, 0.0270254090, -0.0210047904, -0.0391460732, -0.1300481111, 0.0302665923, 0.1012493894, 0.0641787276, -0.1184338629, 0.0395699777, -0.0953184888, 0.1707684249, 0.0724120587, -0.1376258284, -0.1201110557, -0.1942834556, -0.0766129792, 0.1179670766, -0.2662559748, 0.1123197451, 0.0441072173, 0.0388784781, 0.0885229707, -0.0352398083, 0.2046350837, -0.2443699241, 0.2784534097, 0.0102138948, -0.0173571240, -0.0475055166, 0.0945556387, 0.0611241832, 0.0517058447, -0.0354779921, -0.0508375168, -0.0191195104, 0.0808083639, -0.1122664511, 0.0656652823, 0.0029279506, -0.1509394944, -0.0318015479, -0.1359498501, -0.0186369326, 0.2145818174, 0.1736124009, -0.0463704541, 0.1152802780, -0.0606081411, -0.0833229721, -0.0864409134, 0.1242164150, -0.1587746739, -0.2087409943, 0.0666064471, 0.0387897268, -0.0587859340, -0.2321289629, -0.0340349823, 0.0827750638, -0.1203567907, 0.0442337766, 0.0968013778, -0.1599279493, 0.2161463797, -0.1931589246, -0.1478882581, 0.0849082097, 0.1290528625, -0.1887760162, -0.0459139049, 0.0049759010, -0.0833813325, 0.2373885661, -0.0480198450, -0.2402745783, 0.1111473590, -0.0156976935, 0.1487723589, -0.0016272293, -0.1321003586, -0.1455124617, 0.0101972697, -0.0994726643, 0.1732828617, -0.0094238194, -0.0932097062, 0.0743409991, -0.0422816537, -0.1725286841, 0.1789616346, 0.0187791046, -0.0731175616, 0.0220824182, -0.1149414703, 0.0453517586, 0.0740119666, 0.1013583764, -0.1026392952, -0.0004778382, -0.0375316292, -0.2308928370, 0.1063793153, 0.0936747491, 0.0322898030, 0.0144923897, 0.0524421111, 0.0721481964, 0.0984008461, 0.0969729498, -0.2285452783, -0.1467408985, -0.2055221647, -0.0068294290, -0.1314077675, -0.0698023662, -0.0394008420, 0.0637777671, 0.0525009111, -0.0340835154, 0.0785012618, -0.0199426617, -0.1527871042, 0.0555541292, -0.1504718959, 0.0781987906, 0.1176605448, -0.1275676638, 0.1396244615, 0.0294661727, -0.0880851373, -0.1254780143, -0.2289404124, -0.0647510216, 0.0361927599, 0.2510269284, -0.1520217359, -0.1652888507, -0.0955705121, -0.2216533124, 0.0034186873, -0.1099361852, -0.1358732432, 0.2117986828, 0.1469655484, 0.1010582671, 0.1768716276, -0.1321779191, -0.0718908533, 0.1232179254, 0.2017835081, -0.0693287179, 0.1075735912, 0.0077237249, -0.2224607766, 0.1024035290, 0.1338046640, 0.0960834473, -0.1774153411, -0.0393703207, -0.1051061675, 0.0848429874, 0.0779451504, -0.2459746897, 0.0332610272, -0.0839658082, 0.1341273338, 0.0068110791, -0.1669881791, -0.0978569165, -0.2614679635, 0.1654033810, 0.0546994731, -0.0372499265, -0.1866491586, -0.1560710073, -0.1993211210, 0.0594486259, -0.0919475928, -0.0460827090, -0.1111540943, -0.0021573692, 0.1614028066, -0.0579129905, 0.0121321753, -0.1151320338, 0.1405120790, 0.1464500278, -0.1295572221, 0.1853259802, 0.2444912195, 0.1523763984, -0.1233473793, -0.0198018216, -0.1595563143, -0.0299322382, -0.1585458517, -0.0664068088, 0.1432060748, 0.0009482415, -0.1574971825, -0.1697078943, 0.1330012381, -0.2755637467, -0.1339239478, -0.1586030424, 0.0342433862, 0.0052091740, -0.1404403597, -0.0329668745, 0.2276556641, -0.0460635759, -0.1035119146, -0.0265747365, -0.0587954670, 0.1341723651, -0.2276175320, -0.1070253402, 0.0673924610, 0.1453635246, -0.0460076965, 0.0076502524, 0.0124451723, -0.0868529901, 0.0743360743, 0.0121061448, 0.0603339002, -0.1973478496, -0.1420117021, -0.2202538103, 0.1244338527, 0.0049501550, -0.1334786415, 0.0873210058, -0.1520965546, 0.1512093097, 0.0637241900, 0.1295820624, 0.0085165203, 0.1824906766, -0.0637736171, -0.0203415025, -0.1272234470, -0.1453394592, -0.1140201241, 0.0289231520, 0.0267299730, -0.1681606174, -0.2697551250, -0.1817678213, -0.0499297418, 0.2395721227, -0.0303730778, -0.1266433448, 0.2426851392, 0.0917693228, -0.0239172783, 0.0144617911, 0.1373375952, 0.0903746113, 0.1340385824, -0.0305663943, -0.0375178568, -0.2456851006, -0.0337335393, 0.0128611177, -0.0666946471, -0.2207713425, 0.0333646238, 0.1696584076, 0.2481840402, -0.0250853337, 0.0581167601, 0.1954890043, 0.0539279245, 0.0273577813, 0.1561726034, 0.1782139242, 0.1012343019, 0.0276059136, -0.0551547557, 0.2154175639, -0.1793717146, -0.0309018865, 0.0377708934, -0.0271252450, -0.2217160016, -0.0781954154, 0.0108031454, 0.0423570275, 0.0851376280, -0.1103747860, 0.0380391181, 0.0608160906, 0.1748991460, -0.2366195619, 0.0738597065, -0.0932523310, 0.0457290113, 0.1500024050, 0.1547203213, 0.0608002581, -0.1035038605, 0.2418664396, -0.0094960993, -0.1299082488, -0.1016299054, -0.0110476743, -0.0556475520, 0.0750580654, -0.0805808157, 0.0452641957, 0.0646207631, -0.0672235414, 0.1296705306, 0.1231559068, -0.1456814855, 0.0469767936, -0.2299885750, -0.0130083906, 0.1637279689, -0.1629833728, -0.1518524438, -0.1966123730, -0.1462486833, 0.1372719407, -0.0893167704, -0.1218212992, -0.0695748553, -0.0574077107, 0.0864616707, -0.0345052369, -0.0562721528, -0.0644660890, 0.0545825511, 0.1600896567, -0.1302915663, 0.0625668466, 0.0623161569, -0.0822887123, -0.0705379471, -0.0233248416, 0.2033398598, 0.1120942235, 0.1189579442, -0.1201344058, 0.1179256290, 0.1318658292, -0.2059049606, 0.0900834054, 0.0405732915, -0.2268527597, 0.0747796074, 0.1424155384, 0.1065706909, -0.1368790120, -0.1905594021, -0.0611944534, -0.1316085756, 0.0726574585, -0.2381862104, -0.0884511247, -0.1003467441, -0.1910466403, -0.1050650254, -0.0004720569, -0.0811733007, 0.1531198174, -0.0903863609, -0.0869164988, -0.2474804372, -0.1470188498, -0.2012734711, 0.0064685112, 0.0749671310, 0.2566863894, 0.0962387621, -0.0210186560, -0.0705736130, 0.1347422749, -0.0790796205, -0.0999189615, -0.0439145379, -0.0625379160, -0.0879028216, -0.0818946958, 0.1471728086, 0.0604115762, -0.0305216964, -0.0068480885, -0.1062551439, -0.1621022522, -0.0076188305, -0.0837455913, 0.0538118742, 0.0313865095, -0.0277735014, -0.0410498939, -0.2242825925, 0.0353896059, 0.0326442048, 0.0597886853, -0.1272042841, 0.1497040242, 0.1140196398, -0.0195484441, -0.0583874919, -0.1425444484, -0.1679252386, 0.0471685305, 0.0403061174, 0.0490333810, 0.1521680355, 0.0996271521, -0.0712217763, -0.2651556432, -0.0104685705, 0.1065092981, 0.0469779707, 0.0854344666, -0.0301568173, 0.1988129765, 0.0723310113, -0.1454606354, -0.0280519407, 0.0215058122, -0.1729493290, 0.2206101269, -0.0386218801, 0.1260223985, -0.1132263988, -0.0915955529, -0.0096093174, 0.2123020738, 0.1929094344, 0.1769034266, 0.0001783159, 0.0362849422, -0.0630547553, -0.0590955392, -0.0833855495, -0.0504856594, -0.1684013605, 0.1643338799, 0.1467584223, -0.0773540586, 0.0639446899, -0.0043187635, -0.0129173640, 0.1712538004, 0.0781766549, -0.0179177374, -0.0141621567, -0.0861986056, 0.0730477720, -0.0187831968, 0.0204196405, 0.1580034494, -0.0616190583, 0.0069703925, -0.1502817124, 0.0664978176, -0.0085859094, 0.1147327274, -0.1831730157, -0.1456512958, -0.1364955008, 0.1204748154, -0.2610101402, 0.2206881940, -0.0320718586, -0.0288316216, -0.1268678755, -0.0304842200, -0.0546002388, 0.0292946193, 0.0074245157, 0.0429613851, 0.1838127822, -0.1133635417, 0.0558219440, 0.1429348290, -0.0096937008, 0.0974199325, 0.0320088007, 0.0098425187, 0.1575080156, 0.0562654026, -0.0735596791, -0.0847116858, -0.0900847092, 0.0696102828, -0.0268688984, -0.0166813415, 0.1056692079, 0.0402152874, -0.2388028353, -0.1192560941, 0.0409820229, -0.0904829130, -0.1811878681, -0.0875696465, -0.0446174070, 0.0433831289, -0.0951358080, -0.0940316021, -0.0758506283, 0.1367494613, 0.1411363930, -0.1110844910, -0.0199632514, -0.0278559942, -0.1409723461, 0.1225740612, -0.0826743841, 0.1573628187, -0.0884756297, 0.0447544865, -0.1807327867, 0.2390382141, 0.0088482276, -0.0303484872, 0.0965430811, -0.0125826141, 0.1743119955, -0.2221734077, 0.0512700453, 0.1950738579, 0.0033868081, 0.0082360841, -0.0522238761, 0.1286814660, -0.1365161836, 0.1219660565, 0.0008253122, 0.0018058759, -0.1369026750, 0.2656780779, 0.0143338898, 0.0689221099, 0.1736377776, 0.1731735617, -0.0398709886, 0.1398187727, 0.1798587292, 0.0768721402, 0.0941248313, 0.0150764110, 0.0253679249, 0.0178130046, 0.1451155394, -0.0116593288, 0.0199660379, -0.0118516870, -0.1909012347, -0.1515884697, 0.0576516576, -0.1572218984, 0.1075173989, 0.1597900987, 0.0052204812, 0.1897254288, -0.1911375523, 0.0372839905, 0.2549935281, -0.1092619151, -0.1084064841, 0.0808816478, 0.2014025152, 0.1590598375, 0.0616800487, -0.2467607558, -0.0106549142, -0.0844442770, 0.0970243216, -0.1017133147, 0.1511103064, -0.0773976818, 0.0966059491, 0.0019520364, 0.1344941258, 0.0195726082, -0.1692432910, -0.0811250955, -0.0074169156, -0.0874698833, -0.0549539551, -0.1097003147, 0.0306766219, 0.0755281374, 0.1656729579, -0.0195227638, -0.2668206990, 0.1968370229, -0.0229678582, -0.0336915702, 0.1994229555, 0.0718840584, -0.1035559401, -0.2116268277, -0.0088753197, 0.1361991614, 0.1651463509, 0.0475622639, -0.0420804769, 0.0811464190, 0.0763100609, 0.0431401990, -0.0650789216, 0.2516039014, -0.1175409406, 0.0721303523, -0.0538643077, 0.1381251812, -0.0403654166, -0.0050773108, -0.2788691223, 0.0610373877, -0.0226897374, -0.1210749596, -0.0865152925, -0.2434176207, -0.1864672750, 0.1223806143, 0.1172384918, 0.0697639957, 0.1693518907, -0.1249974221, 0.1888873428, -0.1277391911, -0.1623812616, 0.1031670123, 0.0910858437, 0.1357914060, 0.1282296777, 0.1212891862, 0.0360152684, 0.0465087667, 0.0740856305, -0.2612321973, -0.1390872896, -0.0705556646, 0.0252707284, -0.2499363422, 0.1708188802, -0.1616206318, -0.1546311080, 0.1299537569, -0.0934939981, 0.0200826582, 0.0116903177, -0.0281070359, 0.1633744240, 0.1394263208, -0.2469553947, -0.1663082093, -0.2439851016, 0.1040721834, -0.0315701030, -0.1628057212, 0.0576167032, -0.0279340744, 0.0496768132, 0.0207721721, 0.1029334366, 0.1589764804, -0.0978794470, -0.1304893792, 0.0354988500, 0.2667056024, 0.0882789493, -0.0467002802, -0.1187227592, -0.1709673107, 0.0583077967, -0.1734870970, -0.2057326585, -0.0611026324, -0.0419514775, -0.0426074900, -0.1832336038, -0.0980554149, 0.0234194137, 0.0654145107, -0.0209803544, 0.0269523654, -0.1648017466, -0.1429180503, -0.2651105523, -0.0745179728, 0.1873454303, -0.1093874499, -0.1310963184, -0.0833867192, 0.0701075643, 0.1276905984, -0.0718434751, 0.0548891686, 0.1191134974, -0.0703870952, -0.0772779211, 0.1732291281, -0.2313867509, 0.0767256543, 0.2178330272, -0.0046944893, 0.1862907112, -0.0268576536, -0.1120193899, -0.1334327608, 0.0294169243, -0.0528966077, 0.0473456457, -0.0503035970, -0.0064695398, -0.0162849780, -0.0303856563, -0.0703164116, 0.0252399780, -0.0434244312, 0.0124126542, 0.0504344329, -0.2052042782, 0.1383172870, 0.2082511783, 0.0833859742, -0.2195190936, 0.0114983041, -0.0359964408, -0.0923481882, -0.0522504076, 0.0978001133, -0.1604051739, 0.0486154966, -0.0695412010, -0.2040042579, -0.0696613714, -0.2700149715, -0.0749215707, 0.0323687680, 0.1552105546, -0.2379301786, -0.2647710741, -0.2159524858, 0.1656437367, 0.1500163376, 0.2389436811, -0.1135961115, -0.0266160611, -0.0868946537, -0.1535956860, -0.1529381275, -0.0101899728, 0.1823197454, -0.0132492157, -0.1088416129, -0.1415800005, -0.1851781011, -0.0203982797, -0.1921957880, 0.1776142716, -0.1846262068, 0.0459066518, 0.0084591256, -0.0898013189, -0.0023112700, -0.0629051775, -0.1101451665, -0.1934173703, -0.0422143079, -0.1350016594, -0.1582194716, -0.0682076141, -0.0651985034, 0.1510992646, 0.0741008595, -0.0809767842, 0.1933925152, -0.0366492905, 0.0583601370, 0.1387319118, 0.0287458021, -0.1437404305, 0.0617844947, 0.1842004508, -0.2511759102, -0.0474405028, 0.1355185211, -0.1146355122, 0.0936332345, -0.0671700239, 0.1690304428, -0.2172540426, 0.0514583848, -0.2365523130, -0.0936217308, 0.1902040690, 0.0715813562, 0.1444399357, -0.2469724417, 0.2117930502, -0.1031346470, 0.1820966452, 0.0439297818, -0.1525173932, 0.0246792957, 0.2314440012, 0.0641571879, -0.2510958910, 0.2687667310, -0.2428683341, -0.0701612160, 0.0291101672, 0.0218325295, 0.1500816345, -0.0517885163, -0.1588066667, 0.1263069361, -0.0170378629, -0.0609674640, 0.0200442728, -0.0478895009, -0.0267370492, 0.1564573050, -0.1113522425, 0.1087407470, 0.2219595164, 0.0094840731, -0.0203166101, 0.1667148173, 0.1133623049, 0.0750982761, 0.0412572362, -0.0355085246, -0.1134058535, 0.1235414296, 0.1581180543, -0.0815540180, 0.0779972747, 0.1816546023, -0.2373305410, -0.1316414773, -0.1867271960, 0.0205214098, 0.0572192967, 0.0519220941, -0.1218206808, -0.0006250999, -0.0871950909, 0.0629066527, 0.0160250124, -0.0516950712, -0.1993001848, -0.0478703566, 0.2320051342, 0.0073675597, -0.0602501556, -0.2187780589, 0.2059849799, 0.0678244606, -0.0407115482, -0.0606400147, 0.0410117656, -0.1542053521, -0.1518327892, 0.2661396861, 0.0964960232, -0.2438924164, -0.0943409950, 0.0164019298, -0.1125391424, 0.0772975832, 0.1090395600, -0.0680298507, -0.2764621377, -0.0076700957, -0.0973698050, 0.0649693683, 0.1039704829, -0.1118578464, 0.2730712295, -0.1218647137, 0.1710861772, 0.0064471876, 0.0274300780, 0.0809345245, 0.0363058299, -0.0105000651, -0.1618144661, 0.1347565800, 0.0905978978, 0.1837298870, -0.1445872784, 0.0848562941, 0.0894010291, 0.1451755464, -0.0083503015, 0.0553319715, -0.1996745616, -0.0475854948, -0.0973852426, -0.1340515614, 0.0128335040, -0.2569439113, 0.1323799044, 0.0189928915, -0.2718243003, 0.0063004731, 0.1558720022, -0.0555779487, -0.1047608480, -0.0325748585, 0.0694453567, -0.0006995542, 0.0985479280, 0.0063710124, -0.1208580285, -0.0880635604, 0.2504199445, -0.1406186521, 0.1873005480, 0.0064187208, 0.0279748384, 0.2396299839, -0.2768840194, -0.0681445450, -0.1192736849, 0.1027296856, -0.1440721452, -0.1654081494, 0.0776615739, 0.0067403950, -0.0655148476, 0.1949791312, -0.1596721411, 0.2574047744, -0.0052165375, -0.0354033448, 0.0290940106, -0.1320772618, -0.1850654483, 0.0947918743, 0.1032766476, 0.0670898557, 0.1061220467, -0.0736278594, 0.0203692857, 0.0936246812, 0.0458130427, -0.0956956819, 0.1768290550, 0.2193473428, -0.0325747244, 0.0877351612, 0.0319504961, -0.0045663631, -0.0544425398, -0.1707908511, 0.2622974813, 0.1477323025, -0.1513390541, -0.0355263464, 0.1087741777, -0.0297199432, 0.0585465916, 0.1239333451, -0.0876053274, -0.2661410272, -0.0382182002, -0.2188018709, 0.0967071503, 0.1077105179, 0.0798598155, -0.0493805632, -0.0357685983, 0.0674844310, 0.1769159883, -0.1955851465, 0.0848245993, -0.0592831150, -0.0917146355, -0.0631518140, -0.1314682811, -0.0127579169, 0.2242933810, -0.0015395624, 0.1507512182, -0.0991312712, -0.0590882637, 0.0096124355, 0.1689450145, 0.0508098155, -0.1139243990, 0.0083935801, 0.0020659063, 0.0777026936, -0.2619343996, -0.0958899260, 0.0392998308, 0.0776525885, -0.0973320454, -0.0846410468, 0.0107000843, -0.1537411064, -0.0875770301, 0.0027105019, 0.0308758151, -0.1508934349, 0.1467173547, -0.0875731930, -0.0611922219, 0.0307478216, 0.0827021897, 0.0533323884, -0.0458886921, 0.0868399367, 0.1460960209, -0.1284664869, -0.1871421337, 0.0673070997, 0.0308461785, 0.0257379096, -0.1718173027, -0.1137082800, 0.1355651021, 0.2070428133, 0.0203970950, 0.0582410619, 0.0771271363, -0.1223422363, -0.1778156310, -0.0752088502, -0.1279286146, -0.0768168196, 0.1403103471, 0.0292855855, 0.2088721246, -0.0188958663, -0.1164634153, 0.2225975394, 0.1096446365, -0.0436499342, -0.1012356952, -0.1724968851, 0.2595681250, -0.0046043317, -0.1197249144, 0.1332877576, -0.0504431836, 0.1524492204, -0.0194591731, 0.0307297353, 0.0360067263, 0.1343200356, -0.0039826049, -0.2580134869, -0.1916790456, -0.0419089124, -0.0292844828, 0.1710357666, -0.0888735428, -0.0551087484, 0.1051991954, -0.0263441615, -0.1183530241, -0.0366926007, -0.2111787945, 0.0912673920, -0.0459059589, -0.1149984151, 0.0711537004, 0.1572763771, 0.0525200590, -0.0818869025, 0.0672984421, 0.0444124453, 0.0964436159, -0.2583395541, 0.0348853581, -0.0425358191, -0.1528018713, -0.2414019108, -0.1180020943, 0.1729036570, -0.1508578211, 0.2136912495, -0.2276817113, 0.1414910257, -0.0126680862, 0.0276377611, 0.0389629155, 0.0680006370, -0.0938652456, -0.0213882774, 0.1348011494, 0.0050911107, -0.0737740621, -0.1472708881, 0.0206756908, 0.1330086440, 0.0366896354, -0.1816546470, -0.0794480741, 0.0884381831, 0.1543819308, 0.1406412125, -0.1118963510, -0.0110080820, 0.2543218434, 0.0670342520, 0.0431403667, 0.2049522996, 0.1679771096, 0.1112898961, -0.2324825078, 0.0052740290, -0.0088715600, 0.0935386419, 0.0247133803, 0.0180968996, -0.1743016392, -0.2215340286, 0.0325082950, -0.0260457993, 0.1568398029, 0.0017701123, -0.0083876131, -0.1224850416, -0.0948517546, -0.1194096208, -0.0878717452, -0.0909073651, -0.1701645851, -0.2123390287, 0.1440234482, -0.1837978959, 0.0378388539, -0.1005425826, -0.0849279538, -0.2396664172, -0.0663996413, -0.0548095740, 0.1618990898, 0.0257729366, -0.0452212952, -0.0540939569, 0.0471972190, -0.1713761240, -0.0283869393, 0.2190092057, -0.0704135224, -0.0536540225, 0.0895770639, -0.0668926612, -0.0992672592, -0.0103320200, -0.0674979910, -0.1075477079, -0.2583444417, 0.0456576571, 0.1050830483, 0.1652606279, 0.0383114889, -0.0122303572, 0.0130536500, -0.2635142803, -0.0796554014, 0.1470330209, 0.1269789487, -0.1731601357, -0.1731349826, 0.0429333150, -0.2061850429, 0.0255225282, -0.1273751706, 0.0787893608, 0.1083656847, 0.0639370233, -0.2315992564, -0.0712808743, -0.0549591556, -0.0638096333, 0.0588188656, -0.0094140787, -0.1487296671, 0.0514713302, 0.0213777777, 0.1159704253, 0.0007115086, -0.0066674766, -0.0875774100, -0.0607509241, -0.0162866339, -0.0766690299, 0.0859076083, 0.0773794949, 0.2567869425, -0.0350284725, 0.2247154564, 0.1828403771, 0.1674230099, 0.0984950215, 0.1288515776, 0.0631700978, -0.0456738397, -0.1947466880, 0.1523760557, 0.2671971917, -0.0171814635, -0.1430319399, -0.1013350412, -0.2570582032, 0.0229028855, -0.0782254413, 0.0589393415, 0.0392468870, 0.2281387299, 0.0568312071, -0.1516868919, 0.1955088675, 0.1511028558, 0.0351016335, -0.0695612431, 0.2307256609, -0.1793171763, 0.0499975644, -0.2484358102, -0.0736847296, 0.0016822350, 0.0746894851, -0.0310627166, 0.0901504382, 0.0583762601, -0.0253849886, -0.0756784081, -0.0642587617, 0.0586206801, 0.2350903749, -0.0207337514, -0.1226116046, -0.1057341099, 0.0365763307, -0.1497083902, 0.0362472571, -0.0218193941, 0.1884500086, -0.1015577540, 0.0323554091, -0.1234134883, 0.1073227897, 0.1706278324, -0.0162538476, -0.1427142620, 0.0945006236, -0.2504254878, 0.0580847189, -0.0632989630, 0.0667842329, -0.2660181224, 0.2693520486, -0.1019712985, -0.2251529843, -0.0536018386, -0.2330647260, 0.1319658607, 0.0494549237, -0.0874097198, -0.0488162413, 0.0995035097, -0.1230810061, -0.0734171495, -0.0417636745, -0.2250033617, -0.2097594142, 0.1433975250, -0.0188291892, -0.1353077739, -0.2157615721, 0.0955647677, -0.0903546214, 0.0514768288, 0.1840513349, 0.1636390090, 0.1843650341, -0.0845911354, 0.0045308606, 0.0178655479, 0.0976499319, 0.1897848099, 0.0604497939, 0.0459935442, -0.0488789454, -0.0653823093, 0.1100687757, -0.0253539998, -0.0263210200, -0.2078865170, 0.2551898658, -0.2058419138, 0.0955267772, -0.1454755217, -0.0548414961, -0.1472666264, 0.2027529031, 0.2179007232, -0.1429084241, -0.0265717227, 0.0024158738, 0.1021930650, -0.0459222943, 0.1272509247, -0.1117277741, 0.1085929424, 0.0294735301, -0.0732956454, -0.0625533164, -0.0919816792, 0.0459232219, 0.0549072996, 0.1223939881, -0.0587963983, 0.1201970056, 0.0463694483, -0.0125333592, 0.0176863708, -0.0989758447, 0.0904067457, 0.0039104852, 0.0308511890, 0.1210518628, -0.0449252427, -0.1060427129, -0.2219226062, 0.2254626602, -0.1522019356, 0.0436634421, 0.1002587527, 0.1537175030, -0.0346653424, -0.2573147118, 0.0619658791, -0.0572311804, -0.1945582628, 0.0840090290, 0.0423245281, 0.0376454890, 0.0414366163, -0.0003437281, 0.0538316891, 0.0482833199, 0.1325574666, 0.0852871016, -0.0828505531, -0.2016997784, 0.0009104291, 0.0269960482, 0.1153186262, 0.0318313688, -0.0384345315, 0.2191620171, 0.0546799116, -0.1986525506, -0.0986001492, -0.2534902096, -0.1126267090, 0.0072893882, 0.0624745116, 0.0753039271, -0.0855334997, 0.0043009524, -0.2514401972, 0.1121149585, 0.0931695998, -0.0534998104, 0.0124469213, 0.0717603564, -0.2124975026, 0.0496171154, -0.0639057681, 0.0859631225, -0.0322454609, 0.0376049392, 0.2396070361, 0.1946069449, -0.0767361224, -0.1276828200, 0.0662958398, -0.1630682498, 0.0241450965, -0.1494384706, -0.0454337522, 0.2379379719, 0.1237312257, -0.1304917037, 0.0171111636, -0.1019546539, -0.0948030725, -0.0026979209, -0.2246540189, -0.1610207558, -0.0128225768, 0.0591803417, -0.1223165244, 0.2306803167, 0.1578102857, 0.0354279988, 0.2564889193, -0.1715186536, 0.1265263855, -0.0485966727, -0.0359138511, 0.0582046770, -0.0085540656, 0.0278986618, 0.0001691367, -0.0649557561, -0.0462010913, -0.1152938679, -0.1698606461, 0.1981912702, -0.0522897504, -0.0424361043, 0.2734175026, 0.1354741752, 0.1435459554, -0.2766537368, 0.0156462584, 0.2291690409, 0.0797580704, 0.1022194996, 0.0660989806, 0.0626723841, 0.2696278691, 0.1658453494, 0.1225350946, 0.0504885167, -0.0136039611, 0.1783631593, 0.0664733052, 0.0985250697, -0.0742450804, -0.1572200954, -0.1093363389, 0.0870818421, -0.0818369240, 0.1382679492, -0.0647331402, 0.1423982829, 0.0861778483, 0.1130134091, -0.0946551636, 0.0671222433, -0.1259353608, -0.2565769553, 0.1885317564, 0.0646825582, 0.0602647662, 0.1894441545, 0.0385799557, -0.1852241158, -0.0899918154, -0.1313726455, -0.0653121769, 0.2697217464, -0.1054714024, 0.1332933009, 0.0405612402, -0.1164878383, 0.0599621423, 0.0926312581, 0.1968363523, -0.1355889589, -0.1078113765, -0.2486872971, -0.0822452679, -0.0278575961, 0.1815669835, 0.1264530569, 0.1046239957, -0.1789597422, -0.0539343879, -0.1060425341, 0.2193937600, -0.0371177122, 0.0280731898, 0.0367604345, 0.0012522097, -0.2302377969, 0.1117652953, -0.0269540548, -0.0538719371, 0.0021543584, -0.1956042051, -0.2109425664, -0.0085573504, 0.0404178239, -0.0175613314, 0.0373758487, 0.1008218974, 0.1587499380, 0.1128619462, 0.1476686746, -0.0341376252, 0.0639318600, -0.0474551879, 0.1046689153, 0.0795624703, 0.0677282661, 0.1129797399, -0.0800598860, -0.2738563418, 0.0060808673, 0.0133285969, 0.0609176829, 0.1116273329, -0.0790717453, 0.2076569200, -0.0450109690, -0.2186902761, -0.2069895118, -0.0370030142, 0.0666757822, -0.0963450298, 0.1004977077, -0.1085691601, 0.0559295304, 0.1662066281, -0.0087466864, 0.0090959147, -0.0783841908, -0.0606108382, -0.1378141344, 0.0667855591, -0.0851786137, 0.1301789880, -0.1117714122, 0.2070634514, 0.1520470232, 0.1714127064, 0.2107171714, -0.0085718948, 0.2251468450, -0.2108526975, -0.0347354896, -0.0169086251, -0.2072936296, 0.2421553880, -0.1691383272, 0.1682235748, 0.0366363823, 0.0255467631, 0.2136879116, 0.1297023594, 0.1682011932, -0.0119382935, 0.0073384224, -0.0288813189, 0.0286490116, -0.0160812382, -0.1956199408, 0.0211848114, -0.1546890289, -0.0614098124, 0.0135607170, -0.1311926544, -0.1987530440, -0.0942822024, -0.1502297670, 0.1862381697, 0.0275989678, -0.0202202834, -0.0956370085, 0.1824220866, 0.1538397670, 0.0656799376, -0.2129896581, 0.1052349582, -0.0066125961, -0.2034235001, -0.1584008932, -0.0150974458, -0.0704539865, 0.0782812312, 0.0165572483, 0.0765313581, -0.0983972326, -0.0212008823, -0.1021606401, 0.0038616436, 0.1796784550, -0.2291656733, 0.2145912796, -0.1376080811, -0.0343290642, -0.1630192697, 0.0453760251, 0.2010511905, 0.0908596143, 0.1407288313, 0.0056226901, -0.0977093279, -0.0781386569, 0.0238200407, -0.1039971560, 0.0604630411, 0.1319572628, 0.0581738465, -0.2500765920, 0.0286577269, 0.2597904205, 0.2655381858, 0.0625262111, -0.2247665673, 0.0518362150, 0.1226906106, -0.0806505531, 0.0923104584, -0.0645162016, -0.0588294901, 0.1118432730, 0.2054899037, -0.0120525640, 0.0237302184, 0.0926744267, -0.0670278072, -0.1407305002, 0.0976106524, -0.0849197432, 0.2818745673, 0.0228521880, 0.1659101397, -0.0475281924, -0.1806103289, -0.0910255834, 0.2345242649, 0.0469653122, -0.0993460193, -0.2381267101, -0.0554435141, 0.0852758661, 0.1048325747, 0.0792942867, 0.0294290241, 0.1825761795, 0.1406301409, -0.0177681781, -0.0088754855, -0.0698274076, -0.1190265790, 0.0542111471, -0.1968543530, 0.0102106929, 0.1257169396, 0.0616759956, 0.0823071748, -0.0050133690, 0.0386199355, 0.0974724740, -0.0295589436, 0.0976469815, 0.0597568601, -0.0878275484, 0.0880687386, 0.1412810236, -0.0321188867, 0.0197038092, 0.0671916381, 0.1761990786, -0.0850608572, 0.2800756097, -0.1650773585, 0.2289505005, 0.0312838443, -0.1629675627, 0.0234726369, 0.0217891559, -0.0610440522, 0.1045438722, 0.0272667035, -0.0074513550, -0.0182440113, 0.1454095095, -0.0802280307, -0.0380879603, 0.1934249550, 0.2703472376, 0.0755110234, 0.1886364073, 0.0368686318, -0.0419942699, 0.1779718548, 0.0720651299, 0.1142133772, 0.0284096412, 0.0612893850, -0.2553709149, 0.1447297335, -0.0174956433, -0.2123945951, 0.1891330332, -0.0609378144, -0.0368700288, 0.0213487297, 0.0229284912, 0.0886177868, -0.1488859355, 0.2831984758, 0.0227522813, -0.2449033111, -0.0313838460, -0.2137119025, 0.1764919162, 0.0197716039, -0.1338695586, 0.1092808172, -0.0394652039, -0.0512099974, -0.1343179047, -0.0469156429, -0.0930921212, -0.0513885207, 0.0707313418, -0.0525662452, 0.0560215786, -0.1435630471, 0.1095404476, -0.1166431159, 0.1962776929, 0.0030538801, 0.1429107934, -0.1370485723, 0.0282933656, -0.0699656382, -0.0720684230, -0.2159645110, 0.0572669879, 0.1865032464, 0.1276958883, 0.0784920529, -0.0421371534, 0.1615168005, 0.1264616251, 0.0549090877, 0.1704774499, -0.0262868609, 0.1236984208, 0.1293779463, 0.0133061586, 0.0859078094, -0.0591219515, 0.0393568017, 0.1044622213, -0.1486489624, 0.0849509910, -0.1541243345, 0.0514283367, -0.1007351950, -0.0119865835, 0.0222086757, -0.2200443596, -0.0192217771, 0.1014971137, -0.1586176306, 0.0929893255, -0.0676903129, 0.0006655062, -0.1517792940, -0.0307720900, 0.0753373727, -0.0216467772, 0.2098731846, 0.1013511494, 0.2201228291, 0.0270471722, 0.1089950874, -0.0739532933, -0.1644250304, -0.0017914791, -0.1704591662, -0.2739699483, 0.0239534676, 0.0358247273, -0.0172215700, -0.0267594140, 0.1678687930, 0.0905983821, 0.0823647827, -0.1763503999, 0.0966297835, -0.0598189645, -0.0702274814, 0.1444205046, -0.1671501547, 0.2648806572, -0.0023594187, 0.1251023263, -0.2370538265, 0.1308951080, -0.0577565394, 0.0788959041, -0.0944598317, 0.0610288829, -0.1297841668, -0.0040863687, -0.1850646883, -0.0189309865, -0.0210783035, 0.1552994102, 0.2394716889, -0.1506264210, -0.0717267245, -0.0513952374, -0.0587120764, -0.1172303557, 0.0217052102, -0.0590625368, 0.1258752346, -0.2133456320, -0.0784741268, -0.0962634832, -0.0165045373, -0.0712403953, -0.0650967807, 0.0628528595, -0.0898044482, 0.1103378087, 0.0418943800, -0.1780650765, 0.1998839527, -0.0048588845, 0.0613647327, -0.0140125873, 0.1172991768, -0.2078044116, -0.0960157812, -0.1910988092, -0.1448269337, -0.0743224993, 0.1710293442, -0.1855953634, -0.1845951974, -0.1064517871, -0.0781024694, -0.0957730263, -0.1491354406, -0.1076491848, 0.0512745753, -0.1198007762, 0.0456936024, 0.1578449756, 0.1246185750, 0.1379436105, -0.0023738400, -0.2509474158, 0.1669911593, -0.1576836258, 0.0143550001, -0.1342616826, -0.1197519302, -0.1023853719, 0.1493723840, -0.1209404394, 0.1340129972, -0.0563847087, -0.0966856331, 0.1474030465, -0.2490667701, -0.1136144176, -0.0731255710, 0.0603566915, 0.0248129051, 0.0682415590, 0.0164490566, -0.0290848743, 0.1940140724, 0.1127635092, 0.1116949245, 0.1528776288, -0.1200911626, 0.0696512982, -0.0310801342, 0.1981471926, -0.1040362120, -0.1608053893, 0.1173143238, -0.0719678700, 0.0013680737, 0.0691241920, -0.1275233626, -0.1393147111, 0.0323954634, 0.0448280610, 0.1008463949, 0.0534726121, 0.0408214480, 0.1311151683, -0.2176838815, 0.1496987343, -0.0253989808, -0.1556259394, 0.0199285187, -0.1704381406, 0.0712545589, -0.0763768107, -0.0855114013, 0.1298619658, 0.0090187853, -0.1154208928, -0.1232821643, 0.0486045405, -0.0503736101, 0.0785695761, -0.0657648519, -0.1017802060, -0.0267663617, -0.0706298426, 0.0451183468, 0.1670031101, -0.0359440185, -0.0130506232, -0.0110963304, -0.0130981226, -0.1090371609, 0.1617225409, 0.1705853492, -0.0077764168, 0.1542083770, -0.0541002639, -0.0946051925, -0.0181622282, 0.2042049766, -0.0042380556, 0.0525967441, 0.0214935020, 0.0515071303, -0.0601346977, 0.2431514710, 0.0665655285, 0.0964928120, -0.1344106644, 0.2731152177, 0.1866099983, -0.1913690865, -0.1548871100, 0.0220585559, 0.0245327745, -0.1719568968, -0.1635920852, -0.0732468888, 0.0621513203, -0.1093311533, -0.1968977749, -0.0880634338, 0.0088819107, 0.2161217034, -0.0992821231, -0.0731858835, -0.0401629470, 0.2182868272, -0.0762967095, -0.0592460111, -0.0691413134, 0.1919388324, -0.0418301821, -0.0508296154, 0.0309239421, 0.0535361506, 0.0737961382, -0.1135046333, 0.0962257236, 0.0437908582, -0.2409620881, -0.0652595311, -0.0491993390, -0.1050050631, 0.1605867743, 0.0192008428, -0.2065981030, 0.2316061854, 0.0708051845, -0.0860047489, 0.0931204557, 0.1543593109, -0.2408533692, -0.0428753495, 0.0099357981, -0.1016492918, -0.2439059615, -0.1503381580, 0.0610841438, 0.1564804614, -0.0857748389, -0.1205255240, 0.2151912600, -0.1140074506, -0.0225998964, 0.0413154587, -0.0380652212, 0.0211609341, 0.0076061450, 0.1868904978, 0.0000773055, -0.1057324335, 0.0084426301, -0.0786052421, -0.0840516165, 0.1575329900, -0.0822537988, -0.0372722223, -0.0738917217, -0.0474313125, 0.1887290031, 0.0655139759, 0.1570893973, -0.0482000560, 0.0939276442, 0.0250210501, 0.0432492718, -0.1070473492, 0.1601030231, 0.0939537510, -0.2263581008, 0.1026800945, -0.1535146236, -0.0449512638, -0.1100143194, -0.0343788937, 0.2173137963, -0.0090057496, -0.0311524067, -0.2091188729, 0.0022470993, -0.0467590652, -0.0687309206, 0.0607696921, -0.0840665847, 0.0246211737, 0.1164112240, 0.0133452630, -0.0841214582, -0.0416850150, 0.1141543984, -0.0117751062, 0.1385044456, -0.0838810429, -0.1998023838, 0.2477578074, -0.0781081095, 0.0050614541, 0.2693359554, 0.0359385423, 0.0683304444, 0.1627948433, -0.1309596896, -0.1362916231, -0.0206606872, -0.1891089231, 0.0013390169, -0.0349618755, 0.0534121543, 0.2104575932, -0.0840623081, -0.0394807048, -0.1345031112, -0.1321528554, 0.0960497260, -0.0476677977, 0.0564320013, -0.0869855732, -0.1542905569, 0.0185872875, -0.0180664044, 0.0476202145, -0.2029995024, -0.2772800326, 0.0131907929, 0.1146470457, -0.0615618974, -0.1725745350, 0.0373568460, -0.2398308516, -0.0375209451, 0.1628750265, 0.0175974686, 0.0474488214, 0.0810405537, 0.0731112733, 0.2097796500, 0.0649675950, 0.0189325102, 0.0165883042, 0.1274557412, -0.2230114937, -0.0312573723, -0.0115130218, 0.2190539688, -0.1832937449, -0.0433997475, -0.0804107562, 0.0634901524, -0.0023076748, -0.0503250770, -0.1245522574, 0.0826953202, -0.1851037145, 0.0709215924, -0.1958709210, -0.1371886581, -0.1607004702, -0.0227071270, 0.1526089609, -0.2692786753, 0.1239045262, 0.1417357773, -0.0584122054, -0.1745381951, -0.0728008449, -0.0355633795, -0.0739013702, 0.0485492833, 0.0041830107, -0.1622847319, -0.0331829712, -0.0786830857, -0.0358735770, 0.1934050024, -0.1315981001, -0.0333710350, 0.1273621023, 0.1966958940, 0.0284067430, 0.0380469002, -0.0443197303, -0.1817292571, -0.1105867624, 0.2204913199, 0.1053827107, 0.0928494185, -0.0050718701, -0.0484732129, -0.0317986980, -0.2815171778, -0.0408186987, 0.1691472679, -0.0897123590, 0.0589016527, 0.0002248239, 0.0948233232, -0.0747979954, -0.0430467650, -0.1108966693, -0.1683590412, 0.0988276750, 0.0071035437, 0.1192520335, -0.0369055942, 0.0293907858, -0.1525109857, 0.0846657604, 0.1872965246, -0.0559210815, -0.0240095407, -0.1270356774, -0.1192587465, -0.0718104914, -0.0724268034, -0.1639647633, 0.0789291039, -0.1266479045, 0.0685526356, 0.1205571145, 0.1660293937, -0.0238283742, -0.0510815457, 0.1915045083, 0.1856983304, 0.1953659654, -0.0264971294, 0.0873921812, 0.1469628215, -0.0584635176, -0.0087819984, -0.2585882545, 0.0894054249, 0.0274627134, 0.0180987213, -0.0386200249, -0.1055126861, 0.2547442615, -0.1634048820, 0.0127132600, 0.2068558782, 0.1759837270, 0.0233626105, 0.1985943764, 0.0745697767, 0.1435496211, -0.2679226995, 0.0756151527, 0.0678204969, 0.1927368492, 0.0677083880, -0.0222615190, -0.0293712523, 0.1640025228, 0.1065738946, 0.0855097175, 0.0686236843, -0.0699655041, 0.0270057991, -0.0558207072, 0.0695579350, 0.1372147948, 0.1295212209, -0.0341637991, -0.0075619337, 0.0640427917, 0.0062563000, 0.2015893608, 0.1001147628, -0.0897680447, -0.0064130668, -0.0463603809, 0.1356030554, -0.0436928160, -0.1298522502, -0.1064348370, 0.0406524390, 0.1917696893, 0.2436467409, 0.2481426746, 0.1204624996, 0.0123548601, 0.0745722577, 0.0107045351, -0.0775451958, -0.0442674868, -0.1086575389, 0.0108434986, -0.0484548099, -0.0279339105, -0.0571268573, 0.1452784091, -0.1247053817, -0.0502458438, 0.0154856304, -0.1040497795, -0.0077402843, -0.0310717989, -0.0697177649, 0.0391883031, 0.1258221120, -0.0402420089, 0.2297460437, -0.0743545592, -0.1783821434, -0.1321827769, -0.1410332322, 0.0643399730, -0.2326807231, 0.0764465630, -0.0984338894, 0.0272836648, -0.0514965430, -0.0517553985, 0.0140369907, -0.0423708707, 0.0241044462, -0.0787306577, 0.0574791357, 0.1235056445, -0.2482363731, -0.0207537282, -0.1215843409, -0.1480550915, 0.1234505326, -0.2198853195, -0.0901075304, -0.2018843740, 0.1909885406, 0.0228673816, -0.0692842230, 0.0783566535, -0.1133217812, -0.2018188685, 0.1911137104, -0.1313656121, 0.0618074611, -0.0444819145, 0.1003912464, -0.1131297648, -0.0095744738, -0.1478296220, -0.1717702597, -0.0269785076, 0.2216178030, -0.0925401002, 0.1234110370, 0.0365220457, -0.2007122934, -0.0148929404, 0.0501925722, 0.1067089960, 0.1778250635, 0.1782811582, 0.0429973677, 0.2040856928, 0.1994962692, -0.1480637789, 0.2208399624, 0.0466894582, -0.1163299903, 0.0454918444, 0.0676101372, 0.0522956178, -0.0998138264, 0.0149122300, 0.0871659145, -0.1097137481, 0.2021175921, 0.0038416621, 0.1298611909, 0.0504035428, 0.0610266402, 0.1172474846, -0.0986294895, 0.2125149369, 0.0498868339, 0.2761234045, 0.2104437947, 0.0732834116, 0.1307486147, -0.0118244337, 0.0627266020, 0.0256402232, 0.0368043035, 0.0562100597, -0.1632887721, -0.2449035794, -0.2160877436, 0.0046498249, 0.0969682112, 0.1526022702, 0.0206382852, 0.0901083052, -0.2237042487, -0.1162843481, -0.1818810701, -0.2448273599, 0.2132897526, 0.0219875667, 0.0358130112, 0.0974675864, 0.1750533730, -0.0714436844, 0.1282246262, -0.2587800920, -0.0503453165, 0.0139329862, -0.2008802295, -0.1080056876, -0.0865877569, 0.1144391969, 0.1935275197, -0.0684144422, 0.1102670282, 0.0810603276, 0.0963755473, -0.0725425631, 0.0252591018, 0.1090792418, 0.2280733585, -0.0711722150, -0.0172471907, -0.1207613871, -0.0920963883, 0.1713925749, 0.0729116052, -0.1714213789, 0.0851127580, -0.1484449208, 0.0514739193, 0.2408219278, 0.1674804986, 0.1237314194, -0.1140679568, 0.0406470597, -0.0984315127, -0.0375230238, -0.2707260847, 0.2414154708, 0.1855725646, -0.1114597768, 0.1400423348, 0.0391096584, -0.0142015340, 0.0242490247, 0.0419962518, 0.1072950065, -0.1521596760, 0.0906566083, 0.1418379992, -0.0508952737, 0.0005047536, -0.2177258432, 0.0297526345, -0.0923230276, 0.1100010052, -0.0933523849, -0.0758000761, -0.0848717242, 0.0800912008, -0.1561940908, 0.0968269929, -0.1012877896, -0.0355898142, -0.1181991547, 0.2593510747, -0.0241721459, 0.0756439045, -0.0401085652, -0.0339849293, 0.1291911155, 0.1055543274, -0.2033337355, 0.0343944505, -0.0031193399, -0.1228527576, -0.0753994957, -0.0930285305, 0.0080986684, -0.2527430654, -0.0584194660, -0.2600626349, 0.0552060828, -0.1615344882, -0.0044562914, -0.0359900631, 0.0807413533, 0.1468620300, -0.2437186390, 0.0483736955, -0.1705421954, -0.0410942100, 0.2200688273, 0.0199688356, 0.0314114094, -0.0117332181, 0.0553992651, -0.0460035615, -0.1275185794, -0.0105272336, 0.0257976558, -0.1424851567, 0.0395752639, -0.1567452550, 0.1819994152, 0.1227211580, 0.0172752887, -0.0008234296, -0.1553377658, 0.0783292875, 0.1004869044, -0.2405682057, -0.0591556951, 0.2419543564, 0.1391365677, 0.1009610146, 0.2165192813, 0.1744635552, 0.1083868966, 0.0588086322, 0.0038262862, 0.0988557339, 0.0560804345, -0.2210674137, -0.1527782679, 0.1140421405, 0.1269161850, 0.1535769999, 0.1022658348, -0.1707173586, 0.0877568722, -0.0954224765, 0.2080290020, 0.0815970227, -0.1381299645, -0.1431281120, -0.1288545132, 0.1414909363, 0.1094782799, -0.0199693646, -0.2784639001, 0.0428175591, 0.0034736248, -0.0300557837, -0.1866421849, -0.2326351106, 0.0572583638, -0.1520564109, -0.2145257443, 0.0886568874, 0.0782728121, 0.1808165014, 0.2716012299, 0.1258595437, 0.0315487161, 0.1721623242, -0.0056738728, -0.0941404626, -0.0559536777, 0.0438014716, -0.1200493127, 0.1614734083, 0.2025097907, 0.1413980871, -0.0325713679, -0.2635752857, -0.0255242586, 0.0279405117, 0.1532269567, 0.1677054167, 0.1914996356, 0.0256157722, 0.0994341895, 0.0000071214, 0.1601290256, 0.2699460685, -0.0275200736, -0.1679738611, -0.0335847288, -0.2156516761, 0.0870971754, 0.2250105590, -0.0870052576, -0.0006722838, 0.0951280445, 0.0840521827, -0.0102752727, -0.0585064925, 0.0756713077, -0.0048094206, -0.0436395369, 0.2036209553, -0.0634337142, 0.1863752902, 0.1223870590, 0.1682464480, -0.0625990704, 0.0699708983, -0.1609058082, -0.1100357547, 0.0027525814, 0.1513341367, 0.0935907960, -0.0985997692, -0.1495337784, 0.0161880441, -0.0239066556, 0.1861109734, -0.0491907001, 0.0371647701, -0.2412059754, 0.1287303716, 0.1725067496, 0.0286905207, 0.0050675124, 0.0967486501, -0.0758076906, -0.2521044612, -0.0885436237, 0.0894351378, 0.1085951775, -0.0492035933, -0.0075099464, -0.0542596430, 0.0393197834, 0.0232280437, -0.0107410373, -0.0881906524, -0.0243803151, 0.0567948259, 0.0979237705, -0.2695124149, 0.1629230380, 0.2556156516, -0.0610367544, 0.0410536341, -0.0510050543, -0.1633763015, -0.0827656239, 0.0374537036, -0.2176457196, -0.1015355140, -0.0110334847, 0.0261794683, 0.1073069572, -0.0567254759, -0.1585894674, 0.0922735110, -0.2199070454, -0.0737000182, 0.0280117802, -0.0559548065, 0.1689389348, -0.0547424629, 0.0726782978, -0.1517936140, -0.2631789446, 0.0224671476, 0.0507556610, 0.0690070018, 0.0479111746, 0.1479028016, 0.2542577982, 0.0997052267, -0.2329974771, 0.1541734785, 0.1399146467, -0.1204712093, -0.2168593556, -0.0149170915, -0.1563860774, -0.0272394661, -0.1486881971, -0.2028080076, -0.1898608208, 0.1624921560, 0.0632397905, -0.0207200851, -0.0806919932, -0.0523055457, 0.0828814581, 0.2200867534, -0.0546755232, -0.1244209781, -0.2474565357, -0.0074789389, 0.0599047765, 0.0654146299, -0.2283913642, 0.2134613842, -0.1001501009, -0.0411637276, -0.0945594236, 0.1898316890, 0.0031842892, 0.0275505558, 0.1231957078, -0.1252210140, -0.0733155087, -0.1096697673, 0.1661432534, 0.2099392265, 0.1024878770, 0.0091190999, 0.0053352411, 0.0596293435, 0.1122229770, -0.1011995822, 0.0140546812, -0.2052132934, 0.1293672174, -0.1622506529, -0.0456977189, -0.0517284311, 0.1243812665, 0.0374017507, 0.0680468902, -0.1041379273, 0.1202107966, -0.1022673696, -0.0081359632, -0.0487608612, 0.1892889291, 0.1100205630, 0.0460136645, 0.1194751933, -0.1926969141, -0.1784135848, 0.2074553818, 0.0952087715, 0.0028974076, -0.0668585151, 0.1022464484, -0.0942923874, -0.0408962518, -0.1325338185, -0.0832399800, 0.0848063529, -0.1290417910, -0.2591336370, -0.0550288334, -0.0466154814, -0.2005209029, -0.0362338796, -0.1778071076, 0.0796376169, 0.0956854522, -0.1107590944, -0.0290943366, -0.1578963250, 0.0640384331, 0.1154239997, 0.1439567357, -0.1624456495, 0.0491970703, 0.2328447998, 0.1194989011, 0.1538593620, -0.1715637445, -0.1393439472, -0.1283461750, -0.0232121572, -0.0510298610, 0.0367691256, -0.0868861228, 0.0365378521, -0.1725638360, -0.1397788823, 0.1610909551, 0.0036932852, 0.0772358924};
# 19 "firmware/parameters.h" 2
# 1 "firmware/weights/wr3.h" 1
# 12 "firmware/weights/wr3.h"
model_default_t wr3[12288] = {-0.0394227505, 0.0763805285, 0.2107612193, 0.0661761761, 0.0400022119, 0.0117874648, 0.0975927338, 0.0316010192, 0.0340768211, 0.1220609248, -0.0102393273, -0.0190716721, 0.0679263249, 0.0168262143, -0.0670032203, -0.0283106100, 0.1591788977, 0.0675518811, -0.0738975629, 0.0730843842, 0.0732123032, -0.0892906785, -0.0054175328, -0.1213758886, -0.0268572681, -0.1855702251, -0.0463456996, -0.1663249433, 0.0025313711, -0.0121867834, -0.0636143386, 0.0665638000, 0.1168830991, 0.0697046891, 0.0473066606, 0.0474175401, -0.0334990323, 0.0244384371, 0.0721994340, 0.0518691987, 0.0982139185, -0.0840445980, -0.0145944748, -0.0567274243, -0.0408873558, 0.0416858904, 0.0398897044, 0.0585069694, -0.0237720720, 0.0403484665, -0.0451667234, -0.0750670731, -0.0774351656, 0.0509156361, -0.0947959796, -0.1147127971, 0.1048008427, 0.0628017858, 0.0285289772, -0.0806847513, 0.0557953194, -0.0591377951, 0.1305104792, -0.0270760171, -0.0613395609, -0.0392572731, 0.0896286368, 0.0840325430, 0.0671189800, -0.1934697479, 0.0429531932, -0.0286928546, -0.0345355570, 0.0135802552, 0.1474628747, -0.0424944758, 0.0052474136, 0.0913942158, 0.1395546198, 0.0050450908, -0.0349538513, 0.1207408756, -0.0255936123, -0.1237938628, 0.0631179884, 0.0071704136, 0.0971113369, 0.0326150432, -0.1218458116, -0.0645223036, -0.1306901723, 0.0508891568, -0.0095463013, 0.0608320944, -0.0923293829, 0.0589184687, 0.0575225167, -0.0436328501, 0.0092620226, 0.0830752701, 0.0284467097, 0.0858310759, 0.0226368029, -0.0368950181, 0.0972321630, 0.0123786926, 0.0759014785, 0.0135005098, 0.0877725333, -0.0465558432, 0.0886835307, 0.0020976078, 0.0176320318, -0.0469763540, 0.0050023431, -0.0222186465, 0.0332478248, -0.0340945050, -0.0014029434, -0.0737521723, 0.0129176443, -0.0315791406, -0.0296704583, -0.0304977819, -0.0483736731, -0.0787408426, 0.0943142772, -0.1702601463, 0.1524516344, 0.0134040201, 0.0649693981, -0.0388083570, 0.0019933563, -0.0445112810, 0.0091110095, 0.0041099344, 0.1126451865, 0.0536433309, 0.1057685912, -0.0389540866, -0.0154868029, -0.0332637914, 0.0041025560, 0.0288208220, 0.0248094164, -0.1682070941, -0.0391962118, 0.0434430651, -0.0230733976, -0.0206696577, 0.0176225454, 0.0200086869, -0.0008269210, -0.0786429942, 0.0659895092, 0.1116151512, 0.0046478044, -0.0690267831, -0.0402420834, -0.0413534567, 0.0677681640, -0.0374792255, -0.1113218442, 0.0360991396, -0.0014216750, -0.0050601177, 0.0459943712, -0.0630259439, -0.0368277580, 0.0433264300, -0.0398384295, 0.0194709841, 0.0154847652, 0.0650535747, 0.1196619570, 0.0141693065, 0.1572999507, 0.0531736724, -0.0199449342, 0.1221552342, -0.0889532790, 0.0883374661, 0.1263127327, 0.0235231109, -0.0285669211, 0.0138665037, -0.0862155855, 0.0956840813, -0.0834379122, 0.0360600017, 0.0269694384, 0.0349381752, 0.1107828319, -0.0531439781, -0.1196964681, 0.1444979459, -0.0642734319, 0.0421398021, 0.0082128290, 0.0539528131, 0.0476559363, 0.1299310327, 0.1764857769, 0.0111487089, -0.0894711614, -0.0306552313, 0.0394959114, -0.0633541271, -0.0410957970, -0.0711682737, -0.0832432657, 0.0453680642, -0.0859188214, -0.0872712433, -0.0193532165, -0.0027496191, 0.0825482905, -0.0366174392, 0.1040480882, -0.0851936564, -0.0265458021, 0.0876451507, -0.0640336797, 0.0853177682, -0.0135346493, -0.1977144480, -0.0362270661, 0.0864239186, 0.0001074369, 0.0324727036, 0.1203016192, 0.1421830207, -0.0277368184, -0.1443808228, -0.1276512891, -0.0073522404, -0.0056120381, 0.0218350235, -0.0083619813, -0.0201436952, 0.1091120020, -0.1003930718, -0.0408273116, 0.0042843330, -0.0651820153, -0.0000172651, -0.1387480795, 0.0661800578, 0.0890931636, -0.0887369141, 0.1415194124, 0.0036034966, 0.1270160079, -0.0047144257, 0.0987726226, 0.0715868771, 0.0628665313, 0.0971919745, 0.0265693199, -0.0426973552, -0.0142327761, 0.0215635840, -0.1115139127, 0.0952438563, -0.0582542606, -0.0217196867, 0.0422980525, 0.0319163911, -0.0863134488, -0.0426001661, -0.0920660794, 0.0118060149, 0.0062368447, 0.0451895744, -0.0449895747, 0.0470865592, -0.0934664831, 0.1073146462, -0.0302314628, -0.0587512404, -0.0347053558, 0.0368863232, -0.0641782805, 0.0585627779, 0.0265715867, -0.0012511590, 0.0198779013, -0.0103010563, -0.0265594851, -0.0932308063, 0.0738190934, -0.0255767647, -0.0014236883, -0.0009472783, -0.0376143679, 0.0257923119, 0.0597012714, -0.0325305536, 0.0347097181, -0.0571393445, -0.0189993344, -0.0319832899, -0.0028788815, -0.0510633513, 0.1117547899, 0.0870978311, 0.1230158359, 0.0378997810, -0.0113958158, -0.0200421494, -0.0295514911, 0.0285033938, 0.0144559862, -0.0533692315, 0.0763033703, 0.0250568967, 0.0516476259, 0.0336254127, -0.0219058245, -0.0969293490, 0.0132127907, 0.0547186658, 0.0532858111, 0.0610431656, -0.0018034829, 0.0138169434, -0.1510554999, -0.0718944520, 0.0138909807, 0.0278698746, -0.0361890830, -0.0104838172, -0.0454517715, -0.1019031927, 0.0229775887, -0.0809480995, -0.0234988909, -0.1417979300, 0.1690558791, -0.0325813629, -0.1367819607, 0.1323186606, -0.0697083697, 0.0731246024, 0.0622304343, -0.0542394482, 0.0679180324, -0.0963879377, 0.1338841170, 0.0483394749, -0.0630620942, 0.0107332068, -0.0621047355, -0.0702035427, -0.0062724389, -0.0872479230, 0.0521594025, -0.0018380516, -0.0508736782, -0.0234036148, 0.1465299875, -0.0318425559, 0.0401870906, 0.0791933164, -0.0145326173, -0.0205525327, 0.0109667517, 0.1114405692, -0.0692913011, 0.0122654773, 0.0041717738, -0.0326929800, 0.1231747344, -0.0432060733, 0.1135561094, -0.0716553628, 0.0402112566, -0.0390234590, 0.1298268586, -0.0863901824, 0.0184335671, 0.0697317123, 0.0836673528, -0.1080824509, -0.0546709746, 0.0703749433, 0.0242723227, -0.0780570209, -0.0867141709, 0.0019857672, 0.1765196919, 0.0493067391, 0.0117103225, -0.0414255895, -0.0116861938, 0.1787393093, 0.0053927335, 0.0110491533, -0.0585860014, 0.0752755180, -0.0514179580, 0.0620254204, -0.0435131602, 0.1625204682, -0.0867827237, -0.0523080975, -0.0222459622, -0.0302871056, 0.1053093448, -0.0174138825, 0.0053263013, -0.1007900685, -0.0239148214, -0.0890059173, 0.0734486580, 0.0410976708, 0.1107029021, -0.0133880274, 0.1691336036, -0.1049434766, -0.0519270636, 0.0663383305, -0.0285535604, 0.0199805573, 0.0441697128, -0.0075078611, 0.0686852932, 0.0440091230, 0.1909447163, 0.1692927331, -0.0834216252, 0.0998331681, 0.0699662417, 0.0445136912, -0.0230401680, -0.0913064852, 0.0702197328, 0.0323403738, 0.0121140713, -0.0194473285, -0.0007780745, 0.0498371683, -0.0858810246, -0.0966361985, -0.0300890543, -0.0358794853, -0.0373271890, -0.0521554798, -0.0231938008, -0.0274055991, 0.0142778894, -0.0876551121, -0.0347705632, 0.0454022661, -0.0693561360, 0.0701513663, -0.0487561002, -0.0022649579, 0.0504978336, 0.1432676464, -0.0170979481, 0.0344710760, -0.0543108098, 0.0321136639, 0.0655291602, -0.0595563129, -0.0244568046, -0.0843851566, 0.0808252394, 0.0295151696, 0.0073000873, -0.1044966355, 0.0091839591, 0.1176909283, -0.0986480862, -0.0196925886, 0.0762260705, 0.1887356341, 0.0889833122, -0.0363115259, -0.0143959252, 0.0195853356, -0.1396485269, -0.0961494893, -0.0451535992, 0.0001160106, 0.0303944238, -0.0009246136, -0.0076420307, -0.0337877609, 0.0969380215, -0.0054815211, 0.1230242103, 0.0313104466, 0.0092662405, 0.0981533825, -0.0030219683, -0.1433028728, 0.0806167573, -0.0686034560, 0.0046397434, -0.0429116972, 0.0782592073, -0.0609615967, -0.0945672542, 0.1003988385, 0.1356991231, -0.0730480924, -0.0689577162, -0.0416054390, 0.0309642963, 0.0500419438, -0.1452620775, 0.0569413081, 0.0582523905, 0.0699961558, 0.0016565582, 0.0085071344, 0.0159550775, -0.0206494946, -0.0292121172, -0.0246289540, -0.0205386207, -0.0208816621, -0.0627935454, -0.1375060529, 0.0672140047, -0.0262074098, 0.0083967540, -0.0456398651, 0.0031050490, -0.0472926237, -0.0893982872, 0.0072417832, 0.0860172510, -0.1109014601, -0.0997064635, 0.0123646595, 0.0754812211, -0.0843878165, -0.0535923615, -0.1123294085, 0.0281841122, -0.0236308128, 0.0092285760, -0.0471427403, -0.0150847258, 0.0075591351, 0.0343075953, -0.0623499528, -0.0405829251, 0.0626295283, -0.0700063780, -0.1624326557, 0.1326155216, -0.0778224543, -0.0086922823, -0.0445447192, 0.0251069032, -0.0239058565, -0.1418938935, -0.1111149788, -0.0050827847, -0.1345110089, 0.0404122993, -0.1187681332, -0.0529213175, 0.0103238542, 0.0319215506, -0.0481970236, -0.0607135259, 0.0554497577, 0.0077815419, 0.0553369820, 0.0486693606, 0.0001993071, 0.1060879901, -0.1017127261, 0.0799760967, -0.0698704720, 0.0042370907, 0.0359723195, -0.0069228746, 0.1586979628, -0.0391125418, -0.0309274122, -0.0742617846, 0.0367961414, -0.0874331519, -0.0031522478, 0.0229932033, 0.0090906676, 0.0320773087, 0.0700974911, -0.0242795907, 0.0448510833, -0.0933187827, 0.1373560578, 0.0883407816, -0.0349130854, -0.0188124739, 0.1395075619, -0.0446784198, -0.0587313659, 0.0666891932, 0.0780896395, 0.0620907843, 0.0044019800, -0.0248059873, -0.0071123755, -0.0035890690, -0.0040653083, -0.1004436240, -0.0075361221, -0.1370743960, 0.0016926081, -0.0135764116, 0.0723102689, -0.0279186666, -0.0485718697, 0.0772975758, 0.1212559789, 0.0348384045, 0.0956684574, -0.0200265888, -0.1081080064, -0.0577220395, 0.0454249904, -0.0051682051, -0.0630896315, 0.0036710857, 0.0465616323, 0.0662888438, 0.0792449564, 0.1012759581, 0.0106840990, 0.0489664264, -0.0334418640, -0.0531059727, 0.0280854888, -0.0213344302, 0.0071257688, 0.0567189343, 0.1776321232, -0.0416349806, -0.0767244175, -0.0615067072, 0.0190110654, -0.0811730623, 0.0284839738, -0.0098388214, -0.0869791284, 0.0546099879, 0.0801911578, 0.0172239523, -0.0572817586, 0.0204460453, -0.0159053989, -0.0544966646, -0.0817914829, 0.0189218279, -0.1158846244, -0.1113420054, -0.1162214950, -0.0195583142, -0.0194190089, -0.0574291907, 0.0814708844, -0.0579082333, -0.0681486279, -0.1379042715, -0.0051241778, 0.0627907142, -0.1879580021, 0.0937074125, 0.0907368362, -0.0443380065, -0.0478412583, 0.0647483990, -0.0396532677, -0.0917400867, 0.0586500242, -0.1639196724, -0.0713213980, 0.0283327233, -0.1181283742, 0.0366895013, -0.1303677708, -0.1233587563, -0.0028126941, 0.0440962687, 0.0949249566, 0.0401077159, 0.1343706846, 0.0033906538, -0.0079108151, -0.0391511433, 0.0599620901, 0.0390360914, 0.0705719739, -0.0775263309, -0.1082468182, -0.0445942320, -0.0004931338, -0.0084775677, 0.0528916791, -0.0099606942, 0.0576549508, -0.0371502973, -0.0849864632, 0.0286066569, -0.0904786810, -0.0199960750, 0.0326411203, 0.0432611480, -0.0116072670, -0.0010102184, 0.2578520179, 0.0019174041, 0.0266850702, -0.0609625056, -0.0878563151, 0.0610985272, -0.0778592080, 0.0431548804, 0.0865347087, 0.0017509959, 0.0596198551, -0.0835532844, -0.0137629695, -0.0236881729, -0.0418874621, -0.0125945369, 0.0348432213, 0.1517751962, 0.0514845997, -0.1135909408, -0.0012253171, 0.0465119630, -0.0805132464, -0.0115261087, -0.0213836525, 0.0757573247, -0.1551413834, -0.0562361293, -0.0554989763, 0.0027599705, -0.0958014950, 0.0985161960, -0.0323028266, 0.0474385135, -0.0544795580, -0.0538899004, -0.0862111747, -0.0236762650, -0.0233097933, 0.1523479223, -0.0841130316, 0.0359707400, -0.0290102791, -0.1534821689, -0.0090305936, -0.0886939093, -0.0003591272, 0.0216244552, -0.0184836034, 0.0867911056, 0.0375808328, 0.0320304595, -0.0961559340, 0.2021701485, 0.0298954267, 0.0283850431, -0.0207058191, 0.1081867516, 0.0797571391, -0.0505221151, 0.0447309837, 0.0135095939, -0.0039646588, -0.0055048703, -0.0380125567, -0.1048245504, 0.1393687725, 0.0550810471, 0.0144128464, 0.0133813117, 0.0114831403, 0.0527355857, 0.0045757722, -0.0258788094, -0.0110763321, -0.0233213790, -0.0442334600, 0.0116958916, 0.0533682965, 0.0346637443, 0.0342571624, -0.1077598184, 0.0785549134, -0.0813844055, 0.0796701908, 0.0023262280, 0.0271608718, -0.0752420947, 0.0639061630, -0.0145834070, 0.0137903104, -0.0421740189, 0.0102620767, 0.1107710376, -0.0822452828, 0.0411952026, 0.0045721424, -0.1008395627, 0.0501470491, -0.0805233717, -0.0547860339, -0.0330888741, -0.0781148598, -0.0432968177, 0.2274571210, 0.1742629409, 0.0204399377, -0.0302338544, -0.0719294474, -0.0417347476, -0.0380821526, 0.0204195958, 0.0295084249, -0.0200766716, 0.0547919907, -0.0224651285, -0.0884270221, -0.0830274299, 0.0449657999, 0.0160554387, 0.0968723297, 0.0545944124, 0.0173498262, -0.0887590796, -0.0399997309, -0.0619499981, 0.0507249013, -0.0645544901, -0.0252565444, -0.1593059897, -0.0345367715, 0.1290487796, -0.0508271083, -0.0792061090, -0.0950105637, -0.0322166644, 0.0055222358, -0.0489550494, 0.1218969598, -0.1209768727, 0.1052386910, 0.0207266230, 0.0550838597, -0.0381382443, 0.0738135725, -0.0149110369, -0.0153583698, -0.0091803242, -0.0961600244, -0.0943339765, -0.0040299874, 0.1154909134, 0.1245367751, 0.0516787432, -0.0150678791, 0.0227603894, 0.0241397060, 0.0383165516, -0.0302113742, -0.0203349534, 0.0394668132, -0.0262445416, -0.1011036262, 0.0609425232, 0.1003257632, -0.0015487213, -0.0950007215, -0.0631280392, 0.0210378896, -0.0987672880, 0.0754143968, -0.0634858683, -0.0271492694, -0.1147932783, 0.0893671662, 0.0293621309, -0.0429322980, 0.0496953465, 0.1703524888, 0.0539129861, -0.1079071015, -0.0145648997, 0.0645567477, -0.0074943244, -0.0796926469, -0.1686914414, 0.0384025387, -0.1288111657, 0.0777834430, -0.0847875550, 0.0452918112, 0.0416105576, 0.0030406914, 0.0698627606, -0.0855537429, -0.0004279355, 0.0556570478, 0.0914252251, -0.0275415070, 0.0198620800, 0.1232102513, -0.1083984002, -0.0297018476, 0.1133911163, -0.0379580520, -0.1184043810, -0.0433225706, -0.0698102266, 0.0859591365, 0.0080990121, 0.0135310115, 0.0419299863, -0.0112016397, -0.0861081928, 0.0266605727, 0.0728957430, 0.0734750852, -0.1159650981, 0.0763082355, 0.0796977580, 0.0881815180, 0.0104852552, -0.0873252302, 0.0156139499, -0.1253166497, -0.0107958298, 0.0270984210, 0.0652867258, -0.0664869696, 0.0027162433, 0.1284610480, -0.0318085849, -0.0940225869, 0.0611892343, 0.0903744102, 0.0251288489, 0.0444795750, -0.0987614244, -0.0535057597, -0.0348805152, 0.0560285337, 0.0223035961, 0.1382144094, 0.0476339608, -0.0136840474, -0.0243916959, -0.0560770482, 0.0075300457, -0.1453460455, 0.0514579117, -0.0323282555, 0.0513399504, 0.0037835247, 0.0457606874, -0.0535744317, -0.0328965373, -0.1030679643, 0.0595143363, 0.0616563112, -0.0696600452, -0.0272240546, -0.0130760027, 0.0003868229, -0.0043220920, -0.0150834173, -0.1139885932, 0.1049938574, 0.0382692814, 0.0005753366, -0.0976762995, -0.0390183032, -0.0396880843, 0.0407260731, 0.1203209162, -0.1484513134, 0.0633008853, 0.0114618409, 0.1148188934, -0.0416777804, 0.0247645285, 0.0098320954, -0.0048098192, 0.0387106687, 0.0901699811, -0.0568546355, 0.0255451743, -0.0670618936, 0.0775190592, -0.0465822443, -0.0940744430, -0.1052919030, 0.0248225704, 0.0938205272, -0.1465037167, -0.0270855036, 0.0450829007, 0.0706773624, -0.0397413075, -0.0596969984, 0.0847708583, 0.0109531144, -0.1017080247, -0.0179704633, 0.0384118594, -0.1154008955, -0.0362004079, 0.0170321353, 0.0171372239, -0.0265303981, 0.0075965691, 0.0499070026, -0.0777699873, 0.0032395704, -0.0389920324, 0.0226534735, 0.0440476798, -0.0176164508, -0.0813533887, 0.0256050415, 0.0069709728, 0.0490297191, 0.0022599096, -0.0712450221, -0.1040025130, 0.0948304459, -0.1072650179, -0.0480954312, -0.0402239002, 0.1026046053, -0.0982574224, -0.0404547676, 0.1250211746, 0.0508470386, 0.0705417544, -0.0567559078, -0.0320267864, 0.0083034802, -0.0274536982, -0.0547378026, -0.0331074670, -0.1786614805, 0.0294715632, 0.0264141001, 0.0787038058, -0.0107403053, 0.1768505126, 0.0616628230, -0.0637023896, 0.0907193571, 0.0537998602, -0.0061079715, 0.0907370821, -0.1198969111, 0.0142706521, 0.1240106300, -0.1359833628, 0.0908717439, -0.0925129205, 0.0436786711, -0.0938105658, -0.0607329942, 0.1521676630, -0.0136509398, 0.0483238921, -0.1297277212, -0.0071822843, -0.0101949275, 0.1152850613, 0.0217756778, -0.1038495004, -0.1930672228, -0.0007048505, -0.0707452372, 0.0377499536, 0.0096049039, 0.2357427627, 0.0845133066, -0.0957753509, -0.0821862146, 0.0264989268, 0.0161726810, -0.0662214980, -0.0984321684, -0.0166641269, -0.0291346572, 0.0611375719, -0.0372438692, -0.0784054399, 0.0648002401, 0.0125348335, 0.0150678372, 0.1047795191, -0.0302971564, 0.1069941148, 0.0807621926, 0.0620098673, -0.0317148194, -0.0890475810, -0.0868789777, -0.0268680286, 0.0152476663, 0.0683092847, 0.0599497370, -0.0297691487, 0.0151393395, 0.0171759129, -0.0209173653, 0.1093798131, 0.1165760979, 0.1188076586, -0.0654267743, 0.0075226738, 0.0526771061, -0.0000275735, 0.0028014067, 0.0680644885, 0.0475021824, -0.0040811165, 0.0695479065, 0.0314251781, 0.0033416443, 0.0884888470, 0.0497961417, -0.0872705951, 0.0397699624, -0.0930085257, 0.0454742163, 0.1474840641, 0.0750681311, -0.0842415541, -0.0071406253, -0.0083574830, -0.0564505570, 0.0899581090, 0.0348378867, -0.0162293203, 0.1247863844, 0.0319385193, 0.0750144795, -0.0959899873, -0.0879539773, 0.1552379131, 0.0190759171, 0.0198554266, -0.0914409012, 0.0999717787, 0.1121788546, -0.0451622941, 0.0827173963, -0.0126991188, 0.1119059622, 0.0359112881, -0.0462560430, -0.0633652881, -0.0895565450, -0.0131588215, 0.1361023784, -0.0161930546, 0.0177597068, -0.0405999906, -0.0071861045, -0.1479010433, 0.0136975432, -0.0631790757, 0.0025009718, 0.0066876472, 0.0604833290, -0.0689085647, -0.0001127285, -0.0691662654, 0.0156955924, 0.0645286515, -0.0715618655, 0.0287211388, 0.0852406994, -0.0446122661, 0.0253856517, -0.0114642624, 0.0361257754, -0.0747100860, -0.0755505264, -0.0239612367, 0.0978748128, -0.0093479827, -0.0280594863, 0.0323391221, 0.0513399504, 0.0463154353, -0.0051764203, -0.0492957011, -0.1480592936, 0.0269103795, 0.0497120209, -0.0082464768, -0.1172375381, -0.0883610994, 0.0649652407, 0.0328741036, 0.0337090790, 0.0022720660, -0.0608014613, -0.0371030048, -0.0277246386, -0.1015282348, 0.0159726944, -0.0391661897, -0.0042861663, 0.0179991256, -0.0898511857, 0.0846970081, -0.0161897633, -0.0425558500, -0.0287845489, 0.0538818538, -0.0063975351, -0.0154219307, 0.0067287046, 0.0112388916, 0.0292490125, -0.0664039403, -0.1344503760, 0.0474489033, -0.1439554691, 0.1495332867, 0.0510886461, 0.0240355302, -0.0296453815, 0.0574857257, -0.0575447045, -0.0545507967, 0.0772092491, -0.0237804297, -0.0133829517, 0.0884418041, -0.0134835783, 0.0075669065, 0.0731423944, -0.1369150132, -0.0049390970, 0.0170371160, -0.0746477172, 0.0744811967, 0.0151961194, 0.0757612735, 0.0861073881, 0.0131528480, -0.1250876188, -0.1100308448, -0.0170515403, -0.0372504815, -0.0692282915, 0.0541140363, -0.0088263731, 0.0774135813, -0.0865300745, -0.1465945095, -0.0477665737, -0.0087361597, -0.0518305860, 0.0036328472, -0.1197114289, 0.0477266200, -0.0205320604, -0.1084141806, -0.0130082797, -0.1185957566, -0.0924227834, 0.1057776213, -0.0090140020, -0.2016729414, -0.1033616662, -0.0508558713, 0.0029437591, -0.0196625516, -0.0538080223, 0.0481940582, 0.0852907673, -0.1148715243, -0.0266551301, -0.0242029727, 0.0740499496, 0.0228790436, 0.0343189687, -0.0136177335, 0.0688085109, -0.0277921688, 0.0324396901, 0.0606176592, 0.0916930214, -0.1059550121, 0.0829453170, 0.0471047536, 0.0218903944, -0.0802915022, 0.0685724318, 0.1161244437, -0.0822048634, -0.0494044572, 0.0620618053, -0.0189816058, 0.0603407323, -0.1323726475, -0.0628911108, -0.0324315839, -0.0228138268, -0.0779796392, -0.1005626768, -0.0737834796, -0.0573112220, 0.2036163658, -0.0111047998, -0.2028055340, 0.0878967345, -0.0446256213, -0.0374840088, 0.0422763936, 0.1356306970, 0.0948225334, -0.0835818350, 0.0440660045, 0.0424057618, -0.0494282991, -0.0138802277, 0.0181094632, -0.1413237303, 0.0086991116, -0.0372837633, -0.0868521556, -0.1459039003, -0.0201945975, -0.0829575211, 0.0010020211, 0.0720751509, 0.0694893599, -0.1318901777, 0.0723215342, -0.0384906866, -0.0245606191, 0.0116605079, 0.0596784987, 0.0447010510, 0.0820376649, -0.0582281202, 0.0168599449, -0.1180747226, -0.0123901078, 0.0685421899, -0.1172491759, -0.0194691177, 0.1819147170, 0.0075409049, 0.0077377837, 0.0633598864, -0.0724902228, -0.0304611418, 0.1324229240, -0.0963276625, -0.1001260802, -0.0493565500, -0.1265192181, -0.0071479380, 0.0374249704, -0.0572709590, 0.0479793884, 0.0089029549, -0.0399801917, 0.0320048109, -0.0375497416, -0.0360405259, 0.0210678447, -0.0378327146, 0.1038918719, -0.0975737721, -0.1247321591, 0.1116382927, -0.0214037579, -0.0002003448, 0.0541056208, 0.0965069756, -0.0173011720, 0.1123927459, -0.0406908803, 0.0271777119, 0.0250777993, -0.0859226808, 0.1109953895, 0.1178539246, -0.0112987068, 0.1243448257, 0.0501844212, 0.0263589993, -0.0438825190, -0.1421970874, 0.1342093498, -0.0853547379, -0.1585460603, 0.0186978839, 0.0852538273, -0.0905353799, -0.0617561452, -0.0118643474, -0.0179419033, -0.0856508762, 0.0845094919, 0.1040422469, -0.0682624280, -0.0278411824, 0.0389067531, -0.0221639797, -0.0178181902, -0.0279652644, 0.0037550570, -0.0026804097, 0.0758473128, 0.0006020084, 0.0065354817, -0.0146487607, -0.0376327410, 0.0833825544, -0.0696612895, 0.0562634058, 0.1145132557, -0.0396450497, -0.0633501634, 0.0776148513, 0.0669039041, 0.0049670232, 0.1197758541, -0.1869010776, -0.0678037181, 0.0243215673, 0.0653844923, -0.0144489342, 0.0636934936, -0.0183180254, 0.0979894474, -0.0296620317, 0.1510117203, 0.0070295553, 0.1115638465, 0.0323239602, -0.0586155467, -0.1456863880, 0.0126733771, 0.0916001499, 0.0326994136, 0.0150395222, -0.0321392491, -0.0389693342, 0.0668000728, 0.0573718734, 0.0174244232, 0.0075047882, -0.0076281121, -0.0013789207, 0.0435029864, 0.0444744229, -0.0194634609, 0.0458657332, 0.1054576412, 0.0037774793, -0.0851003006, -0.0134694315, 0.0659866631, -0.0867907703, -0.0307669770, -0.1036229059, 0.0430518612, -0.0222857036, 0.0326040946, 0.1148941368, 0.0561525039, -0.0382150039, -0.0700097010, -0.1192339957, 0.0227933843, -0.1662720144, 0.0766061321, -0.0505594499, 0.0637792870, 0.0085322903, 0.1768010855, 0.0802700892, 0.0955850482, 0.0548365228, 0.0911795050, 0.1048583165, -0.0382219926, -0.0239499956, -0.0835041478, -0.0466037132, 0.0897861049, 0.0782816485, 0.0487678200, -0.0011031651, 0.0512836426, 0.0630297437, -0.0801942423, -0.0353430025, 0.0235827193, -0.1052400470, -0.0252666287, 0.0652671307, -0.0024654062, 0.0752810836, -0.0250783898, -0.0624047145, -0.0356411524, 0.0529409125, -0.0175422542, -0.0238799993, -0.1339818239, -0.0382067636, -0.0596782938, -0.0522575565, 0.0329397209, -0.0012548830, 0.0166518614, 0.0684215277, -0.1288609058, 0.1081930175, -0.0019128621, 0.0539016873, -0.1295784712, -0.0057968614, -0.0418278985, 0.1050471291, 0.0554178953, -0.0574212559, -0.0448773168, -0.0113268252, -0.0451546796, -0.0818322971, 0.0739407465, -0.1018093601, 0.0323230214, 0.0695800707, -0.0329974480, -0.0792419910, -0.0269238669, 0.0634314790, 0.0543785132, 0.0486824028, -0.1573904753, -0.0009191874, 0.0643117502, 0.1001722738, 0.0228565391, -0.1330801696, 0.0533672683, 0.0173770152, 0.0121945897, 0.0320086330, 0.1979786009, 0.0491247289, -0.0610387102, 0.1759760678, 0.0048046722, 0.0194086097, 0.0628400892, 0.1151876450, 0.0479875132, -0.0294295736, -0.0376381390, -0.0259619914, -0.0472393632, 0.0390720740, -0.0702930689, 0.0556993783, 0.0064967191, -0.0646385252, 0.0562312193, -0.0659439415, -0.0672487840, 0.0342630409, 0.0668944046, -0.0254581254, -0.1065137535, -0.0465875305, 0.1340027750, -0.0183602888, -0.0789828748, 0.0277354755, -0.0747434199, -0.0448895209, 0.0145106595, 0.0359633304, -0.0680204555, 0.0230679847, -0.0725361034, -0.0545386784, -0.0117576821, 0.0227665510, 0.0645263121, 0.0189478267, -0.0019491949, -0.0637250021, 0.1075272635, 0.0902952999, -0.0620261133, 0.0576012358, 0.1348701268, 0.1405888349, 0.0413135961, 0.0377234966, -0.0365692601, 0.0487039685, -0.2296298444, -0.0120460810, 0.0278036948, 0.1077227816, 0.0212610140, 0.0915509686, 0.0753496885, -0.1602582037, -0.0073806900, -0.0680336058, 0.0562633537, 0.0287963059, 0.0021269063, -0.0295112878, -0.0076384898, 0.0655468032, -0.0898788795, 0.0036370009, 0.0097816791, -0.0183920562, 0.0245691873, -0.0009880140, 0.0060740961, -0.0446624197, 0.0075662518, 0.0686360523, -0.0274983998, -0.0559801608, -0.1356952488, -0.0051326561, -0.0893037468, 0.0816651881, 0.0841510296, 0.0382682197, 0.0162122976, -0.0326460265, -0.0584177859, -0.0445834137, -0.0387261435, 0.0258099586, 0.0041046389, -0.0510708690, 0.0326009095, 0.0848702937, 0.0472633988, 0.0770494640, -0.1248548478, -0.0625403300, -0.0562724173, -0.0010302955, 0.0730973780, -0.0549190678, 0.0195618719, 0.1521610916, -0.1247649193, -0.0185702853, 0.1374342591, -0.1385435760, -0.0961024612, -0.0203499291, -0.0517747737, 0.0366946086, 0.0554359928, -0.1409461051, 0.1361585408, 0.0756080076, 0.0133387847, 0.0103666391, -0.0046899291, 0.0140839573, -0.0862986147, -0.0092585636, -0.0336615890, 0.0424272679, 0.0731539428, 0.0117640514, 0.0407851785, 0.0458931513, 0.0960216001, 0.1270568818, 0.0085511412, -0.0779830590, 0.0001713578, -0.0582820624, 0.0431750454, 0.0002749149, -0.0022543571, -0.0720828176, -0.0590248294, -0.0047184820, -0.0105085000, 0.0958655626, -0.0129277511, 0.0353990681, 0.0953442529, 0.0408097766, 0.0529971644, -0.0336109325, 0.1491228491, -0.1466660798, -0.0666288733, -0.1262619644, 0.0316138044, -0.1051068231, -0.0546128638, 0.1294472963, -0.0578650907, -0.1197660640, -0.0158940274, -0.0887692869, -0.0753631517, 0.0731549039, -0.1766432673, 0.0552513599, 0.0053259870, -0.1544181854, -0.0789374709, -0.0433103368, -0.0448188819, 0.1141054481, -0.0252714846, -0.0042694868, -0.0628846958, -0.0211722013, -0.0145860529, -0.0327450968, 0.0039134519, 0.0117375888, 0.0261815879, 0.0888864025, -0.0023156467, -0.1082316190, -0.0708919764, -0.0680080578, -0.0851739570, 0.0639818311, -0.0033362366, 0.0023826945, 0.0774985030, -0.0756795481, -0.0213034321, -0.0550480820, -0.0368699580, 0.0531858280, -0.0115087852, 0.0460952781, -0.0225786958, 0.0463755578, -0.0704216212, -0.0225921385, -0.0153169120, -0.0475294255, -0.1902275085, -0.0220788401, -0.0001374153, 0.0568162501, -0.0079210130, 0.0389712341, 0.0503593236, 0.0213350151, -0.0719131827, -0.0165011175, 0.0306760911, 0.0551179834, 0.0762318298, -0.0203409139, -0.0865507349, 0.0402130447, -0.0258704219, 0.0747329071, -0.0009364557, -0.0581530370, -0.0793259367, -0.1265739501, 0.0156672951, -0.1052333564, -0.1891907454, -0.0917255580, 0.0314217471, 0.1048510894, -0.0422178879, -0.1728258133, -0.1660242081, -0.1675193459, -0.0740876347, 0.1238103583, -0.1202026904, -0.1506616920, 0.1545169204, -0.0188781694, 0.0799278319, 0.0103355339, -0.0008646003, 0.0303550139, 0.0388715714, -0.0191938188, -0.0810210109, -0.0184077304, -0.0386874005, 0.0264870320, 0.0192173291, -0.0227983445, 0.1711871624, -0.0980133563, 0.0950936526, -0.0963176414, 0.0837369487, -0.0649850145, -0.0482484847, -0.0436113961, 0.0373886675, 0.0986365080, -0.0338647179, 0.0563468821, -0.0657103136, 0.0405471250, 0.0496585295, -0.0275296904, 0.1365314126, 0.0243984107, 0.0122602629, 0.0423657000, -0.0956314579, 0.0203568228, -0.0849798322, -0.0847180784, 0.0997490287, 0.0630676970, 0.0298075639, 0.0173855070, -0.0271694530, 0.0213471614, 0.0058269189, -0.1117052659, -0.0900681913, -0.0064839758, 0.0636261031, -0.0154316872, 0.0909290612, 0.0031753618, 0.0474274084, -0.0611306354, -0.0276408140, -0.0197049323, -0.0954728276, -0.0968450010, -0.1084621176, -0.0263757147, -0.0150108607, -0.0321272202, -0.0731130391, -0.0129477996, 0.0598046705, -0.0302069150, 0.0977871120, -0.0515274554, -0.0317259505, -0.0368268229, -0.0065999059, 0.0323593020, 0.1099925488, -0.0583682396, -0.0707882196, -0.0407848768, -0.0673199147, 0.0034006224, 0.0810261220, -0.0258219521, -0.1019558832, -0.0334367044, -0.1112680882, 0.0438297763, 0.0415853895, -0.0460802466, 0.0550805964, -0.0774691924, 0.0268795732, 0.0606441423, 0.1689443290, -0.0005461064, 0.0403236076, 0.0452335812, 0.1334054023, 0.0497421175, 0.0515457131, 0.0337177068, 0.0220680088, 0.0133385817, -0.0987230539, -0.0388630517, 0.0093858959, -0.0110104941, -0.1178018600, -0.0788916051, -0.0226310212, -0.0382645130, -0.0069222786, -0.0586841032, -0.0460743234, 0.0289955959, 0.1410510540, -0.0588080138, 0.1150304973, 0.0335028693, -0.0114130862, -0.0881701708, -0.1031956673, -0.0564347580, 0.0343121886, 0.0464406013, 0.0181597769, 0.0228837449, 0.0863859504, -0.0708276182, 0.0485304371, 0.0943827480, 0.0154373301, 0.1713111401, 0.0034234927, -0.0956614465, -0.0260457844, 0.0127388658, -0.0560946874, -0.1344821006, -0.0312248245, 0.0662649199, 0.0732655302, -0.0560090914, -0.0569901653, 0.0182159841, 0.0550559051, 0.1003477201, 0.0545646660, 0.1233634725, 0.0901447982, -0.0170484520, -0.0057810610, 0.0993869826, 0.0467585847, -0.0233111642, 0.0430257320, -0.0340362377, -0.0313001834, -0.0351105034, -0.0651091710, 0.0777514949, -0.0255947765, 0.0230119471, 0.0611167476, 0.0791064054, 0.1354152113, -0.0004120735, 0.0494067967, 0.0830200091, 0.0422872975, -0.0752929077, -0.0946287736, 0.0014821421, 0.0375275649, 0.1000499502, 0.0858126953, 0.0503009073, 0.0535145178, -0.1682581604, -0.0184096731, -0.0903739035, 0.0389107466, 0.0957268253, 0.0253204014, 0.0077739633, -0.0519411154, 0.0954762548, -0.0857674479, -0.0278304685, -0.0431093462, -0.0168162491, -0.0627496764, -0.0224964209, 0.0549988560, 0.1100712493, 0.0315051824, -0.0358891971, 0.0933610573, -0.0878498554, -0.0706475079, -0.0240118336, 0.0900220424, 0.1174888536, -0.0781941861, -0.0989693105, 0.0067741289, -0.0499859005, 0.0887527913, -0.1129977554, -0.1034824774, -0.1608411372, 0.0232514832, -0.0504941344, -0.0300713815, 0.0372330174, -0.0480445437, -0.1694092602, -0.0428231061, -0.0856409445, -0.0670273528, 0.0502131097, 0.0211261231, -0.0020341456, 0.0508582368, -0.0178181306, -0.0951926708, 0.1603117883, 0.1404554844, 0.0623386204, 0.1052481160, 0.0438832827, -0.0018997026, 0.0387395322, -0.0414130092, 0.0411240533, 0.0529115126, 0.0464080870, 0.0008453542, 0.0586445890, 0.1620532125, 0.0283414871, 0.0615308210, -0.1376304626, -0.1037888974, 0.0507165007, 0.0322110876, -0.0406377502, 0.0106572546, 0.0901119038, 0.0438399911, -0.0127068060, -0.0199827403, -0.1343666166, -0.0673802644, 0.0214845445, 0.0498224832, -0.0237212386, 0.0446988232, -0.0629105568, 0.0015511358, 0.0637586787, 0.0507005528, 0.0729975849, 0.0653723776, 0.0171830822, 0.1462405920, 0.0018649766, -0.0226288270, -0.0930921510, -0.0108050369, 0.0439174660, -0.0141760660, -0.0241151080, 0.0928988010, 0.0303026177, 0.0688899979, 0.0149026997, -0.0462058857, -0.0273075718, -0.0348407030, 0.0335307755, -0.0060007139, 0.0659818947, 0.0865744054, 0.0055398303, 0.0104609597, -0.0632241219, -0.0548283383, 0.0962405205, 0.0264003929, 0.0760893151, -0.0783028156, -0.1389912367, 0.0819157809, 0.1165827140, 0.0604098476, -0.0543736443, -0.0836044997, 0.0015751480, 0.1080946326, -0.0581431426, 0.0895150453, -0.1810654104, -0.1221737415, 0.0420828052, 0.0581993163, 0.0073649259, 0.0478098020, 0.0225601681, -0.1828154027, -0.0289554074, 0.1154248118, 0.0051464345, 0.1250098050, -0.0438176394, -0.1045368537, 0.0329699107, -0.0920808390, -0.0430689454, 0.0162967816, -0.1219994724, -0.0404368043, -0.0851007029, 0.0401132293, -0.0387678556, 0.0065638949, -0.0250429697, 0.0474011786, -0.0308759790, -0.0271662120, -0.0591015927, -0.0665432960, -0.0405491665, 0.0157104190, 0.0669645518, 0.0289362334, 0.2124913335, 0.0805967599, -0.0370861851, 0.0509632938, 0.1015282795, 0.0156176798, -0.0817685276, -0.0388615541, -0.0799433738, 0.0633850023, -0.0092526712, -0.1369264871, 0.1262292266, -0.1058059111, -0.0706399083, -0.0670264810, 0.0410694368, 0.0696288571, -0.0498623066, 0.0510986783, -0.1099062189, 0.0373160690, 0.0958047882, -0.0230359975, 0.1345328689, 0.0136294961, 0.0415205061, 0.0294104647, 0.1082445309, -0.0224610996, -0.0383829214, 0.1025969535, 0.0871333480, -0.0323139653, 0.0276979469, -0.0753127486, -0.0147891017, 0.0159929004, -0.0836209953, 0.0504603945, -0.1319921166, 0.0483516492, -0.1023124009, -0.0224801451, -0.0244425312, -0.0045418553, -0.1809065342, 0.0109281447, -0.0034887004, 0.0852959529, 0.0625441968, -0.1161720380, 0.0135831870, -0.1175504848, -0.0154019287, -0.0388581641, 0.0857832581, -0.0646928549, 0.0632288605, -0.0434961505, -0.0677018836, 0.0554772913, -0.0194758568, -0.0884322897, 0.0342617892, 0.1299458146, 0.0110396445, -0.0187632367, 0.0227068607, 0.0162488092, 0.0654736310, 0.0086172968, -0.0060308035, 0.0571180694, -0.0779739618, 0.0775226057, -0.1078818366, 0.0226786546, 0.0859875008, 0.0240266528, -0.1241730377, -0.0163164604, 0.0039712796, 0.1144559458, 0.0223742481, 0.0292977542, -0.2146095335, 0.0617313497, 0.0450448170, 0.0536495782, -0.0991931483, -0.0250804927, 0.0163232833, 0.0150808645, 0.0057458067, 0.0254382305, -0.0054359389, -0.0490274131, 0.0984020308, -0.0148282014, -0.0681413561, 0.0694659054, -0.0867743790, -0.1939187199, -0.0589224622, -0.0134413699, 0.0173470583, -0.0285705384, -0.0399813466, 0.1062241793, -0.0678045824, 0.1242526621, -0.0001102845, 0.0919818655, -0.0431859903, -0.0693655759, 0.0748883262, -0.0032881519, 0.0668367893, -0.0738334358, -0.0341888480, 0.0090141678, 0.0644571558, -0.0197581071, 0.1343272328, 0.0643066615, -0.0954641774, -0.0535863899, 0.1014520004, 0.0765154734, -0.0766056627, 0.0192643199, 0.0686531663, -0.0365919247, 0.0297207069, 0.0197107270, 0.1219309792, 0.0136616705, 0.0060579041, -0.0474073067, -0.1005758718, 0.0040888642, 0.0425713323, -0.0774175674, 0.0305048637, -0.0163300894, 0.1150131971, -0.0382725485, -0.0429485105, 0.0117050735, -0.0165929850, 0.0346665196, -0.0466948748, -0.1616116762, 0.0723398104, 0.0836722031, -0.0422702730, 0.0233001672, 0.0360380486, -0.0570229441, -0.0435179844, 0.0531256087, -0.2138810307, -0.1179317906, 0.0432747826, 0.0942739248, -0.1178308725, 0.0615666918, -0.0560029894, 0.0684780255, 0.0279493146, 0.0929090977, -0.1126894951, -0.0526075438, 0.0191508234, 0.0060789152, 0.0799108371, -0.0493840016, 0.0579375438, -0.0956245884, 0.0748267472, 0.1204773858, 0.1251860112, -0.1219900995, -0.0326684378, -0.0513499677, 0.0733788535, -0.0727104545, 0.0894215629, -0.0449460074, 0.0671950132, 0.0639979765, -0.0543768443, -0.0410854854, 0.0027817436, 0.0890495479, -0.0346653238, -0.0371984430, -0.1509400606, 0.0118277436, 0.0701170862, -0.0017105688, 0.0384051092, -0.0984610990, 0.0122889644, -0.0520857275, 0.0748496354, -0.0312493984, 0.0746948048, 0.0749490410, 0.0386570096, 0.0559175946, -0.0306726098, 0.0640545487, -0.0504590087, 0.0217961315, -0.0492333472, 0.0427374020, -0.0603425764, 0.0141864857, -0.0754462704, 0.0737673417, 0.0455148183, -0.0819052830, 0.0387401506, 0.0049460866, 0.0413566791, 0.0267421380, -0.1041865423, 0.0053462693, -0.0259892866, -0.0080791954, -0.0830022767, -0.0185265783, 0.0574208386, 0.1429528445, -0.0768562481, 0.0674493983, 0.0316116996, 0.0629157126, 0.0121671213, -0.0670095459, 0.0068704523, -0.0525042601, 0.0232410822, -0.0787763745, -0.0444496684, -0.0781158507, 0.0587375090, 0.0359407142, 0.1023658961, 0.0654557347, -0.0467968434, -0.0338721089, 0.0098943589, 0.0382722393, -0.0610161871, -0.0621042252, 0.1274710745, 0.0225875992, -0.0574690253, -0.1542400271, -0.0072391699, 0.0568413697, -0.0643075779, 0.0398400426, 0.0709589720, 0.0463629030, -0.0257277209, 0.0059266705, 0.0723477080, 0.0858085826, 0.0210974868, -0.0063546048, 0.2000344694, -0.0192649458, -0.1435863078, -0.0518380776, -0.0034165778, 0.0876040608, -0.0548323244, -0.0448312871, -0.0208883602, -0.1291896552, -0.0400522649, -0.0956283882, -0.0380454436, -0.0464183986, -0.0533351339, -0.1124306172, -0.0501317605, 0.0098568108, 0.0669516101, 0.0255873334, -0.0244539250, 0.0159860905, -0.0339443907, -0.0072428402, 0.1251667142, 0.0592775308, -0.1270833611, -0.0639589578, 0.0697354600, -0.0619699769, 0.0390896425, 0.1054225788, -0.0137673449, -0.1208012030, 0.0343077220, -0.0250232294, 0.0600387864, 0.0439543538, 0.0117796045, -0.1264801025, 0.0318733416, 0.1221469343, -0.0885654613, -0.0398941003, -0.0224027820, -0.0749500021, -0.0062228297, 0.0216672737, -0.1088155955, 0.0000446493, 0.0823102370, 0.0312902927, 0.0642561540, -0.0696385130, -0.0687095970, 0.1370218992, 0.0046866680, 0.0638212413, -0.0729472339, -0.1236312464, 0.1967025399, 0.0631752685, 0.0062262770, 0.0147605296, 0.0129720764, -0.0421722494, -0.1186651215, -0.0006720533, -0.0418282636, -0.1018522605, 0.0835149139, -0.1442015767, -0.0349563360, -0.0337895975, 0.0454224162, -0.0956594199, -0.0831179395, 0.0040406268, 0.0075792102, -0.0597772188, 0.1320661008, 0.0414286777, -0.1313941181, -0.0100182621, 0.0804514587, 0.0505283251, 0.0878960639, -0.0916312337, -0.0265611894, 0.0193872750, -0.0098601580, -0.1359673291, 0.0305983126, -0.0277212188, 0.0364697389, -0.0470515713, 0.0683786422, 0.0732239857, 0.0257702991, -0.0085120732, 0.0194574501, 0.1446843892, -0.0531294495, -0.1061760560, -0.1141457111, -0.0759200975, -0.0190899000, 0.0655346885, 0.0413939357, -0.1685807556, -0.1332116276, 0.0975476056, 0.0249866303, -0.0368004963, 0.0304184165, -0.0525206216, -0.1130208448, 0.0119106071, -0.0207657143, 0.0307824798, -0.0060510035, 0.0689552501, 0.0742777511, 0.0192619264, 0.0592506006, 0.0002213889, 0.0353839695, 0.0989505127, -0.0132940803, -0.0292951465, -0.0714425072, 0.0363353454, 0.0626879930, 0.0721073896, -0.1524932235, 0.0103773819, 0.0341970176, -0.0425128751, -0.1940033138, -0.0019581367, 0.0719656795, -0.1731862873, -0.0820028335, -0.1068815067, -0.0729657412, 0.0520990603, 0.0103172874, 0.1115370765, -0.1317346245, 0.0758739263, -0.0121947210, -0.0959486812, -0.0827494264, 0.1245105341, -0.0898388624, -0.0820828378, -0.0035141686, 0.0024065326, 0.0304556061, 0.0169307236, -0.0025373276, 0.0015224376, -0.0095456205, 0.0106399227, -0.0303032268, -0.1198527440, -0.1051617712, -0.0504106842, 0.0125918509, 0.0142130647, -0.0405874178, -0.0524212047, 0.0524471141, 0.0488073342, -0.0080249477, 0.1310990602, 0.0275481511, 0.0034550836, -0.1143353954, -0.0034766912, -0.1324486136, -0.0768440142, 0.0099602761, -0.0552502610, -0.1150408015, 0.0656704307, -0.0965546817, 0.0659139082, -0.1203268319, -0.0025368594, -0.0327269435, -0.0302546788, 0.0058129965, -0.1124259382, -0.0309362449, 0.0107028047, 0.0091288341, -0.0496339649, -0.0649839416, 0.1456419975, -0.0205054469, 0.0854368210, -0.0076221451, -0.0394566916, -0.0369267203, 0.0058794320, 0.0311085992, -0.0443873927, -0.0419977009, 0.0400235690, 0.0161353331, 0.0106494576, 0.1014269814, -0.0505736768, -0.0126221888, 0.0204980951, -0.0428614728, 0.0501938984, -0.0654969811, -0.0315393731, 0.0188664161, -0.0172105245, 0.0279609393, 0.0492238998, 0.0323971584, -0.0714214146, 0.0542695969, -0.1182007343, 0.0507520735, 0.0266218632, 0.0573023818, -0.0026954981, 0.0136381239, 0.0748770982, -0.0174345858, -0.0440433621, -0.1222665384, 0.0739338621, 0.0141264275, 0.1108931527, 0.0965116397, -0.0012892722, 0.0408709012, 0.0485017002, -0.0388899036, -0.0782235116, 0.0015865222, 0.0778837651, 0.0830874667, -0.1790667474, -0.1380342692, 0.0410618074, -0.0742907897, -0.0063625355, -0.0725611076, -0.0585634299, -0.1145853251, -0.1797091514, 0.0096698338, -0.0494446382, 0.0143727763, 0.0846491903, -0.0837476254, 0.0662485808, -0.0536456406, 0.1009186804, -0.0160083286, -0.0658621341, 0.1606097221, -0.0035998039, 0.0369656347, 0.0371444635, 0.0229688697, 0.0599976815, 0.0383581743, -0.0476035252, -0.0162459519, 0.0547903143, 0.0197497234, -0.0176255107, 0.0970493406, -0.0003599692, -0.0001635458, 0.0357009172, -0.0662307665, 0.0040006880, 0.0298958663, 0.1025276259, 0.0596013069, -0.0548128374, 0.0607572906, 0.0684451535, -0.0560407415, 0.0168982409, -0.0393615067, 0.0136041250, 0.1095607430, -0.0028911298, 0.0061192680, -0.0771826208, -0.0702936053, -0.1096181795, 0.0089363707, 0.0506460480, 0.0382233933, 0.0071584433, -0.0946230739, 0.0136965802, 0.0056979926, -0.0188336186, -0.0061244541, 0.0075192568, 0.0960284472, -0.0613255985, 0.0546681806, -0.0269892793, -0.1181667820, -0.0419644900, 0.1118043363, -0.0135211479, -0.0829065815, -0.0307298508, -0.0185504779, 0.0256585851, 0.0488278754, -0.0490183420, 0.0785192922, -0.1067776382, -0.1170490161, 0.0507771447, -0.0527853556, 0.0321706124, -0.0461883023, -0.0041939109, -0.1050384715, -0.0210863464, 0.0546621829, -0.1289767921, -0.0833657980, -0.0160164014, 0.0791894495, -0.0748221204, 0.1286838651, 0.0237284377, -0.0330439210, -0.0185133033, -0.1504348218, -0.0176788662, 0.0751943290, 0.1653523743, -0.0647418946, 0.0079565160, -0.1645474732, -0.0269612018, 0.0097372085, 0.0673994422, -0.1105877534, 0.0244383048, 0.1495372206, -0.1112269983, -0.0453576632, 0.0120919701, -0.0458029769, 0.0857228339, 0.0332626812, -0.0220059939, -0.1170267612, 0.0809140205, -0.0509743989, 0.0008774599, -0.0477275662, 0.0266308282, -0.0849596709, -0.1137366742, -0.0984337553, -0.0219116639, 0.0759940818, -0.1419022679, 0.0280267671, -0.0001300880, -0.0749057978, -0.0162710566, 0.0793000013, -0.0035971911, -0.0334134363, -0.1037095860, -0.0039032092, 0.0742897242, -0.1324144751, 0.0456514098, 0.0602544583, -0.0383468047, 0.0063275560, 0.0319222845, -0.0675234944, -0.0662734061, -0.1264206469, 0.0321612805, -0.0031015147, -0.0521840453, -0.1755407751, -0.0230884328, -0.0358716473, -0.0082100425, -0.1197882965, -0.0021227002, -0.0033288200, -0.1323073357, 0.0419554561, -0.0734821483, 0.0896129757, -0.0795441791, -0.1350489706, 0.0677876100, -0.0568765551, -0.0660511851, 0.1370247900, 0.0536329262, -0.0858949423, -0.0936183557, -0.0807665959, 0.0340903141, -0.0279243886, 0.1273090988, 0.0660105795, 0.1311485767, -0.0368494876, -0.1143789142, 0.0503824502, -0.1457495987, -0.0404449813, -0.0177278537, -0.0593378246, 0.0555803776, -0.0909889787, -0.0298331548, -0.0144659029, -0.0446502939, 0.0747381449, -0.0905759037, 0.0019103286, 0.0038233658, -0.0814002305, -0.0946214125, 0.1442402303, 0.0354503468, -0.0771446079, 0.0129267331, 0.0380903035, -0.0458131060, -0.0714354813, -0.1202801317, 0.0132685034, 0.0792492777, -0.1094102636, 0.0748058930, 0.1400013268, 0.0950224474, 0.0346096605, -0.0280669834, 0.0918457434, -0.0811639354, -0.0677435100, -0.0648960471, 0.1057621241, -0.1400346905, -0.0376695655, 0.1341445297, -0.0930674821, -0.0094551500, -0.0432605185, -0.0958280861, -0.1175177693, -0.0448448546, -0.0143036470, 0.1077980101, -0.0633050203, -0.0250042081, 0.0192500763, -0.0659454167, -0.0886942148, 0.1881348193, 0.0204763208, -0.0619184785, -0.1483443230, 0.0892647654, 0.0663401932, -0.0155451410, 0.0540462695, 0.0051658796, -0.0101217991, -0.0565828420, -0.1234979331, -0.1081199422, -0.0713921636, 0.1162211820, -0.0218156278, -0.1285353750, 0.0478243269, 0.0512883291, -0.0683532506, 0.0693083629, -0.0505967997, -0.0357860439, 0.0630892590, -0.0231050476, 0.0374318957, -0.0019051259, -0.0415526964, 0.0428312346, 0.0563411713, -0.1443623602, 0.0909781009, -0.0835455209, -0.0159193408, -0.0032744932, -0.0513154604, -0.0550014041, 0.0493127443, -0.0547254458, -0.0296555478, -0.0501381904, 0.0244378354, 0.0092232116, -0.0622706600, 0.0189040191, 0.1701787412, 0.0618101619, 0.0982703120, -0.0424939916, -0.0660496727, 0.0372160003, -0.0604308061, -0.0478033125, -0.0015847121, -0.1124004722, -0.1301811337, -0.0010751452, 0.0086215958, -0.0925906003, 0.0165730584, 0.0017574836, 0.0279775951, -0.0024814163, 0.0611645132, -0.0011060265, 0.0902427658, -0.0207196530, 0.0086694574, -0.0461959988, 0.0764393881, -0.1204195544, -0.0010642646, 0.0480153114, 0.1003113165, -0.0343646631, 0.0121315522, 0.0057041664, 0.0057892245, -0.0130863693, -0.0689514503, 0.0750807822, -0.1433980465, -0.1041701734, -0.0706965327, -0.0022432453, 0.0143166455, 0.1733562797, 0.0882811397, -0.0741231814, -0.0711523220, 0.1659871042, -0.0839558169, 0.0130093908, -0.0394465104, 0.0536287315, 0.0609008707, 0.0495552123, 0.0283623524, 0.0199764241, 0.0707403645, 0.1251319349, -0.0887345970, -0.0322624855, -0.0415866710, -0.0254819170, -0.0866381824, 0.0534087494, 0.0371585637, -0.0411831215, -0.0343574584, 0.0646422952, 0.0119707510, -0.0601167232, 0.0464693084, -0.0264849532, -0.0180536155, -0.1064919308, -0.1657721847, 0.0332273617, 0.0498581491, 0.0800469518, -0.0731983781, -0.1055719480, -0.0889403746, -0.0271012951, 0.0759819895, -0.0817744210, 0.0511042885, 0.0295687392, 0.1185948700, -0.0290217698, 0.0287468266, -0.0758040100, 0.0752187073, -0.0658679008, 0.0225722045, -0.0812581554, 0.0653292462, -0.1189641133, 0.0248453189, -0.0298900381, 0.0223644059, -0.0529930219, 0.0147028659, 0.0002606317, -0.0684719607, 0.0730722621, -0.1498342007, 0.0533171259, -0.0430639982, -0.0728774518, -0.1001499966, -0.0218331479, 0.0454981066, -0.0254902337, -0.0404228941, -0.0777900591, 0.0412117690, 0.0279096384, -0.0576994233, 0.0509142615, -0.0937512293, 0.0426307693, 0.0868366808, -0.0587892681, 0.1022539288, -0.1206836775, 0.0350467414, -0.0458905362, 0.1433861107, -0.0388344638, 0.0231333449, 0.0710941553, -0.0512349121, 0.0535884500, -0.1043860391, 0.1633578092, 0.1368765831, -0.0691115335, 0.1041901484, -0.0607868358, -0.0835921690, -0.0921656787, -0.0784625486, -0.0428286381, 0.0195613652, 0.1045707017, 0.0347909480, 0.1313948631, 0.1411800086, -0.0378364287, -0.0612533092, 0.0010119177, -0.0372008570, -0.1286849231, 0.0758833289, -0.1051106453, 0.1233212054, -0.0897422954, -0.0757871941, 0.0528702959, 0.0836841986, -0.0094366465, -0.0756132826, 0.0252747405, -0.0123809269, -0.0255863611, -0.0958302990, 0.0653587654, -0.0604595914, 0.1033081561, -0.0239801686, -0.0019903462, -0.0680068284, 0.0448062904, -0.0348621309, -0.0640646219, 0.0178518333, -0.0969663113, 0.0039865258, 0.1314536333, 0.1676351875, 0.0490037538, 0.0315150507, 0.0633376986, 0.0532073155, -0.1129799485, 0.0827325359, 0.0015470866, -0.0986830443, -0.0886819735, 0.0922942162, -0.0135051580, 0.0054003699, 0.0695307925, -0.0597903505, 0.0604624636, -0.0325465128, -0.1143127456, 0.0761370733, 0.0186944865, 0.0242125113, -0.0285794027, -0.0443687364, 0.0013406926, -0.0437054783, 0.0088343248, 0.0820048153, -0.0147173321, -0.0263118707, -0.0941835865, 0.0402075462, -0.0519746840, -0.0594762973, 0.1265118718, -0.0984250233, 0.0035048241, 0.0444142111, -0.0110818259, -0.0059723756, -0.0235700607, -0.0624415725, 0.0384868048, 0.0248094965, -0.0096296286, -0.0219037179, 0.0102840634, 0.0439206325, -0.0695177615, -0.0616351254, 0.0758158788, -0.0652259663, -0.0100736944, -0.0309028253, 0.0256795846, -0.0575601645, 0.0801967010, 0.0725260898, 0.0480073877, 0.0193363745, -0.0442693867, -0.0540203601, 0.1458066255, -0.0321006551, -0.0627218708, -0.0859337896, -0.0814195499, -0.0319688097, 0.0186402686, -0.0563552044, 0.1023513600, 0.0461552963, -0.1753044724, -0.0241142772, -0.0788077563, -0.1008128822, -0.0892935917, 0.0433020480, 0.0425549634, 0.0471707582, -0.0817941725, 0.0249783490, -0.0715189129, -0.0301971585, -0.0421870388, -0.0529179201, -0.0483679511, 0.0202986822, -0.0940523073, 0.0797469243, -0.0042963275, -0.0514331236, 0.0562289692, -0.0619850904, -0.0603947602, -0.0070888679, 0.0343250930, -0.1684574783, 0.0227724966, 0.0893397778, -0.0501088127, -0.0222305674, 0.1428990215, -0.0003380172, -0.1048775613, -0.0597698092, 0.0383878648, -0.0756222606, 0.0412325412, -0.0992051736, -0.1536540538, -0.0757043809, 0.0302617606, 0.0634785742, 0.0232624318, 0.0070582326, -0.0501802750, 0.0724125430, -0.0344914272, -0.0879803002, 0.0261648521, -0.0483539440, -0.0264154729, -0.0857691020, -0.0331506841, -0.1214852408, -0.0506997183, 0.0802394226, 0.0568304323, 0.0506217852, -0.1743455529, 0.0890677795, 0.0753297731, -0.0313576758, -0.0455590449, 0.0434940569, -0.0362964235, 0.1101846769, 0.1165241003, -0.1243849248, 0.0631550848, 0.0696183518, 0.0374001116, -0.0551639646, -0.1820774525, -0.0540406182, -0.0651013181, 0.0101806931, 0.0119007174, 0.0845050663, -0.0834873766, -0.1216517016, 0.0083601782, -0.0671212971, -0.1003482416, -0.0461095273, -0.0532347336, -0.0441157520, -0.1194120795, -0.0045871399, -0.0061022267, 0.0152978897, -0.0248307791, -0.0180167444, -0.1501943469, 0.0120447092, -0.0118981786, -0.0018765709, 0.0827176869, 0.0377304405, -0.0392612219, -0.0595072806, -0.0512333848, 0.0005046800, -0.0540059209, 0.0731178522, 0.0182012916, -0.0546070188, 0.0788475052, -0.0525506921, 0.1209071800, 0.0852330551, 0.0418829992, 0.0255325101, -0.0096208584, 0.0456583500, -0.0488951281, 0.0765190199, 0.0393079594, 0.1129560471, -0.0161911808, 0.1855697632, -0.0120308334, -0.0754990503, -0.0791215450, 0.0202446114, 0.0072984374, -0.1301120669, -0.0857642591, -0.0539682582, 0.0078091915, 0.0326357894, -0.0091298586, 0.0598328747, 0.0284812953, -0.0714377239, 0.0375575498, 0.0606013164, 0.0993390828, -0.0724796578, 0.0672173575, -0.0021405853, 0.0040566404, 0.2115008831, 0.1048818231, -0.0678803697, 0.0303902011, -0.0398028977, -0.0013464128, 0.0050403797, -0.0808995515, 0.0283436533, 0.0230726041, -0.0328216441, -0.0561009198, 0.0426954478, -0.0441894606, 0.0199589003, 0.0732469708, 0.0122171342, 0.0958958119, 0.0176692493, -0.0231481623, -0.0867934152, -0.0001784724, -0.1340812594, -0.0261707064, -0.0838385969, -0.0017417904, -0.0505312718, 0.0256042220, -0.1965552568, 0.0083462559, 0.0644153953, 0.0177124832, -0.0058366414, -0.0191595647, 0.0152257504, 0.0529557057, -0.0769938976, -0.1190839857, 0.0326291993, -0.1781456470, 0.1205587387, 0.1243001074, -0.0657452866, 0.0949355662, -0.1643273830, -0.0549052432, -0.0001993769, 0.0498019755, 0.0264054108, -0.0053365952, -0.0369938239, 0.0277431626, -0.1599486470, -0.1062417701, -0.0446796492, -0.0439614542, 0.0413804725, 0.0182997566, -0.0479323342, 0.0515637770, -0.0064652101, -0.0125897583, 0.0988282040, 0.0058423486, -0.0669463426, -0.0948153734, -0.0233532581, 0.0522994027, 0.0509980619, 0.0479710475, 0.0621745586, 0.0886300951, 0.0924283415, 0.0804935992, -0.1328494400, 0.0252325106, 0.0384252407, -0.0990375653, 0.0839166194, 0.0642009750, 0.0010919743, -0.0560944900, 0.0044796057, -0.0140049262, 0.0868114606, -0.1008338705, 0.0232867356, -0.0324565433, -0.1434710473, 0.0652872920, 0.0563161001, 0.1466679722, -0.0196537487, 0.0192004554, -0.1128713936, 0.1010389924, 0.0122574782, -0.1425574869, -0.0025530532, 0.0992102996, -0.0982534811, 0.0826103315, -0.0001833663, 0.0019253144, 0.0167172384, -0.0869573131, 0.0534510463, 0.0201208685, -0.1012010202, 0.0189127792, 0.0550140366, 0.0040796059, -0.0056847883, -0.1129242927, 0.0138528720, 0.0923117325, -0.0280547775, 0.0296445359, 0.1244063675, -0.0904292539, 0.0213651564, 0.0607825741, 0.0220829025, 0.0658780262, -0.0220899209, 0.0548704043, 0.0657904968, 0.0269052908, 0.0109374300, 0.0820641443, 0.0079185627, -0.0703544542, -0.0257061217, 0.1175307930, -0.0722163469, -0.0188553669, 0.0324847922, -0.0369739607, -0.0894563496, -0.0458278209, -0.0681658909, -0.0012117028, 0.0405539423, 0.0287039671, 0.0665146410, -0.0412479155, 0.1310521364, 0.0195260756, 0.0008950667, -0.0142060872, 0.0862250105, 0.0184757821, 0.0596791469, -0.0283807274, -0.0633621141, -0.0201118719, 0.0297373235, 0.0158372261, -0.0722944438, -0.0335381217, -0.0597554967, 0.0561695918, 0.0032047925, -0.0281840693, 0.0399198346, -0.0370206572, -0.0419791192, 0.0688958988, 0.0157615524, 0.0765403360, -0.0045387540, -0.0863782540, -0.0835612342, 0.0073104142, 0.0713099316, 0.0521458052, -0.0350877531, 0.0718660057, 0.0989147052, 0.0110373432, 0.0099335900, -0.1036916524, -0.0447863489, 0.0746365935, 0.0417142995, 0.0217763446, -0.0713160709, 0.0984597951, 0.0029237294, 0.0995401070, 0.1204256564, -0.1259031296, -0.1428633481, 0.0167423040, -0.0845275819, 0.1107767075, -0.1875654012, -0.0732877925, -0.0786597952, -0.0440702513, -0.0398622639, 0.1052227840, -0.0241725892, -0.0201302338, -0.0492340848, -0.1481228024, 0.0208468735, 0.0090276450, 0.0019582761, 0.0108497189, -0.0301166438, 0.0173301566, 0.0393813439, 0.0041478784, 0.0790488720, -0.0388456807, 0.0155407451, 0.1230899021, 0.0253665149, -0.1333909482, 0.0432328731, -0.0104723806, 0.1200693995, -0.0224725269, 0.0768706352, -0.0359095745, -0.2085827738, 0.0458088256, -0.0759603903, 0.0926249251, 0.0033525366, -0.0467671901, 0.0683644786, 0.0013007947, -0.0095055522, -0.0007254944, 0.0191208664, -0.1277292371, -0.0038735156, -0.0769022256, 0.0390488952, 0.0205543749, -0.0179258864, -0.1416744292, 0.0487951450, -0.1050756052, -0.0051206518, 0.0191555303, 0.1543485969, -0.0655101091, 0.1155791953, 0.0561234504, 0.1408531666, 0.1537742764, 0.1294013113, -0.0403222702, 0.0641003251, -0.0713602602, 0.0343545079, 0.1117611676, -0.1056285501, 0.1337642968, -0.0034815213, -0.0938518941, 0.0348892435, 0.0039829239, 0.1049133763, -0.0170706511, -0.0901172534, 0.0043577203, 0.0578754507, -0.0461455174, 0.0234986451, 0.0199543368, 0.0008182041, -0.0029792187, -0.0622342676, -0.0768939704, -0.0187868252, 0.0910062343, -0.1399957389, -0.0745256022, -0.0757624060, -0.0878938958, -0.0814478695, 0.0157612469, 0.0823200643, -0.0050162007, -0.0322889984, 0.0562641174, 0.0368007682, 0.0959549248, -0.1373624802, 0.0853459984, 0.1241795421, -0.0973930582, -0.0330876932, 0.0296413843, -0.0020921384, -0.0124545665, -0.0694346875, -0.0059938366, -0.0451391302, 0.0008334952, -0.0063731954, -0.0302918870, 0.1743067354, 0.0247514900, 0.0353983641, -0.0298396964, 0.0919893682, -0.0074350508, -0.1648639590, 0.0804737657, 0.1114801243, -0.0846021920, 0.0836586878, 0.1045209169, 0.0245344639, -0.0554986969, -0.0334143452, -0.1341270804, -0.0981854051, -0.1336627752, 0.0201113783, -0.1158648729, 0.0031822687, 0.1084637791, 0.0577190258, 0.0217968654, -0.0352365263, -0.0427509770, 0.0430164635, -0.0354953781, 0.0749365091, -0.0834117904, -0.0373348743, -0.1228440776, 0.1129848361, 0.0115169622, 0.0938836113, -0.1045344621, 0.0113778971, -0.0884156227, 0.0134831583, -0.0089909825, -0.0670067742, 0.1241472065, 0.0991343185, -0.1132897809, 0.0980220139, -0.0777724013, 0.1399825066, 0.0220782273, 0.0391632989, 0.0355535969, -0.0782821849, -0.0319027267, -0.0095940549, 0.0559813306, 0.1259761155, -0.0229232218, -0.0667245686, -0.0391716622, 0.0288058743, 0.0263821390, -0.0687249750, 0.0325328261, 0.0879650488, 0.0061234958, -0.0078050373, -0.1018157229, 0.0919419900, 0.1356835812, 0.0678764507, -0.0436195210, -0.0136570744, -0.1123366281, -0.0713989586, -0.0303194262, 0.0616711080, -0.0257114749, -0.0997850373, 0.0355732590, -0.0327300504, 0.1241068095, -0.0852144957, -0.0350851268, 0.0194358304, 0.0743129104, -0.2089477479, 0.1234240755, 0.0029712408, 0.0056001157, 0.0921628028, 0.1457796544, -0.1253920346, -0.0099604586, 0.1071320176, 0.0302584190, -0.0175980721, -0.0962284505, 0.0214090329, -0.0746866018, -0.0040308633, -0.0361004174, 0.0489553511, -0.0199876688, -0.0078692259, 0.0674296692, -0.0144872433, -0.0284202117, -0.0723839998, -0.1229017898, -0.0915835649, -0.0134068141, -0.0332684480, 0.0435747206, 0.1071857736, 0.0389730856, -0.0819988325, -0.0028936821, -0.0329575054, -0.1333833635, -0.0577025004, -0.0756645426, 0.0521198437, -0.0836260244, 0.0180807430, 0.0412176661, 0.0073479055, 0.1024487987, 0.0523994155, 0.0342894010, 0.1130145192, -0.0357480086, -0.0624297485, -0.0026116308, 0.0220122579, 0.0496826693, -0.0966709405, -0.0197693184, -0.0366761349, -0.0099947024, -0.0054489714, -0.0260180794, -0.0340571105, -0.0100384010, -0.1015606001, -0.1065113023, 0.0393796340, -0.0729925111, 0.0319003277, -0.0093284473, -0.1107335985, -0.0133153098, -0.0484969728, -0.0832724422, 0.1469088048, 0.0251356661, 0.0339550190, -0.0491392016, 0.1278006285, -0.0423438922, 0.0744644478, 0.0337022096, 0.0122395875, 0.0682813674, 0.0100646215, -0.0531227067, -0.0131348278, 0.1228115782, 0.0046872441, -0.0193150472, 0.0823328197, -0.0146678239, -0.0973974243, 0.0362840779, -0.0539320596, -0.0057114884, -0.0381998383, 0.0187693499, 0.0154579040, 0.0031942527, -0.0982500017, 0.0151324077, 0.0619913153, -0.0567962453, 0.0004894228, 0.0604894720, 0.1541069001, 0.0672708750, -0.0637833476, 0.0719406307, -0.0714474469, 0.0887397230, 0.1565830708, 0.0657468066, -0.0563408844, 0.0418910719, 0.0765199363, 0.0194944758, -0.0001150871, 0.0568923578, -0.0361098535, 0.1677769125, 0.0835197121, 0.0361249000, 0.0333053768, -0.0120336432, -0.0482893810, 0.0426565930, -0.1112068892, 0.0473917015, 0.1444341689, 0.0507252887, -0.0005069701, -0.0538057238, -0.0978758261, 0.0934288278, 0.0007777438, -0.0161653776, -0.0021078754, -0.0864420831, 0.0676453933, -0.0865873024, 0.0091045443, -0.0652002096, 0.0130697386, -0.0888258293, -0.0027443897, 0.0359986648, -0.0886473954, 0.0937567353, 0.0351335071, 0.0513026491, -0.0422531441, 0.0215881877, -0.0431977585, -0.0644130111, -0.0991715714, -0.0265769660, 0.0381095037, -0.0998394340, 0.0403364897, -0.0744961724, 0.0435325466, 0.0257475656, 0.0391734168, 0.0049008285, 0.0012694580, -0.0165508017, -0.0614834204, 0.0206601825, 0.0282868091, 0.0481331050, 0.0263502076, -0.0216230229, -0.0175970159, 0.2307929397, -0.1208613664, 0.0549207963, 0.1074905097, 0.0732256919, 0.0706876069, 0.0479747467, -0.0652086660, 0.0311917756, 0.0426908880, -0.1259274781, -0.0197015852, 0.0643131956, 0.0143538760, -0.0942078754, -0.0498521924, -0.0511250943, 0.1110736430, 0.0621692725, -0.1307662725, 0.0641249120, -0.0617759116, 0.0110761346, -0.0597673990, -0.0901696011, -0.0331757627, 0.0270186942, 0.1019259021, -0.0598190129, -0.0699020550, 0.0266885981, 0.0813549161, -0.0990677476, 0.0355436727, 0.0283830725, 0.0956481025, -0.0835543871, 0.0661974549, 0.0684589297, -0.0120940469, 0.0467987284, -0.0245989040, 0.0324711464, 0.1952213645, 0.0521705523, -0.0216788035, 0.0272201691, -0.0403609313, -0.0113991397, 0.0262990687, -0.0097659910, 0.0121536683, 0.1244117096, -0.0529105291, 0.0484810174, 0.0264868736, 0.0722128525, -0.0328487344, 0.0785126612, -0.0722308457, -0.0021979664, 0.0777218640, 0.1214043200, -0.0820590928, 0.0164938383, 0.0855092555, 0.0710943118, -0.0539855547, 0.1091244519, 0.0151913296, 0.1127839312, 0.0076066768, -0.0631164610, -0.0288286339, -0.0020783693, 0.0288859438, 0.1813173890, -0.0965879783, -0.1088248044, -0.0111094844, 0.1027610749, 0.0535630248, 0.0464278869, 0.0799474567, 0.0716068819, 0.0297205281, 0.0199262872, 0.0090922015, -0.2128842324, 0.0925528109, -0.0200624242, 0.0139423301, -0.0190521069, -0.0201343317, 0.0006622143, 0.0242641326, 0.1008163393, -0.1094383299, 0.0390951484, 0.1289830953, -0.0432241112, -0.0684624091, 0.0437245965, -0.0587337054, -0.0071422481, -0.0432722420, -0.0893758759, 0.1131086126, -0.0217670333, -0.1086523086, -0.0279861167, -0.1018581614, 0.0377855338, 0.0024387373, -0.1179958656, 0.0526121892, 0.0152985686, 0.0375457108, 0.1094945297, -0.0328933634, 0.0389426500, 0.0269017275, -0.0435458645, -0.0185014494, 0.0748334229, 0.0558664091, -0.2526064515, -0.0539139099, 0.0485008284, -0.0207204036, -0.0318197981, -0.0747017190, 0.0046253446, 0.1099830866, -0.1608038247, 0.0392321907, -0.0630537570, 0.0976253152, -0.0058100731, 0.0338409431, -0.0353043899, -0.0019482879, 0.0374185778, 0.0428703353, 0.0081317658, -0.0659079924, 0.0147797028, 0.1349818259, 0.0733840540, -0.0063483194, 0.0435811132, 0.0244258214, -0.0733857378, -0.0015896261, -0.0420441888, -0.0817658231, -0.0662494376, -0.0401048437, -0.0582299605, -0.1074083596, 0.0504362434, 0.0654816628, -0.0091485251, -0.0507981814, -0.0389444791, 0.1119504496, -0.1457255781, 0.0238079540, -0.0139644425, 0.0512441620, -0.0139311943, 0.1707122922, -0.2106665671, -0.0227571353, -0.0860246122, -0.0176444333, -0.0994499773, -0.0006660044, -0.0137318950, -0.0000720696, 0.0427053906, 0.1571761221, 0.0091107683, 0.0064524435, -0.0888262987, -0.0837987289, -0.0115731461, 0.0488478392, 0.0207630005, 0.1076875702, -0.1136011854, 0.0851371512, 0.1001261845, 0.0549286343, -0.1321953237, -0.0125618298, -0.0817732289, -0.0159925185, 0.1202408001, 0.0410715677, 0.0009006633, 0.0184265450, 0.0817060098, 0.0979102254, -0.0052603344, 0.0334522352, -0.0339231268, -0.0970750377, 0.0081214011, -0.1004197299, 0.1124240607, 0.0520312116, -0.0381493494, 0.0644779727, -0.0545693524, 0.0580531321, 0.0608366802, 0.0147648752, 0.0779510066, -0.0729637742, -0.0378184915, -0.0661999136, 0.0264619049, -0.1323180944, -0.0556594767, 0.0546852835, -0.0792823061, 0.0957362577, -0.0310418475, 0.0156719591, 0.0322330259, 0.0759916082, 0.0350870751, 0.0440786369, -0.0208822470, -0.0419592150, -0.0409995168, 0.0934425294, -0.0989158154, 0.0495318510, -0.0537159406, 0.0797590837, 0.0589941591, -0.0235242937, 0.0588304885, 0.0877247974, 0.1240814105, 0.0689787865, -0.0135541195, 0.0126317414, 0.0912220478, 0.1530324966, -0.0754274875, 0.0281208996, -0.0083789146, 0.0568819940, 0.0815254301, 0.0217952207, -0.0258589555, -0.0629254803, -0.0435465164, 0.0092416154, 0.0965708122, -0.0925097167, -0.0564126410, 0.0530779473, -0.0502760597, -0.0199616440, -0.0854568332, -0.0988398865, 0.1059257388, -0.0568050779, -0.0307420418, -0.0712116137, -0.0692738444, -0.0048218956, -0.0282204077, 0.0149801960, -0.0575163849, -0.0057274560, -0.0898332372, -0.0162939895, -0.0294920634, 0.0528528765, -0.0443985648, -0.0060941922, -0.1169608086, 0.0718161166, -0.0579339378, -0.0321768560, -0.0104671838, 0.0217349287, 0.0295326468, 0.0330018364, 0.0611767396, 0.0426192284, -0.1053169295, -0.0482222773, 0.0268020481, 0.1195193529, 0.0257324204, 0.0363926291, 0.0121924654, -0.1813787073, 0.0102897463, -0.1194061115, -0.0756844133, -0.1014511138, -0.0032139439, 0.0845139995, 0.0988105536, 0.2089951336, 0.0724923760, -0.0604685917, -0.0591684990, -0.0424238816, -0.0422152095, -0.2018618137, 0.0096945176, 0.0147084985, -0.0307158232, 0.0049419943, -0.0203215554, 0.0382083133, 0.0150554953, -0.1177155823, 0.1212152764, -0.0344918668, -0.1347389370, -0.0494123101, 0.0772507861, 0.0844365731, 0.0451055691, 0.1518907994, -0.1119841859, -0.0090146884, 0.1114934087, -0.0314192250, -0.0234305710, -0.1144966632, -0.0220812447, -0.2178253233, 0.0442649759, 0.0193571113, 0.0635681003, -0.1211703494, 0.0684850290, -0.0161072165, 0.1039430872, -0.0364529639, -0.0370546542, 0.0560086034, 0.0878449753, -0.1254948527, 0.1375395060, -0.0015712264, -0.0597065315, 0.0515389629, -0.0234409552, -0.2265088409, -0.0714872330, -0.0741194636, 0.0601794571, 0.0209593177, 0.0136154257, -0.0722038150, -0.0852980390, -0.0624095611, -0.0259316266, -0.0741332993, -0.0000607273, 0.0010276147, -0.0915070698, -0.0432275347, 0.0749263316, -0.0890618414, 0.0904532894, -0.0423668064, -0.0603618361, -0.1131295264, -0.1939671338, -0.0699822232, 0.0313838571, 0.0465131849, -0.0110376691, -0.0424465723, -0.0893996134, 0.0754373223, -0.0667596459, -0.0891698375, -0.0379979275, -0.1476521343, 0.0056184852, 0.0102617880, -0.0323393121, -0.0014178028, 0.0125460243, 0.0414879881, 0.0237193424, 0.0243198909, -0.0554273352, -0.0121294763, -0.0646366552, 0.0479305722, -0.0418761931, -0.0843080431, -0.0359566808, -0.0590245053, -0.0757343769, 0.0783175752, 0.0346477963, 0.0093323588, 0.0821387023, 0.0484985299, 0.0012493228, 0.0383235477, 0.0084285932, -0.0609849915, 0.0201252382, 0.0229156613, -0.1120212972, 0.0119610429, 0.0257300027, -0.1080159992, 0.0846588463, -0.1405854523, -0.0869759321, -0.0497487225, -0.0080345189, -0.0325815156, -0.1152038798, 0.1312989742, -0.0140637495, -0.1607807279, -0.0373998992, 0.0453487001, 0.0411964543, -0.0152920485, 0.0164827295, 0.0509297848, 0.0403039977, 0.0104893912, -0.0480059572, -0.0356929563, -0.0069662589, 0.1126291603, -0.0587084629, -0.0398737714, -0.0612512492, -0.0006205289, 0.0422423258, -0.1115815341, 0.0189369973, -0.0113181388, -0.0068430454, 0.0240294822, 0.0447461978, -0.0629249960, -0.0061552040, -0.0004236438, -0.0025221466, 0.0397721492, 0.0182845443, -0.0264050495, -0.0265785921, -0.2240475267, -0.0133186644, 0.0555829294, -0.1011241227, -0.0318846479, -0.0305618998, 0.0276954584, -0.0870997310, 0.0495760627, -0.0898183435, 0.0277103819, 0.0090583777, 0.0265116598, -0.0764005333, 0.0305501241, -0.0787473544, 0.0170160253, 0.0935898423, -0.0075047826, 0.0251354370, -0.1127883866, -0.0605621897, 0.0021600199, -0.1702737808, 0.0005547368, 0.0476999059, 0.0110961599, 0.0073583592, -0.0927973315, -0.0386950374, -0.0878954083, -0.0582307279, -0.0222036485, 0.0048836027, -0.0436497256, 0.0589428879, 0.0147273066, 0.0766335353, -0.0482002310, -0.1389953941, 0.0614725053, 0.0027104374, 0.0209378526, 0.0366006196, -0.0354237705, -0.1078720838, -0.0704644099, -0.1043881550, -0.0995924547, 0.0683320388, 0.0735504776, 0.0968001187, -0.0870774388, 0.0327258892, -0.0998515636, -0.0645408556, 0.1528070867, 0.0503141843, -0.0185817443, 0.0171861053, -0.0262792725, -0.0295426995, 0.1045304537, 0.1703851372, -0.0225853696, 0.0122120949, 0.0268648900, -0.1724901199, -0.0793109685, 0.0456868485, 0.0174584556, 0.0299149621, 0.1053870246, 0.0855525434, 0.0911624804, 0.0431300364, -0.0021528308, -0.0089589451, 0.0137865590, 0.0238363799, 0.0292057656, -0.0876471996, 0.1138534546, -0.0734351426, -0.0096218102, -0.1018018648, -0.1082994193, -0.0237129238, -0.0097772144, -0.1512105167, -0.0410463475, -0.0036809710, -0.0444593243, -0.0511894189, 0.1688088179, -0.0888663605, -0.0517669544, -0.0590134449, 0.0251345672, -0.0211193282, 0.0034147555, 0.0477294289, -0.0249544438, -0.0498696715, 0.0893858075, 0.0930826142, 0.0422093347, 0.0311637968, 0.0454077236, 0.1098711416, -0.1548310667, 0.0596556328, -0.0469993763, 0.0233388338, 0.1089336127, 0.0376324691, 0.0552153140, -0.1701352447, 0.0704453811, -0.0230491441, 0.1517060101, -0.0564565100, 0.0863225162, -0.1330891252, -0.1274514943, 0.0449024253, -0.0067308052, -0.0277626570, -0.0019955512, 0.0520614386, 0.0217389818, -0.0744729117, -0.1535131186, 0.0309537724, -0.1026223972, 0.0456938781, -0.0612356886, -0.0496265441, 0.0229141749, -0.0012082976, -0.0064766179, -0.0072403383, -0.0125458250, -0.0947600901, 0.0410268046, 0.0602643192, -0.0342190489, 0.0528109558, 0.0647140741, -0.0263154581, -0.0687570125, 0.0346732400, 0.0322939605, -0.0121947452, -0.0922219008, 0.1640389711, 0.0361943655, 0.0550560504, 0.0928183496, 0.1499976963, 0.0675225258, -0.0689321980, -0.0151245231, 0.0346306562, -0.0586702414, -0.0646388531, -0.0031044325, 0.0466545857, 0.0612149239, -0.0431705602, 0.1138753295, -0.0869511142, -0.0710989609, 0.1157177836, 0.0562113337, 0.0340375230, -0.0055979043, 0.0103563191, 0.0415919945, 0.0899034962, -0.0180464387, -0.0201288499, -0.1334460974, -0.0636412799, 0.1266311109, -0.0502884388, -0.0175934378, 0.0082872044, -0.0154161844, 0.0900810137, -0.0214007143, 0.0842261538, -0.0081430310, 0.0147373900, -0.0902106985, 0.0118782502, -0.0498261079, 0.0633175224, 0.1037033796, 0.0114326123, -0.0017297423, 0.0348368175, -0.0166058335, -0.0480879098, 0.0002678204, 0.0285990778, -0.0013920886, -0.0927382037, 0.0926047489, -0.0065514077, -0.0136377038, 0.0311758574, 0.0814405680, 0.1284216046, -0.0006873074, -0.0104443626, 0.0411230549, 0.0991000608, 0.1449407637, -0.0840949267, 0.0880258083, -0.0463784114, 0.0352724493, 0.0495622717, -0.0229124203, 0.0757875666, -0.0457291156, 0.0103900107, -0.0617485866, 0.0707723647, -0.0864948928, -0.0579455048, -0.0262247324, -0.1229778752, -0.1004523635, 0.0232305564, 0.1365225613, 0.1201143116, 0.0384049341, -0.0092215752, 0.0368132219, -0.0492061824, -0.0427179858, 0.0276561324, -0.0214522425, 0.0991898999, -0.0082957596, -0.1710324138, 0.1371603608, 0.0673936605, 0.0182761569, 0.0824172795, 0.0717915893, -0.0552678481, -0.0146167167, 0.1094188988, 0.0011556651, 0.1004369259, -0.1034938172, -0.1162581593, -0.0117818881, -0.0443456098, -0.0192954782, 0.1575580388, 0.0688455477, -0.0912302136, -0.0238360576, 0.1113396287, 0.0384040214, -0.0246807225, 0.0470047854, -0.0771863312, 0.0572663248, -0.0627240390, 0.1048648730, 0.0799013376, 0.0341305621, -0.0215995107, 0.0129460748, 0.0027825932, 0.0123915467, 0.0095480355, -0.0095824422, -0.0042555798, 0.0339351110, -0.0923253670, 0.0563973561, 0.0404747277, 0.0913625732, 0.0625243112, -0.0949894413, -0.0174584985, -0.0301075242, 0.0525839552, 0.1644544899, 0.0157075189, -0.0004091911, -0.0502669588, 0.0269205403, -0.0589307584, -0.0340386853, -0.0663456470, 0.1012676284, 0.0445481241, -0.1098240092, -0.0238960218, -0.0359976143, -0.0352943838, 0.0820165426, 0.0383449420, 0.1655310392, 0.0410194695, -0.0202708375, 0.0734146759, 0.0236957315, 0.0464240573, 0.0854035839, -0.0525237434, 0.0531713292, -0.0484427847, -0.0333331674, -0.0748951510, 0.1137188077, -0.0098271165, -0.0498246811, -0.0182850268, 0.0532465763, 0.0257807206, 0.0172026604, 0.1029808000, -0.0078954995, 0.0877854750, -0.1457223296, 0.0368383713, -0.0022433789, -0.0035291887, 0.2035470158, -0.0149349049, 0.0064783250, 0.0737125650, -0.0913399905, 0.1112837046, 0.0953033566, 0.1459445953, 0.2015513480, -0.0652579665, -0.0686496273, 0.0444103740, 0.0156011209, -0.0076287827, 0.0815536380, -0.0697717443, -0.0880148858, -0.1045104489, -0.0493384823, 0.0355033763, 0.0478850305, -0.0785128698, 0.0825538114, 0.0630252138, -0.0013733733, 0.0612136684, -0.0606535748, 0.0629830435, -0.0659785569, 0.0460442342, -0.0497659519, -0.0998535454, 0.0846108645, -0.0330288261, -0.0262301583, 0.0125093367, -0.0169907883, 0.0563111454, 0.1227935776, 0.0149342753, 0.0272334609, -0.0427486412, 0.0156504419, -0.0046054255, 0.0206038021, -0.0289986786, 0.0304546952, 0.1449078470, 0.0342066698, -0.0154804699, 0.0695849285, -0.1232608482, 0.0614379309, -0.0804518759, 0.0622083247, -0.0255500171, 0.0075830608, -0.0213017911, -0.1981233209, -0.0475803614, -0.1369665712, -0.0821275264, 0.1068766341, 0.0265058074, -0.0219766740, 0.0008751757, -0.0674754307, 0.0626833215, -0.1604877114, 0.0531941168, 0.0473485179, -0.0383908786, 0.0436354317, 0.0096171591, -0.0036825666, -0.0678154230, 0.0242871381, 0.0463474393, 0.0617495812, 0.0683505312, 0.0087583344, -0.0030035318, 0.0058714030, -0.0103252782, 0.0746254697, 0.0005265884, 0.0529933199, -0.0754523948, 0.0026230589, 0.1549789608, -0.1696129590, 0.0084333299, -0.0461788476, 0.1710573733, 0.1273437887, 0.0187253132, 0.0210422352, 0.0274402853, -0.1008844003, 0.0341380648, 0.0565347560, -0.0911059454, -0.0202882364, 0.1000541374, 0.0051441616, -0.0319221616, -0.0045115277, 0.0152969360, 0.0182875302, -0.0290868767, 0.0341278464, -0.0191970728, 0.0339759253, -0.1015352830, -0.0549183935, 0.0295326021, -0.0302736089, -0.1686634570, 0.0071838330, 0.0125094075, -0.0365371108, 0.0058878064, 0.0747889131, 0.0801168680, 0.0457875319, 0.0216046236, 0.1170890331, 0.0325498804, -0.0051519154, -0.1559579819, -0.0802885666, -0.0757979006, -0.0199129581, -0.0348486118, -0.0585847721, -0.0895314589, -0.0217996482, 0.1066175997, 0.0262963772, -0.2024522722, 0.0046890122, 0.0628774911, -0.0275998674, 0.0317835957, -0.1253077537, 0.0551206172, -0.0048772567, -0.0509631746, 0.0880483687, 0.0417934619, -0.0997079760, 0.0098348297, 0.1849293560, -0.1297935247, 0.0251157582, -0.1020650193, 0.0729054362, 0.0110197635, 0.1120955423, 0.0080067329, 0.0167094544, -0.0069084940, 0.0131863318, 0.0514205769, -0.0121467225, 0.0523929782, -0.0230683554, 0.0713391230, 0.0803398862, 0.0472444482, -0.0837971717, 0.0097058872, 0.0453354605, -0.1422526687, -0.0841018185, 0.0210965518, -0.0398802832, -0.0520754978, -0.0156194009, -0.0624544844, 0.0282008592, 0.0204788614, 0.0159731861, 0.0642609298, -0.0131679093, 0.0298591517, 0.0554371104, 0.0643990040, 0.0629386231, -0.0925467610, 0.0082125105, -0.0298834629, 0.0586564653, 0.0927952826, 0.0571209453, 0.1288108081, 0.1239811108, -0.1175683513, -0.1088905036, 0.0417126603, 0.0283923876, -0.1262795925, -0.1436490715, -0.1147034243, 0.1116787195, -0.0034542617, 0.0689085796, 0.0122864125, 0.1143907607, -0.0552522428, -0.0377289765, -0.0612967834, 0.0158122610, 0.0450881384, -0.0320887789, 0.0928077474, 0.0160920825, -0.0578193329, -0.1058491617, 0.0271141194, 0.0103778690, -0.0336365104, 0.0516516194, -0.0230552871, 0.0045092935, -0.0109446337, 0.1515754014, 0.0064385864, -0.0008062741, 0.0480154790, 0.0393955074, -0.0093902843, -0.0509707294, -0.1199013963, -0.0076640788, 0.1138053089, -0.0065583908, 0.0270214248, 0.0788313672, -0.0280380305, 0.1042592227, -0.0311637092, -0.0699118003, 0.0340843871, 0.0130764609, 0.0534731150, 0.0834042057, -0.0359122492, 0.0470696837, 0.0665515736, 0.0373951830, 0.1313271970, 0.0944229290, 0.1518461108, 0.0918853208, 0.0475360043, 0.0378459729, 0.1222723722, -0.0640135780, 0.0263175089, -0.0142690083, 0.1115412563, 0.0168438312, 0.0977485329, 0.0277896002, 0.0377519280, -0.0325553864, 0.0519291013, 0.0229344033, 0.0684440583, -0.0347872749, -0.0103829270, 0.0505578294, -0.1149191856, -0.0367046669, 0.0571372658, -0.0053885472, -0.0736560002, 0.0956522748, -0.0343791023, 0.1945971996, -0.1542808563, -0.0219422374, -0.0452279076, -0.1316856444, -0.0754027069, 0.0197833516, 0.0339121558, 0.1346170008, -0.0245622694, -0.0672754869, -0.1066334695, 0.1241742894, -0.0694092140, -0.0012668849, -0.0112723028, -0.0065716878, 0.0351333208, -0.0567901991, -0.0311056636, 0.0412210263, -0.0786602050, 0.0034415994, -0.0536889881, 0.0579779521, -0.0478443019, 0.0086027188, -0.0289271940, -0.0784337297, 0.0034890193, 0.0733001083, -0.0489334762, 0.0708260238, 0.0339577906, -0.0714941323, 0.0343776457, 0.0725176632, -0.1169868559, 0.1286910623, 0.0877193883, -0.0787288025, 0.0754741654, 0.0910773948, -0.0345821567, 0.0763094425, -0.0404802561, -0.0904389098, 0.0351760760, 0.0650409088, 0.0548383147, 0.0464974120, -0.1259353161, 0.0312144496, -0.0520775691, 0.0239099562, -0.0519362055, 0.0346699357, -0.0564244911, -0.1145818979, -0.0294254925, 0.0026964583, -0.0464681797, 0.0583484471, -0.1803444922, -0.0767311826, -0.0533551164, -0.0336262435, -0.0613039993, 0.0115034934, 0.0517387092, -0.0928556845, 0.1063940749, -0.0796213970, 0.0394379236, 0.0148162059, 0.0518548526, 0.0817768350, -0.0721542016, 0.0076541207, -0.0608451441, 0.0894822553, 0.0032965590, -0.0678928941, -0.0224633664, 0.1083627567, -0.0105687501, -0.0341288261, -0.0731947720, 0.0361750498, -0.0931646451, -0.1155919954, 0.0010330527, 0.0547555685, -0.0578239746, 0.0643456578, -0.0598504394, 0.1157422289, -0.0461808369, -0.1443638355, -0.0400177017, 0.0055233818, -0.0425726175, 0.0588802099, -0.0356724970, -0.0316003673, 0.0509249903, 0.0543823242, 0.0075434600, -0.1262297183, -0.1140724570, 0.0492545143, 0.0042243330, 0.0052974867, 0.0091059217, -0.0134607647, 0.1400310546, -0.0943924934, -0.0234854873, -0.0812480524, 0.1568475515, 0.1386920810, 0.1891569942, 0.0571599454, -0.0319410712, 0.0632628947, 0.0782646388, 0.0671526864, 0.0575014986, 0.1116635501, -0.0106196413, -0.0055495091, 0.0250628442, 0.0579403602, -0.0148192681, -0.1560238898, 0.0467393212, -0.0086620906, 0.0824830458, 0.0378727503, -0.0020438922, -0.0200557560, -0.0742338970, 0.0762555152, -0.1764841974, -0.1521011740, -0.0301287342, -0.0514874235, -0.0541621633, 0.0633709505, 0.0012006124, 0.1086262539, -0.0627695471, 0.1478940099, -0.0152258724, -0.0895473585, -0.0082147429, 0.1567232013, 0.0364619195, 0.0002158084, -0.0005823199, -0.0303794164, 0.1372056752, -0.0026409165, -0.1911712587, 0.0357858539, -0.0590861030, 0.0223900452, 0.0397371091, 0.0019576724, -0.1433317661, 0.0060494868, 0.0884498432, -0.1393233836, -0.0085454630, 0.0609838925, 0.1091639400, -0.0539848581, -0.0233751815, -0.0028775872, -0.0044262661, -0.0203162469, 0.0392122082, 0.0333079919, -0.0032905911, -0.0526484661, 0.0450909957, -0.0271987319, 0.0894064382, -0.0636726990, -0.0328256823, 0.0571920425, 0.0018360913, -0.0529196076, -0.0032359685, -0.0100636315, 0.0802846923, -0.0346919708, 0.0457908213, -0.1654973179, -0.1009992734, -0.0223262440, 0.0156108402, 0.0251700003, -0.0227578208, -0.0003827214, 0.0539603271, 0.0202083178, 0.1071417704, 0.0281588249, -0.0966010466, -0.0277237650, 0.0058583990, -0.0347765982, -0.0354060605, -0.0406470485, 0.0546571836, -0.0458356701, 0.1335439831, -0.0040865298, -0.0582661554, 0.0620484799, 0.1187156737, 0.1550992578, 0.0000793022, -0.0091056982, -0.1064371690, 0.0429426990, -0.0365822092, -0.0945948809, 0.1033639461, -0.0259912424, -0.0832654834, -0.1679451168, -0.0338259488, -0.0977400243, -0.0951599032, -0.0130484384, 0.0779329464, 0.0352869630, 0.0078926859, 0.1457251608, 0.0232727323, -0.1521065384, 0.0884260535, 0.0914860219, -0.0294219293, -0.0434943400, -0.0513479263, 0.0138465352, 0.0302965324, 0.0417565145, 0.0235605128, 0.0883794427, 0.0436943434, 0.0653750077, -0.0062647839, 0.0413993523, -0.0885070264, 0.0658457503, 0.0233782008, 0.0790372863, 0.0550311580, 0.1316985041, 0.0540830828, -0.1989766806, -0.0964791775, 0.0559408925, 0.0710375831, 0.0760271922, 0.0253119059, -0.0804241523, 0.0198086482, -0.0243285988, -0.0219194405, 0.0941169262, -0.0754301175, 0.1639501303, 0.0330904387, 0.0282284711, 0.0638053194, 0.1200922802, -0.0211843103, -0.0166717488, 0.1066261753, 0.0850953013, 0.0311111119, 0.0007007190, 0.0298207309, -0.0334550738, -0.0108411405, -0.0676442161, -0.0017785970, -0.0686928183, -0.0268221721, -0.0289935749, -0.0560538247, -0.0112524517, 0.0770214945, 0.0887606069, -0.0790672153, -0.0008819500, -0.1372779459, 0.1002570465, 0.0521059409, -0.2220892161, 0.0509131141, -0.0299814343, 0.0549818464, 0.0990149453, 0.0561071038, -0.1144204885, 0.0994093269, -0.0122786108, -0.0401522852, 0.0174260307, -0.0448850952, 0.2353662401, -0.0293047298, -0.0519929640, -0.1261087060, 0.0762865841, 0.0583591796, 0.0325544775, -0.0417824201, 0.0052402439, 0.0165286697, -0.0604198836, -0.0940085873, -0.0432350896, 0.0121506844, 0.0908465758, -0.1149617210, -0.1095777899, 0.0335587896, 0.0861160457, 0.0020600471, -0.0490950681, 0.0319287255, -0.0298836771, 0.1031635627, -0.0028937936, 0.0809012279, -0.0102320602, 0.0379227027, -0.1103437394, -0.1269792020, -0.0826565102, 0.0057334648, -0.0743197426, -0.0585630722, 0.0644637272, -0.0131182978, -0.0652391464, -0.0925882757, 0.1726499647, 0.0669541508, 0.0084458143, 0.0126864612, 0.0390758775, 0.0497738086, 0.0721301809, -0.0135256387, 0.0474779829, 0.0509166270, -0.0448831245, 0.0490166582, 0.0562760569, -0.0869632065, -0.0272548757, 0.0212900899, -0.0331416614, -0.0839280933, -0.0006685751, 0.0161354709, -0.0025270286, -0.0002609888, 0.0425809585, -0.0083320336, 0.0395424403, -0.0865884498, -0.0332451463, -0.0001570142, -0.0855699703, -0.1057150289, 0.0166861676, 0.0468363725, -0.0618479699, -0.0190245528, -0.0082292780, 0.0522558466, 0.0539401025, -0.0256256983, 0.0077751037, -0.1438913941, 0.0677674860, -0.0934378505, 0.0336440355, 0.0031134908, 0.0358514339, -0.0525948070, 0.0164416637, 0.0003645569, -0.0157327745, -0.1167200059, -0.1866569966, -0.0597389229, -0.0581432171, -0.0147144347, -0.0005878108, -0.0164991394, 0.0015047248, 0.0374057591, 0.0246017240, 0.1075095758, 0.0504525453, -0.0030485094, 0.0738983825, 0.0526543222, -0.0312933475, 0.1754449606, 0.0474742353, 0.0695546418, 0.0661331564, 0.1076440364, 0.0846832916, 0.0153119238, 0.0180833172, 0.0830907673, -0.0518818870, 0.0406054333, -0.0602618679, -0.1079626083, -0.0464308187, 0.0037471671, -0.0509632789, 0.0461764894, 0.0477493927, 0.0598798767, -0.0171861406, -0.0524398573, 0.0245076157, 0.0610367619, 0.0915478691, -0.1091123819, -0.0945889801, -0.1043236405, -0.0369467437, 0.0552579351, -0.0531782471, -0.1060957536, -0.0383696035, -0.0500485040, -0.0016724425, 0.0156541504, -0.0002607520, 0.0529274121, 0.0524080805, -0.0987146124, 0.1074085832, -0.1002330557, 0.0877506435, 0.0696943402, -0.1436896622, 0.0315708406, 0.1429874897, 0.0139488243, 0.0780872926, -0.0324700922, 0.0207812749, -0.0143772364, 0.1012768000, -0.1659258455, 0.0451370478, 0.0437579863, -0.0808643624, 0.1089112759, -0.0380404368, 0.0011924648, 0.0230115782, 0.0347862020, -0.0282657593, 0.0324276797, 0.1425921321, 0.0174487233, -0.0157370381, -0.1527904123, -0.0046529076, 0.0551195852, 0.0079592057, 0.0019304547, 0.0594244227, -0.0927891955, -0.0440714136, 0.0653655007, 0.0673943534, 0.0989952534, 0.0773314834, -0.1713217497, 0.0342339501, 0.0124068046, -0.0863848478, -0.0300556645, -0.0856171027, 0.0326561406, 0.0455942638, -0.0032876621, 0.0025668454, 0.0082187289, 0.0912468880, -0.0846093073, 0.0360267423, 0.0489324480, -0.0190880280, 0.0282332618, 0.0249940995, -0.0044242823, -0.1445558071, 0.0142008280, 0.0311507192, 0.0856209993, -0.1948157996, -0.0898461565, 0.1269924492, -0.0090016462, -0.0024610334, 0.0431073084, -0.0245402642, -0.0036721129, 0.0465471484, -0.0437634476, 0.0476942733, -0.0309540089, -0.0340836048, -0.1744510084, -0.0288961008, 0.0101775536, 0.0518510342, 0.0145559777, -0.0304128397, 0.0509005748, 0.0286250021, -0.1021039188, -0.0134260720, -0.1111723483, 0.0070425132, 0.0361116715, -0.0242176559, 0.0615003258, -0.0009228932, -0.0355610363, -0.0968914032, 0.0500224903, 0.0008193917, -0.0146537218, 0.0150733385, -0.1376087666, 0.1076679751, -0.1493007243, 0.0804324076, 0.0257745199, 0.0678316876, -0.0186156351, 0.0857353210, -0.0690752789, -0.1386670023, -0.0955668017, 0.1225833371, -0.0843575820, 0.0332044363, -0.0012819103, -0.0877459198, -0.0733259544, 0.0649499893, 0.0058812900, 0.1308955401, -0.0772014856, 0.0402082838, -0.0658402368, -0.0945785642, 0.0411275700, -0.0665730909, -0.0102640828, 0.0341024660, 0.0206587482, -0.0450799391, -0.0918894261, -0.0030527930, -0.0069313357, -0.0648226216, 0.1564028710, 0.0134575861, 0.0608012155, -0.0747485980, 0.0483048931, -0.0114166681, -0.0255161487, 0.1040212885, 0.0815570131, -0.1754969507, -0.0906047150, 0.0025530027, -0.0171760898, -0.0161674414, -0.1180538833, 0.1271869540, 0.0635126084, 0.0735004395, -0.0093056615, -0.0359586701, 0.0357789397, -0.0317967758, -0.0307469275, -0.1169904619, -0.0171770044, -0.0422780737, -0.0724724233, 0.0753816590, -0.0041382760, -0.0036262758, 0.0383525565, -0.0573744327, 0.0011324743, -0.0799755231, -0.0636748448, 0.0259439945, 0.0384886973, 0.0739414766, -0.0481468439, -0.0284446031, -0.0284643508, -0.0331400782, 0.0225703139, -0.0923206434, 0.0838410631, -0.0734756961, -0.0236515645, 0.0521074086, 0.0112149417, -0.0656443387, -0.0738735422, -0.0452915877, 0.0326714255, 0.0640410930, 0.0689396635, -0.0280787274, -0.0314581878, -0.0256732199, -0.1766967028, -0.1301396489, 0.0882089213, 0.1435195506, -0.0754904747, 0.0862044618, 0.0345287025, 0.0211847890, -0.0893235207, 0.0252080634, -0.0558331385, -0.0115998229, -0.0964622125, -0.0596514530, -0.0943700597, -0.1062353104, 0.0013088830, -0.0108031863, 0.0098372530, -0.0347729623, 0.1430222243, -0.0289361048, 0.0821396858, -0.0168204997, 0.0178125128, 0.0010215729, 0.0563450158, 0.1692444980, 0.0552047640, 0.0703310296, 0.0083475951, -0.0501160324, -0.0418521501, 0.0435769111, -0.1696926206, -0.0644494519, 0.0673077181, -0.1131456196, -0.1359436661, 0.0074868160, -0.0092459964, 0.0520295240, -0.0955632702, -0.0397222787, -0.1546344906, -0.1605688035, 0.0549394265, -0.2070164233, -0.0001251398, 0.0468893796, -0.0596852973, -0.0207693111, 0.0161164477, -0.0443475582, 0.0474356748, -0.0056559159, 0.0750272200, 0.0402991399, 0.0630661994, 0.1086134091, -0.0007536534, 0.0717852190, -0.0734073669, 0.0930182040, -0.0448127426, 0.0189082213, 0.0581886023, 0.1376900673, -0.0072900821, 0.0006647867, 0.0351792574, 0.0125999786, -0.0142684644, 0.0292279013, -0.0619428307, 0.1185648218, 0.0773133487, -0.0421283692, 0.0307646170, 0.0324277878, -0.0353405513, -0.0324554592, -0.0885686427, -0.0189075693, -0.0476551801, -0.0118731223, -0.1128979474, 0.0603067689, 0.1509174258, 0.0498952791, -0.0315270759, -0.1254799217, -0.0148589713, -0.1258475184, -0.0805949643, -0.0308773462, 0.0354901589, -0.0045187944, 0.0252270866, -0.0026498050, -0.0109121995, -0.1105810627, 0.0425060540, -0.0277306028, -0.1255744249, -0.1035967395, 0.0526962839, 0.0847268775, 0.0943575278, -0.0350966193, 0.1049583033, 0.0396138281, -0.0079229604, -0.0267407969, 0.0802419707, 0.0382909663, 0.1258788556, 0.0774149373, 0.0032238495, -0.0218645055, -0.0341170914, 0.1215331480, -0.0064065009, -0.0026194716, 0.0782486722, 0.1691547781, -0.0429785363, -0.1042551994, -0.0367446616, -0.0342052877, 0.0139686679, 0.0913866013, -0.0601638481, -0.0880411938, -0.0130690634, 0.0503720045, -0.0476742350, 0.0095751937, -0.0073342207, 0.0603318624, -0.0893883333, -0.0160053857, 0.0349423736, -0.0310147032, -0.0731283277, -0.0399376191, -0.0968341827, -0.0532981828, -0.0670471415, -0.0318880975, 0.0438835062, 0.0415270403, 0.1524951309, -0.1038066596, 0.0240260344, 0.1496655643, 0.0059500877, 0.1234856099, -0.1136279553, 0.0333437808, 0.0889498889, 0.0834250152, -0.0857162401, -0.1262363344, -0.0943561941, 0.0284955781, -0.0510155559, 0.0781572461, 0.0057683336, -0.1293241680, 0.0554174185, 0.0255066082, 0.0189536829, 0.0041145491, 0.0677401647, 0.1155493930, -0.0946268737, -0.1303495765, 0.0386621431, -0.0734206140, -0.0422328524, -0.0382361375, 0.0369929671, 0.0406741798, 0.0012292004, 0.0575030819, 0.0579234287, -0.0050979489, 0.1256938875, -0.0390178226, 0.0140770646, -0.0052776220, 0.0612443611, -0.0423926003, 0.0227666199, 0.0976399630, -0.0456896834, 0.0701953247, -0.0399763621, 0.0779490843, 0.0171753466, -0.0741556585, -0.0412388779, 0.1137193665, 0.0224438719, -0.0647060499, 0.0755771697, 0.0511480570, 0.0408149958, 0.0203402638, -0.0002543797, 0.0513374209, -0.0789281428, 0.0654178411, -0.1117172986, 0.0401209034, -0.0891336501, 0.0370873474, -0.1216726229, 0.1152124032, 0.0395069085, 0.0857759565, -0.0152349388, 0.0544520691, 0.0524403080, 0.0934434161, 0.1124593318, 0.0421970785, 0.0498723164, 0.0656453222, 0.0130097903, -0.0153140062, -0.0565814488, -0.1666025966, 0.0494737774, 0.0170000922, -0.1510449201, -0.0220706407, 0.0476923250, 0.0744944140, -0.0912762061, 0.0171788502, -0.0374541506, -0.0325596891, 0.1558609456, 0.0851677731, -0.0945084617, 0.0216379818, 0.0064730644, -0.0321056694, 0.0590149797, -0.0051883729, -0.0016872565, 0.0013921490, -0.0471237637, -0.0623384342, 0.0033230954, 0.0005778265, 0.0491871201, -0.1314314157, -0.0461848117, -0.0784034729, 0.1128123328, 0.0364734121, -0.0463239439, -0.0814811438, 0.0063350140, 0.1038252488, -0.0153647382, 0.0436786860, 0.0882866606, 0.0814442784, 0.0204609539, 0.0023107755, -0.0603688098, -0.0645312220, -0.1534118950, -0.0205921717, 0.0510443151, 0.0004184537, 0.0131382914, -0.0812043175, 0.0274681263, 0.1187074780, -0.0577167608, -0.0519535914, 0.0437916368, -0.0310169943, 0.1377718449, 0.0978683978, -0.0208374169, 0.0031478493, 0.0126341050, 0.0053865565, 0.0091656502, 0.0536809191, 0.1016270146, -0.0122914724, -0.0352470018, 0.0599381141, 0.0752729475, -0.0463409089, -0.1796314716, -0.0618203469, -0.0697951615, -0.0464003421, 0.1306906044, 0.0796747431, -0.0141618373, 0.1587961316, 0.0574097969, 0.1900419444, 0.0816507265, 0.0121026812, 0.0948225260, -0.0173336845, 0.0561128929, 0.0887625888, 0.0700789541, 0.0072162412, 0.0368835852, -0.0553503744, -0.0590923652, 0.0070522735, 0.0045127496, -0.1007347107, 0.0241341088, 0.0005807555, 0.0566794015, -0.1080345660, -0.0133557338, -0.1301110834, -0.0410793200, -0.0446873680, -0.1135351285, -0.0051852409, -0.0435564667, -0.0995380282, 0.0323831365, 0.0010703299, 0.0504397154, -0.1191729531, 0.0507772602, 0.0870248377, -0.0095421001, 0.0302572865, -0.0022048373, 0.0921395570, 0.0351563469, -0.0378647149, -0.0280577093, -0.0166551024, -0.0673806369, 0.0407083556, 0.0415941104, -0.0460302494, -0.0619005635, -0.0572936274, -0.0043582413, 0.0924281776, 0.0477711968, -0.0342150107, -0.0156453326, -0.0137548447, 0.0439480692, -0.0241927225, 0.0379111730, -0.1151209772, 0.0131404502, -0.1068395376, -0.1322726756, -0.0678867251, 0.0097524766, -0.0040045776, -0.0169497393, 0.0265069008, 0.0572924055, 0.0549576543, -0.0221362356, -0.0942292735, 0.0282325279, 0.0536653139, 0.0797858164, 0.1068925411, -0.0777170882, -0.0552102104, -0.0222265478, 0.1182604283, 0.0356433168, 0.0366380028, -0.0789898336, 0.0211177133, 0.0895687044, 0.0062665367, 0.1244083866, -0.0612861663, 0.0263564177, -0.0391656011, 0.0361564495, 0.0442368165, 0.0646952987, -0.0286695212, 0.0331476219, -0.0055463295, 0.0705822557, 0.0376504548, 0.0274311844, -0.1185061708, -0.0346011370, 0.0507047363, -0.0633748993, -0.0951734707, -0.0003051123, 0.0852584615, 0.0144034689, -0.0420149155, 0.0286365580, 0.0472972281, -0.0447057299, 0.0326281376, 0.0744367465, 0.0604154430, 0.0239340477, 0.1140676066, -0.0278729405, 0.0418000408, -0.1994931698, -0.1203573793, 0.0173224527, 0.0423857644, -0.1234534457, -0.0203344543, -0.0588808171, 0.0714307055, 0.0874734148, 0.0235728528, 0.1479916871, -0.2065737098, -0.0508824997, -0.0327898711, -0.1879347414, -0.0341918990, -0.0066076764, -0.0059027136, 0.0582063086, -0.0488431007, 0.1237001717, 0.0609450825, 0.0477973111, 0.0046395096, 0.1234933287, 0.0823894367, 0.0066659190, 0.0115898792, 0.0976182148, 0.0944957584, -0.0839293376, 0.0214636791, -0.0294780266, 0.0219562650, -0.1040828079, -0.0681978613, -0.0108826123, -0.1392810047, -0.0584230274, 0.0576740168, -0.0552023612, 0.0465346687, 0.0016392103, 0.1444411874, 0.0692361593, -0.1807974726, -0.0342371725, -0.0048237122, 0.0407196060, -0.0413849279, 0.1171900108, -0.0961420834, -0.0520281494, -0.0016912598, 0.0415288806, 0.0770635679, -0.0918491259, 0.0376134105, -0.0122860949, -0.0774770603, -0.0164881498, -0.0528697334, 0.0380037874, 0.0842591822, 0.0239004437, -0.0490398742, -0.0043344991, -0.1613528579, 0.0859349594, -0.0222351737, -0.0328550525, -0.0837769657, 0.0380446836, 0.0917962343, 0.0876538754, -0.0194761902, -0.0860311687, -0.0263417717, -0.0159340054, -0.0975654647, 0.0843583494, -0.0363046713, -0.0184406452, 0.0416774228, -0.0525686108, 0.0597770140, -0.2029593587, 0.0923970416, -0.1044726595, -0.0480271056, 0.0491954498, 0.0676050484, -0.0293828659, -0.1093350798, -0.1836023629, 0.0294589903, -0.0334751382, 0.0630508885, 0.0463554598, -0.0579603575, 0.1242625192, 0.0756962821, 0.1115496457, -0.0499826558, 0.0163549520, -0.0232469942, 0.0306963027, -0.0356103554, -0.0188877471, -0.0263843983, -0.1378805041, 0.1727432758, 0.0282804966, 0.0284311436, -0.0529575981, -0.0328810215, -0.0450460352, -0.0897945762, 0.0498632677, -0.0308311600, 0.1442171633, 0.1215266734, 0.0717746019, -0.0533154234, -0.0568658896, 0.1526289284, 0.0722551122, -0.0428528786, 0.0798128620, 0.0408324897, -0.0363611579, -0.0718337893, 0.0513377897, -0.0862381011, -0.1365036368, -0.0371678621, -0.0826059803, -0.1139066294, -0.0454117060, -0.0810630918, 0.1710185558, 0.0462590978, -0.0875619799, 0.0810023397, -0.1756268591, -0.0139967864, 0.0183050688, -0.0276520792, 0.0350882076, -0.0687749684, -0.0877642184, 0.0994960815, 0.0738147497, 0.0289432146, 0.1138878763, 0.0479585528, -0.0084713511, 0.0297975074, 0.2256313115, -0.0583342426, 0.0358702689, -0.0707988515, 0.0765949935, -0.0925882384, 0.0249267928, -0.0206148140, 0.0586383455, -0.0813271627, -0.1085621640, 0.0582359508, 0.1193797886, 0.1163159236, -0.0716219097, -0.0065846629, -0.0521663576, 0.0199527442, -0.0320024192, 0.0658690482, -0.0983835459, -0.1354197860, -0.0645572096, 0.0195809435, -0.0975182280, -0.0360380001, 0.0580013506, -0.0555055290, -0.0675321072, -0.1372466832, -0.0125580765, -0.0521367230, 0.1443158984, -0.0749721378, -0.0175114237, -0.0391868651, 0.0286921747, -0.0908113420, -0.0565788373, -0.1240808666, -0.1038335562, 0.0224532783, -0.1458155364, -0.0330249853, -0.0458531231, 0.0564766526, -0.0282116607, -0.0821173489, 0.0545903556, 0.0888089314, -0.0492682420, 0.0252583362, 0.0382103585, -0.0382195413, -0.0126700997, 0.0074481517, 0.1051183045, -0.0095516853, -0.0161084719, -0.0768327340, 0.0752081573, -0.0605212227, 0.0199506395, 0.0144301616, 0.0104669463, -0.0484674871, -0.0305785052, -0.0290258732, 0.0304981787, -0.0324934050, 0.0275488868, 0.0679159686, 0.0540377200, -0.0750859529, -0.0089442804, 0.0759912580, 0.0607440546, -0.0561613441, -0.0247027650, 0.0391874462, -0.0238236561, -0.1257664859, 0.0046751760, -0.0715090260, -0.0668854862, 0.1016937792, -0.1335939020, -0.0226101726, -0.0057753846, 0.0261033140, 0.0784075856, -0.0863552168, 0.0270017572, 0.0967117101, 0.0240107588, 0.0015832372, 0.0404178686, -0.0364765227, 0.0022725966, 0.0241862312, -0.0041556321, -0.1020886600, 0.0652755424, -0.0985412076, -0.1182146445, 0.0063834768, -0.0020489804, -0.0163590331, -0.0055716783, -0.0180434715, -0.0080285333, 0.0058545568, -0.0923371166, 0.0609702654, 0.0533454344, 0.0455401503, 0.1211817488, 0.0575004295, -0.0012485012, 0.0572020337, 0.1033385321, 0.0487907715, -0.0207378268, -0.0036402438, -0.1143811122, 0.0171758756, 0.0002040514, -0.0739591867, -0.0722877756, -0.0692758113, 0.0836928561, -0.0404937044, -0.0061049894, -0.0641822070, -0.1188175455, -0.0191169083, -0.0862396285, -0.0235583074, -0.0545843653, 0.0636489913, -0.0102850981, 0.0038341321, 0.0682737306, 0.0682779029, -0.1013711169, -0.0220981967, -0.1434484124, -0.0082577085, 0.1113935262, -0.0925805643, 0.0607492030, 0.0380756259, 0.0246843025, 0.0108331665, 0.0893936008, -0.0871423781, -0.0937450379, -0.0674483255, 0.0640796572, -0.0118340850, -0.0665924922, -0.0132940803, 0.0370401293, -0.0867362916, -0.0970362797, 0.0942558274, -0.0863153487, 0.0315404125, -0.0315108374, 0.0436063446, 0.0111216493, -0.0959307551, 0.0341520309, -0.1476154923, 0.0451138206, -0.0215570778, 0.0775309950, 0.1019937247, 0.0134853357, 0.1110448837, -0.0171713680, 0.0226913840, 0.0536218323, -0.0276309773, 0.0787859261, 0.0694419220, 0.0364195183, 0.0184253827, -0.0870025083, -0.0790494904, -0.0377041809, 0.0283618439, 0.0401888117, 0.0187124833, -0.0517952070, -0.0393934213, -0.1036169082, 0.0938128084, 0.0674886778, -0.0003327318, 0.0769272074, 0.0494523756, -0.0272685625, 0.0356596261, -0.0932519361, 0.1129366830, -0.0651771948, 0.0222606808, -0.0311665945, -0.0402244925, -0.0202688705, -0.0670466125, -0.0114783868, 0.0644485652, 0.0870214105, 0.1331826001, 0.0001616105, -0.1541004777, 0.0578569919, 0.0715425611, 0.0830464438, -0.1096485853, 0.1720863283, -0.0045777960, 0.0566583313, 0.0355301350, -0.0104759037, 0.0213450082, -0.0459363200, -0.0241942927, 0.0735299289, 0.0522690415, 0.0042670928, 0.0578233302, -0.1248886958, -0.1435612589, 0.0543458089, -0.1086058095, 0.1707566381, 0.0897640809, 0.0805881545, -0.1752184629, 0.0281023122, -0.0433199108, -0.0711267143, -0.0170540214, -0.0430142730, -0.0068193590, -0.0101771755, -0.0319987647, -0.0627199784, -0.0391491018, -0.0184631664, 0.0643391386, -0.0205883328, 0.1017296836, 0.0651471168, -0.0125021469, 0.0425923653, 0.0031760931, -0.0625726730, -0.0235766247, 0.0284601655, 0.0574839115, 0.0567623153, 0.0415549688, -0.0094785215, -0.0474769697, 0.1266630441, 0.1559436768, -0.0513287522, 0.1217495203, 0.0779863521, -0.0844306201, -0.0612701513, -0.0016283840, -0.0059676189, -0.0801075473, -0.1419955939, 0.1029675528, -0.0349267833, 0.0745094493, 0.0520863310, 0.1485405564, -0.0912541449, 0.0006999541, 0.0682794303, -0.0259455387, -0.0091390843, 0.0096551077, 0.0118895313, 0.1255956739, -0.0306537729, 0.0365301557, 0.1062749997, -0.0476581715, 0.0073235184, 0.0095190993, 0.0159164071, 0.0916762501, -0.0407332145, -0.0676758885, -0.1325976551, -0.0524105355, 0.0474740975, 0.0565471724, 0.0178543907, 0.0782797337, 0.1106521189, 0.0265915096, -0.0045269206, -0.0432545505, 0.0643320829, -0.0800744444, -0.0860492364, -0.0618075393, 0.1012612060, 0.0178071838, 0.0296139624, 0.0867254362, -0.0446653776, -0.0437129773, 0.1680919826, 0.1344372183, 0.0128327459, -0.0634081811, -0.0541751012, -0.0343537293, 0.0057219025, -0.0505122989, 0.0322542600, -0.0171183310, -0.0589765087, 0.0971306637, 0.0972340778, 0.0623057894, -0.1345905364, -0.1367558688, 0.0583843589, 0.0378863551, 0.0377958678, 0.0130106099, 0.0731321797, 0.0393838435, -0.0097472705, 0.1180810332, 0.0692815110, -0.0027866345, 0.0474335626, 0.1768665910, 0.0227353908, -0.0375809707, 0.0534247644, -0.0638802424, 0.0068894662, -0.1979597509, 0.0203148760, 0.0761872083, -0.0732405633, 0.1024139598, -0.0284331366, 0.1122672856, 0.0455438979, -0.1458142698, 0.1123603061, 0.0266710594, -0.0099404501, 0.0237091053, 0.0098979920, 0.0700714216, -0.0208741482, -0.1095045954, -0.0721333697, 0.1066627279, 0.0793187916, -0.1354139745, -0.0834829882, -0.0569768809, -0.0045325309, 0.0299250595, 0.0574052408, -0.0758228377, 0.0007407453, -0.0446296483, -0.0540669337, -0.0163608994, -0.0102825258, 0.0504682288, 0.0220163632, -0.0795817226, 0.1667791605, 0.0232727155, -0.0307188407, -0.0506136380, -0.0160177704, -0.0589977056, 0.0554264784, 0.0249340627, 0.0671695694, -0.0495522544, 0.0257096067, 0.0026219143, 0.0037327819, 0.0242853165, 0.1207528934, 0.0129706413, -0.1120685562, 0.0024023615, 0.0854616612, 0.0251201298, 0.0364998765, 0.0560363494, 0.0128016062, -0.0663643032, -0.1175046414, 0.0343294069, 0.0688262880, 0.0576380491, 0.0420690142, 0.0562679619, -0.0194805693, 0.1224904507, 0.0783615485, 0.0770646781, -0.0718513355, 0.0497617759, -0.0224341527, -0.0347582288, 0.0635420904, 0.0174639542, -0.0124826329, -0.0060340539, 0.0542253032, 0.1013427600, -0.0565852299, 0.0429535657, 0.0816687867, 0.0538635328, -0.0270595141, 0.0973989367, -0.0371156223, 0.1764234453, -0.0155446567, -0.0533931404, 0.0051165372, -0.0491188169, -0.0648908392, 0.0101770610, -0.1080524549, 0.0292823687, 0.0764354616, -0.0497823432, -0.0481680334, -0.0006478881, -0.0810685307, -0.0042517986, 0.1285384446, -0.0017454736, -0.0864777565, -0.0385527052, -0.0687973723, 0.1240241975, 0.0557265505, -0.0805649683, 0.0189757086, -0.0521707125, 0.0242126323, -0.1234181523, -0.0042799185, 0.1323709935, 0.0786402896, -0.0435444489, 0.0757707953, -0.1049412116, 0.0741821676, 0.1393639743, -0.0279088281, 0.0637034029, 0.0606389791, -0.0731193721, -0.0639135167, -0.0932850391, -0.0599921942, -0.0470952392, 0.0803435594, -0.0506532229, 0.1091559082, -0.0477321185, -0.1551695317, 0.0117908530, -0.1401123703, 0.0300859902, -0.0315635763, 0.1156073064, -0.0007038065, 0.0664423108, 0.0308206268, -0.0610343143, -0.0357108712, -0.0644299239, -0.0391745456, -0.0868679956, -0.0463261008, -0.0197413415, 0.1637025028, 0.0885744244, 0.1234523356, 0.1238399521, 0.0569877401, 0.0208185427, 0.0334134772, -0.0208765529, -0.0871265084, 0.1069824547, -0.0326870196, -0.0202602111, 0.0835931376, -0.0543595441, 0.0281659029, -0.0550569892, 0.0214977264, 0.0085777147, 0.0097659957, -0.0341858603, 0.1474202722, -0.0482128784, -0.0478113927, 0.0554534085, 0.0456740260, 0.0786055475, -0.0369799435, -0.0894380063, 0.0327348709, -0.0273567811, -0.0116980467, -0.0541437045, 0.0782241598, -0.0704938620, 0.0053051952, 0.0022777044, -0.0674986243, -0.1301302463, -0.0386516787, -0.0049934238, 0.0041324920, 0.0385504365, -0.1583120078, 0.0119546745, 0.0901660025, 0.0443391837, -0.0819107369, 0.1078532636, -0.0469207317, -0.0135605186, -0.1380632073, -0.0741630048, -0.0178698841, -0.0576564446, 0.0551383011, 0.0265065841, -0.0734657794, 0.0412494242, -0.0413492285, 0.0578138120, -0.0634815246, -0.0264547933, 0.0226668902, 0.0173434652, 0.1217501014, 0.1760775596, 0.0311716162, 0.0358084142, -0.1172787473, -0.0010146871, -0.0117805963, 0.0425580181, -0.0202648845, 0.0384015143, 0.0561598018, -0.0461269505, 0.0322969668, -0.0978081450, -0.0079327393, 0.1122186035, -0.0303083286, 0.1053960696, -0.0378952026, -0.1144073680, 0.0268802214, -0.0053384248, 0.1082572117, 0.0925312787, 0.0060559995, -0.1416879892, 0.0788194612, 0.0337297022, -0.1022154540, 0.0092126215, -0.0124993399, 0.0225212760, 0.0340437219, 0.2039797455, 0.0433502272, 0.0331104137, 0.0691580772, 0.0496836044, -0.0263287723, 0.0498208441, 0.0178195089, -0.1269695908, -0.1619804353, 0.0927205458, -0.0832665935, 0.0181837659, 0.1475346833, -0.0741601884, 0.0311508272, -0.1604911685, -0.0439654514, 0.0586798191, -0.1128628552, -0.0653040186, -0.0923055857, -0.0238189846, -0.0141232796, -0.0688606128, 0.0348348580, 0.0326317847, 0.0452584326, 0.0645569563, -0.0126888286, 0.1137354895, -0.0366143398, 0.0335874297, -0.0469611101, 0.0850571617, 0.0083202012, 0.0534168780, 0.0418730155, 0.0352452658, 0.0227917545, -0.0832418427, 0.0171029326, -0.0872431919, -0.0525568277, 0.0280148704, 0.1079015806, -0.0556184947, 0.0002959725, 0.0826409012, -0.0665690601, 0.0198927317, -0.0298824683, -0.1308773011, 0.0277931932, -0.1071996912, 0.0046135001, 0.0693233833, 0.1913534105, 0.0608641654, -0.1273326725, 0.0126124211, -0.0696562827, 0.0100505929, 0.0162444152, 0.0959901661, 0.0173176359, -0.0262129605, -0.0600203276, -0.0771643221, 0.0160537548, 0.0131924842, -0.0728457049, -0.0622018278, -0.0523189828, -0.0796053857, 0.1049665958, -0.0035934746, 0.0528453402, -0.0092743002, 0.0652555972, -0.0758701265, -0.1495127827, 0.0636538044, -0.0560656227, -0.0531372242, -0.0213562623, 0.0102955997, 0.0924367756, 0.0473455414, 0.0182280540, -0.0497507975, -0.0359210037, -0.0430985764, 0.0639075264, -0.1470002383, 0.0967452824, 0.0280782264, 0.0172420722, 0.1529466510, 0.1308796704, -0.1086186245, -0.0419635624, -0.0687844753, -0.0133011853, 0.0820116922, 0.0969919711, -0.0241798256, -0.0475371145, 0.0129836434, -0.0094959531, -0.0355623625, -0.1451764852, -0.1472592801, 0.0203930270, 0.0079374211, -0.0768920928, -0.0596964210, -0.0088501377, -0.0326888636, -0.0614341386, 0.0332432836, -0.0220843405, 0.0343364440, 0.0592139773, 0.0546638407, 0.1393157244, -0.0961521119, -0.0609622039, -0.1831236184, -0.0644795075, -0.0036552828, -0.0362956226, -0.0322348140, 0.1354835629, 0.0440043584, 0.0458336174, 0.1065665707, 0.0082825180, 0.1924532354, 0.0380547009, -0.1100798696, -0.0412236117, -0.1147383377, -0.0072563514, 0.0486739501, -0.0095785186, 0.0544304661, 0.0192589667, 0.0441699252, 0.1198495179, -0.0687096864, 0.0001999885, 0.0178117324, 0.0291741267, -0.0660270527, 0.0209762938, -0.0443125255, 0.1362335831, -0.0655839741, 0.0555820540, 0.1254830211, -0.0217284001, 0.0316924080, -0.0757944584, 0.0696397796, 0.0180003308, -0.0539871603, -0.0809094533, 0.0435945950, 0.1677965522, -0.0563638695, -0.0822244287, 0.0091250129, 0.1092312708, -0.0420472622, 0.0420802720, 0.0840177163, 0.1000502929, 0.1222243980, -0.0373842046, -0.0974865258, 0.0911416933, -0.0216859356, 0.0129407030, -0.0132283848, -0.0556631312, -0.0975945070, -0.0510482304, -0.0753536224, -0.0267910510, 0.0137467068, 0.1144350469, 0.0306732394, 0.0262303855, -0.0412258878, 0.0451242551, 0.0465596281, -0.1312642545, 0.0434702486, 0.1400413811, 0.0184435360, 0.0480134450, 0.0055154487, 0.0741228536, 0.0746703371, 0.0829424113, 0.0472168215, -0.0102260504, -0.0472695567, 0.0832427442, 0.0144733191, -0.0337015763, 0.0262597036, -0.0503805503, 0.0377528146, 0.0769784451, -0.0840467736, 0.0075860322, -0.1205436811, -0.0126503147, -0.0298145041, -0.1027602777, 0.0746905208, 0.0919535831, -0.0310178287, -0.0094238557, 0.0171656534, 0.0654520690, -0.0706627443, -0.0797349289, -0.0491729826, -0.0222608596, 0.0341701917, -0.1721774042, 0.1526988298, 0.0419779122, -0.0210200474, 0.0335838608, 0.0220838487, 0.1659518778, -0.0375300758, -0.0534513667, 0.0295923706, -0.0630436465, 0.0626536757, 0.1112762839, -0.0293430537, 0.0736704618, 0.1519558728, -0.0782874003, -0.0981433541, -0.0081930645, 0.0618938431, -0.1278672516, -0.0340948589, 0.0657714382, -0.0499379784, -0.0174317732, 0.0814688802, 0.0184887424, -0.0447191931, 0.1426432431, -0.1094863266, 0.0681806356, -0.0045855641, -0.0572129786, -0.0710689425, -0.0284351520, -0.0624581128, -0.0358628109, -0.0937457383, -0.0352308303, -0.0016698427, 0.0652301684, -0.0713755861, -0.0823766291, -0.0056357365, -0.0076297470, 0.1821068376, -0.0618973486, 0.0758507103, -0.0107210921, 0.0683858097, -0.0075163394, 0.0672142059, -0.0058049485, 0.0069653131, -0.0306794904, -0.1254488081, 0.0149818026, 0.0365028009, 0.0143695250, 0.0023689251, -0.0191395879, 0.0179912262, 0.1143103167, -0.0531852730, -0.0194629561, 0.0221019182, 0.0853878185, -0.0339103341, 0.0312228706, 0.1034580693, 0.1276429296, 0.0127079487, -0.0802777410, -0.0102705602, 0.0264515616, -0.0978671610, -0.0208816603, -0.0727544874, -0.0410067141, 0.0527080409, -0.0264094267, -0.0348092504, 0.1598591805, 0.0667226687, -0.1698308587, 0.0406656340, -0.0747400150, 0.0031443015, -0.0604543015, -0.1284190565, 0.0232720226, 0.0587964728, 0.0212362353, 0.1208597049, 0.0683359057, -0.1053826734, 0.0510988124, 0.0261781309, 0.1317992508, -0.0160227809, -0.1265785694, -0.0893594772, -0.0947658196, 0.1206255779, 0.0416776165, 0.0052444581, -0.0705207214, 0.0416100323, -0.0395614766, 0.0805063248, -0.0792859644, 0.0278054252, 0.0191535205, -0.0938986018, 0.0283719562, 0.0254739039, 0.0231923386, 0.0416117981, 0.0790636912, 0.0191319399, -0.0340970606, -0.0021524322, -0.0396172851, -0.0463146828, -0.0255117938, -0.0689781681, -0.0779880285, -0.0381696224, -0.0711478293, -0.0375918821, -0.0125720128, 0.0068238694, -0.0100505613, 0.0535896942, -0.0444427319, 0.0327380411, 0.0396730863, 0.0143153770, -0.0003730040, 0.1377202719, 0.0987954065, -0.0531515367, 0.0554162525, 0.0052918652, 0.0370568410, -0.0241073091, -0.0788141340, -0.0708362907, 0.0340008400, -0.0397274718, 0.1358157843, -0.0053943675, -0.0158317052, -0.0313468017, 0.0006275848, 0.0080105662, 0.0040418729, -0.1258472204, 0.0149309561, 0.0406141430, -0.0119130686, -0.0137443021, -0.0610957444, -0.0034310305, -0.0386455320, 0.0268274527, 0.0416855998, 0.0553718098, -0.0567511693, -0.0784181505, 0.0097999312, -0.0341080055, -0.0030455254, 0.0186072290, 0.0242382046, 0.0445163064, 0.0491899177, 0.0422605760, -0.0174271949, 0.1941505820, -0.0080752401, -0.0268705375, -0.1296208203, -0.0263266787, 0.0080355201, 0.1115779281, -0.0428507663, -0.0541858710, 0.0785975903, 0.1394799650, -0.0416994616, 0.0515290089, -0.0113902576, 0.0795524865, -0.0080421511, -0.0408183485, -0.0070827417, 0.0597330220, -0.0631162301, 0.0432929471, -0.0997840092, 0.0472591631, 0.1101438031, 0.0405103117, -0.0509528629, -0.0656748638, -0.0607814789, -0.0726978481, -0.0361559540, -0.1610392928, 0.0275631119, 0.0348595381, 0.1022442877, -0.1140376329, -0.0383967049, 0.0543102138, -0.1064746007, 0.0114218611, -0.1146829203, 0.0324513763, 0.0060060583, 0.1084307879, 0.0587628707, -0.0517795756, 0.1080037504, 0.0301593915, -0.0460186675, 0.1569456160, 0.0247555226, -0.0918130726, -0.0432717837, 0.2271240205, 0.0140380710, -0.1009797677, -0.0893490016, -0.0461179465, 0.0726982877, 0.0300798453, -0.0298398566, 0.0417702496, -0.0027245060, 0.1314474344, -0.0984046385, 0.1782675833, 0.0621898100, -0.0679450035, -0.0992463306, 0.0618635006, 0.0231097154, 0.0603489056, 0.0220983811, -0.2133177072, -0.1314330846, 0.0675334185, -0.0662997663, 0.0085495561, -0.0142558180, 0.0092493724, -0.0100800768, 0.0344476998, -0.0372185335, -0.0148535604, -0.0709974766, -0.1579206437, -0.0840594918, -0.0603076667, -0.0114685586, -0.0205713604, 0.0095361602, 0.0351744071, -0.1024119705, 0.0266163684, 0.1113642827, -0.1236309111, 0.1083241627, 0.0696625933, -0.0582814850, 0.0853897333, 0.0504196920, 0.0518194474, 0.1539742798, 0.0357682332, -0.1498761177, -0.0512839556, -0.0069456585, -0.0231448226, 0.0838375390, -0.0678790212, 0.0096205724, 0.0430593304, -0.0527791120, -0.1272620261, 0.0497548319, 0.0127617642, 0.0175504629, -0.0287122838, 0.0327476002, -0.0671883002, 0.0212958492, -0.1760794222, 0.0645384640, -0.0374743231, 0.0073275510, -0.0402443111, -0.0763887763, -0.0184017643, 0.0661164001, -0.0163160153, -0.0759088695, -0.0658653826, 0.0306237247, -0.0936041027, 0.1205302998, -0.1231892109, 0.0180135407, 0.0070208758, -0.0605627969, 0.0263691507, 0.0243365504, -0.0959763005, 0.0625471771, 0.1053723916, 0.0645710826, 0.0612033159, 0.0394173898, -0.0384321660, -0.0422740169, 0.1217551455, 0.0725060701, -0.0032406049, -0.0295344684, -0.0721158087, 0.1644856334, 0.0637476072, 0.1512465775, 0.0333110355, 0.1403028816, 0.0417612195, -0.0091122212, -0.0900481939, -0.0581559911, -0.1241627932, 0.0249609053, -0.1054132059, 0.0003241375, 0.0033040461, 0.0624615066, 0.0537751243, 0.1036800444, 0.0323088691, -0.1102592349, -0.0284161419, 0.0448172875, 0.0009461418, 0.0072510950, -0.0101550557, -0.0849227756, -0.2407765538, -0.0177791566, 0.0181506872, 0.0387920067, -0.0876439065, 0.0593132600, 0.0299163871, 0.0620207414, -0.1555588543, 0.0401891097, -0.0568492413, -0.0134739820, -0.0371947438, 0.0953157917, -0.0565843955, 0.0554557070, 0.0169937816, -0.1514038295, -0.0126073910, 0.0002723038, 0.0813285634, -0.0358768217, -0.0680876970, -0.0831393674, -0.0463052727, 0.0218051150, 0.0016842578, -0.0854597539, 0.1136769056, 0.0090660807, 0.1215049028, 0.0647561550, 0.0103054512, 0.0883368328, -0.1606421918, 0.0761622787, -0.0271158498, 0.0433725938, -0.0226864386, 0.0550507605, -0.0146775385, -0.0839499682, 0.0576610491, -0.0697085932, 0.0807875842, 0.0410372578, 0.0729548335, 0.1341617852, 0.0986817777, 0.0543614253, -0.0198785830, -0.1551606357, 0.0509585142, -0.1425335109, -0.0473792180, 0.0210810900, 0.1069197208, -0.0842458904, 0.0636767894, -0.0651429668, -0.0192561187, 0.0158994868, 0.1297730058, 0.0407008678, -0.0772148445, 0.0246203262, -0.0690433532, -0.0323898531, 0.0064676404, 0.0645787492, 0.0230655465, -0.0119582256, 0.0345817432, -0.0003797375, -0.0275328718, 0.0143359229, -0.0314520076, 0.0039138896, 0.0297346525, 0.1197638437, 0.0321312547, 0.0837081596, 0.0273569599, -0.0236495323, -0.0305748750, 0.0466145091, 0.0578948446, -0.0067552626, -0.0387566574, -0.0500631630, 0.0424768925, 0.0335754454, 0.0181465894, 0.0852406919, 0.0551849082, -0.0846268460, -0.0070031183, -0.0204349738, -0.0947410837, 0.0793161392, 0.0634124875, -0.0705136657, 0.0269023553, -0.0440627709, -0.0467383042, -0.1229709238, 0.0195156559, 0.0557314977, -0.1329596639, -0.0410799459, 0.0020523407, 0.0688266456, -0.0443750918, -0.0665010512, -0.0484200604, -0.1212211177, -0.1116031185, -0.0724280998, 0.0438949913, -0.1039588824, -0.0609675944, 0.1464227140, -0.0653202012, -0.0512937605, 0.0125708319, 0.0875026882, -0.0067198193, -0.0692482963, -0.0579532683, 0.0498695672, -0.0155441016, 0.0465906225, -0.0266163163, -0.1151582226, 0.1266713738, -0.0389716998, 0.0309701040, 0.0787597746, 0.0954748392, -0.1377857924, 0.0516854562, -0.0538406447, 0.1249617264, 0.1549519897, 0.0618260726, -0.0228304714, 0.1300172210, -0.0875828266, 0.0354764089, -0.0358847678, -0.0070054382, 0.0309308954, -0.0296944790, 0.0271486528, 0.0320605226, -0.0047131646, -0.0147005469, 0.0318858214, -0.1135710627, 0.1173730940, -0.1342346519, -0.0211143047, -0.0354245827, 0.0081408890, -0.0529460646, -0.0709916577, -0.0299645122, 0.0461724177, 0.0286099743, -0.0544677824, 0.0355485231, -0.0104595460, 0.0937629864, 0.0669259578, 0.0348101854, 0.0287138745, -0.0833245665, 0.0047556404, -0.0759012997, -0.0354162529, -0.0315971039, -0.0214641206, -0.1081032529, -0.0686624795, -0.0220485944, 0.0097123291, -0.0867127702, 0.0059521310, 0.0185446702, 0.0332730599, -0.0132554658, -0.0770675689, 0.0201185979, -0.0009395853, 0.0667962655, -0.0284678005, 0.0248410385, -0.0833157077, -0.0026411414, -0.0770229623, -0.0144372908, -0.0176603030, -0.0281535015, -0.0284063984, 0.0054668933, 0.0073691569, 0.0143360700, 0.0679715574, 0.0901974291, -0.1222843081, -0.0008232370, 0.0716688186, 0.0321979448, 0.1402800977, 0.0691189915, -0.1018665805, -0.0321823508, 0.0081520341, -0.0149423145, 0.0923695341, -0.0393117741, -0.0222729687, 0.0516111255, 0.0207711048, 0.1603986770, 0.0314990655, 0.1786065698, 0.0224767495, -0.0088413348, -0.0317073390, -0.0944849402, -0.0736460462, 0.1340363026, -0.1117125824, -0.0450496450, 0.0082388651, 0.0330282040, -0.0833153129, -0.1255603582, -0.1119505465, -0.0263482258, 0.0537282117, 0.0664986074, -0.1346649081, 0.1415008605, -0.0389641449, 0.0964130834, -0.0778789967, 0.0668219775, -0.0882747397, 0.0525112711, -0.1207909435, 0.0299437847, 0.0355646499, 0.1289593279, -0.0408677086, 0.0550782979, -0.0609303750, -0.0443985984, 0.0434811264, 0.0552847236, 0.1448958814, 0.0987626314, 0.1119722873, 0.0099753812, -0.0117153954, -0.0117802117, 0.0685323998, 0.0589623973, 0.0484555289, -0.0633374378, -0.0446395278, 0.0441650450, -0.0210497435, 0.0398669802, -0.0809433758, -0.1601084620, 0.0774912089, 0.0052776411, -0.1409715563, -0.0786675662, 0.1254099607, -0.0919558480, -0.0318263248, 0.0233823583, 0.0180909112, -0.0431500487, -0.0056383121, -0.0394272171, -0.0775714293, 0.0653275847, 0.1043551341, 0.0341057330, -0.0634191185, -0.0195888150, -0.0419110022, 0.0340524763, -0.0157463942, -0.1008237526, -0.0192813650, -0.1177564338, -0.1016066745, -0.1097235605, -0.0377286337, 0.0832183659, -0.0002697362, -0.0741588846, -0.0455490164, -0.0598885678, -0.1595291495, 0.0169786923, -0.0917357057, -0.0915857479, 0.0212418921, -0.0585633554, -0.0445858687, -0.0151942372, -0.0115465447, 0.0086317658, 0.0212858319, 0.0601190105, 0.1257594824, -0.0704741552, -0.0373040400, -0.0143017955, -0.0501316264, 0.0993248299, 0.1119406223, -0.0844779462, -0.0008803234, -0.0977604613, 0.1235614046, -0.0574687049, -0.0052773738, 0.0441151261, -0.0579078533, -0.1254554689, 0.1297698468, 0.0554239154, -0.0546392649, -0.0030545779, -0.0185358915, -0.0305976346, 0.0914283842, 0.1415152252, 0.1485798955, 0.0487771556, 0.0675877407, -0.0151426382, -0.0789057463, 0.0829463825, -0.0719694644, -0.0123766130, -0.0184542947, -0.1005824432, -0.0685585290, 0.0012783911, 0.1065879762, -0.0146868564, -0.0223771296, -0.2023757994, 0.0084600672, 0.0220521502, 0.0149532575, -0.0183581226, 0.1036933735, -0.0952867270, -0.0354371257, 0.0557593554, 0.0539416969, 0.0096679479, -0.0351747237, -0.1428740770, -0.0595355369, -0.0445302427, 0.0148007832, -0.0428470746, 0.0681574047, -0.0911396593, -0.0522958636, 0.0297835022, -0.0125093237, -0.0583186932, -0.0028572120, -0.0637211949, -0.0127030164, 0.0447533876, 0.0495948382, -0.0845122933, -0.0174961723, -0.0202160254, 0.0994150266, -0.0722076744, -0.0615045726, -0.1237940937, -0.0452765711, -0.1120889261, 0.1149894074, -0.1461496204, 0.1546117663, -0.0848027766, 0.0377875417, -0.1092609316, 0.1291100979, -0.0412951186, 0.0318191610, 0.0671564564, 0.0345311090, 0.0665388703, 0.0237550903, 0.0518847257, 0.0127435178, 0.0105926013, -0.0845729187, -0.0179157797, 0.0183602050, 0.0605456829, -0.0529022738, -0.0196470264, -0.1467280537, 0.1392931640, 0.0136314202, -0.0051088631, 0.0702818111, 0.0062399707, -0.0032623354, 0.0354347080, 0.0225546733, -0.0985094309, 0.0103367716, 0.0036372468, 0.0598569736, -0.0771561787, 0.1455098689, -0.0668955967, 0.0330523700, -0.0381158590, 0.1437829137, 0.0418053977, -0.0132702831, 0.0388915502, -0.0566059463, -0.0019591916, -0.0620104969, -0.0528869554, 0.0279375091, 0.0773268119, -0.0531481132, -0.0112354001, -0.1263645440, 0.1826066524, -0.0905297175, -0.0098467087, -0.1428705454, 0.0062461011, 0.0162174478, -0.0235822182, 0.0499353260, 0.0236837976, -0.0518302172, -0.0316669084, 0.0300185829, 0.0518140718, 0.1576859504, -0.0327676274, 0.0628437027, -0.0389915593, -0.0897614807, 0.0346536674, 0.0939386785, -0.0208089240, 0.0574822612, 0.1119973287, -0.0823290050, -0.0043183360, -0.0569838583, -0.0331963748, -0.0159566514, -0.0882889032, 0.1505106688, -0.0176352523, 0.0765839666, -0.1147343740, 0.0560271367, -0.0206707641, 0.0167331956, 0.1264581382, 0.0648159236, -0.0818220973, 0.0385422111, -0.1375392526, -0.0413119122, -0.0372098573, -0.0892565846, 0.0459183902, 0.1444472373, -0.0039151553, -0.0163934845, -0.0289269760, -0.0363005996, -0.0940991044, -0.0178202018, -0.0305768102, -0.0321005508, -0.0110855270, -0.1506462842, -0.1136128753, -0.1210192293, -0.0523410663, -0.1281345785, -0.0406711437, 0.1257741004, 0.0133628994, 0.1513648480, 0.0101007111, 0.0844678953, -0.0166009516, -0.0464203171, 0.0194137208, -0.0177603215, 0.0616654083, -0.0428721718, 0.1389338821, -0.0333331153, -0.0776948780, -0.0375884026, -0.1017704532, 0.1684985906, 0.0623132177, 0.0669639483, 0.0129382275, 0.0058134543, -0.0540016815, 0.0286897924, -0.0388139710, -0.1353310794, 0.0347310677, 0.0859313160, 0.0687098205, 0.1104988307, 0.0470175669, 0.0430515595, 0.0324470103, -0.0969002545, -0.0929287225, -0.0756249875, 0.0894972011, -0.0852049217, 0.0017610975, -0.0186102074, 0.1275032163, 0.0513208210, 0.0059399568, -0.0275175124, -0.0409839340, 0.0157002341, -0.0391907953, 0.0536628813, -0.0649180934, 0.0805033296, 0.0349219479, -0.0141929295, 0.0228500776, -0.1963400096, 0.2011045218, 0.0366736241, -0.0922371298, 0.0007735281, -0.0073833615, 0.0228369199, -0.0144975744, -0.0105778025, 0.0067107552, 0.0523203276, -0.0569656305, -0.1223470494, -0.0345165506, 0.0845783949, -0.1493687928, 0.0017254576, 0.0339308269, 0.1502748877, 0.0620099194, 0.0396581702, -0.0076379683, 0.0446034223, 0.0390183814, -0.1294561177, 0.0029070918, -0.0375041254, 0.0021438021, -0.0495602041, 0.0125492141, 0.0045270920, 0.1258478314, 0.0384318456, -0.0078804800, 0.0450875461, -0.0130085014, 0.0643906295, -0.0163486861, -0.0950715989, -0.0537619628, -0.0609628707, 0.0483296886, -0.0745429993, 0.0942152292, 0.0745466501, 0.0056452863, -0.0199204739, -0.0274956860, 0.1497865468, 0.0073572434, 0.1362005621, 0.0549754389, -0.0133298542, -0.1092176512, 0.0730327740, 0.1822849214, 0.0319361389, -0.0041527133, -0.0557656251, -0.0152212307, 0.0146287782, -0.0154271172, -0.0150172217, 0.1013229713, 0.0472897477, 0.0642883331, -0.0138391713, 0.0209140163, -0.0091913491, -0.0362642854, 0.0300766714, -0.2079855651, -0.0508145280, 0.0412999541, -0.0762234032, 0.0102315843, -0.1252604127, 0.0836279169, -0.0570155978, 0.0040350892, 0.0395203307, -0.1269316524, -0.0358552299, 0.0180931278, -0.0372944735, -0.0349193737, -0.0521986745, -0.0289785638, 0.0609572716, 0.0666225553, -0.0719204098, 0.0416812003, 0.0495945215, -0.0134091731, 0.0189310890, 0.0255010687, 0.0184972361, -0.0261502396, -0.0032370891, -0.0603059381, -0.0126853362, -0.0113014802, -0.0958319455, -0.0480258763, -0.0077983104, 0.0133542735, -0.0439188480, 0.0006688826, 0.0356623083, -0.0715662092, 0.0801983476, 0.0004712623, -0.0782033503, -0.1399056911, -0.0566075370, -0.0633397251, 0.0229022745, 0.0275792424, 0.0113972370, -0.1272125095, -0.1199308708, -0.0059199394, -0.0563336387, 0.0795494691, 0.0211625993, -0.0147726163, 0.0261417292, -0.0248214882, -0.0315261185, -0.0342421643, 0.0330701917, 0.0199275427, 0.1613297015, -0.1163325608, 0.0935014784, 0.1749205142, 0.0074254265, -0.0967533365, -0.0257780701, -0.0269680172, 0.0560472049, -0.0436407365, -0.1269540936, 0.0464458540, -0.1262541115, -0.0769225061, 0.1033987403, 0.1202414110, -0.0116727613, -0.0180618167, -0.1223816052, -0.0054828525, 0.1076502949, 0.0495457314, 0.0429396033, -0.0105788596, -0.1306787431, 0.0399350300, -0.0796451420, 0.2638971806, 0.0286774170, 0.0267497376, 0.0537038222, 0.1247431114, -0.0224138014, 0.0357443616, -0.0340436250, -0.1152796000, 0.1460156292, 0.0381838307, -0.0057859826, 0.0117573626, 0.0332344398, 0.0376425534, -0.1482492238, -0.0920549408, -0.0100979209, 0.0477030277, 0.0480025150, -0.1089142784, 0.0523991361, 0.0621275939, 0.0350234210, -0.0048595667, 0.1222792640, 0.0389485396, -0.1222674102, 0.0408383682, -0.0346318446, 0.1197232157, -0.0376556516, -0.0684994608, -0.0546167381, 0.0662028790, 0.0199706834, -0.0127376597, -0.1270173639, -0.0177898724, -0.0039181206, 0.0317639336, -0.0687032938, 0.0189153552, -0.0196028091, 0.0174733400, -0.0229430050, -0.0967806429, 0.1143488139, 0.1213999838, -0.0055685695, 0.0447044820, 0.0768213421, -0.1779947877, -0.0724083185, 0.1552231014, -0.0215885676, -0.0084306365, 0.0177541561, -0.0837065279, 0.0465456992, 0.0659872368, -0.0571246371, -0.0608297288, -0.0849624053, 0.0460983962, 0.0987130105, -0.0415634587, -0.0374435484, -0.0276222974, 0.1278018504, 0.0901929811, -0.0452311523, -0.0304180570, 0.0100677768, 0.0339902826, -0.0362785645, 0.0961639658, -0.0674025565, 0.1196267530, -0.0375740714, -0.0635055080, 0.1050783545, 0.0303284638, -0.0191951413, -0.0969388559, -0.0430727452, 0.0345986374, -0.0203118399, -0.0459394269, 0.0190332048, 0.0406216756, 0.0514486581, 0.0329987407, 0.0242377464, 0.0601524897, -0.0410120562, -0.0285836756, 0.0057651852, 0.0551176555, 0.0371231772, 0.0991674513, 0.0731915161, -0.0313820392, -0.0017419681, 0.0830168352, -0.0144172907, 0.0474462137, -0.0022794530, 0.0437473133, -0.0142761236, 0.0313421562, -0.0618000254, 0.0657772347, -0.0183441564, 0.0210508481, -0.0695310012, 0.0514827371, 0.0195738524, -0.0763533413, -0.1096646488, -0.0401158929, -0.0229504742, 0.0237046778, -0.0505198911, 0.0007595383, 0.0016452596, 0.0482995436, 0.0295937564, 0.0030688168, -0.0508498922, -0.1676478237, 0.1079495624, -0.0237937588, 0.1436745226, -0.1131018251, 0.0096195936, -0.0554439723, 0.0804314911, 0.0111302547, 0.0189284030, 0.0022048645, -0.0312766694, -0.0545569323, 0.0701764226, -0.0276124738, 0.0727396309, -0.1680485308, 0.0148809729, -0.0044485526, 0.0087381303, -0.0415649824, 0.0189876892, 0.0454946421, 0.0514604785, 0.0439143367, 0.1143394336, -0.0130462553, -0.0289194044, 0.0184049532, 0.0622124039, -0.1133321822, 0.0409500450, -0.1856027693, 0.0696708336, -0.0516853556, -0.1187331304, 0.0916942954, 0.0633810386, 0.0559386387, -0.1108828261, -0.0851009786, -0.0214635618, -0.0555132926, 0.0426681824, 0.0695266724, -0.0543870181, 0.1021063924, -0.1533820629, 0.2012903392, 0.1867775172, 0.0100765470, -0.0484935865, 0.0025467332, 0.0357173234, 0.0024918821, -0.0374601856, -0.0050702705, -0.0099078640, -0.0624097735, 0.0308026150, 0.0093552619, -0.0004147738, -0.0641965866, 0.0398283452, 0.0738387555, -0.0710333735, -0.1716674566, 0.0064520137, 0.0002646651, 0.0527005158, 0.0407714620, -0.0336558819, 0.0029005036, -0.0838302672, 0.0108520705, 0.0820105076, -0.0375686213, 0.1376987398, -0.1144209802, -0.0659306869, 0.0953723341, 0.0384145305, 0.0129645290, 0.1475268602, 0.0036957616, 0.0929703042, -0.0167676061, 0.0039061457, -0.0428175107, -0.0588551983, 0.0341569372, 0.0012918138, 0.0652872622, 0.0138775157, -0.0020747595, -0.1577346921, 0.0177878067, 0.0675207227, -0.0208831597, 0.0632723421, -0.1061939746, -0.0237314440, -0.0495261215, -0.0195608661, 0.0111037781, -0.1678361595, -0.0757967308, -0.0912158266, -0.0030242475, -0.0168869086, 0.0349325016, 0.0523195937, -0.0716048479, 0.0317393653, 0.0878042504, 0.0272658654, -0.0007746974, 0.0436750278, 0.0105421562, -0.0436238423, 0.0896922052, 0.0242584441, 0.0022248607, 0.0314996354, 0.0482896119, 0.0022842269, 0.0707642958, -0.0089348797, -0.0586082190, -0.1189514622, -0.0751977041, 0.0205043927, -0.1089229584, -0.0200826526, -0.0478746854, -0.1536196172, 0.0476961173, 0.0174407065, -0.0728092566, -0.0502173305, -0.0367108807, -0.0675879195, 0.0071983645, -0.0424695127, -0.0495294407, -0.0264390968, 0.0142907985, 0.1798335612, 0.0610999800, -0.0343728065, 0.0097592678, 0.0577300340, -0.0456747860, 0.0143714622, -0.0194111671, -0.1703372002, -0.0696708485, 0.0701788962, 0.0348933637, -0.0829305500, -0.0286817569, 0.0690048411, -0.0642651469, 0.0095361602, 0.1308690310, 0.0847684816, -0.0298745707, -0.0083025349, 0.0583272688, -0.0007025935, 0.0708484128, 0.0929535404, 0.0622638911, 0.0439549908, 0.0211379398, -0.0751271173, 0.0220264401, 0.0088270474, 0.0472746640, 0.1064286456, -0.1475117058, -0.0938628390, -0.0754970387, -0.0806818455, -0.0631631762, 0.0336044505, -0.0422367230, -0.1193151921, -0.0071666637, 0.0974189192, -0.0611604750, -0.0001496598, -0.0420938917, 0.0747629032, 0.0936517268, 0.0543329008, 0.0770824179, 0.1764448285, -0.0859369338, -0.0482072756, -0.0974519774, -0.0179030392, -0.0061920513, 0.0991146713, -0.1797878295, -0.0296958312, 0.0249390602, -0.0248407181, -0.0439049788, -0.0244441703, 0.0295299888, -0.1177807599, 0.0263536740, -0.0428762548, 0.0916785002, -0.0743799433, -0.0754800811, 0.0432934053, -0.0513575785, -0.0303260349, -0.0352723636, -0.0588132851, 0.1310487092, -0.0002011973, 0.0309638642, 0.0246750955, -0.0023753517, 0.1078889072, -0.0512748286, -0.0438768193, 0.0107880216, 0.0739481822, 0.0261993073, -0.0365037434, -0.1152512729, 0.0510688014, -0.0282076634, 0.0239404663, -0.0089111757, -0.0733662993, 0.0940671191, 0.0965072438, 0.0685516894, -0.0738394409, 0.1711984128, 0.0274068192, -0.0913000554, -0.1262104511, -0.1328017712, -0.1640808731, 0.0237861108, -0.0263164565, -0.0023874454, -0.1046633795, -0.0194151700, -0.0802624077, 0.2111872882, -0.0421915017, -0.0816334486, -0.1849867254, 0.1044622362, -0.0343596637, 0.0457629599, 0.0198359471, 0.0666356385, 0.0704088956, 0.0552940667, -0.0511189699, -0.0117443930, 0.1483128369, 0.0128012449, 0.1267817616, 0.1114948913, 0.0367692783, -0.0658527091, 0.0632611811, 0.0162065383, -0.0311697237, -0.0403781570, 0.0159935858, 0.0873336792, 0.0391205437, 0.0482223146, 0.0249884948, 0.0354473926, -0.1492168009, 0.0398554131, -0.0085029043, -0.0242285281, -0.1081017777, 0.0807189643, 0.0156375784, -0.0647206604, -0.0076819491, -0.0365402922, 0.0673691109, -0.0868469402, 0.1159266755, 0.0272352658, -0.0508588403, 0.0142799299, 0.0357712805, 0.0304035023, 0.0142961964, -0.0688941777, 0.0575287975, 0.0310334601, 0.0610314831, -0.0004817415, -0.1048687547, -0.0627775192, 0.0456395671, -0.0956691727, -0.0668013617, -0.0752175897, -0.0111564510, 0.0483722426, -0.0858990103, -0.0289143957, -0.0629313737, -0.0514989495, -0.0623258986, 0.0131136607, 0.0467791893, -0.0402218997, -0.1126534045, 0.0008418001, 0.1211006716, -0.0921837538, -0.0042231791, 0.0813341960, -0.0082891844, 0.0032475526, 0.1200309619, -0.0117610078, -0.0904887542, 0.0417360738, 0.0308041759, 0.0054941662, 0.0883024186, 0.0122310519, -0.0357322395, -0.0485824011, 0.0599298179, -0.0049652159, -0.1828902662, 0.0772536397, 0.0986161754, -0.0917376429, 0.0204708483, 0.0770552009, 0.0237248652, 0.0072846189, -0.0500872061, -0.0347622894, 0.1195814312, 0.0784462616, -0.0463135131, 0.0691401511, 0.0430055894, 0.0457456075, -0.0457750596, -0.0008201050, -0.1009012088, 0.0337575004, -0.1328208447, -0.0138021875, -0.0272530839, 0.0100797266, -0.0539252646, -0.0850423276, -0.1427282840, -0.0364496857, 0.1031252891, 0.0914655551, -0.0007876330, 0.0490563810, 0.0790854767, -0.0097415298, 0.0015239026, -0.0855715498, -0.0287860781, 0.0704937354, 0.1035228744, 0.0476415530, 0.0467916727, -0.0450528786, -0.0532590672, -0.0353914574, 0.0871300250, -0.1485232264, 0.0230092816, 0.0844585225, -0.0861684382, -0.1130549461, -0.0147392694, 0.0504455641, 0.0340227522, -0.0050479593, 0.1019625366, 0.0944931731, 0.0739783198, 0.0567503013, 0.0976143703, -0.0757462978, -0.0204116218, 0.0865280107, 0.1636934280, -0.0782108009, -0.0230573155, 0.1024362445, -0.0831104219, 0.0235107299, -0.0640765429, 0.0564129502, -0.1210653484, -0.0569699705, 0.0134673752, -0.0941993296, 0.0630299523, -0.0162453279, 0.0527420491, 0.0039798217, -0.1627852768, -0.0111004906, -0.0183446892, -0.0816687793, 0.0569315478, -0.0348606482, 0.0325494707, 0.0245292597, -0.1129353568, -0.0399972424, -0.0543273613, 0.0571684949, -0.0356653705, 0.0154913850, 0.0118447021, -0.0232179388, -0.0142774787, -0.0387931168, -0.0775360242, 0.0510247461, 0.0651045889, -0.0424649827, 0.0134706311, 0.0030934475, 0.1494085789, 0.0749963373, 0.0156296529, 0.0695578754, 0.1145829186, -0.0613892823, 0.0548064969, -0.0292564053, -0.0320480503, -0.0162922647, 0.1077304855, 0.0048494092, -0.1550474763, 0.0650283322, 0.0882268026, -0.0552919172, -0.0334720984, -0.0572136454, -0.0729975253, -0.0359816253, 0.0878262594, 0.0138252079, -0.0924783796, 0.0494460762, 0.1049447060, -0.0622515716, 0.1420472562, 0.0459099375, -0.1425289512, -0.0003068931, 0.0787088946, 0.1220897362, 0.0361692309, 0.0899695754, 0.1752327383, -0.0583395511, 0.0000932738, 0.0080318842, 0.0576337725, 0.0107365334, 0.0525763147, -0.1712819785, 0.0591130331, 0.0702284276, -0.0535516739, 0.0131356586, 0.0501010530, -0.0229319483, -0.0633652955, 0.1286179870, -0.0359360576, 0.0111843664, -0.0643746331, 0.0575513318, -0.0184463933, -0.0546345785, -0.0154622775, 0.0438433550, -0.1098567322, -0.0826748610, -0.0794959217, 0.0084317829, -0.0306713693, 0.0504291691, 0.1084913164, -0.0778181031, -0.0947591364, -0.0063019823, 0.0197841488, -0.0139467707, 0.1629041880, -0.0559575483, -0.0646954849, -0.0487076789, 0.0097724544, 0.0283528492, 0.0038638711, 0.0977949202, 0.0345381014, -0.1433264017, 0.0268344469, 0.0587645546, -0.0040661274, 0.0559910908, 0.0217231885, 0.0688554645, 0.1197180375, -0.0852572396, -0.1666071117, 0.0658747852, -0.0462878011, -0.0412322693, 0.0237028301, 0.0249611028, -0.0533096641, -0.0666592121, -0.0580735132, -0.0105532007, -0.0336900949, -0.0142837521, -0.1073978692, 0.0105272196, 0.0136822537, 0.1037131995, -0.0270000584, 0.1278922409, 0.1461228430, 0.0743917152, 0.0719767213, -0.1289494932, -0.0416948050, 0.1378528625, 0.0119608268, 0.0836162269, -0.0415741615, -0.1083670929, -0.1120133027, -0.0146018201, 0.0605369434, -0.0065470487, 0.0213491935, -0.0630646348, -0.0018469896, 0.0319266208, -0.0937687829, -0.0431233384, -0.0233450197, -0.0605994500, 0.0244989078, 0.0807774365, -0.0124463979, -0.0665733665, 0.1249283627, 0.0581546128, 0.0342318267, 0.0134681799, -0.0579240471, 0.0104648881, 0.0677668750, -0.0058652656, -0.0266899988, 0.0166579429, 0.0899760872, 0.0829444304, 0.0756317079, 0.0145737398, -0.0225426219, -0.0569747984, 0.0680039674, -0.0506949425, -0.1527709365, 0.1125835851, -0.0332045481, 0.0461843908, -0.0663428381, -0.0021022651, -0.0243802983, -0.1349378973, 0.0578537881, -0.0670434237, 0.0445898622, 0.0759628490, -0.0122385751, -0.1296692640, -0.0485059880, 0.0219940897, -0.0482706726, -0.0384121984, 0.0878443718, 0.0442138463, -0.0093733296, 0.1873642653, 0.0311007984, 0.0404167101, 0.0072098579, 0.0244597793, 0.0045217890, -0.0332128257, 0.0420589820, 0.1555096805, -0.0616939999, -0.0576729700, 0.0465962663, 0.0915139169, 0.1018739939, -0.0996743068, 0.0506622493, -0.0107387900, -0.1143273860, 0.1619172394, -0.0321502201, -0.0270639565, 0.1574371159, -0.1631149501, -0.0223452300, -0.0301236976, -0.1165019870, -0.0490877852, 0.0596953630, 0.0718626827, -0.0451859087, -0.0785890371, -0.1266547740, 0.0558861531, -0.1077082232, -0.0506045297, -0.0019364953, 0.0189307407, 0.0879956931, -0.1249815300, -0.0736569017, 0.0729878321, 0.0679988861, -0.0336290449, -0.0137685668, 0.0939416215, 0.0339896977, 0.0344965234, 0.0366399474, 0.0344064645, -0.0504349247, -0.0364004597, -0.1255788505, -0.0306730643, 0.0278443862, -0.0027809588, -0.0061012954, -0.0705644786, 0.0759476870, 0.0461937897, 0.0874080732, 0.0234241784, 0.0022647195, -0.0616469011, -0.0584144220, 0.0039140414, 0.0871657953, -0.0062966347, 0.1191165671, -0.1062058136, -0.0378981680, 0.0280487724, 0.1588937193, -0.0043904739, -0.1686754972, 0.0074526463, -0.0424776562, 0.0043403581, -0.0174534060, -0.1023697928, 0.0608308278, -0.0461551622, 0.0092244036, -0.0314974114, -0.1130459830, -0.0564546660, 0.0464574918, 0.0797780007, -0.0858939216, 0.0395152271, -0.0128104929, -0.0128989704, -0.0488425195, 0.0032148538, -0.0936410800, -0.1243766546, -0.0585527085, -0.0448477268, -0.0905598253, -0.0503467470, 0.0010974510, -0.0988804922, -0.0520864017, -0.0095351702, -0.0761521384, 0.0119606843, 0.1228119805, -0.0307235382, -0.0420658290, -0.1006579846, -0.0250185616, -0.0377216265, 0.0499768257, 0.0024234392, 0.0147273503, -0.1556987017, -0.0358862206, -0.1447063684, -0.0816008076, 0.0824876204, -0.0477752127, -0.0040753577, 0.1272377968, -0.1025558263, 0.0071881283, -0.0683342069, -0.0550509803, 0.0231877882, 0.0536660254, 0.0214485526, -0.1552648544, -0.0614593215, -0.0268464610, -0.0637241006, 0.1049655825, 0.0175880603, 0.0954494923, 0.0387852415, 0.0185757559, 0.0062889848, 0.0077811033, 0.0774378628, -0.0445987582, 0.0079240501, 0.0565396845, -0.1187876090, 0.0737070441, -0.0626057982, 0.0826657340, -0.0836846754, 0.0091625433, -0.0430006497, 0.0572666116, -0.0657404214, -0.0812122524, -0.0139494771, 0.0706921518, -0.0486298725, 0.0920077264, -0.0913178474, -0.0670200884, -0.0108666373, -0.0634506717, 0.1348170787, 0.1251315475, -0.0596823730, 0.0288890675, 0.0031550759, 0.0387710743, -0.0496868417, 0.0236202627, 0.0306629576, 0.0549371913, -0.0066217929, -0.0162805710, 0.0264498256, -0.0651664212, 0.0060495650, -0.0242392011, -0.0094792619, -0.1186733469, 0.0889519900, 0.1071492359, 0.0872610062, -0.1072773114, 0.0571616404, 0.1254979074, -0.0091226371, 0.0957217589, -0.0942757204, 0.0173822325, 0.0316288806, -0.0094229802, 0.1361762881, 0.0318059176, -0.0006828755, 0.0642539933, -0.0618797578, 0.0027500540, 0.0499887280, -0.1156669334, -0.1319151670, 0.0109788012, -0.0018747039, 0.0440286770, -0.0451405160, 0.0179994125, -0.0145533234, -0.0168849286, -0.1486515701, 0.0066694813, 0.0207703263, -0.0158179998, 0.1365137845, -0.0246811770, 0.0965369195, -0.0131671932, 0.0943768173, -0.0826353058, -0.1805963963, -0.0747847855, -0.0870719999, 0.0200896207, -0.0376140773, -0.0461336523, 0.0400650613, -0.0571798533, -0.0551868379, 0.1073658392, -0.0115166707, 0.1451673210, -0.0620755851, 0.0466903113, 0.0214132704, -0.0512183234, -0.1438218355, 0.0504776016, -0.0191224478, -0.0570029765, 0.0153848091, -0.0121188294, -0.0123911975, 0.1054052413, -0.0249251910, 0.0007610843, -0.0190020055, 0.0259460397, 0.0663019270, 0.0482208356, 0.0004017577, -0.0658682734, -0.1323520243, -0.0507874042, 0.0081243999, 0.0354187340, -0.0256965458, -0.0788430199, 0.0513781756, -0.0685862377, -0.1061640084, -0.0387292318, -0.1451141536, 0.0367152467, 0.0223617051, -0.0501796380, -0.0533792228, 0.0616229475, 0.1350015104, 0.1248019710, -0.1081207171, 0.0182084031, 0.0078382622, -0.0106164301, 0.0411566943, 0.1178716943, 0.1218074858, -0.0803915560, 0.0219436269, 0.0040241228, 0.0116508752, -0.1114208475, 0.0269665793, 0.0313836299, -0.0350528732, -0.1512349695, -0.0147074657, -0.0832969546, -0.1353794038, 0.1521566659, -0.0949552655, 0.0309717618, 0.0702537000, -0.0399900153, 0.0324260443, -0.0607171059, -0.0117782354, -0.0515805893, -0.0055704787, 0.0626907498, 0.1198140979, 0.1133387238, -0.0426382795, 0.1745024621, -0.0393483043, -0.1145128682, -0.1010808498, 0.0285817645, 0.0759716555, 0.0088186339, -0.0739023313, -0.0708675459, 0.0918799341, -0.0100323297, -0.0000907779, -0.0396528691, 0.0176507793, -0.1583482921, -0.0701740608, -0.0299005490, -0.0304009877, -0.0686108246, -0.0617665648, -0.0025174022, -0.0001547746, 0.0046213688, 0.1178105846, -0.0673325136, -0.1042670384, -0.0210537314, -0.0655876324, 0.0096799880, 0.0345496200, 0.0148117263, -0.0660564676, 0.0565071665, -0.0371768400, 0.0061203148, -0.0530371740, 0.0693999007, 0.1261983961, 0.1019729227, -0.0063699768, 0.0372607186, -0.0348624252, -0.0695649385, 0.0774844438, 0.1198853329, 0.0054655932, -0.0041146204, -0.1116862595, -0.0584521703, -0.1018162146, 0.0812129676, -0.0667965338, -0.0005207788, -0.0188735351, -0.0799459368, 0.0077975248, -0.0945627019, 0.0093957148, -0.0119888457, -0.0260048024, 0.0195990391, 0.0059359847, -0.0368763208, -0.1548279971, 0.0504816473, 0.0503290370, 0.0060129333, 0.0965337902, -0.1027632281, -0.0306992233, 0.0490360484, -0.0027718768, 0.0019312738, 0.1183741018, 0.0117618777, 0.0352806114, -0.0035339189, 0.0984408632, 0.0160797685, 0.0387270674, -0.0715563595, -0.0090868790, -0.0801623315, 0.1243153736, 0.1436110735, 0.0315200537, 0.1014483720, -0.0456813872, -0.1793200374, 0.0576496609, -0.0861443505, 0.0663310885, 0.0530558452, -0.0228631403, 0.0510662049, 0.0429962128, 0.0028587682, 0.1427651048, -0.0645093843, 0.0715463087, -0.1864282787, 0.0065044090, -0.0075989086, -0.0296381004, 0.0930695012, 0.0673609823, 0.0952929556, -0.1171017289, 0.1338145435, -0.1765140891, -0.1432687044, 0.1017031968, 0.2017727494, 0.0960207805, -0.0385195017, -0.0356182605, -0.0976212174, 0.1164489686, 0.0974983945, -0.0088027008, 0.0821898133, 0.0279828049, 0.0791128278, 0.0407811217, 0.1341378391, -0.0732116848, -0.0711830333, -0.0576914288, -0.0818173736, 0.0152168097, 0.0012231497, -0.0441069342, -0.0009894688, 0.0338725410, 0.0388309546, 0.0239973664, 0.0452312790, 0.0082292743, -0.0720254630, -0.0738518089, 0.0564644150, -0.0733640939, -0.0433619283, -0.0186984241, 0.0912039503, -0.0514846779, 0.0507770479, 0.0136602595, -0.0251795929, 0.0276913606, -0.1725896597, -0.0459282063, 0.0201497618, 0.0345000923, 0.0010170159, 0.0849140286, -0.0218699425, 0.1097023413, 0.0272190105, 0.0734869912, -0.0349757224, 0.0601430871, -0.0603048727, 0.0918335915, 0.0109006278, -0.0371163636, 0.0818643421, -0.0384467877, 0.1254373342, 0.0597945899, 0.1245966554, -0.0843300447, 0.0213184413, -0.0352865458, 0.0934042931, 0.0812132955, 0.0177850705, 0.0022004656, -0.0513620637, 0.1268837005, -0.0357822888, 0.0790757090, -0.0473540127, -0.0094551798, -0.0303147268, -0.0795049816, 0.0599196218, 0.0071950853, -0.1114504710, 0.0440345593, -0.0301069859, 0.0001384830, 0.0589493215, -0.0477024615, 0.1102891639, -0.0063230796, -0.0795184225, -0.0293471590, -0.0925435126, 0.0427858382, 0.0451276489, 0.0989764184, -0.0949342549, -0.0986338034, 0.1246913895, 0.1114311218, -0.0032282835, -0.0083213635, -0.1003943682, -0.0581294931, -0.0303767845, 0.0142739313, -0.0097704902, 0.0121102668, -0.0525185466, -0.0669571012, -0.0114264395, 0.0066863429, 0.0042956695, -0.0162922665, 0.0120681021, -0.0194843039, -0.0159188472, 0.0133968517, 0.1235216558, -0.0383666456, 0.0284239128, 0.0652799457, 0.1598048955, -0.1013799161, -0.0265467670, 0.0245055296, 0.0649586841, -0.0604999177, 0.0748733878, 0.0899953172, -0.0604281351, 0.0295802541, 0.0303224679, 0.0229898300, 0.0576898381, 0.0550209805, -0.0552978218, -0.0149381403, 0.0979536250, 0.0924551710, -0.1558652371, -0.0262281485, -0.0233529620, -0.0187300816, -0.0211063158, -0.0541507080, -0.0533654056, 0.0267246906, -0.0505132601, 0.0284091532, 0.0069501940, -0.0840934515, 0.0194245651, -0.1527920663, -0.1334624738, 0.0069743060, 0.0019458644, 0.0959567875, -0.0765741840, -0.0652947277, -0.0672354475, 0.0534845330, -0.0526007041, 0.0622386485, 0.0479436219, 0.0535448492, -0.0045179729, -0.0100823333, -0.0524717718, 0.0246901531, -0.0376547910, -0.0015913872, 0.0890211463, -0.0313572548, 0.1595268995, 0.1289744377, 0.0325914957, -0.0510397851, -0.0298506673, -0.0795678347, 0.1243470460, -0.0583308563, -0.0573651195, -0.0039958768, -0.0903644115, 0.0623010956, 0.0738696903, -0.0552901030, 0.0314330682, -0.0101439692, 0.0373617634, 0.0618975200, 0.0011449135, -0.0836165845, -0.0586570725, -0.0429117233, -0.0369679257, -0.1380656809, -0.0844832063, 0.0012279637, -0.0664509386, 0.0174126811, -0.0479581282, 0.1376857311, -0.0542280301, 0.0436223447, 0.0218555145, 0.0512162782, 0.0489624441, 0.0795502588, -0.0125618074, 0.1410075873, 0.0625674874, 0.0441539958, 0.1176041812, -0.0616968274, 0.0063670874, -0.1227929816, -0.0730216876, -0.0826418474, -0.1013214812, -0.0027024234, 0.0212575365, 0.0002135830, 0.1540635824, -0.0409848467, -0.0651205480, -0.0137801804, 0.0921536610, -0.0236944668, -0.0019490197, -0.0400320068, 0.0059185149, 0.0359880403, 0.0588882864, 0.0349107757, 0.1384691000, -0.0586566553, 0.0280585494, 0.0436281040, 0.0736049563, -0.0517056026, -0.0670103505, 0.1671804786, 0.0022125207, 0.1281086504, 0.0480940342, 0.0358249061, 0.1201011539, -0.0045127436, 0.1997863501, -0.1626343131, 0.0865547359, 0.0278455392, 0.0255172569, -0.0149498098, 0.0284098834, -0.0502810627, 0.0073074661, 0.0315651782, 0.0000592349, 0.0861471295, -0.0622379147, -0.0617632903, 0.0755750537, -0.0186956674, 0.0261415467, -0.0056406483, -0.0865342692, -0.0325760990, 0.1623797417, 0.0764751956, -0.0152265346, -0.1106507331, 0.0553229302, -0.0526159033, 0.0073012309, 0.0579708070, 0.0186781734, -0.0944682360, 0.0288636051, -0.0219084583, 0.0409218445, -0.0439980775, 0.0040122289, 0.2443172336, 0.1027985066, 0.0776207224, -0.0362151898, 0.1279742867, 0.0256818123, -0.0884379521, -0.0569990426, -0.0082024643, -0.0241842903, -0.0839041993, 0.0502714813, -0.0484015867, 0.0957100466, -0.0402149260, 0.0383578055, -0.0370901115, 0.0563921072, 0.0683421940, -0.1445210129, 0.0880104601, 0.0633120015, -0.0311840959, 0.0431650952, 0.0042594760, 0.0530411303, 0.0440804064, 0.1785592586, -0.0000593774, -0.0415795334, -0.0551156513, -0.0247601345, -0.0414695591, 0.0527091399, -0.0403017849, -0.0234759785, 0.0566676594, 0.0577415451, -0.0842775553, 0.0888650790, -0.0652709156, 0.0101892678, 0.0130782463, 0.0010000227, 0.0547886826, -0.0589295328, -0.0945420191, -0.0612667799, 0.0437333323, -0.0311438628, 0.0931399092, -0.0503671914, 0.0377002992, -0.1507859677, -0.1952895969, 0.0243990254, -0.0869078189, -0.0259418488, -0.0059312228, 0.0536895804, -0.0233792029, -0.0860058740, -0.0029925909, 0.0414416008, 0.1171455011, 0.1811561435, -0.1137118861, 0.0525906533, 0.0637054592, 0.1027952358, -0.0194677375, 0.0529295057, 0.0393469408, -0.0498608835, -0.0392837562, 0.0473039784, 0.0533578843, -0.0016827695, 0.0368029326, -0.0539706200, 0.0396171995, 0.0570388362, -0.0946400091, -0.1091350988, 0.0539360642, 0.0219805427, -0.1261665821, -0.0709201396, -0.0164453816, -0.0263731740, -0.0136970356, 0.0940109938, -0.0865176693, 0.0585029386, 0.0239344835, 0.0776417106, 0.0959006175, 0.0390569121, -0.1334984154, 0.0402389951, 0.0554368421, -0.0112978406, -0.0788172409, -0.0566212274, 0.0294490810, -0.0500513464, 0.0511073656, 0.0529192500, -0.0131261200, -0.0487281308, -0.0407876112, -0.0209648106, -0.0152068622, -0.0072351424, 0.1604130119, 0.1520984471, 0.0081343725, 0.0480492823, -0.0560498610, -0.0449951179, -0.0576717481, 0.0415123627, -0.0294497181, 0.0222119130, -0.1205388829, -0.0124291256, -0.1327068508, 0.0402038954, -0.0110735334, -0.0456410013, -0.0034959354, 0.1353246570, 0.0506017432, 0.0146606248, -0.0640707016, 0.0646656156, -0.1303888261, 0.0737617165, -0.1440188438, 0.0194864348, 0.0668305010, 0.0469310321, -0.0405867808, 0.0773581713, -0.0143009089, 0.0215963386, -0.0226149354, 0.1184870526, 0.0851864517, 0.0533494018, 0.0291326828, -0.0314488113, -0.0789160579, -0.0174439400, -0.0297913682, -0.0172571484, -0.0205137525, 0.0028997697, 0.0468241945, 0.0266967751, -0.1058035716, -0.0567294843, -0.0509582274, 0.1544483006, 0.0436053313, 0.1948559731, -0.0122659942, 0.0506827794, 0.0679713115, 0.0289461203, -0.1611573845, 0.0021743169, 0.0584978089, -0.0297125075, 0.0729970634, 0.0092128366, 0.0062663928, -0.1528001428, -0.0821292177, -0.0444552824, 0.0006350596, 0.1235855445, -0.0542257689, 0.0539680310, -0.0239323378, -0.0942288041, 0.0184360351, -0.0674706027, -0.0282347128, -0.0530950502, -0.0681249052, 0.0181446038, -0.0001622401, -0.0966426432, -0.0698275864, -0.0345289595, 0.0120200999, -0.0560281612, 0.0036458450, 0.1256913096, -0.1118438914, 0.1616576761, 0.0051767398, -0.0021430999, 0.0055700098, -0.0105875209, 0.2198263556, 0.0391171910, -0.0766049027, -0.0474749915, 0.1205757037, 0.0384983346, -0.0174945332, -0.0255076848, 0.0337507054, -0.1195420176, -0.0149356406, 0.0223218631, 0.0156628322, 0.0609276854, -0.0933512151, -0.0855603963, 0.0391262770, -0.0267338157, 0.0032022148, -0.0193117596, 0.0097658467, -0.0052988613, 0.0790181682, 0.0077968538, -0.0741678476, -0.0306747183, 0.1391606480, 0.0937146470, 0.0281524770, -0.0281984843, 0.0044002202, -0.0232307892, 0.0574076883, -0.0056171855, 0.0199646913, -0.0171059221, -0.0253642537, -0.0203742031, -0.1007682979, 0.0704575852, 0.0061273631, 0.0900570229, 0.1271404028, 0.1169639379, 0.0717748478, 0.0479276143, 0.0395972580, -0.0659292489, -0.1323533058, -0.0760059357, 0.0563557521, -0.1953112632, 0.0842655227, -0.0797356069, 0.0062067155, 0.0639172122, -0.1151258722, -0.1019386128, -0.0082526831, -0.0629801601, 0.0135757178, -0.1467934102, -0.0101721156, -0.0112161227, 0.0034571551, -0.0551789925, 0.0059719430, 0.0326273739, 0.0309409015, 0.0137342177, 0.0573363453, 0.0077495012, -0.0592896566, 0.0631665438, 0.0497623757, -0.0427237302, 0.0393060222, 0.0109735429, 0.1372493207, -0.1092622802, -0.1275218129, 0.0085359663, -0.0489748418, 0.0079691578, -0.0710731968, -0.1106490567, 0.0356464684, -0.0245925821, 0.0710689127, 0.0016816519, -0.0135164000, 0.1126539558, -0.0800995752, 0.0984712243, 0.0155581012, 0.0410813540, -0.0934863761, 0.0195175316, 0.0132784769, -0.0073065571, 0.0702350438, 0.1240541935, 0.1201533824, -0.0243547782, -0.0754549280, 0.0147418790, -0.1209088787, 0.1058441550, -0.0227443073, -0.0104229338, 0.0724187568, -0.1581697762, 0.0579580478, -0.0377638601, -0.0818147585, 0.0236912314, 0.0500311591, -0.0388652235, -0.0568249673, -0.0201558806, 0.0497675799, -0.1286500692, 0.0397897698, 0.1194947138, -0.0006972775, -0.0986448228, 0.0225800965, 0.0096998736, -0.0542762280, -0.0143835880, -0.0595635250, 0.0287979487, -0.1510434002, -0.0794397295, 0.1617582738, -0.0480890609, 0.0749340951, 0.0205091275, 0.0349432975, -0.1166369468, -0.0227539763, 0.1517131776, 0.0494635887, 0.0778351724, 0.1842844337, -0.0124678994, -0.0485939384, -0.0772491172, -0.1187716275, -0.0420189947, 0.0230363645, -0.0454755761, 0.0983703509, -0.0733503550, -0.1435608268, 0.0245030317, -0.0538100749, 0.0287915580, -0.0828021094, 0.0588331223, 0.0718426630, -0.0072122365, -0.0504135713, -0.0451183133, 0.0635812804, 0.0947453156, -0.0081675658, -0.0759939328, -0.0578385815, 0.0211161580, 0.0578892827, -0.0653006956, 0.0206997246, -0.0187000036, -0.0574074984, -0.0946158320, -0.0682250112, 0.0065701697, -0.0214456096, 0.0694223121, 0.0840464830, -0.1035473123, 0.0106661208, -0.0441632383, -0.0829932541, 0.0803079531, 0.0881637558, 0.1772413850, -0.1106399447, -0.0073029688, 0.0136145093, -0.1004885957, 0.1093896255, 0.0324188806, -0.0009377822, -0.0482014753, 0.0283970796, -0.0301468894, -0.0045255758, -0.0178628862, -0.0302153826, -0.0227943808, -0.1696900874, 0.0117873549, 0.0021508094, 0.0226220954, 0.0418191627, -0.0515712127, -0.0636889338, -0.0646644384, -0.0641745999, -0.0293413997, -0.0865801424, 0.0842203572, -0.0784892812, -0.0820637792, -0.0462924615, -0.0315878056, 0.0677712485, -0.0425425880, -0.0773080289, 0.0327829868, 0.0059989458, 0.0575842559, 0.1105026677, -0.0268182978, -0.0257383119, -0.0591271594, 0.0506953672, -0.2024941891, 0.0849138647, -0.0466829464, -0.0224198587, 0.0296263061, -0.0436930656, -0.0475793555, -0.1632727981, -0.0149939349, -0.0442031287, -0.0464674160, -0.0733500719, -0.0029352754, 0.0516042858, 0.0412820429, 0.1012043953, -0.0948554352, -0.1109711304, -0.0928462148, 0.0753875896, 0.0384952202, 0.0194554646, 0.0916438997, -0.0659435093, -0.0367624983, 0.0028820410, 0.0472380333, 0.0589660220, 0.0622811764, 0.0384236276, 0.0509343445, -0.0078917630, -0.0076332968, 0.0556207374, 0.1498781741, 0.0988431498, -0.0265521221, -0.0769101307, 0.0378105044, -0.0486902967, 0.0235348716, -0.0358684957, -0.0035820957, 0.0244970731, -0.1034642383, 0.0517901629, -0.0833286494, 0.0427233279, -0.1025922522, 0.0256928392, 0.0622891299, -0.0857051089, -0.0118175466, -0.0258711241, -0.0006593009, -0.1036991328, 0.1193838418, 0.0174005367, -0.0045611681, -0.0229323134, 0.1100727096, 0.0527879000, -0.0809044391, -0.1125153750, -0.1242491156, -0.0591531061, 0.0855800658, 0.1281955391, 0.0407103337, -0.0047724089, -0.1514241695, -0.0468127057, -0.0687893480, 0.0600705743, -0.0970883220, 0.0489843749, 0.0150062386, 0.0011684671, 0.0956605524, -0.0565928482, -0.0328408256, 0.0452292636, -0.0097152665, -0.0117743351, 0.0153904939, 0.0498647764, 0.0237043127, 0.0018301222, -0.0475451313, -0.1117412448, -0.0353815332, -0.0273532420, -0.0470303148, -0.0441276729, -0.1034993380, -0.0154273082, 0.1120948493, 0.0185047276, -0.1007269099, 0.0995344967, 0.0485841110, 0.0205197893, 0.0122836875, 0.0824979991, 0.1599263251, 0.0056138877, -0.0151749961, -0.0170009844, -0.0342577472, -0.0029585266, 0.1343491375, 0.1034139395, 0.0993271172, 0.0460767969, -0.0042213611, -0.1468656659, 0.0230589435, 0.0369265266, -0.0427516662, -0.0502475910, -0.2039764524, 0.0067165922, 0.0471360534, 0.0334720761, 0.0315455534, 0.0590435527, -0.0171719156, -0.0001479164, -0.0081439801, 0.0758901685, 0.0719191357, -0.0413457714, -0.0120832082, 0.0144933090, -0.0079873465, 0.1214390695, 0.0594512485, 0.0388649628, 0.0508235656, 0.0655205995, 0.0706915557, 0.0106593724, -0.0141741503, 0.1380663514, 0.0608354583, -0.0698603913, 0.0092044203, 0.0587376654, 0.0255403873, 0.0955773592, 0.2424417287, 0.0216200594, -0.1003311872, -0.0281640142, -0.0152305299, 0.0846294537, 0.0254864767, 0.0099208876, -0.0677281171, -0.0562466308, -0.1871544123, 0.0264885463, -0.0077247806, -0.1034586430, -0.0914136693, -0.0246163346, 0.0583268665, -0.0103832036, 0.0226046890, -0.1045237854, -0.1856104881, 0.0388140678, 0.0157639142, -0.0561992861, -0.0068104118, 0.0310641658, -0.0599588081, -0.1275004148, 0.0134975947, 0.1045146808, -0.0576312132, 0.0388713181, -0.0311167501, 0.0370918512, -0.0312520042, -0.0707085803, -0.0269332398, -0.0477967933, 0.0092249410, 0.0389598235, -0.0587579869, -0.0366884656, 0.0160690974, -0.0856120139, 0.0282082371, -0.0567108095, -0.0840691254, -0.0988574997, -0.0152289327, 0.1183345020, -0.0955507234, -0.1515652239, -0.0917158574, 0.1100956947, 0.0108974725, 0.0026553273, -0.0602141991, -0.0824095532, -0.0299113430, -0.0310346428, -0.0911569893, 0.0523426794, 0.1261703521, 0.0663663596, 0.0048879962, -0.0986888409, -0.0736771822, -0.0217467248, -0.0256585330, 0.0955596119, -0.0666414648, 0.0150028430, 0.0442197248, -0.0597451404, 0.0286966693, -0.0170400999, 0.0224947445, 0.0795223862, -0.0194498654, 0.0804585442, 0.0396544151, -0.0024398640, -0.0015565492, 0.0011465121, 0.0632485896, -0.0407835469, -0.0893105194, 0.0171120111, -0.0647356436, -0.0247584339, -0.0496459380, 0.2110326141, 0.0261913575, 0.0295582507, 0.0128105702, -0.0872467011, 0.0742926076, -0.1126617640, -0.1181675941, 0.0266386829, -0.0701299235, -0.1088578105, 0.0262453835, 0.0077865487, -0.0425003320, 0.0569450445, 0.0121669481, -0.0669053495, -0.0801406875, -0.0163453277, -0.1208868325, -0.0602294877, 0.0723840594, -0.0721546635, 0.1287339181, 0.1324024349, -0.0140999518, -0.0447149575, -0.0365027003, 0.0606383123, 0.0004733987, -0.0748519525, -0.0674025565, -0.0776820183, 0.0998958126, 0.1159512252, -0.0712533593, 0.0471124053, -0.0157537404, -0.0327394083, 0.0041686771, 0.1014347970, 0.0347720496, -0.0192777850, -0.0551881008, -0.1596065164, 0.0445604175, 0.0342041217, -0.0226520579, 0.0481854454, -0.0771312043, 0.0363237001, 0.0658781752, -0.0782541186, -0.0833526105, 0.0276216045, -0.1189735010, 0.0439329632, -0.0060969144, -0.1127575487, -0.0293288715, -0.1809649616, -0.0625925362, -0.0089210700, 0.0255893320, -0.0785555094, -0.1576708704, -0.0883196294, -0.0179789402, -0.0074104462, -0.0610627495, 0.1510332376, 0.0222595111, 0.1547138542, -0.1004971415, 0.0020636145, 0.0225945413, 0.0656652302, -0.0604397915, 0.0580502748, 0.0996253565, -0.0888676345, 0.0179235898, -0.0334563963, -0.1787943095, 0.0084809270, 0.0127474517, -0.0304360241, 0.0177487507, 0.0191011820, -0.0071504284, -0.0148176709, 0.1005226448, 0.0662298128, -0.1401625872, -0.0578164607, -0.1613042504, -0.0259000063, 0.0598869696, -0.0143122394, -0.1247814596, -0.1377220452, 0.0356187485, 0.0724665746, 0.0438193157, -0.0586117469, -0.0325591937, -0.0056619588, 0.0727269799, 0.0476648137, -0.1000643373, 0.0059218481, -0.0381135046, -0.0539839864, -0.0010560304, -0.0607567281, 0.0324750282, -0.0406948775, -0.0342427008, 0.0567864478, -0.0106770741, -0.0098629212, -0.0721241161, 0.0362660363, -0.0742453858, 0.0900875181, 0.2024582475, -0.0465850830, -0.0806646198, -0.0077407612, 0.0836407542, 0.0027893018, -0.0160560776, -0.0276929699, 0.0496209636, -0.0149382781, 0.0873942748, 0.0000528810, -0.0494236201, -0.0815695450, -0.0739601031, -0.0074884528, -0.0033399463, -0.0356848910, -0.0673402250, -0.0438428372, 0.0670911372, -0.0077688834, 0.0478387848, 0.0607364848, 0.0476213768, -0.0431287326, -0.1001087502, -0.0694381818, -0.0061935205, 0.0562900528, -0.1107060239, 0.0943406373, 0.0437221192, -0.1154089868, -0.1102800444, -0.0843848437, -0.0228586532, 0.0028185658, -0.1441174895, -0.0031106779, -0.0354318358, -0.1197490618, -0.0371507369, 0.1229891703, -0.0313628688, -0.1366669536, -0.1383001506, 0.0402561612, -0.0751410723, -0.0054607699, 0.0613393858, 0.0345157906, -0.0487299860, -0.0350553766, 0.0023773760, -0.0637238920, 0.0438119955, 0.0074977856, 0.0339777619, 0.1190766767, -0.0593470261, -0.1348761469, 0.0014956724, 0.0607053116, 0.0182952732, -0.1255244762, 0.0148292650, 0.0637971014, 0.0529197566, 0.0921401307, 0.0808087215, -0.0087190978, -0.0449168235, 0.0210761577, 0.0578784421, 0.0535505153, -0.0877759159, 0.1360443383, -0.0546734855, 0.0748337135, 0.0911065638, -0.0245945398, -0.1470189095, 0.0432972461, -0.0247585047, 0.0003292039, -0.2254276574, 0.0282645095, -0.0102539640, -0.0886284485, -0.0287321396, -0.0648828968, 0.1647511274, -0.0113361599, 0.0055977441, -0.0574183799, -0.0248138458, 0.0888891369, 0.0664602742, -0.0464123152, -0.0593379401, -0.1565057486, -0.0522938967, 0.0161691122, 0.0124010704, -0.0022695959, 0.0979930162, -0.1187060326, -0.0204777624, 0.0037890300, -0.0490899719, 0.0254458617, -0.0088462364, -0.0789395794, -0.0084195994, -0.0613191202, -0.0785357729, 0.0004142802, 0.0873630494, -0.0541416332, 0.0127735743, 0.1340845823, 0.0967246443, -0.0622850731, -0.0264486484, 0.0988382325, -0.0466817170, 0.0106922518, -0.0856664479, 0.0198278092, -0.0053000767, -0.0640855953, -0.0188267156, -0.0046898769, 0.0867910236, 0.0046308320, -0.0921744034, -0.0103701493, 0.0430248305, 0.1028149575, 0.0241537318, -0.1270230412, 0.1133257225, 0.0195357613, -0.0935539678, -0.0098976847, -0.0282501057, -0.0291740242, -0.0236402098, 0.0336111896, 0.0217215456, -0.0249521695, 0.0835390538, -0.0381827615, 0.1236408800, -0.0361387879, 0.0294783227, -0.0103001883, -0.0662475079, 0.0758278221, -0.0047492404, -0.0170924999, 0.0725154132, 0.0074077379, 0.0579093508, 0.1299949139, -0.0162594561, -0.0638198406, 0.0275917724, -0.1617015600, 0.0007043891, -0.0656223819, -0.1627904624, -0.0335105024, -0.1262627840, -0.0194556005, -0.0128037063, -0.0477805436, 0.0182368308, -0.0954446122, 0.0838444978, 0.0768451691, -0.1159512848, 0.0289715324, -0.0566660464, -0.0583583862, -0.0204079747, 0.0115592331, -0.1472315490, -0.0319488645, 0.0504528210, 0.0342039019, 0.0425472483, 0.0284946840, -0.0463937782, 0.0209944360, 0.0145813338, -0.1661243886, 0.0863673985, -0.0277526081, -0.1573040485, 0.0899537653, 0.0061107371, 0.0438806899, 0.0329187289, -0.0512518808, 0.0101438109, 0.0235229507, 0.0095955767, -0.0450082943, 0.0200538579, 0.0456223674, -0.0832950249, 0.0602771938, 0.0031633782, -0.0993679315, 0.0492458642, 0.0595080182, -0.0310870484, -0.0817153007, 0.0809694827, -0.0223914403, 0.0353307799, 0.0810708106, -0.0419031531, 0.2154201865, 0.0035847984, -0.0041374452, 0.0952121988, -0.0048685763, 0.0476715714, 0.0618853644, -0.0602703243, -0.0296329409, 0.0988591686, -0.0691803694, -0.0290489197, 0.0814067423, -0.0065234024, 0.0461579263, -0.0634655505, 0.0578515716, -0.0435957685, -0.0207319297, 0.0461296812, -0.0328567289, -0.0854565948, 0.1008623689, -0.0025659371, -0.0987552255, 0.0565020517, 0.0180747621, -0.0312381834, 0.0320294425, 0.1300065517, 0.0332993865, 0.0167477895, 0.0228314847, 0.0652312338, 0.1084221900, 0.0010554176, -0.0005783942, -0.0082724132, 0.1539496183, 0.0196490511, -0.0705505311, -0.0755840540, 0.0035348684, 0.0709507912, 0.0190844052, -0.1094912291, 0.1190131158, 0.0355691165, 0.0078489520, 0.0681150928, 0.0857283473, 0.0990253687, 0.0463269651, 0.1248083711, 0.1360174716, -0.0636298954, -0.0198715031, -0.0127316881, 0.1541164368, -0.0739627406, -0.1445479840, -0.0099078687, 0.0684547201, 0.1306124032, 0.1144851819, 0.0231842250, -0.2074282169, 0.0156290382, -0.1108327284, -0.0200119726, -0.0837227330, 0.1410950869, -0.0710599050, 0.0496254936, -0.0503637642, -0.0725354478, 0.0954226926, 0.0087982332, -0.0574569404, 0.0300932191, -0.1271203458, -0.0413887650, -0.0390245542, 0.1133847982, -0.0242019948, 0.0343899243, -0.0643975288, 0.0205322187, 0.0044345036, 0.1018654779, -0.0519354790, -0.0129648019, -0.0379048288, -0.0048603509, -0.0602453873, -0.0716143250, -0.0967850089, 0.0388283171, 0.0097668711, 0.0374910198, -0.0418472439, 0.0534546748, -0.0370631404, 0.0345771536, 0.0459282286, 0.0429200009, -0.0116647072, -0.0805494115, -0.1493910253, -0.1674222499, 0.0808146894, -0.0214811563, 0.1300562024, -0.0135087594, -0.0675767139, -0.0590518080, 0.0122051165, 0.0136141591, -0.0348541141, -0.1151664108, -0.0281444751, 0.0463404506, -0.0634242743, 0.0917204618, 0.0520901754, 0.0318073817, 0.1426619589, -0.0548317619, -0.0251372121, 0.0399221443, -0.0861191452, 0.0558046401, -0.0310030878, 0.0054465886, 0.0523990989, 0.0587048829, 0.1018868163, 0.0969987512, 0.0331801362, 0.0871193781, -0.0378175974, -0.0673121959, -0.0246275216, 0.0677733123, -0.1149575636, 0.0416600853, 0.0180099048, 0.0015973016, -0.0079125836, -0.0161880702, -0.0113456231, 0.0644474253, -0.0216010008, -0.0973045677, -0.1150450930, -0.0758404508, -0.0358975194, 0.1001300588, -0.0775717273, 0.0466286540, 0.0054374896, 0.0665110871, -0.0102378083, -0.0664371848, -0.0317021012, -0.1204270422, -0.2142701894, -0.0977128819, 0.0143230632, 0.0702448562, 0.0417431444, -0.0807568580, -0.0137168504, 0.0484343469, 0.0066418843, 0.0259388965, -0.0733824149, -0.0658334121, 0.0366766229, 0.0384115689, 0.0547393411, -0.0957071111, 0.0767481327, 0.0684587732, 0.1567295492, 0.1691871285, 0.0391378254, 0.0121438941, 0.0686148256, 0.0595040619, 0.0287694875, -0.0537746288, 0.0049597919, -0.0572936162, -0.0762617588, 0.0661092401, -0.0110944957, -0.0324417651, 0.0632623211, 0.0728513300, 0.0178621821, 0.0492368713, 0.0862851515, 0.1667773724, -0.0245726556, 0.0438265651, 0.1999089867, 0.0116255209, -0.0057490468, -0.0055797808, 0.1747390479, 0.0886876732, 0.0199923050, 0.1311423928, -0.0687525049, 0.0833256766, -0.0779180974, 0.0276843086, -0.0955395550, 0.0024815425, 0.0472728536, -0.1174359024, 0.0344358608, -0.1431183517, -0.1960285306, -0.0195342358, 0.0687310472, 0.0154039059, 0.0983574092, 0.0483902469, -0.0225440357, 0.0333511606, 0.0796662569, 0.0212944783, -0.0032223165, 0.0472628288, 0.1134114265, 0.0151971430, -0.0841265693, -0.0588859245, -0.1112935394, 0.0211012438, -0.0827655420, 0.0285757519, -0.0624425411, 0.0020701047, -0.1234401017, -0.0433243588, 0.1292633563, 0.0566297546, -0.1375770867, -0.0079335086, -0.0002164766, -0.0812218934, 0.0634742677, -0.0277777500, 0.0495597124, 0.0704880878, -0.0340586342, 0.0229460113, -0.0874130130, 0.0751622096, -0.0869169980, 0.0158576127, 0.1075192615, 0.0058162734, 0.0281725582, -0.0354884863, -0.0467591323, 0.0034236237, -0.1229548752, 0.0312684923, -0.0992100313, -0.1177297533, -0.0082041882, 0.1605927795, -0.0071551176, 0.0388428047, 0.1027453691, -0.0255085491, 0.0480325446, -0.0757041872, 0.0356816128, 0.0409998223, -0.1163387150, 0.0147389174, 0.0009912876, -0.0657422617, 0.0062016938, 0.1028462425, 0.0465057194, 0.0786921009, 0.0118610431, 0.0129311383, 0.0392560810, -0.0062508578, 0.0578996912, -0.0241980497, -0.0211135875, -0.0771589354, 0.0061412118, -0.0314970091, -0.0164564773, -0.0001074858, -0.0288954861, -0.0062445719, -0.0344623588, 0.0348416790, -0.0784829557, 0.0774828792, 0.0663786083, 0.1352560818, 0.0452582613, -0.0407154895, -0.0387228243, 0.0376489833, 0.0936659127, 0.0030746423, 0.0786012188, 0.0054489058, 0.1367006302, 0.0290299244, 0.0527597070, 0.0461223312, 0.0037377286, 0.0055704527, 0.0480395593, 0.0013338077, 0.0789715350, 0.0830172226, 0.0574956052, 0.0555265956, -0.1533730924, -0.0115365088, -0.0602869540, -0.0416130498, 0.0293190293, 0.1180453002, -0.1300609112, -0.0307140984, 0.0775768608, 0.1213014126, -0.1192593873, 0.0126648052, 0.0390240252, 0.1265417337, 0.0276560485, -0.1055569351, -0.0125246169, -0.1597764492, -0.0405230150, -0.0405448638, -0.0384244733, -0.1068149507, -0.1099760085, 0.0051601455, 0.0111408774, 0.0027229339, -0.0137035884, -0.0228387974, -0.0192692727, 0.0888092294, 0.1056711823, 0.0053922650, -0.0426322520, -0.0230162609, 0.0936375931, -0.0863261372, 0.0060443096, -0.0028590290, 0.0368086621, 0.0942327604, -0.0005557525, -0.0847055614, -0.0247265734, -0.0874752328, -0.0428873599, 0.1167177632, -0.0952709615, -0.0212761890, -0.0224296413, 0.0480147973, 0.0452187657, 0.0053283507, -0.0297082774, 0.1016801745, -0.0256999023, -0.0268391650, -0.0281920061, 0.0153933410, 0.0187594257, -0.1104730293, -0.1049271822, 0.0220599324, -0.0519699082, 0.0044627674, -0.0379403643, 0.0246097557, 0.0076004653, 0.0274455994, -0.0202129446, -0.0425282121, -0.0669754595, -0.1002418250, 0.0848752484, 0.0002318406, 0.0100658666, 0.1554233134, 0.0443799421, -0.1154089719, -0.0597819537, 0.0154681187, 0.0509938858, 0.0533888862, 0.0319518782, 0.1284421533, 0.0026015602, 0.0390909091, -0.0088972747, -0.0986318365, -0.0219586045, 0.0610981174, -0.1388726532, -0.0133022126, 0.0684677511, 0.0028837840, -0.0280367285, 0.0349975117, -0.1874452084, 0.0071543506, -0.0513132662, 0.0362959281, -0.0302369446, 0.0744913593, 0.0242088512, 0.0124018025, -0.0436287001, 0.0650340468, 0.0827683806, -0.0191394556, -0.0778129101, 0.0134726726, -0.0806318223, -0.0582155660, 0.0396919586, -0.0031147515, 0.0003299396, 0.1701630801, 0.0351218209, -0.0274990778, 0.0559804216, 0.0945390686, -0.0281030349, 0.0756249502, 0.0618992373, 0.0913275927, -0.0031622723, 0.0973077863, -0.0251124501, -0.1134054214, 0.0312228501, -0.0374404080, 0.0904122293, -0.0166924149, 0.0084973834, -0.0668585151, 0.0410119593, -0.1098224670, -0.0415230505, 0.0328462720, -0.1267148107, 0.0212357603, 0.1132934168, -0.0401685722, 0.0639571249, 0.0243856069, 0.0758237317, 0.1580527425, -0.0667172149, 0.0115474369, 0.0229164585, -0.0920730755, 0.0463772565, 0.1379001886, -0.0525556132, -0.1860215962, -0.0320152268, -0.0662803352, 0.0037819147, -0.0840876997, 0.0627774969, 0.0465936586, 0.0041871332, -0.0092352806, 0.0014519669, -0.0600786991, -0.0366027206, -0.0454077832, -0.1305560768, -0.1450612992, -0.0469624549, 0.0827180371, 0.1287518740, -0.0778738409, -0.0759771094, 0.1304859668, 0.0380259827, -0.0690801218, 0.1761593968, 0.1372290403, 0.0425502658, 0.0088866763, 0.0594049506, 0.0491491705, -0.0393267348, 0.0797802806, -0.0832183361, 0.0163450800, 0.1169411987, -0.1208271533, -0.0887254104, 0.0423308648, 0.0276263431, -0.1539830416, 0.0402268060, 0.0447349474, 0.1838948876, -0.0081280703, -0.0120527400, 0.0996268913, -0.0324338712, 0.0376524031, -0.0500259511, 0.1406309605, 0.0491548516, -0.0046117324, -0.0100281388, 0.0944064036, -0.0459649786, -0.0699416697, -0.0348424092, -0.0167165641, 0.0387208201, -0.0522405095, 0.0854046419, -0.0980378240, -0.0584084317, -0.0437410064, -0.0996013284, 0.0367902666, 0.0491094589, 0.0099391211, -0.0821552798, -0.0990764499, -0.0683836490, 0.1283153892, -0.0971834362, -0.0170083698, 0.0031519905, 0.1314261705, -0.0810083598, -0.0672293380, -0.0679302588, -0.0001083212, -0.0769001022, 0.0159554593, 0.0194858126, -0.0794259310, 0.0086155413, 0.0490525216, 0.0386344418, -0.1042121202, -0.0615821183, -0.0468556099, 0.0381029285, 0.0076486636, -0.0554864481, -0.1918925196, -0.0006239247, 0.1655322313, -0.0610443838, 0.1656130552, 0.0001077673, -0.0895990059, -0.0513102710, -0.1242725700, -0.0314982533, -0.0725805387, 0.0036474355, -0.0151245557, -0.0753082931, -0.0481940806, 0.1162941083, -0.0130411461, -0.1143905818, 0.0537089482, -0.0249031112, -0.0600882992, 0.0493065417, -0.0094748307, -0.0985169262, -0.0325316414, -0.1168423221, -0.1191114187, 0.0478561521, 0.0241861530, -0.0193197392, -0.1133736894, -0.0204372741, 0.0117635168, 0.0117012858, 0.0588912107, -0.0393193290, 0.0574939847, -0.0786482543, -0.0695958063, 0.0403342620, 0.0016940110, -0.0136303976, -0.0498341098, 0.0362639874, 0.0138886049, 0.1200940758, -0.0454646610, -0.0956947803, 0.0088522118, -0.0410059616, -0.0766611248, 0.0400134921, -0.0223653074, -0.0563494265, -0.0266495235, -0.0003341287, 0.0715346709, 0.0326944515, -0.0168504305, 0.1152846888, 0.0205758419, -0.0792308301, -0.1200430244, 0.0320004560, 0.0349346884, -0.1569409966, -0.0048962981, 0.0162719544, 0.0880278796, 0.0668954104, 0.1518179476, -0.0077160802, 0.0025650337, 0.0192051250, -0.0112533085, 0.0296139158, -0.0328437835, 0.0297263693, -0.0913786590, -0.0064898888, -0.2480339855, -0.0866877809, -0.0419452935, -0.0530835539, -0.0119348280, -0.0412584990, 0.0354648307, 0.0262667872, 0.0195715502, -0.0209549926, 0.0814480782, 0.0632783026, 0.0805883557, -0.0417672060, -0.0146671869, 0.0180091299, -0.0616867058, -0.0021887925, -0.0056775454, -0.0399408229, 0.0527054481, -0.0491998382, 0.0236036200, 0.0082267784, -0.1111326814, 0.0035767988, 0.0688964948, -0.0746860355, -0.0207919385, 0.0160740167, -0.0233989619, -0.1674588323, -0.0488767922, 0.0159482043, 0.0278194435, -0.1156998351, -0.0218085498, -0.0258457586, 0.0423309915, -0.0208320022, -0.0181024075, 0.1030574441, 0.1081081033, -0.0115381638, -0.1027948782, -0.0929573700, 0.0133510008, -0.0849931687, -0.0425183363, 0.0239587370, 0.1078420505, -0.1139489487, 0.0567687973, -0.0788968131, -0.0520208851, 0.0384971648, -0.0368084349, 0.0842618793, 0.0633973330, 0.0344068632, -0.0827344581, -0.0718561113, 0.0586803257, -0.0570078716, 0.0929060355, 0.1616130769, 0.1365907341, -0.0155012794, -0.0244491640, 0.0774915814, 0.0864244029, -0.0350448638, 0.0927205682, -0.0658564568, -0.0535449907, 0.0474087372, -0.2093254179, 0.1197439507, -0.0421972014, -0.0097579192, 0.0584713295, -0.0071611237, -0.0424328744, 0.1504522264, 0.0147585794, 0.0338982269, 0.0319708437, -0.0012526717, 0.0007881410, -0.0957630500, 0.0242560878, -0.1695154756, -0.0134868156, -0.0608010553, 0.0314391106, 0.0289726183, 0.0466988422, 0.0570630245, -0.0754595399, -0.1318740398, 0.0301691666, 0.1513905674, -0.0372439399, -0.0426651426, -0.0179751460, -0.0470105894, 0.0313466936, 0.1084522903, 0.0575668849, 0.0388097018, 0.0377428718, -0.0264057964, -0.0792400241, 0.0311129745, -0.0071838796, 0.0470675603, -0.0531687587, 0.0742696822, -0.0483384579, 0.0664987862, -0.0141434185, -0.1079051420, -0.0623249784, -0.0810480341, 0.1215802431, -0.0043994226, 0.0642853603, 0.0066078170, 0.1166478992, 0.0039609633, 0.0606290549, 0.0305860117, 0.0990537181, 0.1601132751, 0.0392014496, -0.0083409455, -0.0679484308, -0.1080352664, -0.0314355232, -0.0701846182, -0.0294835195, -0.1302633286, -0.0573063865, -0.0080419863, 0.0069161300, 0.0697595999, -0.1112018079, 0.0123085007, -0.0125880390, 0.1515519619, -0.0281359106, 0.0694592148, 0.0177416001, -0.0281043202, -0.0540606491, 0.0506295338, -0.0300989877, -0.0565837361, -0.0357836671, 0.0045407154, -0.0922702104, -0.0397392660, -0.0984504446, -0.0040605552, 0.0262124315, -0.0123182852, 0.0411577895, 0.1123505384, -0.1135356575, 0.1013824940, 0.0120825805, -0.0301501602, 0.0015456448, -0.0664324760, 0.0256068259, 0.0109018683, 0.0173102841, -0.0198194310, 0.0758742094, -0.0997025892, -0.0048662871, -0.0523993075, -0.0040846020, 0.0617407449, 0.0040536150, 0.0807598084, 0.0769244134, -0.0948121473, -0.1485615671, 0.0488598831, 0.0516070537, 0.1017265841, -0.0429509357, -0.0405900255, -0.0137853483, 0.1796608418, 0.0907986313, -0.0573639050, -0.0386724286, 0.0165496077, 0.0727048218, 0.1028520018, -0.0032851323, -0.0522705838, 0.0061383359, -0.0019838223, -0.0299498364, 0.0147603936, 0.0927406028, -0.0073963068, -0.0050889561, -0.0390577056, -0.0774250031, 0.0188824795, 0.0153453164, -0.0629105493, 0.0516055897, -0.0491214059, 0.1501343250, 0.0685781762, -0.1733921617, -0.0745518655, -0.0859249458, -0.0284271128, -0.0267650411, 0.0368578620, -0.1551692486, -0.1637152582, -0.0588125475, -0.1125145406, -0.0667017400, -0.0247692205, 0.0591784716, 0.0185282137, -0.0091042705, -0.0925261229, 0.0529605113, -0.0294679515, -0.0466470309, 0.1236091256, 0.0996439606, -0.0745913610, 0.0081546493, -0.0368529633, 0.0364654511, 0.0645856559, -0.0851856694, 0.0838612914, 0.1691632867, -0.0023888410, -0.0147590935, -0.0304783899, -0.0339534245, 0.0725718886, 0.1153195426, 0.0591988191, -0.1181907505, -0.1382340491, 0.0018138196, -0.0239616930, -0.1736296415, -0.1319738328, -0.0454772711, -0.0589522384, -0.0663889423, -0.0939432606, 0.1014929041, 0.0928203687, 0.0431762189, 0.0685340092, -0.0184011012, 0.0454206057, -0.0671696514, -0.0048230281, -0.0337496623, -0.0329288803, 0.0708030611, 0.0664736032, 0.0218451396, 0.0331196189, -0.1089304835, 0.0451442674, -0.0213907007, -0.0024291743, 0.0352796726, 0.1808894128, -0.0362555720, -0.1108869538, 0.0644598305, -0.0471346453, 0.0057192799, -0.0217270683, -0.0587977320, -0.0159050580, -0.0413053259, -0.0160971656, -0.0944656357, 0.0641114414, -0.0452032611, -0.1072612852, -0.0377600230, 0.1155230850, -0.0451507643, 0.0002103597, 0.0069042109, 0.0450219661, -0.0114099402, 0.0219767112, 0.0220088493, 0.2421030700, -0.0761493370, 0.0253072418, 0.0199233443, 0.1498723030, -0.0175204836, 0.0173789281, 0.0236747153, -0.0133895148, 0.0793549940, -0.0123916902, -0.1510265768, -0.0219517872, -0.0731117129, -0.0850059018, -0.0076526515, 0.0200230256, -0.0768599361, -0.0427495912, -0.0420578197, -0.0059912093, -0.0240576584, -0.0951443166, 0.0325687863, -0.0658833086, 0.0829511806, 0.0561792254, 0.1105069220, -0.1577303112, -0.0487015098, 0.0829631388, 0.0776357651, 0.0065249763, -0.0754450411, -0.0216156431, -0.0384164825, -0.0209436417, 0.1722466648, -0.0464523993, 0.1185925305, 0.0753991902, -0.0543152317, 0.0044413358, -0.0971819609, 0.0235857666, 0.0089558195, -0.0390569940, -0.0893055648, -0.0112437122, 0.0103122015, 0.0522420630, -0.0502630770, 0.1002592966, -0.1247540414, 0.0417003110, 0.0791832656, 0.0651783943, -0.0254978146, 0.0129224630, 0.0703573674, 0.0235317200, -0.0871160924, 0.0249007698, 0.0877378881, -0.0411293469, 0.0485777855, 0.1027229428, 0.0175398178, -0.1172179356, -0.0740079731, -0.0386062972, -0.0486992672, 0.0275781956, -0.0221394990, -0.0472110361, 0.0203412324, -0.0409628749, 0.1061599106, -0.0428291932, 0.1054838449, -0.0533765554, -0.0957775414, -0.0369407386, -0.0348900892, -0.0895813331, -0.0619380921, -0.0509243608, -0.2040248960, -0.0147351548, 0.0079524014, 0.1284825802, 0.0179344267, -0.0014205594, 0.1173178479, 0.0514448695, 0.0267851241, 0.1150404364, -0.0508761182, 0.0286598392, -0.0334862620, -0.0805268437, -0.0233286321, -0.0522105470, -0.0701071769, -0.0729723945, 0.0951150283, -0.0672422722, -0.0264266115, -0.0367725492, 0.0175016876, -0.0643024892, -0.0926595405, -0.0247845910, -0.0990376025, 0.0348899662, -0.0811947584, 0.0375732407, -0.1447398812, -0.0631527007, 0.0022573443, 0.0064415857, -0.0418448374, -0.0093075354, 0.0854669809, -0.0025030177, 0.0751654580, 0.0114079230, -0.1697697341, 0.0181640424, -0.0376138538, -0.0340321250, 0.0066225864, -0.0663131997, -0.0756895319, 0.0414708965, 0.0251500998, 0.0007176585, -0.0935609490, -0.1551066786, -0.1444101036, -0.0709746853, -0.0183505118, 0.1307739913, 0.0988446400, -0.0655452237, 0.0605443344, -0.0715883300, -0.0684664622, 0.0488168113, -0.0603303239, 0.0692299306, -0.0976257622, 0.0398725383, 0.0067895073, -0.1332285404, -0.0863795131, 0.0119091570, -0.0388265736, 0.0046211891, 0.0427094288, 0.0881785601, 0.0545561910, 0.0634987876, 0.0301632546, -0.0329891667, 0.0187090412, 0.1122925654, 0.0013626264, -0.1366893053, 0.0689294934, -0.0153760444, -0.0043903301, -0.1043114513, 0.0638415292, 0.0309724491, -0.0005426551, -0.0799908414, 0.0226841792, -0.0887848362, 0.0367107578, 0.0356509350, -0.0794216767, -0.0492605120, -0.0589141846, -0.1007721499, 0.1080880314, 0.0270241201, -0.0032788552, -0.0579130873, 0.0310543291, 0.0168390684, -0.1449242830, -0.0076003410, -0.0110839996, 0.0080314763, -0.0529072434, -0.0669032186, -0.0300093144, 0.0945458338, -0.0232014526, 0.0827900693, 0.1443498284, -0.0321970284, -0.0371024311, 0.0980916619, -0.0155373774, 0.0663272291, 0.0575830154, -0.0216371976, 0.0137888975, -0.0330602601, 0.0077271704, -0.0973501727, 0.0100557804, -0.0604316741, -0.0337567776, -0.0188624039, 0.0509848930, 0.1039715111, 0.1808400899, 0.0770488605, 0.0054207593, 0.1148625165, 0.0838756785, 0.0024741814, -0.0299128033, 0.0092886733, -0.0341527313, 0.0119516710, -0.1119565293, 0.0825932026, 0.0139211342, -0.0038503259, 0.0690239742, -0.0105286110, -0.0745593458, -0.0392905213, -0.0029780162, 0.0830284655, 0.0214065090, 0.1208953783, -0.1545382440, 0.0283939652, -0.0646214560, -0.0470471308, -0.0063680783, -0.1674399972, 0.0034497958, -0.0427576378, 0.0157655105, -0.0350626186, -0.0413782038, -0.0202412475, -0.1079298481, 0.1301218420, 0.0262526702, -0.0178485978, 0.0755242258, -0.0835858136, -0.1719483882, 0.0892111883, 0.0869319290, 0.1079331934, -0.0592829287, 0.0315562263, 0.0855709016, -0.0470045432, -0.1501624435, -0.1389291734, 0.0146974362, 0.0970753133, -0.0842931867, 0.0527334064, -0.0773011744, 0.0540756583, -0.0247219168, -0.0644673929, -0.0419915244, 0.0087425858, 0.0909776166, -0.0760292038, -0.0204364266, -0.0168971531, 0.0112879463, -0.1276264787, 0.1607649326, 0.0268786624, 0.0085090324, -0.0294714794, -0.0167441014, 0.1249002218, 0.0240321737, 0.0523026586, -0.0311291050, -0.1094957441, -0.0736419261, -0.0011360906, -0.0174301378, -0.0315274671, 0.0535308458, 0.0177473947, -0.0290214177, -0.1042569056, 0.0561728552, 0.0005366215, 0.0254655704, 0.0501652658, -0.0711631551, 0.0035152771, -0.0832813978, 0.0481623411, 0.0355504788, -0.0848608986, 0.0472951233, 0.0376733802, -0.0453100652, -0.0135508133, -0.0862458795, 0.1240643486, -0.1842533797, -0.0235606618, 0.0150268106, 0.0427214392, -0.0302191023, 0.1117790192, -0.0237283893, 0.1831397861, -0.0427577645, 0.0795094520, 0.0034902636, 0.0265805312, -0.0217137467, -0.0476612486, -0.0847751349, 0.0113818645, 0.0529057086, 0.0345092304, -0.1211486906, 0.0716249868, 0.0489711203, -0.0235687681, -0.0836931691, -0.0013470445, 0.1092280000, 0.0607357025, -0.0091059785, -0.1206988022, 0.1482107341, 0.0402942672, -0.1386879534, -0.0381850898, 0.0708279759, 0.0730491430, 0.0411601253, -0.0959994122, -0.1020612866, -0.0467936173, 0.0158499870, -0.0748455822, -0.0121541917, -0.0516766831, -0.0903803408, 0.1201063171, 0.0278177690, 0.0689131543, -0.0408710949, -0.1034451574, -0.0988485664, -0.0242744200, -0.0061169872, 0.0432181433, -0.0136957802, -0.0746776536, 0.0313946642, 0.1298535913, 0.0348427594, 0.0187063292, 0.0453460030, 0.0949515924, 0.0203815382, 0.0185854658, 0.0302464608, 0.0071999729, -0.0090291072, -0.1687898487, 0.0830261186, -0.0694036931, 0.0372162685, -0.0037640724, 0.0046401508, -0.0531989783, -0.0533698872, -0.0126302522, 0.0392768458, 0.0330999903, 0.0100039914, -0.0386993662, 0.1130834073, 0.0235643052, -0.0547868237, -0.1173979491, 0.0464430749, -0.1282922477, 0.0306207538, 0.0142674465, -0.0504292436, 0.1239799336, 0.0226172712, -0.0383555517, 0.1290017962, -0.0056392215, 0.0435893051, -0.0495359041, 0.0786213577, 0.0019331952, 0.0753630325, 0.0770864263, -0.0343422443, -0.1384634674, 0.0884050429, -0.1229190901, -0.0009709336, -0.0016883016, 0.0690897554, -0.0476455614, 0.1463012546, 0.1665023267, -0.0219016932, -0.0680868849, 0.1293373704, 0.0180910677, 0.0434834622, -0.0427953489, 0.0682670102, 0.0763358250, 0.0407731794, 0.1021617502, -0.0377416275, 0.0976856723, -0.0058590043, 0.1334440559, -0.1123633608, -0.0014927569, -0.0361244492, -0.1166705787, -0.0298062265, 0.0430354066, 0.1130758226, -0.0302664991, -0.0312465411, 0.0041632932, -0.0680038333, 0.0110479789, -0.0672706068, 0.1154309511, 0.0914919600, -0.0622371249, 0.1371223927, 0.0639771521, -0.0769716203, -0.0699663460, -0.0772182867, -0.0482233986, 0.0511953942, 0.0815557986, 0.0699258298, -0.1191542298, 0.0301791690, 0.0429428779, 0.1009750813, -0.1019891426, 0.1090257168, -0.0214847438, -0.0176083092, -0.0442818701, -0.1454355568, 0.0096483584, -0.1167877689, 0.1397072375, -0.0258267913, -0.0420900993, -0.0068259798, 0.0219595172, -0.0644482374, 0.0305699110, 0.1343577355, -0.1072657928, 0.0060438444, 0.0154572055, -0.0380855426, -0.2387751341, 0.0057949815, -0.0600528568, -0.0836521909, 0.0898492858, 0.0053365529, -0.0714549273, -0.0227497593, 0.0046844706, -0.0690212399, -0.0379267856, -0.0646913275, 0.0665651485, -0.0062509608, 0.0610593855, 0.0047640502, 0.1586678475, 0.0246485937, 0.0595336221, 0.0230595730, 0.0422290266, -0.0245201774, -0.0561611913, 0.0688427612, -0.1128801331, 0.0664017051, 0.1012173370, -0.1291634142, 0.0204758737, 0.0906702280, -0.0299425814, -0.0777268559, -0.0191434082, -0.0809636489, -0.1156322733, 0.0307527930, 0.0374277383, -0.0551640131, -0.0261410959, 0.0002436936, -0.0281327404, -0.0475119092, 0.0768397748, -0.0383056141, 0.0256227050, 0.0261105448, 0.0005769189, -0.1055862233, -0.0801397264, -0.0381281786, 0.0235650185, 0.0289610103, -0.0063555194, -0.0137189217, 0.0597484261, -0.0636278987, 0.0526625402, 0.0176572613, -0.1195097417, 0.0378968343, -0.0930114463, 0.0627939627, 0.0560982302, -0.1612049490, -0.1244546473, 0.0076598674, -0.1117908806, -0.0334672555, -0.0843775868, 0.0602124743, -0.0824922323, -0.0495086983, 0.1046391875, -0.1049221158, -0.0613722205, -0.0730618089, 0.1283723861, 0.0314748026, -0.0039785504, -0.0932381898, 0.0027223486, -0.0274584070, -0.1061502844, 0.0972643048, 0.0588218048, 0.0561046377, -0.0165662076, 0.0491297022, 0.0182940122, -0.0069925934, 0.0261961836, 0.0620259419, -0.0034619756, 0.1142543107, 0.0732787177, 0.0228740983, -0.0033156287, -0.0020074719, 0.0185770206, -0.0569522753, 0.0779233724, 0.1112720072, -0.1965388507, 0.0006382652, 0.0769046471, 0.0756638348, 0.0661329478, 0.0824011266, -0.0200025328, 0.0679802001, 0.1022055522, 0.0307826400, 0.1161687896, 0.0589361638, -0.0271297693, -0.0657148361, -0.0501212552, 0.0424503349, -0.0652536303, -0.0479792841, 0.0191891808, -0.0040331213, 0.0176123586, 0.0156985000, 0.0066193286, 0.0985828117, -0.1285938323, 0.0019198954, -0.0259972364, -0.0561034083, 0.0279867388, 0.1061966270, -0.0276430361, 0.0514507219, 0.0337515138, -0.0491800010, -0.0841581151, 0.0786714852, -0.0159695949, -0.0611386076, -0.0144473761, -0.0065187663, -0.0926352814, -0.0494967103, -0.0095462156, 0.0713223070, -0.1184580252, -0.0175955109, 0.1480875909, 0.1082737967, -0.0188571103, -0.0641869307, -0.0165092982, 0.0968149677, -0.0807344615, 0.2027924806, -0.1271397769, 0.0156038348, 0.0088668857, -0.1089392677, -0.0309150107, 0.0877599344, -0.0413708836, 0.0566960946, -0.0674985275, 0.0532016456, 0.0572502241, -0.0523950011, 0.0601738989, -0.0226413216, 0.1396687776, 0.0345202982, 0.0171341449, 0.0390149541, -0.0494790450, -0.0555202663, -0.1108401418, 0.0843196809, -0.0828773379, -0.0808196664, -0.0426445901, -0.0793771073, 0.0349405073, 0.1018784046, 0.0041234074, 0.0567592457, -0.1410052031, 0.1793591678, -0.0284095407, 0.0146560594, -0.0332158506, -0.0694501176, 0.0331456885, -0.0174789336, 0.0864981264, 0.0156728625, 0.0095194262, -0.0308838226, 0.0880031660, -0.0249109939, 0.0043632202, 0.0253823213, -0.0495227315, 0.0063647181, 0.0841810033, -0.0458961390, -0.0773717985, 0.0328497067, -0.1106717288, -0.0906800255, 0.0315691233, -0.0608501062, -0.0068237088, -0.0364842378, 0.1609305441, -0.0288166478, 0.0437730290, 0.0112545509, 0.0547224954, -0.0532302856, 0.0475214124, -0.0333977342, -0.1543039382, -0.0263294969, -0.1142549589, 0.0793922469, -0.0524703190, 0.0036971979, 0.0382622033, -0.0781361610, 0.0523599349, 0.0484462306, -0.0134452395, -0.1876379251, -0.1397097558, 0.0207315497, -0.0675348565, 0.0089336876, 0.0311305933, -0.0839962885, 0.0441570468, 0.0310793445, -0.0573643930, -0.0516907535, -0.0261490457, 0.0866456553, 0.0112902075, -0.0502670854, -0.0549536869};
# 20 "firmware/parameters.h" 2
# 1 "firmware/weights/b3.h" 1
# 12 "firmware/weights/b3.h"
model_default_t b3[192] = {};
# 21 "firmware/parameters.h" 2
# 1 "firmware/weights/br3.h" 1
# 12 "firmware/weights/br3.h"
model_default_t br3[192] = {};
# 22 "firmware/parameters.h" 2
# 1 "firmware/weights/w11.h" 1
# 12 "firmware/weights/w11.h"
model_default_t w11[4096] = {0.1164827943, 0.1410283148, -0.1552921534, -0.1483715177, -0.0126532530, -0.0113239186, -0.0142081250, 0.1331198812, 0.0106368149, -0.1666023284, -0.0860849321, 0.1776792407, 0.1796350330, 0.1958898604, -0.1033244208, 0.0074331276, 0.1037804931, -0.0092962729, -0.2290720791, -0.0096262060, 0.1653988063, -0.0987609252, 0.0806649327, -0.0971041396, -0.0457005501, -0.2834271789, 0.0499486402, -0.0216949061, 0.0433119461, 0.0454469509, 0.0191363767, -0.1673982143, -0.2585252821, 0.1563835442, 0.0406136550, 0.0100735314, -0.0731366724, -0.0622054599, 0.1256474406, 0.1113596410, -0.1417121738, 0.0046273977, -0.1516030878, -0.1249316111, -0.0408287086, 0.2294890583, -0.1389837712, -0.1704021245, -0.1079498902, 0.0231419317, -0.2615739405, 0.0410497412, 0.1382909566, -0.0955780596, -0.1259388328, -0.0845123753, -0.0136115626, -0.2643839419, 0.0174520481, 0.1869851798, -0.1030258015, -0.0030227418, -0.1161303371, 0.0323424488, 0.0478028618, -0.0003762449, 0.0876768529, 0.1038352698, -0.0708872527, -0.0857285708, -0.0140376864, 0.0755961016, 0.0411236137, -0.1159712523, 0.0973067582, -0.0593037196, -0.0145824561, 0.2313279212, 0.0924817249, -0.2082161158, 0.0637807250, 0.1513849646, -0.0517837591, -0.2690300941, -0.0835304856, 0.0772104710, -0.1444160491, 0.1521406770, 0.0482362658, 0.0668785423, 0.0954458788, 0.0486900024, -0.2275348157, -0.0172441117, 0.1521966159, -0.0002118111, -0.1188620031, -0.1572074592, 0.0819340870, 0.0755156130, -0.1910791397, -0.0588544607, 0.0251693223, -0.0717003718, 0.1089350879, 0.0662119091, -0.0128336903, 0.0182826445, -0.0992845744, 0.0173804369, 0.0896122158, -0.1721580923, 0.0006352878, 0.1307877898, -0.0239986163, -0.1803940833, -0.1737858802, -0.0946320444, -0.1521301568, 0.0487619378, 0.1452853084, -0.1030145884, 0.0651787147, 0.0945710838, 0.0026190940, -0.1174303815, 0.1734454185, 0.2054268122, -0.0545130782, -0.1745093465, -0.1403059214, 0.1294483691, 0.0895374119, -0.0064893109, 0.0683218166, -0.1073134243, 0.0790659636, -0.1090956703, 0.1585890949, 0.0188450068, 0.0685871243, -0.0563670434, -0.1512418240, -0.0381779671, -0.1047273651, 0.0088070482, -0.0281244647, -0.2398653328, -0.1831020266, 0.0937953740, -0.0819818899, -0.0620745979, -0.0755237415, -0.0441276357, 0.2090508938, -0.2052856833, -0.1283033788, 0.0878531337, -0.2116793692, -0.2175137848, -0.0636645406, 0.1701560020, 0.0423990972, 0.1346030235, -0.0813073590, 0.1404869258, 0.1005659476, -0.0149292480, 0.0779842511, 0.0155177377, -0.2622554600, -0.0381387211, -0.0836609602, 0.0859661996, 0.1130650640, -0.2825440466, 0.0084502446, -0.1083661392, -0.0336927362, -0.1078012213, -0.0104333581, 0.1208985895, -0.2550579309, -0.0218399782, -0.2330243289, 0.0202553216, -0.2325049341, 0.0935683548, 0.0139883747, 0.0868239626, -0.1050791666, 0.1473494023, 0.0278370138, -0.0218056943, 0.0063023586, -0.1189960018, 0.1606266499, -0.0044287071, 0.0702075660, 0.0540437736, 0.0187590942, -0.0218837988, -0.0969852805, -0.0297555514, -0.2419590652, -0.1173676848, -0.2151523381, 0.1520812809, -0.0503672883, 0.2812157869, 0.2136213332, 0.0927112326, -0.1024723276, 0.0095118033, -0.0516951345, -0.0807430744, 0.0216172803, 0.0192277171, -0.0733382553, 0.0708298162, 0.0331197679, 0.1357620358, -0.1712385118, -0.1324500144, 0.0815904140, -0.1894157827, -0.1948089749, -0.1220500246, -0.1505314112, 0.2456102073, 0.1978277266, -0.0366569720, 0.1071494669, -0.1502182037, -0.1764496118, 0.0407223180, 0.0641063973, -0.1072410047, -0.0541581437, 0.0319053307, -0.0351301730, -0.1432779878, -0.0857147425, 0.0065916209, 0.2351856232, -0.0393766835, -0.1432930529, 0.1234373078, 0.1387988329, -0.0605148524, -0.0891048238, 0.2045770288, 0.2369748205, -0.1637989432, -0.0001480881, 0.1688179672, 0.0768682212, 0.1082552150, 0.0282777902, 0.0192654487, -0.1273000836, 0.2622614205, 0.0505579375, -0.0955414921, -0.1633154899, 0.0304107573, 0.1485571861, 0.0994893536, 0.0146452505, 0.0826701745, -0.2197471261, 0.1860484332, -0.2260606736, 0.0577006079, -0.1182294637, -0.0059782569, -0.0553831384, 0.1938567609, 0.2339679748, -0.1651594937, -0.0385801867, -0.0161093734, -0.0059414450, -0.0002429348, -0.1182724684, -0.1316940635, -0.1605591327, 0.0859210715, 0.0627515987, 0.0190195236, -0.0301848501, 0.0671593472, 0.0556640178, -0.0629438087, 0.1003849581, 0.2610017955, 0.0168315209, -0.1928595304, -0.0209255032, 0.1036506295, 0.0209782645, -0.0132164573, -0.0426349640, 0.0064221076, -0.0577416010, 0.0500701219, -0.0516223758, -0.1227051616, 0.1548034698, -0.0049441699, 0.2024751753, -0.0018925918, 0.1480167955, -0.1327090859, 0.1884781867, 0.1240718886, -0.0260609146, 0.1292424947, -0.1652933657, 0.1000864878, 0.0374412760, 0.0856346339, 0.1989866644, -0.0086728325, -0.0517123453, 0.0384297073, 0.2467790395, -0.0719079822, 0.1794019341, -0.0014536931, -0.1752156615, -0.0821069181, -0.1396462917, 0.0096435240, -0.0407134965, -0.2653298080, -0.1194033548, 0.1416333765, -0.1367018819, 0.0542685054, -0.2783542275, 0.2297739834, 0.0318644829, -0.0158507843, 0.0598772317, 0.0776878074, 0.1310986280, 0.2776171863, 0.0385541953, 0.1253587455, 0.2148754299, -0.0395535491, 0.1219797954, -0.1094868258, 0.0475555062, 0.0938278213, -0.0880393833, -0.1132283434, -0.0408973284, -0.0449158698, -0.0691082105, -0.0457683168, -0.0163717344, 0.1601430774, -0.0394639373, -0.0076108822, -0.1312129200, 0.0303489249, -0.1195510179, 0.0499113016, -0.1475308388, -0.1393026561, -0.0080461213, -0.2198102325, 0.1166452169, -0.0186291188, -0.1147631109, 0.2337402105, 0.1071243733, 0.0217594896, 0.2177955210, 0.2221819609, 0.2078295946, -0.1994616836, 0.1042874381, -0.0732912645, 0.0863938406, 0.1840761453, 0.1866738498, -0.1664582342, 0.0700980276, -0.0109147225, -0.1031058207, 0.1606497467, 0.0614166446, 0.0078861928, -0.2781074345, -0.1099136546, -0.1718202680, 0.0421406142, -0.1143746600, -0.0977041945, 0.0419495218, 0.0834511071, 0.1790414155, -0.0499149263, 0.0875566378, -0.0378982835, 0.0936206430, -0.0581863895, -0.0245916247, 0.1131638885, -0.2215712816, 0.0339302383, 0.1937406659, -0.2601535916, -0.1209886447, 0.1409611404, -0.0225285701, -0.0250289105, 0.0961026773, 0.0291242134, -0.1601912379, -0.2423800230, -0.0896058902, 0.1661575586, -0.0493424907, 0.0848718360, 0.1473169327, -0.1944905967, 0.1887257695, 0.1490136385, -0.0458174720, 0.0587946698, -0.0755392686, -0.0998990983, -0.0753332973, 0.1170111001, 0.0395202301, 0.1691690683, -0.0294207949, -0.1144270971, -0.0478023998, -0.0480392352, -0.0772473738, -0.1751294285, 0.1187866032, 0.1804357618, -0.0867882967, 0.1125232503, 0.2709596753, -0.1377967000, 0.0561762266, -0.1526871920, 0.0021562797, -0.0636291429, 0.1592652500, -0.0072264168, -0.0343998447, 0.1959568560, 0.0575671792, -0.1060487181, 0.0179461651, -0.0195663981, 0.0271938946, 0.0686365440, 0.0458144620, -0.0226907469, 0.1757870615, -0.1093921065, 0.1986402571, 0.0955973789, 0.2277930379, 0.0519543551, 0.1391757578, 0.0548015088, -0.0682648197, 0.1037590578, 0.0162411332, -0.1170218736, -0.0044598356, -0.1584849805, -0.0792266279, 0.0429915600, -0.1757628024, -0.1767465770, -0.0043819132, -0.2679928243, -0.0849993452, 0.1011011973, -0.0290767904, -0.1771409959, 0.1694072485, 0.1290621608, 0.1601479799, -0.1771132648, -0.0447002128, -0.1080146804, -0.2457610816, -0.0582951568, 0.0156949852, -0.0794553310, 0.0042726630, -0.0549969189, -0.0467127822, -0.1164577529, -0.0470392443, -0.0771075860, -0.0486501493, 0.0326610208, 0.0506452434, -0.0113015445, 0.0263408478, -0.1180074811, 0.0036742913, -0.1632749289, 0.0853939354, 0.1758574098, -0.1939090788, -0.0014210879, -0.0514213555, -0.0040346254, 0.0296544991, 0.0049142013, -0.0810985193, -0.1033191457, 0.1975788325, 0.1988631040, -0.0190065820, 0.0212672800, 0.0998381823, -0.1769865006, -0.1767368317, -0.0186376981, -0.0663132519, 0.1426757276, -0.0372311287, 0.2121843100, 0.1994160116, -0.2532136142, 0.2612217069, 0.1044851318, 0.1440563947, 0.0026764518, 0.0356483981, 0.0677102730, 0.2213097513, -0.0231134295, 0.0255118962, 0.2431589365, -0.1293275058, -0.0439148396, 0.0305809118, 0.0448083058, -0.0643981248, -0.1504796147, 0.1106537804, -0.1239970997, 0.0586421862, -0.0782816038, -0.1168326959, 0.1112042889, 0.0410076827, -0.1111931428, 0.0118694184, -0.2443291843, 0.1297001392, 0.1837352812, 0.0421671346, 0.1620705575, -0.0838845596, 0.0640891865, -0.1407486349, 0.1675031036, 0.0662330464, 0.0463198945, 0.0844281316, 0.0815480053, -0.1581034511, -0.0881226063, 0.0166936256, 0.0797190219, -0.2098305523, 0.1724648774, -0.0921569616, 0.1206348613, -0.1641413718, 0.0510397665, -0.2615267634, 0.0619564541, -0.2586674094, -0.2010541409, 0.0103784185, 0.0848299935, 0.0749069750, 0.0821704045, -0.0009498370, 0.0394052602, 0.0155964522, -0.0100897579, -0.0013799974, -0.1585776210, -0.1129575223, -0.0668607280, 0.0513430238, -0.0000452271, 0.2132315189, 0.1596483439, 0.0343421847, -0.1484353095, -0.0206800010, 0.0963645056, 0.0397678725, -0.2441883832, 0.0987363234, 0.2722701132, 0.0724239275, 0.1345912516, -0.1255515665, 0.0625469163, -0.1512590945, -0.0125815524, -0.2204468846, -0.1425768584, -0.2267521620, -0.0469266735, 0.2289588898, 0.2427714169, 0.0915613100, 0.0274719354, 0.1137583703, -0.0247233100, -0.0083260452, 0.0507251956, 0.0151631944, -0.1148151532, 0.2582477927, -0.0632817820, -0.1094543189, -0.1898567528, 0.1190243289, -0.0978721902, 0.1249772981, 0.0613629967, 0.0647765473, -0.2389439642, 0.1580980122, -0.1727250069, 0.1840001196, -0.0184922479, 0.1779394746, 0.0926002264, 0.2597875595, 0.0587212294, 0.0827675015, 0.1525477767, 0.1475072801, -0.1088303179, 0.0334845334, -0.1286627650, 0.0210341942, -0.0487030745, -0.0504193604, 0.1272515208, -0.1511960626, -0.0581940226, -0.2823457718, 0.1857511997, 0.1192643791, 0.0202552918, 0.2077186108, -0.0383902825, -0.1108220965, -0.0189370513, -0.2700891793, -0.2101067752, -0.2151873559, -0.0095231198, 0.2540471852, 0.0361464135, 0.1117256358, 0.1028134823, 0.1275596023, -0.0589015186, 0.1322011352, -0.0614931025, 0.0238172803, 0.1766366661, -0.0129462024, -0.0231064837, 0.1489815116, -0.2241877466, 0.1470452398, -0.0991852805, -0.0951274633, -0.0306071807, -0.0145558836, -0.1111447588, 0.1163648814, 0.1058422476, 0.1057265997, 0.0835612863, 0.1723288596, -0.2620974481, -0.0004699033, -0.0449581109, 0.0699197650, -0.1421765387, -0.0192946829, 0.0593475960, 0.1200957000, 0.0823594481, -0.1508861780, -0.0643642172, -0.1627657562, 0.1432849318, -0.0321759358, 0.1946829259, 0.0008730525, -0.1068360433, -0.2082999796, 0.1906022877, 0.1437473893, 0.0919900537, 0.0905806795, -0.1379473209, 0.1960566491, -0.1238722727, -0.0211478770, 0.1797947884, 0.1933475137, -0.1093695536, 0.0682749525, 0.0323466733, 0.0739516914, 0.0996498391, -0.0063371700, -0.0857620165, -0.1751637012, 0.0845682472, 0.2210848629, 0.1079885960, -0.0536738001, 0.0833772421, -0.0122147687, 0.1668330133, 0.0969325304, 0.0889177397, -0.0564780422, 0.0960167125, -0.0117295217, -0.1599278152, -0.2153250277, -0.0578706078, -0.1311242431, -0.1606870294, 0.0731544420, 0.0480561368, -0.0455371700, -0.2357775867, 0.0518629737, -0.1289002299, 0.1043140143, -0.2214308530, 0.0103249168, 0.0481078848, -0.1092746556, -0.0292669795, 0.2082938701, 0.0195569601, 0.0718292370, -0.0633700639, 0.2012366802, -0.0331668109, 0.0780730993, 0.0124329980, -0.0369233787, -0.0844430253, -0.1781917810, 0.0751499757, -0.0006614965, 0.1776562333, 0.0167340972, 0.1773190200, -0.0953501239, 0.1616676152, 0.0623801537, -0.0528337993, -0.0435084626, -0.0252624992, -0.0360634886, 0.2192235440, -0.1376875788, 0.1270444542, 0.1990905106, 0.0589621477, 0.0308165234, -0.1179791242, -0.0290876068, -0.0846846476, -0.1040292680, -0.1161197647, 0.0313495696, -0.1473619044, -0.0054952651, 0.0489506163, -0.1745011508, 0.0166787617, 0.0305943228, 0.0078468025, 0.0338246226, -0.0912168697, -0.0559985191, 0.0097254682, 0.0624616593, 0.2314701229, -0.0897167251, 0.1567613333, 0.0464218259, 0.1244832128, 0.0222451407, 0.0063656736, 0.0655075535, -0.0220033824, 0.0677118748, -0.1151918471, 0.1032201871, 0.1216820255, 0.1050829366, 0.1680964082, -0.0976867974, -0.0289335400, -0.0923283622, 0.1424412131, 0.1582630128, 0.0763514191, 0.0687485188, -0.1631877273, -0.0656522661, -0.1847798377, 0.1597339511, -0.2603997886, 0.0499871150, 0.1629824042, -0.0113500655, -0.0018321265, 0.0135476701, 0.1063116193, -0.0911440700, 0.0774335265, -0.0123530328, 0.0252326950, -0.2006674409, 0.0128415721, 0.1546306610, 0.0999021009, 0.0117142405, -0.0391691364, 0.0864172578, -0.1873585433, -0.0991289765, -0.0575958528, 0.0653693229, 0.2125882208, -0.2069124281, 0.0249412321, 0.1845401376, 0.1695276350, 0.0674948320, -0.0065379273, 0.0026830782, -0.0683946013, -0.0229972508, 0.0179876685, -0.0296167154, 0.2298305929, -0.0782267153, 0.1028808504, -0.0948590487, -0.2268816382, 0.2570412159, -0.0648724437, -0.0099095032, -0.1715817153, -0.1676232815, -0.0740906149, 0.0248031318, -0.2263780087, -0.0970555320, -0.2279137671, -0.1016071662, -0.0532377586, 0.0815125853, -0.1207196489, -0.0948954299, -0.2330332547, -0.0682584792, 0.2602206469, -0.2026213109, 0.0885458514, -0.0673766434, -0.0655008256, -0.0032725509, -0.0855155587, -0.0212693475, 0.0826044530, -0.0046236683, 0.2480810732, -0.0593947805, 0.1611937582, -0.0933976173, 0.0976901352, -0.0483687036, -0.0294368453, 0.1450372934, -0.1004050300, -0.0571003370, -0.0977979526, 0.2055336684, 0.0377893969, 0.1107031852, 0.2348518223, 0.1084063202, -0.0323792212, 0.1271733046, 0.0728982165, -0.0667263865, 0.1900834739, 0.0890636668, -0.1593694389, -0.0403046012, 0.0543519706, -0.0964952186, 0.0765164867, -0.0298199560, -0.1641642898, -0.1069443524, -0.1159157231, -0.0349812172, -0.0741963759, -0.0365621932, 0.0556900576, 0.0121202823, 0.0289125443, -0.0952344760, -0.2135183960, -0.0845825970, -0.0882005394, -0.1706555188, 0.1159927845, 0.0567438304, -0.0466229655, -0.1682840735, 0.1623303443, 0.0312332343, -0.1136468351, 0.2338825911, 0.1838717610, -0.1484950185, -0.0609308556, -0.1365774125, -0.0819215849, -0.1571078748, -0.0719370991, 0.1490814537, 0.0222093295, 0.0564583205, -0.1217152327, -0.1761170030, 0.0687229186, -0.0730839595, 0.0133941472, 0.1248382479, 0.1843819022, 0.1853521615, 0.0944107696, -0.0649210736, 0.0140740620, 0.0593948513, -0.0784161761, -0.0646719784, -0.0572029352, 0.1843315065, 0.1214279160, -0.0838049874, 0.0233545192, -0.0335178189, 0.1190261841, -0.2373653799, 0.1683845669, -0.0297033992, -0.0937240571, -0.0265170708, -0.0607564338, 0.0411934480, -0.1132379398, 0.1069883183, 0.0367356203, 0.0661034584, -0.1652577966, -0.0091627445, -0.0452621132, 0.1622492075, -0.0645006895, 0.0654870719, 0.0805738047, 0.1565074027, -0.0014157862, 0.1378040761, 0.1484739333, 0.0888734534, -0.1161141992, 0.0516113602, -0.0736403316, -0.1344738901, 0.1314134896, 0.1933012903, -0.0497698970, -0.0118143009, 0.0814084411, 0.2016605288, 0.0519183129, -0.1786333621, -0.0057250503, -0.0021360074, -0.0562540293, -0.0145805851, -0.0308251344, -0.1566667110, -0.2074548155, -0.0038848349, -0.1340649873, 0.2044784427, 0.1504071653, -0.1141649112, -0.0298964120, 0.2746571302, -0.0657562241, 0.1173920035, -0.0158731826, 0.0225356743, 0.1984087378, 0.1142048910, -0.0747692585, -0.0442042053, -0.0843604952, 0.0850119069, -0.1533964574, -0.0407563597, 0.0891082361, -0.1160680875, 0.1697367579, 0.1392858028, -0.1854412854, 0.0406135023, -0.0972021967, -0.2643384933, -0.0352261811, 0.0402177200, -0.0764341801, -0.0669640228, 0.1601161063, -0.0178321712, -0.0161930192, 0.0874381810, -0.2070274502, 0.1534101665, -0.0072226077, 0.0215489455, 0.0179363769, 0.0980988815, -0.0245325919, -0.2630396485, -0.0300644487, -0.0956777781, 0.0188809186, 0.2043943107, 0.1248170137, -0.0947412997, 0.1033005863, -0.0764368623, 0.2179618329, 0.1422033608, 0.0355180018, -0.0004771886, 0.0390794463, -0.1695334762, 0.1598280072, -0.0684284940, -0.0530473106, 0.1969056278, -0.0114266630, 0.0228668433, -0.1007426009, 0.1145955995, 0.2063501030, -0.0222289637, 0.0576735251, 0.1168607697, -0.0975264534, 0.0109197609, -0.0598813891, 0.0598284751, -0.1215461940, -0.0712918565, -0.1486301869, 0.2051498443, 0.1906013489, 0.0821116716, -0.0553594902, 0.2259035856, -0.1127056107, -0.0394555777, -0.2320481390, 0.0200090744, -0.0985833034, -0.1991852522, -0.0883214399, 0.0618192926, 0.0645888969, -0.2292028964, 0.2465191931, 0.1088384688, -0.0667654872, -0.1325570345, 0.0620398186, -0.0021179933, 0.2799310088, -0.1015559286, 0.0293866210, 0.1136773974, 0.1521899551, 0.0675525069, -0.0204780176, 0.1656267941, -0.1122600213, 0.0370089374, 0.2299036086, -0.0229472276, -0.1253837496, 0.0256424230, -0.2246967703, 0.0554145053, -0.0548750572, -0.2078243643, 0.1470462680, -0.1135593131, -0.0396660753, -0.1185731292, -0.1156212091, -0.2094763070, -0.2471200973, 0.0354011431, 0.0196113903, 0.0096425517, -0.1025430411, 0.0853116512, -0.0947948471, -0.1295057535, 0.0192230437, 0.1200943515, 0.1778406501, 0.0172249693, 0.2302501798, 0.1781756282, -0.0593618602, 0.1512763947, 0.1219237223, 0.0307407025, -0.2634921074, -0.0176604819, 0.1994895786, -0.2407119721, -0.1172977462, 0.1606897563, -0.0482931770, 0.1688044965, -0.0809958503, -0.0934910327, 0.1090861708, 0.2646735907, 0.1847166866, 0.0762502477, 0.0440983921, 0.1187755093, -0.1497442126, -0.0003576515, -0.0994996056, 0.0474185683, 0.1683809906, 0.1434674263, -0.1580462158, -0.1707268953, -0.0341256075, 0.2365132570, 0.0398142487, 0.2485431433, -0.0182256345, -0.0724759772, 0.1547843367, -0.0644209012, -0.1867848635, -0.0012353607, 0.2014729828, 0.1144003049, -0.0272466894, 0.0769063458, -0.0145818964, -0.1814137697, 0.1525219083, -0.1817495078, 0.2079787552, -0.1525942981, 0.0252292417, 0.2624324560, -0.0076012267, 0.0131203029, -0.0194951650, -0.1162378266, -0.0992886126, -0.1423496902, -0.0709994212, -0.1353080124, -0.0657607913, 0.0416779183, 0.0821372420, 0.0151705742, -0.1782926172, 0.1435852498, 0.0300797131, -0.1760364920, 0.0007008270, 0.0433046259, -0.0637449250, -0.1219279021, 0.0404279046, -0.0046991296, 0.1077372655, -0.2230410129, -0.1572806537, 0.1317253560, -0.1234914660, 0.0224522334, 0.0491146035, 0.0268978644, 0.0346645489, -0.1449899375, 0.0127249630, -0.1480960101, -0.1206343696, 0.1161430776, 0.0133911185, -0.2044269592, -0.0254255347, -0.0832225904, -0.2419137359, 0.1445439160, 0.0315492637, -0.1328445822, -0.1597295105, -0.2682256997, 0.0447418988, 0.0533437096, -0.0967941657, -0.1277056634, -0.0467681363, 0.0384697616, -0.0717094988, 0.2379359752, 0.0228643399, -0.0507181548, 0.0983671024, -0.0605193749, -0.0306482948, 0.0390487202, 0.0595351458, -0.0605241433, 0.2261264920, 0.2022088617, 0.0918898508, 0.1819755733, -0.2415440977, -0.0357497111, 0.1461183429, -0.0294526983, -0.0707477704, -0.0664931387, 0.0996570438, -0.0791026130, -0.0904443711, -0.1429583728, -0.1195054576, -0.1187115908, 0.0756022558, 0.0436183587, -0.1107105538, 0.0507781804, 0.0607985258, -0.2252834588, -0.0112541402, -0.0321857184, -0.2249116302, -0.0145431636, -0.1440317631, -0.1350892782, 0.1277164966, 0.0573631115, 0.1928638667, -0.2739881277, -0.0029041430, 0.1332190037, -0.0386511870, -0.2487277240, 0.1123360544, 0.0497194268, 0.0704070181, 0.0338766389, -0.1185440496, 0.0584758334, -0.0047558639, -0.1998577118, -0.1587214470, -0.0326524116, 0.1245596036, -0.1421275288, 0.2315197736, 0.1145486236, 0.0810661390, 0.0216617659, -0.0734568536, -0.0899802670, -0.0318689421, -0.1244003251, -0.0559583940, -0.2299164236, 0.1115040556, -0.1154186279, -0.0763219818, -0.1002551541, -0.2421576530, 0.0475171506, -0.0471226685, 0.0125234453, -0.1062432230, 0.2764371037, -0.0799080878, 0.1744359136, -0.0261478443, 0.1028317288, -0.1222193912, -0.1536888480, 0.0243921708, 0.0611365847, 0.2286438197, -0.0434894115, 0.0000928004, -0.0795851797, 0.2223672718, -0.1865889281, -0.0149388779, 0.1639199108, 0.0875289515, -0.0116571803, 0.1094428897, 0.1090248525, 0.2004728615, -0.0464768521, -0.0827075765, 0.0590886734, 0.0345033929, -0.2229731083, 0.0344382189, 0.0701341033, 0.0813782141, 0.0168000776, 0.1294783503, -0.0295103826, -0.0410157144, -0.2319647223, 0.0145184817, -0.1060533002, 0.0564987697, 0.0766723305, 0.0009865644, 0.1328888834, -0.1638748199, 0.0774674267, 0.2435654402, -0.0613019057, 0.1647419333, 0.0437307209, 0.0235077608, 0.0089347363, -0.1160134226, 0.1078955457, -0.1095768958, -0.1082529724, -0.0093342792, -0.0382892676, -0.0651122555, -0.1094583571, -0.0212965757, 0.0437287837, -0.2280881852, 0.1518830508, -0.0183424018, 0.1373662204, -0.1478015929, -0.0129220281, 0.0054374146, -0.1909141093, -0.1358777583, -0.0362815931, 0.1371918470, 0.0134742251, 0.0745789334, -0.1477866769, -0.1344005913, 0.1402651072, 0.0386884585, 0.1460961103, -0.0604948588, -0.2010867745, -0.1612946987, 0.1128993407, 0.0011031684, 0.1211562157, -0.0136764301, -0.1304821521, 0.0276362337, 0.0951165035, -0.0409243293, -0.2355531305, 0.0543883890, 0.1529866904, -0.0953955874, 0.1174364612, 0.2278681248, -0.1388391256, -0.1509977281, 0.1105414778, 0.1215069741, -0.1270584762, 0.0269044507, 0.0420390032, -0.1565691084, 0.0912152156, 0.0620334037, 0.1297397465, -0.1038372666, -0.2111200094, -0.1794249266, 0.1708167791, -0.0737089440, 0.1221383661, -0.2505664825, -0.0037716457, 0.1096651554, 0.1953633875, -0.0188121945, -0.1880748570, 0.1879844069, -0.1112424955, -0.0806584507, -0.1474171728, -0.0068813590, -0.1447366178, -0.1059621498, -0.0921676680, 0.0238621347, -0.0484921597, -0.0910092220, 0.0424305201, -0.0701550767, 0.1171212271, -0.2540730536, -0.0297955703, 0.2103137076, -0.0571988411, 0.1536517292, 0.2708551586, -0.1060248017, -0.1221327409, -0.0209254790, 0.0864039212, -0.0823883414, -0.0050858301, -0.1705233157, -0.2157920748, -0.0538630150, 0.0824041888, -0.0649684593, -0.1880152076, 0.2155455202, 0.0886354893, -0.0571447462, -0.1869286001, 0.1417676955, 0.0740658715, -0.0087668607, 0.0210565571, 0.1335129142, 0.1231557801, 0.0076591182, -0.1747460067, -0.0672305524, 0.0025199149, 0.1504046619, 0.0077515119, -0.0974485055, 0.0080609461, -0.0078573935, 0.0764740705, -0.2625780702, -0.0627615750, 0.0652540550, -0.1554252058, 0.1017580777, -0.1938427240, 0.1423964202, -0.0043582888, 0.0029583813, 0.0853684023, 0.0055530649, -0.2258425355, -0.0724524558, 0.1244739592, 0.1488110721, 0.0084663518, -0.0704825521, 0.0969408154, -0.1833945215, 0.0302678589, -0.1629849523, 0.0114603927, 0.0716026425, 0.0853135958, -0.1633291990, -0.0199484508, -0.1360829771, -0.1828176081, 0.0263925549, -0.2535192966, 0.2013472617, 0.1304048598, -0.1025490016, 0.1094630659, 0.0469559990, -0.2596859634, 0.0624806732, 0.1114001423, -0.0953694209, -0.1670563519, -0.1772405654, 0.0955687389, -0.0496483967, 0.0057337279, -0.0232116003, 0.0922020078, 0.1228568032, 0.2058818936, -0.0813074782, -0.0429836363, -0.0353385061, 0.0257331152, 0.0781997517, 0.1742559373, 0.1422048360, 0.0232994445, -0.2212056369, 0.0206387583, 0.0028961864, -0.2475099117, -0.1904443502, 0.0158822704, -0.0934864730, -0.1238156259, 0.0492695682, -0.1889426261, 0.0048320321, 0.0314337537, 0.0276692677, 0.1216020435, -0.1387061328, 0.0122539541, -0.0044825622, 0.0647070557, 0.0306750592, 0.0819330513, -0.1143473238, -0.1480489820, -0.1760711074, -0.0473288819, -0.1904684007, 0.0528355204, 0.0971096307, -0.2482751608, -0.0618083999, -0.1167586222, 0.1589336544, 0.0888594612, -0.0985343829, -0.0034956119, -0.0636792853, -0.0570834801, -0.1389472038, 0.0281614605, 0.1196381673, -0.0951509625, 0.1514751613, -0.0056719757, 0.1422780454, -0.1503601372, -0.1359504461, 0.0796184689, -0.1367290914, -0.0645225942, 0.1628889889, 0.0792093202, -0.2436355352, 0.0404109657, 0.0911157578, -0.0292937905, 0.0846123174, 0.1162217110, -0.1272150278, -0.1681341976, 0.1909259856, -0.0754309297, -0.1604565382, 0.1895983964, -0.1099135876, 0.2019222528, -0.1150998101, -0.0534717776, -0.0972171277, 0.0119254235, -0.0013129929, 0.1362901479, 0.0821665302, -0.0535934120, 0.1045406237, 0.0955969468, -0.0602935143, -0.0106180487, -0.0079996260, -0.0065494599, 0.1016926467, 0.0292217489, -0.0645782501, 0.1699111313, 0.1356334388, 0.2120326310, -0.0550776571, -0.1276060194, 0.2525701523, -0.0705532059, -0.0623645373, 0.1842790097, 0.1265599728, 0.0883755386, -0.1538619101, 0.0881982446, -0.1223395541, -0.2693631649, -0.0549081787, -0.0037318496, 0.2610833347, -0.1420976222, -0.0730072558, 0.0284550600, -0.1078940630, 0.0374384746, -0.1205703318, -0.0440741889, 0.0868894234, 0.0066471449, 0.0617822707, 0.1259683371, -0.1569829583, 0.0453483574, 0.1079907566, 0.0851454362, 0.0512978435, -0.2047178149, -0.1482848525, -0.0222723596, 0.1592972279, 0.0733951032, -0.0078090695, 0.0178852081, 0.0230333041, 0.1264617592, -0.0844481066, 0.2442993820, -0.2135263830, -0.0329954736, -0.2735542059, -0.0462409593, 0.0448933803, -0.0328496955, 0.0431617536, -0.0022767789, 0.0195249561, 0.0499081165, -0.1750777811, -0.0423792191, -0.1279583275, 0.0019250721, 0.1087638810, -0.1270159781, -0.2667860091, -0.1050398722, -0.1650488526, -0.2148655504, 0.0258168560, 0.2311600149, -0.1437345892, -0.1189617440, -0.0475703701, 0.0594099984, -0.0926521495, -0.1792000234, 0.1207899079, -0.0953251272, 0.0864835083, 0.1847686619, -0.0741227195, -0.1663770676, 0.0306367092, 0.1837746203, 0.0289392658, 0.0963122994, -0.2127144188, -0.0622524954, 0.0365068130, 0.2137878090, 0.2410204560, 0.0866343603, -0.0980801955, -0.2181093246, 0.1348939091, -0.0710284561, 0.0456270054, 0.1330194175, -0.0069695483, 0.0897204950, 0.1212498546, -0.1479899138, -0.1699861288, 0.1724316776, 0.0386439785, -0.0492103770, 0.1079867408, -0.0653856471, 0.0825221911, 0.0728915110, -0.1106334403, -0.0054826550, 0.1500339508, -0.0522617362, 0.2048200369, 0.1037475243, 0.0196953025, 0.0996671915, -0.1951987743, -0.0268562008, -0.0465266556, 0.2685778439, 0.0321197398, 0.0175861530, 0.2075450122, -0.2102508843, -0.0484717414, 0.1720203310, -0.0604541562, 0.0798986480, 0.2684780955, 0.1799395531, 0.0498928316, 0.1806203872, -0.0192284174, 0.1636504829, 0.2168261707, 0.1899536550, 0.1162313670, 0.1455947906, -0.0061535765, -0.0235892348, 0.1884537190, -0.1650516838, -0.0768882111, 0.2060604095, -0.1200321391, 0.2192810774, 0.0517745614, -0.1245277002, -0.1154423133, -0.1715041250, 0.0137580596, -0.0038083808, 0.1778529584, -0.0383682698, -0.1737165153, -0.0605875738, 0.0170966350, 0.0843941346, 0.0208538324, -0.1510397941, -0.0494778454, 0.1754389703, -0.0145304827, 0.1928493530, 0.0181439277, -0.0540373027, 0.0519078411, -0.0816815645, -0.1995609999, 0.1210377738, -0.1040026695, -0.0257978514, -0.0356987417, -0.0103677539, -0.0198228490, -0.1337191612, -0.0149855679, -0.0936145112, 0.0719601288, -0.0708701834, 0.2119782269, -0.1199982017, -0.1708571613, 0.0090374351, 0.0180137958, -0.1043734029, 0.0011450356, -0.0678069815, -0.0204895623, -0.1002949029, -0.1066869050, 0.1619603783, -0.0583991632, 0.0950730965, 0.0668177158, 0.1036324576, 0.0510678180, -0.0629157871, -0.0683890358, 0.0340996943, 0.1350111067, -0.2546268404, 0.0914119333, -0.1097340286, 0.1759468168, 0.0531187356, -0.1238341555, 0.0996662006, -0.0857603997, 0.1550164372, 0.0667356700, -0.2792401016, 0.1838540137, 0.0333150625, -0.0990936905, -0.0289859474, -0.1368990690, -0.0149475159, -0.0601932667, 0.0085523613, 0.1668911725, 0.0298870951, 0.1040912569, 0.0269287843, -0.1341623813, 0.0569776520, 0.1032449603, 0.1847388446, 0.2718326449, -0.1533420533, 0.0891298056, -0.2469133735, -0.0581763871, -0.1415731460, -0.0711245090, -0.0308404323, -0.2084698081, -0.0606492534, -0.0794023648, -0.2187870890, 0.0208686423, 0.1136015877, 0.1953787208, -0.0229674820, 0.1391309947, -0.0119952373, 0.1438543051, -0.0026291171, -0.0880125016, -0.1385613531, 0.2173813432, -0.1845397800, -0.0605258867, -0.0594466999, -0.0993099809, 0.1513844579, 0.0673794448, 0.2551544607, -0.0693262592, 0.0783975124, -0.2195474207, 0.1046332493, -0.0317725204, -0.0089004301, -0.0983919576, -0.1614531577, 0.2039086521, -0.1625916809, 0.0654556304, 0.0239758790, 0.1819670796, -0.1160627082, 0.0588610768, -0.0475380123, 0.0640833154, 0.0517070554, 0.1076446474, -0.0861461535, -0.0891335383, -0.0082583157, 0.0918545797, 0.2443072349, 0.0982934237, -0.1337468177, 0.1006321833, 0.1688129008, 0.1476627141, 0.1282124668, 0.0259929448, -0.0225164387, -0.0559905246, -0.1383936256, 0.1620829701, -0.0355343707, -0.0729252771, 0.0716379955, 0.2562800050, -0.1045849100, 0.1312605590, 0.1321780384, -0.1979140788, 0.0476509519, 0.0914525613, -0.2411397547, 0.1369422972, -0.1123736724, -0.1100384966, -0.0604221448, -0.1701976806, 0.1502705812, 0.1199686006, 0.0829920024, 0.2214353830, -0.0244721547, -0.0779291913, 0.0740973204, 0.1352007240, 0.2250801474, -0.0085633527, -0.0827237517, -0.0365570411, 0.0184978060, -0.1042691842, -0.1014353260, 0.2270442396, 0.0635281950, -0.1313525438, 0.1487405747, -0.0474497974, 0.0184123162, 0.2477304339, 0.1368749589, 0.2762061954, -0.1328358799, 0.0554624274, 0.0235086493, 0.0565530360, -0.2484270930, -0.1612083912, 0.0548571534, -0.1910929680, -0.2030767649, 0.0012044447, 0.0965077281, 0.0037165920, 0.0701121986, -0.1627300531, -0.1171963289, -0.1425503194, -0.1666594446, 0.1163703054, 0.2229895443, 0.0338238664, 0.0255124141, 0.0045043766, -0.1584985703, -0.1038037017, 0.1922259927, 0.2121353298, 0.0561894178, -0.1363929659, 0.1512310058, 0.0808615983, -0.0030227336, 0.1322885752, -0.0516239665, 0.0267610904, -0.1069562882, -0.1866881996, -0.1791938990, -0.1705133617, -0.0526057780, 0.0488130338, -0.0666088089, -0.1725571454, 0.0587386116, -0.1570811719, -0.0257101916, 0.0570823252, -0.0340509862, 0.1539368778, -0.2096506208, -0.0735065341, 0.2138688117, 0.0305487551, 0.0808408111, -0.0039605922, -0.1107487381, -0.0230347291, 0.0080948025, 0.2217622250, -0.1085582599, 0.2320145071, 0.1550582051, -0.0814770609, 0.1262227744, 0.0286537185, 0.2410921007, -0.0863729864, 0.1615275890, 0.0349840894, 0.0861849636, 0.1069635004, -0.1625087410, -0.1151976213, -0.0152445016, -0.0690037087, -0.0297967717, -0.0866654068, 0.1777207851, -0.1170219332, 0.1602573842, -0.0488581210, -0.2380033880, 0.1441514641, -0.0483059175, 0.2074591964, 0.1253611147, 0.0063980757, -0.1372862905, -0.1008149460, 0.1304082870, -0.0284634028, 0.0259576496, -0.0663033873, -0.0012510478, 0.1773821414, 0.1752382666, 0.1897866875, 0.1631458849, -0.1179723144, 0.0574076362, -0.0629590377, 0.0044736126, 0.1020678356, 0.1525184363, 0.0593231507, -0.0605333149, 0.0832652003, -0.1965741962, 0.0970161334, -0.0475461185, 0.0068101478, -0.0584776402, -0.1385664195, 0.1036736593, 0.1927599758, 0.0043718871, 0.0594387464, 0.1456462890, -0.1772361994, -0.1726018190, -0.0085182637, -0.0245557707, 0.0923616737, -0.0342174955, -0.0324134938, -0.0260451678, -0.0046475986, -0.1212293208, -0.0461359881, 0.1394493878, 0.0249641947, 0.0304446425, -0.1189628914, -0.1307023466, 0.0796833783, -0.1142447293, 0.1177489460, -0.0932144523, -0.0638191998, 0.2223384082, -0.0216734484, 0.0324976891, -0.1602857411, 0.0698067844, -0.1496751010, 0.2379212230, -0.1814829260, 0.1040722504, 0.2278446853, 0.0758731663, -0.0593123846, -0.0964123830, -0.0659240931, -0.1783764660, -0.0953712165, 0.0579165407, -0.2247265875, -0.0712277368, 0.0148617104, 0.1718471646, 0.1864973605, 0.0152308261, -0.0273360107, -0.2111885101, 0.2446478307, -0.0214165784, -0.0172396470, 0.0282891262, -0.1451620162, -0.0502229556, -0.2728531361, -0.2593823373, 0.0380080231, 0.2322151512, -0.1201570481, 0.0554763153, 0.0503560007, 0.1404930204, -0.0064345198, 0.2027073503, -0.0280237831, -0.1562415957, -0.1067590863, -0.1049624830, -0.0046043969, -0.0615533032, 0.1914315522, 0.0934649259, 0.1699049324, -0.0138680125, 0.1578656584, 0.1948694736, -0.0759371072, -0.1380699128, -0.1033615619, -0.0425568931, -0.0018379152, -0.2322745472, 0.0178012848, 0.0828709900, -0.0320974253, 0.0886263028, -0.0611103438, -0.0049022129, -0.0532561690, -0.0352129564, -0.0380170718, -0.0942288786, -0.0793540329, -0.1316419691, 0.2629543543, 0.0945265144, 0.2132733911, 0.2788494229, -0.0009739239, 0.2265962809, 0.1054912657, 0.0033684568, 0.2066919208, 0.2604739070, 0.1338387728, -0.0612357408, -0.0029370002, -0.1362065375, 0.0107574007, -0.2147597969, -0.0352010131, 0.0048046149, 0.2642283738, -0.0674625561, 0.0741090849, 0.1291118860, -0.1070469245, 0.1938615739, -0.2703678608, -0.0090792989, 0.0409746878, -0.0439113118, -0.0461615585, 0.0495801680, 0.0019146944, 0.1611115634, -0.0428733639, 0.1530847251, 0.1495253593, -0.0897092968, 0.0640875995, -0.1242740825, 0.0203239191, -0.1769534796, -0.0057076165, -0.0410096645, -0.1426602602, 0.1988848299, 0.0740567893, -0.1151081026, -0.2033191472, -0.0710902289, -0.0920554772, 0.0961377397, -0.0029484457, 0.1311910301, 0.0487096012, 0.0610235371, -0.1964453012, -0.0577590466, -0.0490070619, -0.0105482833, 0.1257606745, 0.0065933666, -0.0406859927, 0.1077428684, -0.0351452790, 0.1477759629, 0.0373684615, 0.1110891774, -0.1417366117, 0.0478990488, 0.1576405615, 0.1849113852, -0.0265808422, -0.0311338119, -0.1397789717, -0.0097732190, 0.0556587391, -0.0822356418, -0.0792368054, 0.1619954258, 0.2647103071, 0.2238351256, 0.1692844629, -0.1318484992, 0.0753535032, -0.2015217394, 0.1267337799, -0.0083862003, -0.0534423552, 0.1179292724, 0.0834725052, 0.2645656168, -0.2803961933, -0.2657664418, -0.2629380524, 0.1144755036, 0.1807493120, 0.0202894304, -0.1524016559, -0.0352311060, 0.2314908653, -0.1397392303, 0.1925141811, -0.1273716837, 0.0637485981, -0.0861575902, 0.0237311348, 0.2597231865, 0.1377819479, -0.1383999288, 0.2669335008, 0.1592659354, -0.1345055550, -0.1111186445, 0.0317972079, -0.1482809484, 0.1461188644, 0.0983299240, 0.0358944014, 0.1529905796, -0.1990724355, 0.1163784117, 0.0341608599, 0.0213435236, 0.1855085045, 0.0764051899, -0.2563100755, -0.1371045113, -0.1968826950, 0.1214135662, 0.0891462117, 0.1129436269, 0.0822723508, 0.1773888320, -0.0419730023, -0.2740709484, 0.2370183468, -0.0243616011, 0.0772222430, -0.1341144890, 0.1157203242, -0.0671077669, -0.2352999747, 0.1606309414, -0.2042253911, 0.0901779383, 0.1230809763, 0.0976264477, 0.2436202615, 0.1526764482, -0.2687080204, 0.0320026129, -0.0008586835, 0.0617462620, 0.1063226536, 0.1089188531, -0.1714255363, -0.2424745858, -0.0295485258, -0.1638320237, -0.0487956442, -0.1669603437, -0.1449934840, -0.1003095061, 0.0336251818, -0.1400456429, -0.0715810880, 0.1395759881, 0.1059461161, -0.0745196417, 0.0562013574, 0.0607200861, 0.2184020132, 0.1245209351, 0.0963501632, -0.1854257286, 0.0459761918, 0.0733364373, -0.0189581513, -0.1355349869, -0.0866773352, -0.0034654960, -0.0444005281, -0.1015825644, -0.0122639304, 0.1879365444, -0.1098876968, 0.0808541998, 0.0811937973, -0.0766374171, -0.1758136898, -0.0330561474, 0.0668303892, 0.0310469195, 0.2342931479, -0.0108119333, -0.1859364361, 0.0758382827, -0.2200838178, 0.0280993432, -0.1701628268, -0.0638788566, 0.1027230099, -0.1732338816, -0.0154351275, 0.0104738250, 0.0063697458, 0.0367542244, -0.1514165252, 0.0105545633, 0.2183434516, 0.1910859793, -0.2556969523, 0.0369636081, 0.0915046111, 0.0834259391, -0.1234027669, -0.0299721025, 0.1524008811, -0.0256640259, 0.1815834045, 0.1128525659, -0.1821818352, -0.0354003012, -0.0799374431, 0.0701737553, -0.0321497731, 0.2611753941, 0.1296479553, -0.1366558671, -0.0831592083, 0.1568756700, -0.1711399257, 0.2372044474, 0.1525434256, -0.0697230101, -0.0083148414, -0.1283979267, -0.1334880143, -0.0889659226, 0.2638891041, 0.0616809055, 0.0835948735, 0.0150552290, 0.0883837640, 0.1317017674, 0.0292268544, -0.1103788391, 0.0443690531, 0.0399371125, 0.1088502407, 0.0957074612, 0.0327543877, -0.1134904698, -0.0618433766, -0.1003665328, 0.0297105350, 0.0969400406, 0.1577938646, 0.0863274187, -0.0609688498, -0.0149105489, -0.1620370746, 0.0976953804, -0.1492563635, 0.1494666785, 0.0466466434, -0.0194145925, -0.1195695102, 0.0757429302, 0.0753449202, -0.0620605908, -0.0669606104, -0.2634992898, 0.1982232034, -0.0134467017, 0.0765551105, 0.1774836332, 0.0040611913, 0.0288576726, -0.0644881204, 0.2372591048, -0.1955393404, -0.0012870741, 0.0406689644, -0.1100546271, 0.0730074570, -0.0767455697, -0.1885594577, 0.1980430931, 0.1549994946, 0.0628455952, -0.1671819538, -0.1263533384, 0.0244462453, 0.0175402611, -0.0275439359, 0.1254365146, -0.2454616129, 0.0366851240, -0.0786117241, 0.2044630796, 0.1005479470, 0.0805256441, -0.2343394607, 0.0288936943, 0.2318563461, -0.1207369938, 0.1658048034, -0.1081543267, 0.0995324105, 0.0606961660, 0.2525600195, -0.0771232098, 0.0091885170, 0.0093659228, 0.0020911805, 0.0430883318, 0.0364304520, 0.0536833368, 0.0494372100, 0.1127002984, 0.0704621598, -0.0293142721, 0.2006812245, -0.0139263067, -0.1990458667, -0.1237630919, -0.0174963884, -0.0028546625, -0.0339098014, 0.1549821943, 0.0555569865, -0.0335060433, 0.2149581611, 0.2043598741, 0.0272179004, -0.1913048178, -0.1883547008, 0.1454517543, 0.1059805080, 0.2606812418, 0.1229491457, 0.1282290667, 0.0897806361, -0.0069580586, 0.0030044068, 0.2104963511, 0.0102583831, 0.1191567853, -0.0595183447, -0.2243894935, 0.0010496534, -0.1871782690, -0.2689408660, -0.0322034881, -0.2346863002, -0.1203608513, -0.0635092258, 0.0463940948, 0.1234589145, -0.0065353308, -0.0392669626, 0.1311183870, 0.1397207975, -0.2820742726, 0.1121352613, 0.2185174823, -0.2472868413, 0.0418428294, 0.0048940410, 0.2816419005, -0.0504092425, -0.0079685943, 0.0274404995, -0.0770016834, 0.0695064962, -0.0974004120, -0.0678156689, -0.1996727884, 0.0191036835, -0.1460421383, 0.0322301164, 0.0573803969, 0.1368405819, -0.1506786346, 0.0240214635, -0.2756761909, -0.2000542879, -0.1192941293, -0.0944950804, 0.2358227521, -0.0086605661, 0.0075332229, 0.1699314862, -0.0072728256, 0.1823993772, -0.1934118718, 0.1452776790, -0.0101846885, -0.2004598379, 0.0088021830, -0.0126402164, 0.1124496982, -0.2026398182, 0.1389897466, -0.0804986581, -0.0240008123, 0.0096908677, 0.1177593321, 0.1849278957, 0.0953032970, -0.0432819277, -0.0370129980, 0.0459801666, 0.1138913929, -0.0017446523, 0.0088478616, -0.0332859270, -0.1206964627, 0.2646784484, -0.0957370698, 0.1513352245, 0.1184134856, 0.0167742260, -0.1469124556, -0.0089369817, 0.0763883889, 0.2392963618, -0.0307761841, 0.1492915154, -0.1125485823, 0.0967507809, -0.1200398281, -0.1693342775, -0.1437187940, -0.0278942678, 0.0128410729, 0.2035315037, -0.0609805547, 0.0042835488, 0.0888626873, -0.0132097192, -0.0773645788, -0.2364102304, -0.1218117028, 0.0791838393, 0.0826048702, 0.0657026395, 0.1927388906, 0.1196987852, -0.0207677856, -0.0781269595, 0.1212776154, 0.2509105504, -0.0626554266, 0.0108677093, -0.1669206619, 0.0504479930, 0.1230442524, -0.1796719730, -0.1665630937, 0.0660260692, 0.2464734167, -0.0793028027, -0.0829370916, 0.0160480794, -0.0516308323, -0.2231928855, -0.1591642946, 0.0202512648, -0.1138731465, 0.2019941360, 0.0588826127, 0.0834426880, -0.1754364818, 0.0111272009, -0.0110542309, -0.1026512608, -0.2112692893, -0.1011284739, 0.0110135041, -0.0146524757, 0.2273183763, 0.0104774879, 0.1150756180, -0.2502756715, 0.0356581286, 0.0009359971, -0.0353597552, -0.1861865819, -0.0388331525, 0.0224898048, 0.1330142021, -0.0384183489, -0.1111030132, -0.1632199287, -0.0834806561, 0.1350844651, 0.1241927221, 0.1807720959, 0.1302429438, -0.0442551933, 0.1596897840, 0.0097213164, -0.0522720963, 0.0999883711, 0.0360077322, 0.0697392300, -0.0629911646, 0.1405325085, -0.0248385742, -0.0887777656, 0.0190876219, -0.0362012461, -0.2420226783, -0.0275528282, 0.1867802441, 0.2062830329, 0.2609383166, 0.0461749323, 0.0660670623, -0.1574625522, -0.0224751253, -0.1900394261, -0.0827025548, -0.0894008800, 0.0186678506, 0.0540050454, -0.1192828566, -0.0723755360, 0.2669978440, -0.0864318535, -0.0195638556, -0.0916279852, -0.0516523942, 0.1821352988, -0.0942761749, 0.0842078626, 0.0501271002, 0.0898605064, -0.2379200608, 0.1058373675, 0.0573915392, -0.1201045439, 0.2652873993, 0.0452481769, 0.0355132669, -0.0899100080, 0.1007688642, 0.0021265144, 0.0030161929, 0.0001501645, -0.0465936959, -0.0880843997, -0.0067790616, 0.0102186352, -0.0982394367, -0.1048706323, 0.0192910526, 0.1104700863, 0.0070070061, -0.0074105458, -0.0084937420, 0.1223415211, 0.0629450455, 0.1109698936, 0.0496369749, -0.1296099573, -0.1266070306, 0.1298454106, -0.1855257899, -0.0817502812, -0.0477841422, 0.0789648965, 0.0297534615, -0.0416653939, 0.0421737991, -0.2244775146, -0.0467266776, 0.1961131692, 0.0038463234, 0.1455335468, -0.1043715850, 0.1658092886, -0.0235975645, 0.0559852049, 0.1252991408, 0.0192904957, 0.0906032994, 0.0785902366, -0.0247896928, 0.0025226816, -0.1119455546, -0.0413665473, 0.1206640676, 0.0170147792, 0.0861098170, 0.1070291474, -0.0389221460, 0.0728153363, 0.2220948488, 0.0655619428, 0.0912803859, 0.0724531040, -0.0108066779, 0.0423209779, -0.0283288006, 0.1119356379, -0.0411149785, -0.0688725859, 0.0237283893, -0.0281249117, -0.2257614881, 0.0510375053, -0.1663507223, 0.1059839278, 0.0397436097, -0.0145116830, 0.2504450679, -0.0227321871, -0.0070454818, 0.2505027056, 0.2615623772, -0.0015941738, 0.0279856995, -0.2316071093, 0.1023832336, -0.0883696228, -0.1672777981, -0.2423557937, -0.0015620547, 0.0556428432, 0.1063899696, -0.0076315864, 0.0229922310, -0.0560546033, -0.2430579215, 0.1878398061, 0.2674015164, 0.0917006359, 0.0259614754, -0.0457214266, 0.0147080254, 0.0987416953, 0.0306913815, -0.2554287612, -0.1573362350, 0.0391545594, -0.0329704545, -0.0415558703, 0.0088109383, 0.2597613037, -0.0901011005, 0.1326250136, -0.1753208637, -0.0226654503, -0.0498123579, 0.0869986489, 0.0148675162, -0.2196617573, -0.0093743270, -0.0875077993, 0.0034685987, -0.0020987031, 0.0905393213, 0.1770253927, -0.0034967018, 0.0730534121, 0.0253390409, -0.1017408520, -0.0298088063, 0.0150211658, -0.2394450903, -0.0165115558, -0.0837314948, 0.2364950329, 0.2221413106, -0.1612436473, 0.1270386279, 0.0898120627, 0.0104658492, -0.0450365245, -0.0461145155, -0.0930849835, 0.0940807611, 0.0120093143, -0.1542532146, -0.0652550384, 0.1741292775, 0.0600962825, 0.1849516779, -0.1222636253, -0.1526372284, 0.0911404490, 0.0242566057, -0.1939547956, 0.0962667093, -0.0700057968, 0.2071710527, 0.0467164665, -0.1561225951, -0.0500255413, 0.0144815305, 0.1087364480, 0.1371346563, -0.0264112297, 0.2367777228, 0.1594433635, 0.0198210534, -0.0708595365, 0.0704998150, 0.0373300277, 0.1159455329, -0.2550788522, 0.1671456695, -0.1297226995, 0.2257116586, 0.0086396877, 0.1264352351, -0.1259331852, 0.1026651710, -0.1154085919, -0.1507818103, 0.1720450968, -0.1920322478, 0.0473825224, 0.0787204802, -0.0327431969, 0.2512902319, 0.0068568918, -0.1156703308, 0.0206889231, -0.0523254462, -0.1607128084, 0.0703270957, -0.1181111634, 0.0861728713, -0.1466694176, -0.0087964563, 0.0488026366, 0.0398880281, 0.2802689075, 0.0389230289, 0.0099816350, -0.0965867117, -0.1638158411, -0.0852765664, -0.2789919674, -0.1349603385, 0.1346669197, 0.2735926211, -0.0215254985, 0.0556771457, 0.1126239449, -0.0621841103, -0.0891537741, -0.0641356707, -0.2399095744, -0.1251044273, -0.1787947416, 0.0163795725, 0.1387896538, 0.0596217923, -0.1320858896, 0.0616997145, -0.1640683413, -0.2651320100, -0.1293313056, 0.0506993309, 0.2103910595, -0.1121911481, -0.0777959675, -0.0533000492, 0.0483085103, 0.1058864892, -0.1119105518, -0.2328402400, -0.0793933347, -0.1081496328, 0.0654940158, -0.0343398377, -0.0023914543, -0.1065015420, 0.0689529404, 0.2033402920, -0.0298574809, -0.1000064835, -0.0083028926, -0.0242873225, 0.0409479216, -0.0082539096, -0.1109407023, -0.2690269053, 0.0727216676, 0.2591340542, 0.1308334023, -0.0736398473, 0.2449011356, 0.0463715605, 0.2004298419, 0.1721078604, 0.1140715778, 0.0786823928, -0.2420499176, 0.0655721799, 0.1607390791, 0.0963127315, -0.1154541075, 0.0089581227, 0.0158647653, -0.0601017065, -0.0127672385, 0.1308651716, 0.0622360855, 0.1300819963, 0.0155050727, 0.1417191327, 0.0076374202, 0.1885880530, -0.0546569191, 0.0693077296, -0.0566915572, -0.1577387899, 0.0151920775, 0.2470548898, 0.2115727514, 0.1484255493, -0.0145720616, -0.0825649053, -0.0778188705, 0.1107069179, -0.1137831658, 0.0214828234, 0.2201471031, -0.0143836308, 0.0085290000, 0.1248088777, -0.0285020452, 0.0221168026, -0.0114049446, -0.0082945814, 0.0161552783, -0.0724214092, 0.0396341123, -0.0873643458, -0.0419575199, 0.1794632226, -0.0719867647, 0.0075324094, -0.1506152749, -0.2012619972, 0.0447681956, 0.0562727042, 0.1459345669, 0.2529854178, 0.0358049683, 0.1908107698, 0.2727451622, 0.0696671382, -0.0562975183, -0.2176986635, 0.0541514978, 0.0606152974, 0.0002739984, -0.1273255050, -0.0331580117, 0.0230790917, 0.0459217690, 0.1052335724, -0.1800148636, 0.1696179956, 0.0527998395, 0.2570105493, 0.0222895294, 0.1560712457, 0.0503747724, 0.1899084747, 0.1258995384, 0.1372380853, -0.1336908638, -0.0893712267, 0.2076230645, -0.0778585598, -0.0999999568, -0.0432139896, -0.0844247118, 0.0759813040, 0.0902051479, -0.1020464972, 0.0614451766, 0.1567374319, 0.0003574854, -0.1134880558, 0.0062326570, 0.1993538141, 0.0807933360, 0.0045030140, -0.1350340992, 0.2360260189, -0.0743537024, -0.1635193825, -0.1165901497, 0.0342079811, 0.1789830923, 0.0485386997, -0.0090301614, 0.0919493064, 0.0107616074, 0.2608593404, 0.1475768536, 0.1515281051, 0.1443459690, -0.0155362217, -0.1829582304, -0.1922057271, 0.0659538284, 0.2085647136, 0.0847266093, 0.2443789393, -0.0439672619, -0.1886760592, 0.1409481317, -0.1128326952, -0.0228222795, 0.1281731874, -0.0010825639, -0.1400229037, 0.0347488560, 0.1635291427, -0.0014679009, -0.1862947494, 0.0641163290, 0.1563354880, 0.0991189703, 0.0795337185, 0.2344532162, -0.0804765821, -0.1938047111, 0.0484069884, 0.0838353410, -0.0329746343, 0.1067043468, -0.0699246302, 0.1526825875, -0.0709488019, -0.2056204379, 0.0358692706, 0.0417400338, -0.0387486778, 0.0737545490, -0.0523164198, -0.2350791693, -0.0193720255, 0.0581597202, 0.1444115937, -0.0151947783, 0.0555735417, -0.1475629658, 0.0400091894, -0.0425763614, 0.0848869756, -0.1895686388, -0.0739193857, 0.0826762915, 0.0316523984, -0.1903717369, -0.1180867851, 0.1318031698, 0.0727757439, 0.0481519997, 0.0488041192, -0.2231947929, 0.1016800180, -0.0500140823, -0.1495342553, -0.0040759305, 0.1835868806, -0.0519221202, -0.0060607358, -0.1402164847, -0.0355631895, 0.1826547682, -0.0597270615, 0.1608019471, -0.0415274501, 0.0338869169, -0.1043916270, -0.2743689418, 0.1057582125, 0.2012517005, 0.0293873940, -0.0228095874, 0.0977995992, 0.2166622579, -0.0357635282, 0.0340503156, -0.0777263939, -0.1893006414, -0.1036902815, -0.0818428844, 0.0941061452, -0.1205194294, 0.0072096656, 0.1154180095, 0.1235351935, 0.1820793152, 0.1062654555, 0.1282189935, -0.1451398581, -0.0125156725, -0.0571141876, 0.0025816346, -0.1113834158, -0.2516335845, -0.0172378067, 0.0366080515, -0.0859572738, 0.0640895143, 0.0686365142, -0.1893561631, -0.0542875826, -0.1005451083, 0.0694482401, -0.0096581448, -0.0711086765, 0.1745191365, 0.0255775731, -0.0667453259, -0.0409466848, 0.0674434006, 0.2483956069, -0.0113035655, -0.0072112666, -0.0667044595, -0.1542845368, -0.1690815240, -0.2663488388, 0.0022127358, 0.0703948364, 0.0015421379, -0.0117906323, -0.1772426069, 0.1189752296, 0.0756185725, 0.0402731523, 0.0218912400, 0.2791827321, 0.0159527082, 0.0935742185, 0.0975367650, 0.2192496955, 0.0835193470, 0.2032895535, 0.1670297086, -0.0617562123, -0.0596098974, -0.1668708771, 0.1775936186, 0.1237913594, -0.1492780149, 0.0199105293, -0.1632030606, -0.2164210528, 0.0803402737, -0.2363252938, -0.2538279891, -0.0603480637, -0.0584840253, 0.0389335826, 0.0254068654, 0.0020219600, 0.2193579525, 0.1176477671, 0.0850421563, 0.1199026778, -0.0510110483, -0.1626169682, -0.1669484079, -0.1144141555, 0.0703286007, 0.1016811728, 0.1074880883, 0.0594925955, -0.1406278610, -0.0272929557, -0.1565204561, 0.0399498828, -0.0372367799, 0.1400666684, 0.2094272077, -0.0317745879, -0.0261434354, -0.1274715066, -0.0239657294, -0.1243180484, 0.1250958145, -0.1041767523, -0.1189601719, -0.0028890071, -0.0573895648, 0.0908482224, 0.1536628753, -0.0568057373, 0.0128588639, -0.2203612477, 0.0723211616, -0.0444401056, 0.2311810851, 0.1490193754, 0.0936224833, -0.2287975103, -0.2198389322, 0.0583050139, -0.0194437169, -0.1058073267, 0.1639574915, 0.1227416769, -0.0876973644, -0.1466604024, 0.2026112676, 0.0007868203, 0.0301506128, 0.0991058871, -0.1614483297, 0.0134301279, -0.2140033543, 0.0900257751, 0.0415171050, 0.0160022434, 0.0697834194, 0.1655411422, 0.0624582879, 0.0593466572, 0.1260507852, -0.1317871213, 0.0427618958, 0.1575125456, 0.0122285942, 0.0973968133, 0.1432856768, -0.0029167146, 0.1148109660, 0.1031408235, -0.0333133899, -0.0198718589, 0.0293604452, 0.0721485540, -0.0893034562, 0.0230794977, -0.1087812707, -0.0491634980, 0.0240707453, 0.0750172362, 0.0657902732, -0.2096346468, -0.0243005753, 0.0020518694, -0.0930238962, -0.0298832878, 0.0904808193, -0.0989643484, 0.0250836443, -0.0695926100, -0.0017872028, -0.0362116471, -0.2544851601, 0.1067699343, 0.0249046478, 0.0195962302, 0.0175088122, 0.0204157364, -0.0950695053, 0.0365787558, 0.2476815879, 0.0559918657, 0.1274954230, 0.0757518634, 0.1066967323, 0.0638982952, -0.1759459525, 0.0876410082, -0.0886693895, 0.2702023089, -0.1178709343, -0.0892411172, -0.0025029697, 0.1485200077, 0.0372969210, -0.0411725380, -0.0205226112, 0.0719781592, 0.1324937046, 0.1088230908, -0.1992841959, 0.1386287361, -0.0099381804, 0.2396357954, -0.1923090369, -0.2241511643, -0.0690042600, -0.1111716926, -0.0229641311, -0.2511757314, 0.0235882010, -0.1019099802, -0.2550116777, -0.0599382706, 0.1937726140, 0.1093453616, 0.2474327236, -0.2071004808, 0.0270793047, 0.0444601662, -0.0907230377, 0.1390989274, -0.0630115196, 0.1549630463, -0.0081695588, 0.0048354571, -0.1007484943, 0.1289442629, 0.2431813478, -0.1480060667, 0.1225997582, -0.1563988924, -0.2157762796, -0.0674167424, -0.1373890936, 0.0234368853, -0.1248281375, 0.0296131093, -0.0354795046, -0.0418492109, -0.2147484869, 0.0189153869, -0.0556935780, 0.1060376391, 0.0213511568, 0.1000737697, 0.1926524490, -0.1678712964, 0.0260068160, 0.1805743724, -0.1139858589, -0.0150375487, 0.0842485055, -0.0753850415, -0.0803403109, -0.1167961359, -0.1091172323, 0.1476938277, -0.1041367874, -0.0911601409, -0.0933771953, 0.0090572685, -0.1581734866, -0.0271144882, 0.1307093650, 0.2251832336, -0.0865491927, -0.0117955720, 0.2357102334, 0.2304360420, 0.0380608626, -0.1570680141, 0.0926373675, -0.0595763400, -0.0082315924, -0.1629165113, -0.0815790370, -0.2077780217, 0.1427233964, 0.0102449208, 0.0994900763, 0.1200726703, 0.0490186438, -0.2054817826, 0.1278725415, -0.0213070195, -0.0714268759, -0.1639382690, -0.1594439149, -0.0681398436, 0.0553053655, -0.0410687216, -0.0544993877, -0.1443969160, -0.0342086144, 0.0225649048, -0.0133030927, -0.0925245211, -0.0269229766, 0.2493719161, 0.1621887535, -0.0505416952, -0.0009827350, -0.1581064463, 0.1032440364, -0.1165619195, 0.1992310137, -0.1727968007, -0.0738417208, -0.1087749898, 0.1569275707, -0.2026720792, 0.0852819011, -0.2163667530, 0.0134685291, 0.0165079664, -0.1833709925, 0.1049741134, -0.0116535081, 0.0569854677, 0.0457865447, -0.0896935090, 0.1872920692, -0.1727124155, -0.0804170445, -0.1242281497, -0.2462040782, -0.0220981240, -0.1069384217, 0.1096493453, -0.1165745035, 0.1303871870, -0.1025572419, -0.0397959873, -0.1120316014, -0.1235603094, -0.1805031598, 0.1550589204, 0.0121281873, 0.0467622839, -0.0520874113, -0.0747282654, 0.2635425925, 0.1205006316, 0.1407217681, 0.2307923883, -0.1276292801, -0.0431443565, 0.0484886691, -0.1163200065, 0.0065549305, 0.0039115595, -0.1500352919, -0.2676215470, 0.0490188710, 0.1540352255, 0.1039492041, -0.0927001759, -0.0574895665, -0.2040656507, -0.0051422524, 0.1785996109, 0.0569935553, 0.0339832641, -0.2266247272, -0.2570197880, 0.2704495788, 0.0399896316, 0.1186957136, 0.2325201631, 0.0839126632, 0.0382996500, 0.2366517335, -0.0175786708, -0.0212243088, -0.0844312757, -0.0847823471, 0.2298284620, 0.0260886867, -0.0508272387, 0.2053686529, 0.1367449611, 0.0093108593, -0.0094811181, -0.0391377583, 0.0675458685, -0.0929527953, -0.2377538532, -0.0169520378, -0.0631893277, -0.0524999127, -0.1311309636, 0.0676498935, 0.2064049840, 0.1864408106, -0.0661478713, -0.0552126020, 0.2441637963, -0.1307703108, -0.0003568594, -0.2550583482, -0.0002061849, -0.1755455732, 0.1716525257, -0.0445812382, 0.0387706831, 0.0783553943, 0.0583745800, -0.0122290431, -0.0999794751, 0.1153648347, -0.0108695896, 0.1117220372, 0.0659896210, -0.1232682019, -0.2084272653, 0.2085343897, 0.2143595219, 0.1775273681, 0.1683932096, 0.0119154099, 0.1508673728, -0.1875987053, 0.1241406277, -0.0437127613, 0.0805096775, 0.0183533374, -0.0266524591, -0.0146616073, -0.0721343905, 0.2348921597, 0.0781682134, -0.0701316297, 0.2654339969, -0.1588159949, -0.0427635089, -0.1054761112, 0.2022784501, 0.0846454650, 0.1091946289, -0.0759717375, 0.0201296508, 0.0376813300, 0.0657030046, 0.1309848875, -0.1610066742, 0.0668294653, -0.0869782269, -0.0956332162, 0.1083507910, -0.0641516000, 0.0235911533, 0.0273679662, 0.2431820184, -0.0104870405, -0.1424941570, 0.1383227110, -0.0998216122, -0.1439583004, 0.0314344130, -0.0097889928, 0.1475160867, -0.0528327040, -0.0250946786, 0.0868747532, 0.2051880509, -0.2162268609, -0.1926365495, -0.1395297199, -0.0525638312, 0.0454551354, -0.0610368848, 0.2206051201, -0.1052003279, 0.0814063996, 0.1107338890, 0.2177700847, 0.0767123178, 0.0356323458, -0.2562486231, -0.0428249165, 0.1191975325, 0.2385378033, -0.0344531462, -0.2826772332, 0.2374268621, 0.0773666129, 0.1612554938, 0.0491044596, -0.2325374484, 0.0586918779, -0.1410592049, 0.0437033102, 0.0459245630, 0.0764809176, 0.0427111536, 0.1171125472, 0.2495918721, 0.0442151241, -0.0633032471, 0.0123024527, -0.1355171502, 0.0647934079, 0.1340126395, -0.2143447399, -0.0847267956, -0.0613701977, 0.1144397855, -0.0796248689, 0.0925599262, 0.0132471751, 0.0218130387, 0.1113934070, 0.1190452129, 0.0358088687, -0.1281879395, -0.2072094679, 0.0570936501, 0.0742688924, 0.2486830801, -0.0870552659, -0.1666093171, 0.0693121478, 0.1071901023, 0.0422898866, 0.2173773646, 0.1520709842, -0.0947814360, -0.0305745192, 0.2498618662, -0.1300107539, 0.0722102076, 0.0128655499, -0.0098754140, -0.0980859622, 0.0117713157, 0.0242382195, 0.0982168019, 0.0332054794, 0.0816264898, 0.1060670167, -0.0289022215, 0.0403368659, -0.1248005256, 0.0039660987, -0.1384205073, 0.2481063604, -0.1958899647, 0.2263841182, -0.0261312630, 0.1966781616, -0.0087504452, 0.1107032746, 0.0886448100, 0.1261951476, -0.0658161491, 0.0761195198, 0.1019215509, 0.0381405279, -0.1361014992, 0.1922254264, 0.0317509286, -0.0270355958, -0.1242062822, 0.1432427615, 0.0411299355, 0.1911347657, -0.0656165555, 0.1320265532, 0.0536533445, 0.1281147450, -0.0248880889, 0.1446262747, -0.0836394355, -0.0012958816, 0.1355727613, 0.0884414092, 0.1155185252, -0.1784467548, -0.2535457611, 0.1683555245, -0.0244207382, -0.2180179209, 0.1308876574, -0.1532951891, 0.0513658114, -0.0454226844, 0.0307784006, 0.2362534255, -0.1969425082, -0.0772540346, -0.0326412246, 0.0692914203, 0.1497561932, 0.0085251024, 0.0148762595, -0.0613119975, -0.1717518717, 0.0370266773, -0.1336455047, 0.1582103968, -0.1888263077, -0.1785289794, -0.0218345374, 0.0661303326, -0.1875317991, 0.1838622242, -0.0503133796, 0.0232551713, -0.0090521295, -0.0458922945, -0.0022022568, 0.0382781364, -0.1770092100, 0.0057064611, -0.0246076062, 0.0256033521, -0.1214173138, 0.0491460189, 0.1617375165, 0.2776377499, -0.1380355358, 0.0315566286, -0.2164750993, 0.0807683319, -0.1232986078, 0.0919140130, -0.1038938612, -0.0888273865, 0.0344520509, -0.0123733850, 0.0338175409, -0.0762382746, 0.1167719960, 0.0497474261, 0.0652875602, -0.0625975356, 0.2117637247, -0.0502035543, -0.2260217667, -0.1662213057, 0.0207123943, -0.0528344736, -0.0670819581, -0.0135809882, -0.0017059888, -0.0411784053, -0.0485650264, 0.1564169228, -0.1570386738, 0.0626307279, -0.0847110674, 0.2738618255, -0.0846765563, 0.2007428557, 0.1164247692, 0.2082283199, 0.1344314814, 0.1658992320, 0.1352714300, 0.1355481148, 0.1545044631, -0.0002530938, 0.1063758060, 0.2755875587, -0.0689053237, -0.0652312115, 0.0402968042, -0.0311655160, 0.0556725115, -0.0935847014, -0.1959237307, -0.0633378178, -0.0025222355, 0.0921261311, 0.0565551259, 0.2252281010, -0.0885820314, 0.0707858354, 0.1232757345, 0.1631179452, -0.0844312310, -0.0708499029, -0.2239903510, 0.0370557159, 0.2357802987, -0.1536420882, 0.0593355447, -0.0530335940, -0.1627036184, 0.1715723127, -0.2359424680, 0.0869353116, 0.0491680205, -0.0483379848, -0.0236614440, 0.0129241822, 0.0573231615, 0.0507534444, -0.1622640640, 0.0706965327, -0.0016438877, 0.1130367145, 0.0405144244, 0.1039371267, 0.1559890211, 0.1045165882, 0.2757470906, 0.0149282990, 0.1148917302, -0.1482630223, -0.1431724429, 0.1935839206, 0.1813088059, -0.1159630716, 0.0315799937, -0.1768977195, -0.1742117256, -0.1075518727, 0.1201520786, 0.1426990181, 0.1264233291, 0.0597022213, -0.0767398477, 0.0909580514, -0.0889350101, 0.0091351252, 0.2238908708, 0.1747390926, -0.1617761403, -0.1488623768, 0.1625947952, -0.0889988095, -0.0656388924, -0.1715724170, 0.0548064299, -0.0200597811, -0.0319920629, 0.1065513343, -0.1671973318, -0.1313762069, -0.0998430327, -0.1199076548, -0.0980818495, -0.1202637777, -0.1176967099, 0.2559976578, 0.0123499585, -0.1656164527, 0.1766310185, 0.1325605363, 0.0744469017, 0.1879999489, -0.0936114043, 0.1218920350, -0.2426129431, -0.0889045000, 0.1524047256, -0.0009925781, 0.0281810798, 0.1775300354, 0.0034202647, -0.1240103096, 0.0210765637, 0.0563618168, 0.1373814493, 0.1548144966, 0.1386870593, -0.0098441215, 0.0160091836, -0.0267425347, -0.0359810218, -0.0469566993, 0.2104282230, 0.0139623201, 0.0131421601, 0.0665506199, 0.0756009221, -0.1189079434, 0.1655592620, -0.2431632578, 0.1146828681, -0.0769373104, 0.0200241748, -0.0587333255, 0.1462131888, 0.0447735302, -0.0170071553, 0.1221403331, 0.1631457806, 0.0889094993, 0.0826540366, 0.1007029936, -0.2064467967, -0.1253523082, -0.0758913606, 0.0612161793, -0.0641162544, -0.0219031423, 0.0162307993, -0.0656523705, 0.0874546319, 0.2421707064, -0.0350899659, 0.0964384228, -0.0399987623, -0.1652950048, 0.0275204610, -0.1281397939, -0.0643184111, 0.1321573108, 0.1089407355, -0.2172466516, -0.2074947208, 0.0708126128, 0.0782643259, 0.0536246896, 0.0638644695, -0.0185585245, -0.0163611807, -0.1123675331, -0.0522814803, -0.0090743164, -0.1641787589, 0.0721241310, -0.0072625722, 0.0682928488, 0.0953244939, 0.0184348486, 0.0940749496, 0.1869938523, -0.0377798192, -0.0622027665, -0.1839347631, -0.0277253892, -0.1159363836, 0.1044274643, -0.2228750736, -0.1597858518, -0.0349088348, 0.0537276417, 0.1501072347, -0.1346371174, 0.0589323603, -0.0599309467, -0.0436443128, 0.0577115081, 0.0479681194, -0.0676956102, 0.0420623124, 0.0231759772, -0.0805918649, -0.1890139878, 0.1521341801, -0.1693517864, -0.0324133448, -0.1434468478, 0.0265103020, 0.1293175668, 0.0686548501, -0.1475914121, 0.0845588222, 0.0044772765, 0.1387883127, 0.0459989496, 0.0152686248, -0.1357956678, 0.0613336824, -0.0320652537, -0.2064567655, 0.1041860506, -0.0877650827, 0.0012285628, 0.1502773166, 0.0602503195, 0.0150659801, 0.0266965386, 0.0027256643, -0.0635454729, -0.0273263659, -0.1667240411, -0.1913064271, 0.2383926511, 0.0037184069, -0.0610406511, -0.0758661255, 0.0592603758, -0.1241580024, -0.0767720640, -0.0897711590, -0.0248877127, 0.1828879565, -0.2103763521, -0.0195882469, -0.1664803624, 0.0154906604, -0.0682428628, 0.1167541519, 0.0069300863, 0.0889997557, -0.2241701931, 0.2311534435, 0.0158609822, -0.1410144269, -0.0756182671, -0.0067367423, 0.1190847754, -0.0553288497, 0.0769800469, 0.0087005440, 0.1087056771, -0.1014889181, -0.1574300677};
# 23 "firmware/parameters.h" 2
# 1 "firmware/weights/b11.h" 1
# 12 "firmware/weights/b11.h"
model_default_t b11[64] = {};
# 24 "firmware/parameters.h" 2
# 1 "firmware/weights/w6.h" 1
# 12 "firmware/weights/w6.h"
model_default_t w6[12288] = {-0.0344314799, 0.0198895261, -0.0605129041, 0.0629146397, 0.1027600020, 0.1056342721, -0.0545515902, -0.0687723309, 0.1474945694, 0.0003040344, 0.0293759443, 0.1298991740, -0.1039017960, -0.0293004066, -0.0792125016, 0.2103280574, -0.0768687129, -0.2386905104, -0.2473953366, -0.0338714905, 0.0479894541, 0.0213625263, 0.1136467308, -0.0864273906, -0.1104081497, -0.0501711890, 0.0652199835, 0.0524253473, 0.0898420066, -0.1101682335, -0.0556889251, 0.0921299532, 0.0620080531, -0.0772907212, -0.1014684439, 0.0425889008, -0.1520562768, -0.2022857368, -0.0881268457, 0.1551113129, 0.1386149973, -0.0663215145, 0.0944151729, -0.2184555680, 0.1215263009, -0.2406308204, -0.0729496703, -0.1416997612, 0.0102328351, -0.1806783378, 0.0022213096, -0.1194825843, 0.1041770130, -0.1444820464, 0.1084199175, 0.1898771226, 0.1377795488, -0.0865383968, 0.0560179502, -0.1250857860, -0.1459669620, -0.2000229806, 0.1234796420, 0.0596311837, -0.0003836453, -0.0425082706, -0.1861241907, -0.2363181561, -0.0143090123, 0.0264672246, -0.1010851115, -0.0673170015, -0.0742058381, -0.1461967230, -0.0150375981, 0.0576434098, 0.1928529143, 0.1913533211, -0.2794380486, 0.0250918660, -0.1761732846, -0.0769226924, -0.1823447347, -0.0953837857, 0.0162202753, 0.0765336528, -0.0100722471, 0.2206428647, 0.1606785357, 0.0153695177, -0.0334282108, -0.2529527247, -0.1023385003, 0.0789250582, -0.2788688540, -0.0679445118, 0.0419367515, 0.0497572795, 0.0281777401, 0.2793206573, 0.0857261047, 0.1552320719, -0.1134203970, -0.0050121057, -0.1284862608, -0.0592662953, -0.0416603759, 0.0928745121, -0.1580702513, -0.0976661667, 0.1727386117, 0.0866674930, 0.0804560110, 0.0468910858, -0.0990803838, 0.1725819409, -0.1240246668, -0.0860206038, -0.1620347351, -0.0128978807, -0.0012480423, 0.1323141158, 0.1160144806, 0.0071642273, 0.0232466832, 0.0822881609, -0.1792543232, -0.1471272409, -0.0511932597, 0.1727413833, -0.1249919012, -0.1436189860, 0.0868677273, 0.0932433456, 0.0025523212, 0.1491983384, -0.1187908947, 0.2493646890, 0.0004221071, 0.0444098823, -0.2101766020, 0.1154159382, 0.1741471291, -0.1409198940, 0.0531410947, 0.0798287615, 0.1242530867, 0.0250676442, -0.0335628428, -0.1459300518, 0.0959775448, -0.0335422345, -0.1153272465, 0.0399110615, -0.0001691790, 0.2080130130, -0.1362896264, 0.2514562309, -0.0491772704, -0.1528263092, -0.1607517749, 0.0195523351, 0.1164790019, 0.1554578394, -0.0418427065, 0.2147473693, 0.0300056264, 0.0218623802, -0.2190174609, -0.0474469513, -0.1837229729, 0.0989380330, -0.0640660897, -0.0209259633, -0.0838200599, -0.0048420052, 0.1659759730, 0.0569631383, 0.1830050498, 0.1832505614, 0.1585642844, -0.0336085148, 0.2248870283, 0.1538799554, -0.0836912319, -0.1353261322, -0.1339773834, -0.0486022793, 0.1096129864, 0.1505010724, 0.2407815456, 0.1875131279, 0.1217485741, -0.0460354984, 0.2783134580, 0.1807433814, 0.0568448268, -0.0154337175, 0.1957568079, 0.2223746926, 0.2074466795, 0.0509193093, -0.0516289584, 0.2133321464, 0.2233681977, -0.1744318604, 0.0913654342, 0.0259403344, 0.0725486428, -0.1242568418, 0.0542889871, -0.0318569280, -0.0094764484, 0.0884297937, -0.1577734798, 0.1207166463, 0.0378254540, -0.1932231486, 0.1212568209, -0.0513237081, -0.0995442942, -0.1186765805, 0.2202248424, -0.1245230362, -0.0123736961, -0.1698320657, -0.0840098485, 0.0997140259, -0.0729747564, -0.1564818174, -0.1822503954, 0.2473662198, 0.2294327915, -0.0394868441, 0.1344723254, 0.0422517769, 0.1699008495, -0.2500521839, 0.1811096966, -0.0467424206, 0.2075455934, -0.0754844919, -0.1671287119, 0.0383856706, -0.0983107239, 0.0249117911, -0.1040417403, -0.1170112491, 0.0711323395, -0.0020538918, -0.0172728542, -0.1431205720, 0.1452212483, 0.1273281723, -0.2626930475, 0.0397510119, -0.0034346178, -0.1752451360, -0.1419902146, 0.2224951386, -0.1234474257, 0.2810316086, 0.2120784670, -0.0206596870, -0.0182908680, -0.0170836896, -0.1249721050, -0.0869743377, -0.2070019245, -0.2500308156, -0.1493860036, -0.1095205471, 0.1533826441, 0.0939090773, -0.0482605770, 0.0557340272, -0.1062671691, 0.1184986234, 0.0473697372, -0.0121096848, 0.0366577208, 0.0167085584, -0.0866141990, 0.2544111907, 0.1019496173, 0.0196869355, 0.1108192652, 0.0162100997, -0.2027862519, 0.0188831426, -0.0746665895, 0.0661387071, 0.2304569632, -0.0810582265, -0.2679792941, -0.0723002851, 0.1996670216, -0.1341960430, 0.0867273882, 0.1094141230, -0.0849209279, -0.0250819586, 0.1239921749, -0.0165773705, -0.1828771383, 0.2527745366, 0.1855805665, 0.0304332711, 0.2544066310, -0.0964858383, 0.2207408845, 0.1361367702, -0.0821837485, -0.0492315143, 0.0163771268, -0.1465391964, 0.1200240999, -0.1926034838, -0.1628964692, -0.0245960504, -0.0050963527, -0.0084472997, 0.0887932330, 0.1292507797, 0.1111897454, -0.1457271874, -0.1328233033, 0.1594343483, -0.0645804480, -0.0924357325, -0.0011779076, 0.0001524779, 0.0030191939, -0.1447556764, 0.0310270898, 0.0520671345, -0.0983558446, 0.2012039870, -0.0252261274, 0.1887350231, 0.0233897381, -0.0240946114, 0.1231059730, 0.1447204500, 0.1409408152, 0.0900231376, -0.0290404465, 0.0002236983, 0.2288652807, -0.1907983124, 0.2203192860, -0.0179673508, -0.0994051918, 0.2571785450, 0.0070134662, -0.1264312416, -0.0365641043, 0.1499238014, 0.1214017645, 0.1538443863, 0.0979925916, -0.0325140916, -0.0609781593, -0.2679900229, -0.1089810356, 0.0707157329, 0.1367271692, -0.2317569405, -0.0131251737, -0.2345820665, -0.1129668728, 0.0533948541, -0.1396367550, -0.1675850600, 0.1794797182, 0.0579903685, -0.0573512055, -0.1109103709, 0.0683242604, 0.0286330879, 0.1564695090, 0.0372358151, 0.2547400296, -0.2161116004, -0.1867224723, -0.0542036965, 0.2262712419, -0.0430902541, 0.0260228831, 0.0634582862, -0.1240081117, 0.0256647021, -0.0755673870, -0.0196285732, 0.0170810949, -0.1244489327, 0.0091707548, 0.1306484491, -0.1173553094, -0.0374099091, 0.0676922053, 0.1370069832, -0.0928627923, -0.1384779513, 0.0219141170, 0.0263279770, 0.1022628322, 0.1087497920, -0.0649521276, -0.0433645286, -0.0129428618, 0.1109002233, 0.0926071778, 0.0507504120, 0.1629223228, -0.0269355271, 0.2256238312, -0.0353587493, -0.1052101925, 0.2056570649, 0.2109628469, 0.1093555242, -0.0627440140, -0.2121808827, 0.0053292881, 0.0316562466, -0.0039103725, 0.0827564076, 0.0203459598, -0.2025654465, -0.1074523181, 0.1157300398, -0.2495141625, 0.0848579854, -0.0846397951, 0.0290406626, 0.0362896323, -0.0065605659, 0.0088515487, -0.1309956014, 0.0431185663, 0.0891900212, 0.1391234994, 0.1808887273, -0.0752818733, -0.1035005972, 0.1092883870, 0.0047990144, -0.1033058614, 0.2613183260, 0.0053747171, 0.1028786972, 0.1402023435, -0.0174243040, -0.2342445254, -0.1478183270, -0.1196852550, 0.0193569455, 0.0416802429, -0.0711133629, 0.1537830085, -0.2062267065, 0.0994606763, 0.1627423167, 0.2581391037, -0.0134142945, 0.0026689949, -0.0369841903, -0.0128837759, 0.0636997297, -0.1713997424, 0.0381577946, 0.2328436524, 0.0385106802, -0.0996366143, 0.1039705426, 0.2562828958, 0.2179066688, -0.0216958486, -0.0300016589, 0.0117311990, 0.0107491817, 0.0191080477, -0.0656382367, -0.0876978189, 0.0664179325, 0.0080803782, -0.1804460883, -0.0639160872, 0.2118370086, 0.0678642169, 0.1855118126, 0.0276735425, 0.1837578118, -0.0122977421, -0.2628988326, -0.0677297488, 0.0495948978, 0.0318432301, 0.1328095943, 0.2460763752, -0.0604868419, 0.1048339531, -0.1001473144, -0.0940581262, 0.1278231591, -0.2312153727, 0.0684936196, -0.0251699593, -0.0525982566, -0.0326448791, -0.0267097820, -0.2541533411, 0.1352352798, 0.1787989736, -0.0237326100, -0.2301468849, 0.2482703775, 0.0370365493, -0.0412849225, 0.0424933694, 0.0801998004, -0.1082877368, 0.0658662096, -0.0306187719, -0.0252535809, 0.0527992919, -0.0160409380, -0.0069719935, 0.0806694552, 0.0151247829, 0.1116888821, -0.2568052113, -0.1681139767, 0.0231337864, 0.2454030216, 0.2278655171, -0.1004510969, 0.0058025182, -0.1403634697, -0.0439109728, 0.0564525947, -0.1484576762, 0.0241313316, -0.1391120851, 0.1321956217, 0.0020172652, 0.0266579147, 0.0173851494, 0.0282477066, 0.1366987377, 0.1644115001, 0.1147586331, 0.0179613903, -0.0334275588, -0.0205262601, 0.0686262399, -0.0278192107, -0.0334132314, -0.0260279030, -0.1022296250, 0.0681815445, -0.1544673443, -0.0376271978, 0.1911292374, -0.1186539158, 0.0966924131, 0.0205223057, -0.0590694025, 0.1094944179, 0.1860671043, 0.0678752735, -0.1195534393, 0.0925732478, -0.1625101566, 0.0546716489, -0.1007643715, 0.1327418387, 0.0715418458, 0.1516540796, 0.1053673998, 0.0822700337, -0.2494234145, -0.1109491512, -0.0995074958, 0.0333570763, 0.0093640052, 0.2246047556, -0.0179672725, -0.2109854072, -0.0659801438, -0.1888606548, -0.1009643674, -0.0757729560, -0.1317932904, -0.0184982009, 0.0163887143, 0.0594964176, -0.0495207645, -0.0518674515, -0.0511800870, 0.0294356849, -0.0223077610, -0.0150458720, 0.1706798226, 0.1998678297, 0.0344905443, 0.0042327354, 0.2770361900, 0.0300467387, -0.0366001651, -0.1066341251, 0.0564972833, -0.1064446121, 0.1503445208, 0.1208432913, 0.1522907317, -0.1382848620, 0.1754017770, -0.0418913551, -0.1681204289, 0.0723457113, 0.0100162048, 0.1317101866, -0.0209162310, 0.0449443571, -0.2136803716, 0.0451339968, 0.0221952293, 0.2429847419, 0.1221708804, -0.0030056254, 0.0948707461, 0.0979062766, -0.0129020074, -0.1939339787, 0.1027938649, -0.0133691840, 0.0316249616, 0.1788401008, -0.0397798233, -0.0058007622, 0.0347985998, -0.0249786973, 0.0832646787, -0.1178588197, 0.1083913296, 0.1193635464, -0.0041570491, 0.0973451808, -0.1207575127, -0.0635188147, -0.1804413199, -0.1537044495, 0.0754579902, 0.0822424591, 0.0754460245, -0.0475831181, 0.1013027951, -0.0399313718, -0.0810229704, 0.1515255123, -0.0444392934, -0.0556708872, -0.0279439408, -0.0629629791, 0.2430616319, -0.0365498513, -0.0776308998, -0.0395100005, -0.0563762002, 0.1421897262, 0.0730005801, 0.0530672856, -0.0579809807, -0.0163865723, 0.0015993406, -0.1890917420, -0.0531207398, -0.1739961356, -0.0865618363, 0.1545380652, 0.1044305414, -0.1028591022, 0.1019284651, 0.1227294803, 0.1631909758, 0.1709848195, -0.0945442766, 0.0994854495, 0.0655682683, -0.0671425089, 0.0198735204, -0.0369240306, 0.0402299650, 0.1078172699, -0.0210639182, -0.0529549010, -0.0970119983, -0.0410973467, 0.0038942578, 0.0646833703, -0.0485790074, 0.0861188918, -0.2787654698, -0.0558511801, 0.0177896246, -0.0154694309, -0.0854851082, -0.1455664784, 0.1825339645, 0.0218698047, 0.0112846447, 0.0551347882, -0.0061579393, 0.0775710121, 0.0343344249, 0.1290873587, -0.2798289657, 0.1325745881, -0.1917584389, 0.1333992034, -0.0163143016, -0.0501161702, -0.0339325890, 0.1570260972, 0.0123156114, -0.1398544014, -0.0178318210, -0.2162678093, -0.0731417090, -0.1619549990, -0.0369966738, 0.1955407262, -0.0735680461, -0.2095420957, -0.1346143335, 0.1527969986, -0.1271935552, 0.0679355711, 0.1016691476, 0.2335816920, -0.0212041251, 0.0777377039, 0.1563590914, -0.0246955492, -0.1082052961, -0.0432004631, 0.1974076033, -0.0127889058, 0.0385652184, -0.1547263265, 0.1229749545, -0.0062592677, 0.1988509893, -0.1486537904, 0.1850779057, -0.2304122001, 0.0031142798, 0.0390835628, -0.1898518056, -0.0085069342, 0.0900546834, 0.0605575964, 0.2658218145, 0.2825836837, 0.0398191735, -0.1987192184, 0.2738982439, -0.2180105448, 0.0324540325, -0.0878276899, -0.1151656657, 0.0631998107, -0.1065947413, 0.0139320474, -0.2044701576, 0.1661830842, 0.1015040949, -0.0436003879, 0.1576233357, 0.0599708632, 0.0264836010, -0.1293887943, -0.0406148434, 0.0689704567, -0.0177129135, 0.0733379498, -0.0924450904, 0.1511935741, -0.2045604289, 0.1994286478, -0.0615257174, 0.1587101072, -0.1354746670, 0.0363941565, -0.1137974635, -0.0449008383, -0.2292977124, -0.0464441292, -0.0338384993, 0.0333011411, 0.0348893479, 0.0625297427, 0.1788492650, 0.0326420218, 0.2725833058, -0.0489670224, -0.1211507767, -0.0917905495, -0.0724248067, -0.1874114275, -0.0252652224, -0.0047099707, 0.1358085871, -0.0579031184, 0.0257054176, -0.0105365412, 0.0488078222, 0.0065224068, -0.0394430496, 0.0308595970, -0.0258474052, -0.0651711673, -0.0390702821, 0.0410771221, 0.0848242790, 0.0471129939, -0.1041491553, -0.0924339965, -0.0447144397, 0.0859085396, 0.1427374780, -0.0370001607, 0.1554158032, 0.0643948466, -0.0717784390, -0.2524263859, 0.1390078515, 0.0422384217, -0.2665070891, -0.2755514383, -0.0489006080, -0.1564461589, 0.0515812263, -0.1305018514, -0.0786223635, 0.2036953270, 0.0458207838, 0.0688232258, 0.1420085728, -0.0971062854, -0.0098414486, -0.0952196792, -0.0966041759, -0.0972185582, -0.0099771395, -0.0266632512, -0.0196554065, 0.0266854782, -0.2018160522, -0.0517696738, -0.2712225318, 0.0502893776, -0.2174636424, 0.1850654185, 0.2315976024, 0.0602988675, -0.0465118811, -0.1159671545, 0.1355070174, 0.1621798575, -0.2547391951, -0.1750416011, 0.0214481130, 0.2062330693, 0.0782472864, 0.0746355057, -0.0646840930, -0.0526458286, -0.1610007733, -0.0006595428, -0.1088860631, -0.1282384247, 0.0890503749, 0.1820245981, -0.1298198104, -0.0524083003, 0.0044093672, 0.0581771731, 0.0594529882, -0.0170216579, -0.1838920712, -0.0624911711, 0.0731692240, 0.1887253076, -0.2469951957, 0.0546961613, -0.1103528067, 0.0301029477, -0.0104159592, 0.0607982688, 0.1351017803, 0.0225997530, 0.2150107920, 0.1806575209, -0.0369449779, -0.1192026809, -0.1540029794, -0.1011400744, -0.2178858668, 0.1858332604, -0.0237083267, 0.0958210900, -0.0473947600, -0.0722979084, 0.0926068723, -0.0197424274, 0.1165915430, -0.1445151418, -0.0045883181, 0.1718686968, -0.1980363727, 0.1349091828, 0.0866799355, 0.0599871837, -0.0499158166, -0.0364748314, -0.1408505291, 0.0151133500, -0.1182416528, 0.1077057347, 0.0291221309, -0.2363492548, -0.0916111767, -0.0269177780, -0.0242479034, 0.0952164978, -0.0669556633, -0.2412793040, 0.0594998151, -0.1253041178, 0.1234885305, 0.2002368867, -0.1437070817, -0.1692597270, -0.0900368616, 0.0121187158, 0.1029054970, 0.0950909704, 0.2767444849, 0.0316873007, -0.1089404151, 0.2331442684, -0.0927359387, 0.0505394153, 0.1798976809, 0.0164902080, -0.0118087297, 0.1258173734, 0.0799540430, 0.0390127413, 0.1087213680, -0.1308926940, 0.0222729445, 0.0911453739, 0.1123248339, -0.0251766443, 0.1333938837, 0.0175954252, 0.0361055247, -0.0001731359, -0.0144612268, 0.1152169332, 0.0693825036, 0.1568944603, 0.0361132212, 0.0731329024, 0.0090790112, 0.0359201729, -0.1484337747, -0.0289866552, -0.0458259508, -0.0146890199, 0.0394607745, 0.0739785954, 0.2399727255, -0.0008084754, 0.0133544151, 0.0342242755, 0.0595174208, 0.0127650537, 0.1914844513, -0.0957195088, -0.1261675656, 0.0039634579, 0.0140425060, 0.0687347353, 0.2317182422, 0.0269906223, -0.1786016524, -0.0827784985, -0.0873837247, 0.0905722231, -0.1829761714, 0.1717600077, 0.0961740762, 0.1121675000, 0.1344380081, -0.2305996716, -0.1184639409, 0.1249656007, -0.0891550779, 0.1242108643, -0.0324452706, -0.0835829377, 0.0781500787, 0.0439893715, 0.2792399526, -0.0893153101, -0.2282692939, -0.2294857800, -0.0458513498, 0.2422416061, 0.0224857889, 0.0760516971, -0.0951262563, 0.0024366693, -0.1235461980, 0.0936435834, -0.1634651423, 0.1477254778, -0.2529096901, 0.0769718066, 0.0145860426, 0.0309189502, -0.0094870338, 0.1750914454, -0.0019443354, 0.1799097359, -0.1434282064, 0.0023671233, 0.1170922443, -0.0608658381, -0.2301811725, -0.1174933091, 0.0294706952, -0.1642529368, 0.0629961044, -0.0808673054, 0.0702801123, 0.1403760612, 0.1141641214, 0.0611877702, -0.0350346789, -0.0900729224, 0.1071680486, 0.1332281530, -0.1698518842, 0.0545095988, -0.0060848058, -0.0782290846, -0.0756747052, -0.0271219909, -0.0128920283, 0.1429392993, -0.2032978386, -0.0872254595, 0.1177276745, -0.0651406869, -0.2354007512, 0.0272039510, -0.0009856657, 0.0819910541, -0.0224195328, 0.1256588697, 0.1254858822, -0.0178622901, 0.2602923214, -0.0411935337, 0.2185634077, -0.2100153267, 0.0239870623, -0.2815344334, -0.0544217974, -0.2569792569, -0.2517662346, 0.1671820432, -0.0304904711, -0.1570958644, -0.1060186177, 0.0450945795, 0.1082311422, -0.1423112303, -0.0918283537, 0.0260982104, 0.0367438607, 0.1312738061, -0.0475824960, 0.1033228561, 0.1782971025, -0.0415901430, -0.2732297480, 0.1766588837, -0.2736942470, -0.0700033754, 0.1355074197, 0.1710247844, -0.0598832183, 0.2190341055, -0.2705706060, -0.0002939002, -0.0628048852, 0.0547089465, 0.1574720591, -0.0433134884, -0.1116083264, -0.0653340667, -0.0078960722, -0.2630810440, -0.1209633127, -0.0872732401, -0.2154432386, -0.0507694744, 0.0074967546, 0.0120553458, 0.1194259301, 0.0555109195, -0.1380169392, 0.1975091845, 0.2487164736, -0.1738312244, -0.1641601026, 0.1533165574, 0.2191290259, -0.0676107705, 0.0987425596, -0.0428027585, -0.0092936214, 0.1141426265, -0.2729281187, 0.1826722026, -0.0352617353, 0.1573892087, -0.0196550246, 0.0594626628, -0.1034249067, 0.0858641267, 0.1562344283, 0.0402271710, -0.0844322369, 0.1885700524, 0.0494337976, -0.1443882138, -0.0285272319, -0.1452149451, -0.0139472131, 0.0294839498, 0.0458850190, -0.0615147576, -0.0267717559, 0.0170255732, 0.2186748087, -0.0208671726, -0.2688446641, -0.0373994298, -0.2120738178, 0.0697699040, -0.0059459591, -0.1269518584, 0.0933295265, 0.0072411243, -0.0917977914, -0.1516071260, -0.2086357921, -0.0827203542, 0.1155311391, -0.1074388921, 0.1017299518, -0.0607902855, 0.0884718597, -0.0502849631, -0.1670019329, -0.1128829345, 0.0268826466, 0.0257450771, 0.0533548295, 0.1395895332, 0.0087085823, -0.0550623387, 0.0463376679, 0.2695888281, -0.0103587825, 0.1011584699, -0.1599893421, 0.0562203638, 0.1396520883, -0.0098925419, 0.0839779079, -0.0844861642, 0.0914952755, -0.0386126488, -0.0519574769, 0.1638230234, -0.1165862828, -0.1270041466, 0.0570698306, 0.0520956479, 0.0341598168, 0.0434502549, 0.0462018624, 0.0700365305, 0.2246724069, 0.1762085110, -0.1244524568, -0.0048481473, 0.2038290054, 0.0838185549, 0.1566059142, 0.0681867376, 0.0727172568, 0.0057852524, 0.0327192061, 0.1093990505, -0.1796111912, 0.1242742315, -0.1048147604, -0.1258611232, 0.0448565334, 0.1773886085, -0.1703143716, 0.2409052104, -0.1785522848, 0.2506545484, -0.1558625549, 0.1474471092, -0.0206889659, 0.1674030721, 0.0970391929, -0.0267773271, -0.2692871392, 0.0250634253, -0.1047633290, -0.1613134295, 0.1535213143, -0.0731358454, -0.0063081426, 0.0186447315, 0.1880801022, 0.2329462022, -0.0132126138, 0.0499916263, -0.2613719404, 0.2551627457, -0.1535575390, 0.1391908973, 0.0651431158, -0.1857031882, -0.0068549505, -0.0053805383, -0.1168704703, 0.1373298466, -0.0067422753, 0.0044343830, 0.1396621615, -0.0606840998, 0.1517881900, 0.1119295806, -0.0130435145, 0.0182518438, 0.0225010589, 0.0272596180, -0.2139659226, -0.0408575423, -0.0454676077, 0.0019803473, 0.0022198542, 0.1625448465, 0.1073023900, 0.0254129469, -0.0156599097, 0.0095895082, -0.0052399216, 0.1158001795, 0.1114559323, 0.1997367442, -0.0368146449, -0.0076121967, -0.1683148891, 0.1346244961, -0.0487978160, 0.0205437094, 0.1921816319, -0.2014578879, -0.0098284539, 0.1532443464, 0.0190804079, -0.1514950693, -0.1244386956, 0.2760474384, 0.0241115987, -0.0258036852, 0.0708287954, 0.0248367991, 0.2639092505, 0.2716050446, -0.0788392127, 0.2317320406, 0.1585476398, 0.1100755781, -0.1263019592, 0.0402002186, 0.0615378469, 0.0588027984, -0.1495185643, -0.0018100784, 0.1160013527, 0.2049947381, -0.1929555535, -0.0309495889, 0.0300948378, 0.1460150629, 0.0518921278, -0.1220546663, 0.1765085608, 0.0751301199, -0.1604079157, -0.0511225797, -0.0704533234, -0.1177670360, 0.2054409981, -0.0842117071, 0.1081573069, -0.0272616688, -0.0098176422, 0.2138210237, -0.0236939937, 0.0485181399, -0.0837051645, -0.0973700434, 0.1066567749, 0.0873600319, -0.1116226465, 0.1654681265, 0.0889539942, -0.0634889007, -0.1653669775, 0.0847235993, 0.0849005133, 0.1192186773, 0.1644628197, -0.1231820509, 0.1186806411, 0.0873360783, -0.0539059862, 0.0086587267, -0.0034055116, 0.1680542082, -0.1438558400, -0.1100639850, -0.0516590774, 0.1127960682, 0.1009273753, -0.0911695436, -0.0486446247, 0.1786576957, 0.0558667779, 0.0452389233, 0.1028868780, 0.1119997054, -0.2244315296, -0.0376305617, -0.1069709808, 0.1011162996, 0.2042772472, 0.1082005650, 0.1309930384, -0.0414467007, 0.0390679948, 0.0773193613, -0.1355846077, -0.2550197244, -0.0768366382, -0.2523449659, -0.0181631874, -0.0333719812, 0.0581499673, 0.0395888314, -0.1614987850, -0.0046693305, 0.0330975875, -0.1041607633, 0.0614268519, -0.1205919236, -0.0397934839, 0.1434961408, -0.0445209332, 0.0239347834, -0.0660350695, -0.0270647053, 0.1036168709, -0.0653954521, -0.0411473513, -0.0020289386, 0.0394494608, 0.0585655384, -0.0940046459, -0.1427314281, -0.0681226179, 0.0856673792, -0.0579125471, -0.0812307969, 0.0693212971, 0.0953102708, -0.1104368642, 0.1342641860, 0.1701261699, -0.0382313505, 0.0352362134, 0.0482073501, 0.2800991833, 0.0561833717, 0.0054097837, -0.0759263709, -0.0508875288, -0.0411684252, -0.0924875662, -0.0803059191, -0.1833890229, 0.0768471956, -0.1311143786, -0.1393002570, -0.2137907743, 0.0106038572, 0.1232101843, -0.1236054599, 0.2375562787, -0.0570119433, 0.1251049638, -0.1022295430, 0.0108428514, 0.1025518328, -0.0131405871, 0.1679800600, -0.1126660705, -0.0569306649, -0.0296011399, -0.1884380579, -0.1839974076, -0.0778052881, 0.1806346476, -0.0122666461, 0.0906614810, 0.0400422774, -0.0020964462, -0.0275174547, -0.0209659748, -0.1112232134, -0.1528859586, 0.1343597025, 0.1205996946, 0.1870486587, 0.0372315943, 0.0183786899, 0.1364729404, -0.0342386365, -0.1200672314, -0.0888070613, 0.1897195280, -0.0105872331, 0.0682065040, 0.1246330142, 0.0775456429, 0.0261111930, 0.2117007077, -0.0994382352, 0.1738440096, -0.1378704458, -0.0380288437, -0.0567041487, -0.1840337515, -0.1205710769, 0.1845627278, -0.1743058115, 0.0803807974, -0.1403430849, -0.1996393800, -0.0275404807, -0.1135111675, 0.0676478967, -0.0388840996, -0.1754347980, -0.0817556158, 0.2236230373, 0.0714160129, 0.0307225268, 0.0042569605, -0.2518891096, 0.0414959118, -0.1994883865, -0.0972964764, 0.1544737071, 0.0640413463, -0.0228678919, -0.0059752888, 0.1163765341, 0.0959528387, -0.2415598184, 0.0306159854, 0.2145864069, 0.0193828978, -0.1953918785, 0.0938859284, -0.0291212033, 0.0929354280, -0.2474187613, -0.0861299410, -0.0585218668, 0.0690435395, 0.1668332070, -0.0690863878, -0.0257987585, -0.0357243940, 0.1823994517, 0.0548520051, 0.1106647104, -0.1728336364, -0.0364606194, 0.0117539717, 0.0807479545, 0.1039318293, -0.1055908427, -0.1555093080, 0.0908910111, -0.0048478562, -0.0070981677, 0.0955349728, -0.0783625841, 0.0133770360, 0.0553172417, 0.0597626939, -0.0480791442, -0.2184858173, -0.0269382112, -0.0258942395, -0.0667369068, -0.0655889437, -0.1826800108, -0.2020168453, 0.0695535243, 0.1360591799, -0.1314125955, 0.1104550138, 0.0707023591, 0.0183547344, -0.1535200030, -0.0669160187, -0.0586275123, 0.0212679710, 0.0040227980, -0.0719724298, 0.0911378041, 0.1872738600, -0.0838177577, 0.1443223506, 0.2162292004, -0.1232448742, 0.0932606608, 0.1295749247, -0.1708424687, 0.0423369817, -0.0963101089, 0.0230733827, 0.1210210025, -0.0968931988, 0.1932785213, -0.0266302284, -0.1915113926, 0.1129576117, 0.0362024270, -0.1054361239, 0.0093171299, 0.0626235157, 0.0504978485, -0.0179883651, -0.0084168147, -0.0287575033, 0.2085050941, -0.0983915552, -0.2267641425, 0.1768546551, -0.0252442472, -0.0600322038, 0.0696208626, -0.1104130447, -0.0685909018, 0.1949442178, 0.0790968537, 0.1812391579, 0.2530223131, -0.0662645847, 0.0135410270, 0.0504184552, 0.0041985274, 0.1053015813, -0.0969395712, 0.1547411829, -0.1055914089, 0.1475364268, 0.2297855616, 0.2455376983, -0.1216965541, 0.0956189185, -0.0687636659, 0.1424558163, -0.0700143650, -0.0756852403, 0.2371850163, 0.2422208637, 0.0010845367, -0.1287554353, -0.0476798899, -0.0028128438, -0.1602174789, -0.0869205743, 0.0175761655, -0.2000826448, -0.0674321204, 0.0834636465, 0.2330247760, -0.1204214022, -0.1836447716, 0.1437133402, -0.1699091345, 0.0997650847, -0.0749297589, -0.0952026621, -0.1029830277, -0.0384972319, 0.1509623677, -0.1061645597, -0.2222892940, -0.1260357499, -0.0639265925, 0.0523087680, 0.0139457202, -0.1055139080, 0.1898580790, 0.0543224253, 0.1981714666, 0.0534451343, -0.2108165920, 0.0141614303, 0.1716880947, 0.1820041686, 0.0669562668, -0.0579078123, -0.0460246354, -0.0626341850, 0.2084990293, -0.2106246501, 0.1451232582, 0.0890577435, 0.0098127779, 0.0540058948, 0.0013837309, 0.0242905188, 0.0489025377, -0.1116973981, 0.0686949864, -0.0721082389, 0.0785728917, -0.0777233765, -0.1943361163, 0.1482923031, 0.1862705648, 0.1958853155, 0.0670894906, 0.0973470360, 0.2458067983, -0.1281883568, -0.0562385842, -0.1386122555, -0.0649335906, -0.2150866240, -0.0505756848, 0.2430183589, 0.1154516339, -0.1417705119, 0.0634398833, 0.0944910944, 0.2602468729, 0.0792960599, -0.0898979530, 0.0212309826, 0.0566852391, 0.1818692833, 0.0707230791, -0.0705101639, 0.1038988978, 0.1649705470, 0.0930966809, 0.0670909360, -0.0768328980, 0.0215678420, 0.2298620641, -0.1214697137, -0.1004156768, -0.1361959279, 0.0385150239, -0.2399814725, 0.2691431344, -0.0647109374, -0.0132521670, -0.0089104762, -0.0759275407, 0.0353365801, -0.0404681116, 0.1565996110, 0.0255155936, 0.0319296792, -0.0840238556, -0.0896373168, -0.1236476898, -0.0054846364, 0.0500675440, -0.0414691083, -0.1496264189, -0.2310706973, -0.1532699466, 0.0268645398, -0.2270739079, 0.0530352145, 0.1786089540, 0.0289559830, 0.0144722294, 0.1851200461, -0.2367797941, -0.1505751610, -0.1395210326, -0.1364099830, -0.1098728701, 0.0579652637, 0.0135919675, -0.1190491766, -0.0819638148, 0.1359913051, -0.2178155780, -0.0752129033, 0.1899950504, 0.1468883753, 0.1348498911, -0.0694349110, -0.0392700434, -0.2162387371, -0.0991038308, 0.2248629332, 0.0037308084, 0.0905923992, -0.0061877952, -0.1252689958, 0.0954621360, 0.0079595754, -0.1035138071, 0.1018114015, 0.0768774301, 0.2435246408, 0.0034814070, 0.0322631449, 0.0079361126, 0.1829668134, -0.2742869854, -0.0397096127, -0.0931601375, 0.0377131589, 0.2173781693, -0.0813271031, -0.1076261252, 0.0319703519, 0.1249579415, 0.0441631414, 0.0601938851, -0.0988027528, -0.0151119921, -0.0523339510, 0.0123836230, -0.0153128114, -0.1556480080, -0.1602952480, -0.0328858346, 0.0006982736, -0.1372380257, -0.2295624167, 0.0088037895, -0.0049498826, -0.2499880493, 0.0511542745, -0.2308109254, -0.0250486340, -0.2498463392, -0.0368389599, 0.1695722342, 0.0168661624, -0.0463512503, -0.1291810572, 0.0840370655, -0.1974868923, -0.0332204103, -0.1107828319, -0.0975915343, 0.0443138406, -0.0373708531, -0.1627323925, 0.1200432330, -0.0219310988, -0.0440855809, 0.1163711771, -0.2593677044, -0.0000560131, -0.1520258784, 0.0333607942, -0.0347101688, 0.2133458108, 0.1793261617, 0.0765932575, 0.0686086789, -0.1873623580, -0.1240102649, -0.0976246148, -0.0627235100, 0.1855523288, -0.1877005845, -0.2764284909, -0.0522389188, -0.0834909156, -0.1157734469, 0.1815794557, 0.0540876351, 0.0754037797, -0.1610208005, 0.0867177248, 0.0486086905, -0.1064857766, 0.0720110759, -0.2186922878, 0.1513609886, -0.1536414325, 0.0556789227, -0.1657348275, -0.2005716115, 0.1566983759, -0.0223819856, 0.1865502596, 0.2782596648, 0.2585288584, -0.1978241801, -0.1253424436, -0.1410415024, -0.1763153374, -0.1055376604, -0.1041581184, 0.2258055210, 0.1140447110, -0.1071726903, -0.1695134491, -0.0606756844, 0.0878606066, 0.1542835534, -0.0823116899, -0.0318609700, 0.1893904507, -0.0153426779, -0.1186865792, 0.0930403173, -0.0883526504, 0.0472761318, 0.1794876158, 0.2399377376, -0.2419648319, -0.1129420102, -0.1277067810, -0.1337104142, 0.1199810654, -0.1634409726, -0.1324570626, 0.0224054381, -0.0589524582, 0.0125245778, -0.1544578075, -0.2793114185, -0.1535344422, 0.1631414145, 0.1233481243, -0.2358233929, -0.0891285986, -0.1440817118, 0.0295942370, -0.1526359469, -0.1110657752, 0.1913964748, 0.1330365688, -0.2329091132, -0.0961874053, 0.2470954657, -0.2277180552, -0.0330824926, -0.1010759547, 0.1517250687, 0.1953266710, 0.0567239076, -0.2163076103, -0.0939943641, -0.0441188216, 0.0858505219, 0.0457396060, 0.1426130384, -0.1463038027, 0.0674979389, -0.0309557077, 0.0756995529, 0.0410220474, -0.1071159989, -0.0449925214, 0.0914113671, 0.0221894532, -0.0626492873, 0.0073756524, -0.0494044125, 0.1478740275, 0.0898270905, 0.0224213749, -0.0317431390, -0.0052838633, 0.1015326083, 0.0317496583, -0.0358871780, 0.1544406414, -0.0560408011, 0.0783454552, -0.2638459504, 0.1715150028, 0.2184635401, -0.2489423156, 0.1522821486, 0.0814051703, -0.2130306214, 0.1428199559, -0.2078494132, -0.0920356065, 0.1101932451, 0.2037281543, 0.0748213828, -0.1804476082, -0.1091673225, 0.2271334976, -0.1327931434, 0.1939366758, 0.0199975129, 0.1826369464, 0.0401821621, -0.1676235199, 0.0734928995, 0.0481736548, -0.0415702723, -0.0591143779, 0.0157044660, 0.0054706549, 0.0186459795, 0.0196401812, 0.2408562750, -0.0610019304, 0.0779283121, 0.1108254492, -0.0150800571, 0.1676027477, -0.0022060650, -0.0677938238, -0.0550577156, 0.1727802008, -0.0568465814, 0.2050577849, 0.1471568346, -0.1379938275, -0.1757299900, 0.0240395088, -0.2144909203, -0.0414729528, -0.2261683345, -0.1141694561, -0.0152816782, 0.0435651205, 0.1373898983, -0.0160836652, 0.0302066822, -0.0218235347, -0.1492623389, -0.0451982990, -0.0078326361, -0.2263709903, -0.1167037189, 0.0876809433, -0.0840426534, -0.0562107526, -0.1530039907, 0.0149958767, 0.1339700669, 0.0284523387, 0.1558420211, 0.0271562189, -0.1293413192, -0.0001505857, 0.1352678835, -0.1140804216, -0.0212099478, 0.1967706978, -0.0261282530, 0.0036964319, 0.1583900899, -0.0460807420, -0.1459663063, 0.0043853368, -0.0194389243, -0.0214097779, -0.0234643985, 0.0936346948, -0.0688393638, 0.0397967547, -0.0118336519, 0.0304533672, 0.0272171050, -0.1931937635, 0.1543549746, -0.2171087861, 0.0787218213, -0.0513317920, 0.0257313605, -0.0884847045, -0.0192483179, 0.0548430420, 0.1712633371, -0.1252783537, 0.1161159873, 0.1830567271, 0.1433041692, 0.0124465758, -0.0192826595, 0.0787424073, 0.1500122249, -0.1648032516, 0.0099372258, 0.0205259006, 0.1576093584, 0.0892035887, -0.1183510721, 0.2071245313, 0.1178460121, 0.0776144862, -0.0701295212, -0.1519169509, -0.0205894746, -0.1564785987, -0.0204881951, 0.1265701056, -0.0535916314, -0.1052640527, -0.0193486288, 0.1371560693, 0.1425316334, -0.1705568731, -0.0804842114, 0.0858909562, 0.1240749806, 0.1895733327, 0.0245830901, 0.1308944523, 0.1358108670, 0.0349046402, 0.1252114475, 0.0969950557, -0.0865914449, -0.1619530171, 0.1600220054, 0.0838692710, -0.0410636179, 0.0108306725, -0.0983688086, 0.0535626821, -0.1854764074, -0.0693942159, 0.0616769679, 0.1276187599, -0.1537453979, 0.0271332469, -0.0429891460, -0.0437458418, 0.0165955555, 0.0152494479, 0.1072176769, 0.0202679560, -0.0734092519, -0.2216858715, 0.0029208853, 0.0539567545, -0.1726525873, -0.2319732457, 0.1210363135, 0.0603471212, -0.0969462022, 0.0345679708, 0.0177583918, -0.0826377347, -0.0763537139, -0.1704789847, -0.0969363824, -0.1467275918, -0.1772084981, 0.0952802971, -0.0081535764, -0.1094398573, 0.0628226399, 0.0668792054, -0.1064114273, -0.1628561169, 0.1034293845, 0.0061905361, -0.1544454247, -0.2107465863, -0.1962555200, 0.0768572912, 0.0266104657, 0.0354873464, 0.1723300666, -0.0900448784, 0.1323480159, 0.1269784421, -0.0907164738, 0.0674121901, -0.2000700533, 0.0593714230, -0.1161905453, 0.0623202063, -0.0324752294, 0.0173228066, 0.0390928648, -0.1893329173, 0.0881547406, 0.0680566579, -0.0009453971, -0.0650167167, 0.0241679773, 0.1724233925, 0.1547985971, -0.0752607584, -0.0436412096, -0.0385940298, -0.0797336698, 0.1395423263, 0.0850707293, 0.1192415953, 0.0644749552, -0.0358782075, 0.0894984975, -0.0608384162, -0.1396445930, 0.1678787619, 0.0129773337, 0.1331988126, -0.2499296367, -0.0546240807, -0.1083584875, -0.0292907171, -0.1137039661, 0.1176558509, 0.0550910905, -0.0880615562, 0.0282227490, -0.0618245304, -0.0392875560, -0.0462019220, -0.1062098742, 0.1123623699, -0.0301338099, 0.2342307121, -0.2463207841, -0.0497002378, -0.0952078700, -0.2338486165, 0.0509131737, 0.1254990548, -0.1055049300, -0.1947957128, -0.0094851824, -0.1668559462, 0.0725406483, 0.0562249385, 0.1672552377, -0.1099442467, -0.0592752099, 0.2809660435, 0.0059850523, 0.0466533899, -0.0615974776, -0.1645759493, -0.1583848894, 0.1012850478, 0.0981546268, 0.0591318011, 0.0698835850, 0.0106203156, 0.0800578818, 0.0505735949, 0.0192197282, 0.1005599350, 0.1599157155, -0.0591769852, 0.0103181852, -0.2013486326, -0.2239726335, 0.0790842101, 0.0050019538, 0.1729985029, -0.0146546997, 0.0341880731, 0.0189589690, 0.2372577935, -0.1649870574, 0.1480764449, -0.0330683552, 0.0714735985, -0.2077124715, -0.1700628400, -0.0112589570, -0.1408524513, 0.1562382430, -0.1895070076, -0.1201299131, -0.0712305531, 0.0476264581, -0.2426939607, 0.2204133868, 0.2693059444, 0.1855096221, 0.0505459085, 0.1182278022, 0.0677674189, 0.0608838163, 0.2185353190, 0.0228521433, -0.0224293135, -0.2810746133, -0.1472569257, 0.0804355145, 0.1282084733, -0.0144645376, -0.0264607836, 0.0212637056, 0.0488155261, 0.0107995439, 0.0040460746, -0.0264674108, 0.0094683915, 0.0355187841, -0.1126960292, 0.0079925433, 0.0108874161, 0.0450526439, 0.1785545796, 0.1708038151, 0.0181654263, -0.0892767832, -0.1094391942, -0.1338352263, 0.0825348198, 0.0281411093, -0.1335107088, -0.0328858383, -0.0266688149, 0.1198041886, 0.0142728463, 0.0631805584, -0.0500898063, -0.2173765451, 0.1482579112, -0.0826551914, 0.1456778198, -0.0330835693, 0.1058568582, 0.2366948277, 0.0848244354, -0.0750323907, 0.2226323187, -0.1987907439, -0.1357753277, 0.1879772693, 0.1415197700, -0.1990472674, 0.0639303848, -0.1648827642, 0.2501419783, 0.0707037374, 0.2073095441, -0.1277020127, 0.0406254493, 0.1714550555, -0.0143518969, -0.0393840298, 0.1880031675, -0.0402950421, 0.2082970887, 0.0896879658, -0.1394789070, -0.0905782953, 0.1751512736, -0.0074307704, -0.2727589309, 0.0674644783, 0.0431348570, 0.0609920956, -0.0734761208, 0.1139152199, 0.2163497657, -0.1241211966, 0.0252368208, -0.0339819826, -0.0472664237, 0.0355433486, -0.1485827267, 0.0709234476, -0.0173883531, 0.0666727498, 0.0903508142, -0.0777464956, -0.0174776353, 0.0066481740, -0.0304377452, 0.0463882089, -0.1877077967, -0.0637969375, -0.0638685971, -0.2306402922, 0.0808973238, -0.1749112457, 0.0604666024, -0.1571592689, -0.1711204946, -0.0863318592, 0.0385497659, 0.1568234563, -0.1218849272, -0.0114297001, -0.0474961139, -0.0840570256, 0.0575129166, -0.0881023854, 0.0211579427, -0.0058891065, -0.0963183418, -0.0670367703, 0.0110205645, 0.1922603846, 0.2735378146, 0.0853173137, 0.1115034968, -0.0539151914, 0.0745639130, -0.1416144967, -0.0579626933, -0.0650298521, 0.0305630919, 0.1063765436, 0.0974897891, 0.1247541234, 0.0892828628, 0.0517945290, 0.0261805058, 0.1738074124, -0.0473431461, 0.0599305406, -0.2547312677, 0.0985546261, -0.1640627384, -0.0582451671, 0.0275552161, -0.1153900251, -0.0320252925, 0.1768815666, -0.0841988847, -0.0723392516, 0.1157457903, -0.2517947853, -0.1505289972, 0.0150477309, 0.0273434073, -0.0579053238, 0.0856838375, -0.2603509426, 0.0270935856, 0.0172338560, -0.0906302184, -0.1865099669, -0.0265421886, 0.0830674767, -0.1460941881, -0.0553600341, 0.0013823485, -0.0586301386, -0.0023553995, -0.0077895038, 0.2303811163, -0.0367274061, -0.0947587863, -0.2021603882, -0.1267063022, -0.1430059522, 0.1495249718, -0.0378709137, -0.1456508338, 0.1722086966, 0.0270733312, 0.0605549179, -0.0446934700, -0.0173650086, 0.0536103435, 0.0064533986, 0.0444636382, -0.0942983106, -0.0831035152, -0.0362871177, -0.0911514759, 0.0299060903, -0.1994261146, -0.0892720744, -0.1308709681, 0.0897574350, -0.0313966312, 0.2191442251, -0.2005442232, -0.0322418362, 0.2341535836, 0.1156880781, -0.1450664401, 0.0137718515, -0.2073953897, 0.0981153548, -0.2345236540, -0.2186273336, -0.1146696284, -0.1669815034, 0.0439336151, 0.0604281984, 0.2572791874, 0.1272587776, -0.0889153108, -0.0258709658, 0.1207844168, -0.1489575207, -0.0342914425, 0.0771380439, -0.1778531969, -0.0576738492, -0.0946085528, -0.1185775921, -0.0761272833, 0.2041182518, -0.1032529399, 0.0413368382, 0.0984331667, 0.0097174505, 0.0796985328, -0.1711962372, -0.0557148047, 0.1934195310, -0.0453478694, 0.0696682632, -0.0600176081, -0.0032975441, -0.0366443507, -0.0061099497, 0.0480011329, -0.2208086997, 0.1160936430, 0.0363823995, -0.0242342632, 0.1159889027, -0.1456405222, 0.1247510388, 0.0012741809, -0.0842757672, 0.0222853255, -0.0159930065, 0.0017364911, 0.1841675043, -0.0409054570, 0.0606108755, -0.1389085054, 0.0357617401, -0.1124136820, 0.2571050525, -0.0273480415, -0.0775611699, -0.0006093989, 0.1886445582, -0.0298983287, 0.2275124788, -0.2655483186, -0.1744883955, -0.0343139991, 0.0775154680, -0.0809339732, -0.1193491369, 0.1486704797, 0.2418732047, -0.1461957395, 0.0340624936, 0.1082224250, 0.0753488913, -0.1315296143, 0.0020067636, 0.0600850284, -0.2004207075, 0.0545314103, -0.0163198262, -0.0250850488, 0.0264736991, 0.1591459215, 0.1598952562, 0.0407649353, -0.1942477226, 0.0365207382, -0.0209954288, -0.0027846799, 0.0265398193, 0.0367871784, -0.0617594421, -0.0479908437, -0.2303723544, 0.0645277128, 0.1797374040, 0.1865750402, 0.1672605425, -0.1545633078, 0.0387868658, -0.1476140618, 0.0177804101, 0.1320818365, -0.0894806087, -0.0161303561, 0.1715302914, 0.1154726967, 0.0070668785, -0.0288237073, 0.0074882885, 0.2378109545, 0.0046613268, -0.0751704350, -0.0798137262, 0.0286437850, -0.0894980580, -0.0821608454, -0.0449271239, -0.0912401676, -0.0476566181, -0.0835786834, 0.0023352220, -0.1960292459, -0.2666652501, -0.2807102203, 0.0112915067, 0.1411646456, -0.1030725241, 0.1039313748, 0.0083737299, 0.1806391329, -0.0117802909, 0.1577220410, -0.2759286761, -0.0267686285, 0.0384328775, -0.0070381351, 0.0384430997, 0.0333491601, 0.0297768638, 0.0492505878, -0.2060624361, 0.0583405346, 0.1832213998, 0.1642454118, -0.1240874305, -0.1567259729, -0.2728117704, -0.2058434039, 0.0642997250, 0.1889805794, 0.0182035845, 0.1117954701, 0.0061256601, 0.0660733879, -0.1366270036, -0.2435403466, 0.1751931906, -0.0790654570, 0.0513062775, -0.0054717921, 0.2332037836, 0.0362307727, 0.0279543363, -0.0093385959, -0.0433799736, 0.0004559231, -0.0936896503, 0.0953217447, -0.0478491895, -0.2071359903, 0.0287900735, 0.2814482152, -0.2186325341, -0.0763033107, 0.0157949850, -0.1250059158, -0.2437406778, 0.0180377997, 0.1908720285, -0.1807061583, 0.0164301321, 0.0293629654, 0.1765750349, 0.0688582808, -0.1083076671, -0.0067920010, 0.0331725180, -0.1203912422, -0.0723138675, 0.1059518754, -0.2101229578, 0.0416199975, 0.0925039500, -0.1429690868, 0.0160021707, 0.0864955857, -0.0762167573, 0.0601101220, -0.0588802360, -0.0248157438, -0.0982175022, -0.0743920133, 0.1156683937, 0.0861645639, 0.0959908515, -0.1828875989, 0.0903427824, -0.1681068391, 0.0986229554, -0.0799662396, 0.0825820714, -0.0329723395, -0.0304601230, -0.1385131776, -0.0841106996, -0.1200354770, 0.0662789196, 0.0985372663, -0.0838575512, 0.0497086197, 0.1036793888, -0.0446294472, -0.1211333051, -0.0564030260, -0.0142212510, -0.0918173566, 0.0588798672, 0.0762772113, -0.2821432650, 0.2188967466, -0.1765611470, 0.0806708708, 0.0645766631, -0.0955123231, 0.1218037829, -0.0515348390, -0.1127537861, 0.0839025825, -0.1355219185, 0.0122233955, -0.1102016792, -0.0165790878, 0.1243803129, 0.0455528870, -0.0879565477, 0.1298339814, 0.2014232725, -0.2106787264, -0.1955988258, -0.2024852037, 0.0606190637, -0.0584104583, -0.1785541177, 0.2299266905, -0.1643892676, -0.0350607894, -0.0285701826, -0.0128336791, -0.2304469496, -0.2168662399, -0.0296698716, 0.2382008284, -0.0198021587, -0.0641227365, 0.0615575016, -0.1456784159, -0.1986768991, -0.1093136817, -0.0309266914, 0.0337563455, 0.0649856776, -0.0107384529, 0.0773612484, -0.0976337790, -0.0494906865, 0.1006739363, 0.0156857837, 0.2097620070, -0.0892667025, -0.0027167967, -0.0934068933, -0.0414536968, -0.0794488341, 0.0648898929, -0.0690908358, 0.0200767666, -0.1778577417, 0.0291368645, 0.0109215314, -0.1173171923, -0.0680097267, -0.1905310601, 0.1494811177, 0.1295002848, -0.2244780064, -0.0011578274, 0.0343008488, -0.0166095030, 0.1186012998, 0.0565616786, -0.0211129487, -0.1750300080, -0.1872672439, -0.1440698355, 0.0672810748, -0.0369840935, 0.0196914282, 0.1097908914, -0.1964478046, 0.0053239441, -0.0471920669, 0.0348455645, -0.1373988986, -0.1129877344, -0.0010547745, -0.1745341867, 0.2131111771, 0.0269079302, 0.1279290318, -0.0590863563, 0.1542143375, -0.0406776890, -0.1295089722, -0.0837662518, 0.1789328903, -0.2003756166, 0.1982194483, 0.0011911010, -0.0178972762, 0.0691606775, 0.0794863030, -0.0363926403, -0.0402445309, 0.1351668239, 0.1148668826, 0.0146518415, -0.0590940230, 0.0195161346, 0.0528349988, -0.1369973570, 0.0001544519, 0.2287717909, -0.2782683671, 0.0546237640, 0.2418916970, 0.1595528573, 0.1326711923, -0.1033068299, -0.0501610190, -0.0596309230, 0.0717134923, -0.1139698252, 0.0117468247, -0.1424624324, 0.1165053472, -0.0187702235, 0.0292953234, 0.0642869100, 0.0686985701, -0.0748718306, -0.1737188101, -0.0882155821, -0.0457292534, 0.1616718471, -0.0398879983, -0.0671925023, -0.0053574191, 0.0240640137, -0.1207968891, 0.0179068595, 0.1068537757, 0.1392839402, 0.1698120981, -0.2329331189, -0.1014796868, 0.1508913338, -0.1220884100, 0.2705887556, 0.0091331620, 0.2103093863, 0.1285671890, 0.1338226050, 0.1548210233, 0.0250963569, -0.0843904242, -0.0994010195, -0.0170433819, 0.0463861525, 0.0321599320, -0.0123192575, 0.0243457817, 0.0601771735, 0.2504062653, 0.0035473546, -0.1355210841, -0.1926615387, 0.0041931602, -0.0882106200, -0.1615990549, 0.0235637296, 0.2003027201, 0.0423977785, -0.0082340874, 0.1840012372, -0.0669102669, 0.0644898117, 0.1997119933, -0.0588631108, -0.0616071522, 0.0785158128, 0.1629140228, 0.0422735550, 0.0190252922, -0.0448105410, -0.1187983230, 0.0083007514, -0.2134059966, -0.0366295688, -0.0204784404, -0.0675615966, -0.1162369698, 0.2220935822, 0.0813051090, 0.0959906504, 0.2281070650, -0.0541471280, -0.1032327190, 0.0843043402, 0.1359398216, 0.0489966199, -0.1061325967, 0.1388107091, -0.2284014076, -0.0858228877, 0.0249851272, 0.0266676825, 0.2653348148, 0.0465815775, 0.0752729252, 0.0314146429, -0.0504718311, 0.1184308901, -0.0067267306, 0.1523765475, 0.0705392137, -0.0133630661, 0.0596024282, 0.2405472845, 0.0896662399, 0.0533585846, -0.1255808920, 0.1209406331, -0.1181456149, -0.0254781693, -0.0430950634, -0.1809827387, 0.0782151073, 0.1365399808, 0.1617724597, -0.1692211032, 0.0258148499, 0.1033913568, 0.0383367352, 0.1039390862, 0.0824500620, 0.0540847965, 0.0096509764, 0.0051436946, -0.1719842255, -0.0357538536, -0.1108756810, 0.0892014802, -0.1254809201, 0.0233452152, 0.1295330524, 0.1627498865, -0.1123887151, -0.0187318623, 0.1595086902, -0.0508983359, 0.0784765705, -0.1385450959, -0.1176277399, -0.1555093825, -0.0278044734, 0.0909049436, -0.1306594312, -0.0425463691, -0.0208427329, -0.0503295250, -0.0377141684, 0.1130606979, -0.1294007897, 0.0375595167, 0.0710453987, -0.0866907462, 0.1200009882, -0.2056134790, 0.1010261178, 0.0915983468, 0.0950831026, 0.0894284025, 0.0836184472, -0.2390483767, -0.1940729171, -0.1772521138, 0.0682874992, 0.1587848216, 0.0275120977, -0.2351211160, -0.0894038379, 0.0549577177, 0.0263591614, 0.0042843828, 0.0932236463, -0.0917494670, 0.1780029684, 0.1825864762, 0.1681100279, 0.0604532845, -0.1198405847, -0.0384915099, -0.0911973491, -0.0009057249, 0.1228386238, -0.0523846634, -0.0768495053, 0.0478668213, -0.2384143919, -0.0175048076, -0.1951120198, 0.0633295402, -0.1796663404, 0.2624019384, 0.2016570121, 0.1404578090, -0.0802494884, 0.0024564434, 0.1549468189, -0.0042548571, -0.2023435384, -0.0279251430, 0.1204567030, -0.1062928066, -0.1991026551, 0.1361678988, 0.0918181390, -0.1666405201, 0.0020750584, -0.1249687597, -0.1348985136, 0.0451046079, -0.1440338194, 0.0820648372, -0.0699970871, -0.0428439789, -0.2264162600, -0.0474866889, -0.2728905380, -0.1025497243, 0.1929693073, 0.1396657526, -0.1263933629, -0.0041421801, -0.1491480917, -0.0206947196, -0.1254087687, 0.1886757761, -0.1114253104, -0.0418458097, 0.0596747920, -0.0478894189, 0.0695172176, 0.2268049419, -0.2771033347, 0.0470930859, -0.1032595783, 0.1482471675, 0.1369970590, -0.0897887200, 0.0689419582, -0.1645505130, -0.2291839570, 0.0401709266, 0.2067123801, -0.0872378722, -0.0346675105, 0.2464982420, -0.1185200885, -0.1859432608, -0.0730285197, -0.0104476139, -0.0663651526, 0.0885117650, -0.0574701652, 0.2360936105, 0.0636683181, -0.2647898197, 0.0017449642, -0.0093077142, 0.1143399850, -0.1011050716, 0.0471752919, 0.0130722625, -0.0677279234, 0.1293587536, -0.0809795037, 0.2016209066, 0.0786142871, 0.0619074106, -0.0783312842, -0.0967197046, -0.1274246722, -0.0032805498, 0.0018942512, -0.0224643685, 0.0277085733, 0.1076661050, 0.0863802284, -0.0287268050, -0.0475982800, 0.0934255421, -0.2341831028, -0.0421934873, 0.1517800987, 0.0826767907, -0.2138686776, -0.1381814033, 0.0007278296, 0.0659636036, 0.1038657576, 0.0896387473, -0.1849066317, 0.0442377515, 0.2377777249, 0.2288134396, 0.2597841024, 0.1319861710, -0.1213138849, -0.1025569662, 0.1305233389, 0.1175157428, 0.1883183569, -0.0418022797, -0.1557396203, 0.0803364590, -0.1539065242, 0.0516675375, -0.1673851758, 0.1041970700, 0.1156292781, -0.0568613522, 0.0658126920, 0.1329591870, -0.0347211733, -0.0036160594, -0.0218325760, 0.0243293457, -0.2693767548, 0.0983695835, 0.0295089036, 0.1131962836, -0.1985058188, 0.1505913436, -0.2447069138, -0.1156207994, -0.0024648956, -0.1361294240, 0.0417347029, 0.2795943022, 0.0555459373, 0.0070150052, 0.0995558277, -0.1332432628, -0.1083972901, -0.0564717278, -0.0852044597, 0.0000591862, -0.1833916605, -0.2357933819, -0.1549461335, 0.1910709739, 0.1002434269, 0.0106700007, 0.1414250433, 0.1285675764, -0.2287169844, 0.0516394414, -0.1287409812, 0.0492929704, 0.0347994976, 0.0339354388, -0.2276965529, 0.1219957620, -0.0723021328, -0.0703219771, -0.0321836956, 0.0140124178, 0.1794790179, -0.0066162795, 0.0234557502, -0.0503885262, 0.0922845528, -0.1685742736, 0.0165435970, -0.2805002332, 0.0009459077, -0.1016338319, 0.1941561699, -0.0726863593, -0.2737506330, 0.0448135436, -0.1387238353, -0.0458490662, -0.0948581547, 0.0284088030, 0.2422904074, 0.0441267975, 0.2228915840, 0.2509222329, 0.0700906962, 0.1803892106, 0.2090414315, 0.2122621387, 0.0061308132, -0.1218234599, 0.0639872700, 0.1884583086, -0.1432186365, 0.0038062823, 0.0564705543, 0.0722186342, 0.2357243150, -0.0627576783, -0.0963452682, -0.1780739725, -0.1656378210, -0.1018128842, 0.1547954232, 0.2627188563, -0.1450984925, -0.1582647115, -0.1351662129, -0.1920804977, 0.0042361370, 0.1769316196, 0.0407814570, 0.0083384188, 0.2047359794, -0.1653024852, -0.0723818839, 0.0096694669, 0.0048876610, -0.1172294617, -0.0237945803, -0.0015328210, 0.1365130842, 0.2003318071, -0.0181063805, -0.0656312481, 0.1683730185, -0.0031848112, -0.1039460823, -0.2180317193, -0.2093357444, -0.0094879959, -0.1095916703, 0.0568673722, 0.1751355678, 0.0735547617, -0.1790207326, 0.0678129047, 0.1319689304, 0.1736477464, 0.0291121416, 0.1659036577, 0.1503273845, 0.0202641226, 0.0562997162, -0.0318545289, 0.0359065831, 0.2413242012, -0.0324722268, 0.1057487354, -0.0271640383, 0.0854516029, -0.0722396672, 0.1533966959, 0.1407936364, -0.2740957737, 0.0341625102, 0.0328957289, 0.0265932716, 0.2346304953, -0.0165936872, -0.0498930775, 0.0847320035, 0.0809559897, 0.1289165616, 0.1702803224, 0.1507943571, 0.1344378889, -0.0305502526, -0.1870999038, 0.0523027629, -0.1507261842, -0.1761574745, -0.2331975698, -0.0265436731, 0.0812379345, -0.1242274866, -0.0046835402, 0.1011813059, -0.0204782244, -0.0392139070, -0.0076703858, -0.1849631369, -0.0451299399, 0.0992794633, -0.1478020400, -0.1520657837, 0.0125291832, -0.1249044240, -0.2434165478, -0.1547776163, -0.0147921182, -0.1711732149, 0.0075311200, -0.1235701963, 0.0452292636, -0.0807145163, 0.0358914807, 0.0652983710, -0.0325032622, -0.0464362688, 0.1095793396, 0.1024796069, -0.0937481895, -0.0549784712, -0.1029878408, 0.2010669857, -0.1879076660, -0.0953394026, 0.0004692778, -0.0467328057, -0.0575468950, -0.0774260908, -0.1416304857, -0.0973664671, -0.0084748985, -0.0068962439, -0.2319070548, 0.0482931659, -0.1455951780, -0.0493860953, -0.1398224831, 0.0182824098, -0.0665636286, 0.0298899561, 0.1213788092, -0.1493241340, -0.1607088447, 0.0547625646, 0.0378890708, 0.0482281707, 0.0740848333, -0.2048318386, 0.0570469014, -0.1790251136, 0.0639427528, 0.0362081304, 0.0487535782, 0.1924546361, -0.0507077649, -0.0595554113, -0.0943164676, -0.0176751260, 0.0481203012, -0.0071476628, 0.0559659041, 0.0598038509, 0.0998377949, -0.0920443237, 0.1017894372, 0.1778330058, -0.1851046532, 0.2294271439, 0.0828034878, 0.1044721380, -0.1934586316, 0.1614157408, -0.2481949031, -0.0231240541, -0.1544599533, -0.0966617912, -0.1799956858, -0.0776629895, -0.0387779772, -0.0356551744, -0.0515959784, -0.0629265681, 0.1468274742, -0.0047350018, -0.0879931971, -0.1785796732, -0.0636982769, -0.1365998685, 0.1959010661, 0.0082926964, 0.0096975137, -0.0057226326, -0.0316970199, -0.1095834449, 0.0430450253, -0.0188115202, 0.0044760881, 0.2193196267, -0.0945298374, 0.1798245013, 0.1928773075, 0.1895311624, 0.2433505058, -0.0273867827, -0.0891771689, 0.1161620989, -0.0890038759, -0.0672557503, -0.1479198337, 0.0376859978, 0.0950340778, 0.0826070830, -0.1262379289, 0.1678617001, 0.0472547486, 0.2373240888, -0.0364359654, 0.0495493673, 0.0042235344, -0.0559336878, -0.2045924217, 0.0364924483, -0.1040902212, 0.0267412383, -0.2343989015, 0.2130541354, -0.0276055187, 0.1653123796, -0.1956569850, -0.1728817374, -0.0921513513, -0.1802521646, 0.0845305622, -0.0046371766, -0.0943168923, 0.1249209121, -0.0064293542, -0.0862395838, -0.0666837841, 0.2520964742, -0.0287551209, 0.1078379378, 0.0321414061, 0.0129888244, -0.1866129786, 0.1501398087, -0.0118176928, 0.0991428867, -0.0988238975, 0.2111917883, -0.2459612191, -0.1581460088, -0.1285882592, -0.0622333437, 0.1238279417, -0.0834877267, -0.1063886434, -0.1206645668, -0.2437964082, -0.0614564493, -0.0150356628, -0.2239283323, 0.0039849170, 0.0429165922, -0.2345268577, -0.0969530120, -0.1289267689, -0.1045746580, -0.0520143993, 0.0299838092, -0.0680783242, 0.1720375717, 0.0775961876, 0.0762557089, -0.0008600641, 0.0322704017, -0.1585870534, -0.1881097555, -0.1029553637, 0.1525438428, -0.1304056197, -0.0042014890, 0.0615782961, 0.1613182724, -0.2092098445, 0.0164847542, -0.1130858064, 0.0525011420, 0.1047545522, -0.0873701796, 0.0385241546, 0.0843055919, -0.0635988787, -0.0400518700, 0.0486097895, 0.0889323130, 0.0671318546, 0.1524869800, 0.0088366149, -0.0580392852, 0.1863113046, 0.2758145928, -0.0015693896, 0.1937167495, -0.1675710231, 0.0830751210, -0.0858518556, 0.1933587641, 0.0052784877, -0.0409638397, 0.1024202034, -0.0702475011, 0.0782010481, 0.1756737679, -0.0498022698, -0.2651903331, 0.0726313591, 0.2479749322, -0.1897134930, 0.0393010043, -0.2349842936, -0.0995393693, 0.0373462513, -0.0316114277, 0.2040601671, -0.2095177472, 0.1963158697, -0.0801372305, -0.1903522462, -0.0155720022, -0.0726126358, -0.1871091872, 0.0452399440, 0.0038854198, -0.0835599452, 0.0833292976, 0.2170109153, -0.0579632185, -0.0033774504, 0.0901166797, -0.0240831170, 0.0494056158, -0.0657270700, 0.2224531621, 0.1684695482, 0.2705130875, -0.1862344295, -0.1889559180, -0.0074219829, -0.0099402545, 0.1344562918, 0.1310479343, 0.2599044442, 0.1093386561, -0.1491786391, -0.0090524182, 0.0097179580, -0.1542045176, -0.0338145681, -0.0747374967, 0.1791142523, -0.0539583080, 0.1080257371, -0.1563514322, 0.1364363581, 0.2305293232, -0.0082052695, -0.2135047168, -0.1691568941, -0.0166447442, -0.2816615701, 0.0756322220, 0.0596881285, -0.0910182819, 0.1762536168, -0.1072217673, -0.0733252466, -0.1459440440, -0.0718915462, 0.0000408290, -0.1418961883, -0.1719247252, -0.0696101338, -0.1399468631, -0.2162237018, 0.0514012128, 0.0947517678, 0.1487056166, 0.0900746956, -0.0787912160, -0.1522042304, 0.0045644799, -0.2132441998, -0.0763545930, -0.0316805877, 0.0957228318, 0.0177411158, 0.1201730892, -0.1021027267, -0.1013594866, -0.1732409149, 0.0368944295, -0.2816428840, 0.0281696767, 0.1954781115, 0.1530602276, -0.0790972337, -0.0078361211, -0.0009210085, -0.0904115736, 0.0552819632, -0.0926990807, 0.0643149316, -0.0391569398, 0.1019815803, -0.1089340597, 0.2269125432, -0.1118295789, -0.0096462369, 0.0402917750, -0.0383211561, 0.0625592768, 0.0645596683, 0.0524892621, -0.1249849796, 0.0141085666, 0.0031850473, 0.2144878507, 0.0072682747, 0.0709017888, 0.1871486157, -0.0879120082, 0.1343986541, 0.0940923840, 0.1972475946, -0.0197448283, -0.0424377359, -0.0261533633, 0.1196140274, 0.1625009328, 0.0267555863, 0.0254618209, 0.1796694845, -0.1957480311, -0.1928298622, -0.1475333869, -0.1401527673, -0.0631779060, 0.1237756759, -0.2541959882, 0.2574493885, 0.1644300818, -0.0859597027, 0.0151631832, 0.0493605174, 0.0701524913, -0.1049936712, 0.1151727363, -0.0340963230, -0.0814967230, 0.0899446979, -0.1298390031, 0.1079288274, 0.0709064901, 0.0534876995, -0.2141861469, 0.0263867881, -0.0110146804, 0.0840269104, 0.0246402360, 0.2682512403, 0.1002800018, 0.0477071814, 0.0009296159, -0.0360635966, 0.0593128838, -0.0927473381, 0.0370321758, 0.1083909199, 0.0551505834, -0.1542358696, -0.0598899983, -0.0891299024, -0.1476381719, -0.1191270426, -0.0034946292, -0.0932907164, -0.0515569001, -0.2382150143, -0.1467083097, 0.1472041011, 0.1504068226, -0.0089800656, 0.0939841941, 0.0843703821, -0.2224198431, 0.0396419391, 0.0455339924, 0.2051917166, -0.1392123848, -0.0463909842, 0.0796268880, -0.0054157749, -0.0045677517, -0.1923157126, 0.1618440300, -0.0772751197, -0.1125508696, 0.0783972517, -0.1705345511, -0.1615653783, 0.0772816539, -0.1961691529, -0.0368880555, 0.1669249982, -0.0985293016, -0.1732733101, 0.0307905152, -0.1122791618, -0.0475347601, -0.1569383442, 0.0145795876, 0.0826022178, -0.2583470047, -0.0512378402, 0.0553030446, 0.0083301831, 0.1288109869, -0.0299522653, -0.0690199733, 0.0001918695, -0.2511235476, 0.1237777844, -0.1121265516, -0.0074045565, 0.0033106580, 0.1866763830, 0.0073506664, -0.1473859400, -0.2065972686, 0.0832325295, -0.0686375201, -0.1520964801, -0.0433345959, -0.2511548102, -0.1223559678, -0.0199540183, 0.1905030608, 0.1892883331, 0.2025483251, 0.1595124006, 0.0467756391, 0.1306673437, 0.0145248156, 0.1390857548, 0.1674891561, -0.1005254239, 0.1712253690, -0.0204687677, 0.1574025601, 0.1195547804, -0.0962136835, 0.1031707302, -0.1019187495, 0.0539321266, 0.0544432029, -0.2083560973, 0.0332944691, -0.1605806202, 0.0190770254, -0.1210325360, 0.0031278662, 0.1303225607, -0.1464248002, -0.2483156770, -0.0296526011, 0.2041638792, 0.2190661132, -0.2494018674, -0.0362281837, 0.1001101434, -0.0655560717, -0.1052952781, -0.0894818529, 0.0121481195, -0.0168125331, -0.0017083829, -0.0666221827, 0.0898579061, 0.0000374184, 0.0843711644, -0.0018804343, 0.2348312587, 0.0719515905, 0.0893816426, -0.2083046883, -0.1082281992, 0.0999229327, -0.1769523919, -0.1857973039, 0.0374584757, -0.1143180132, 0.0201515574, 0.0931170508, -0.0193170924, -0.0145807965, -0.0798463523, -0.0124545135, 0.0377480686, 0.0794598982, -0.0540183857, 0.0167725328, -0.1261310130, -0.0441247001, 0.0171613228, 0.0019308241, 0.0723176748, -0.1681978852, 0.0932887122, -0.1278165132, -0.1077357307, 0.1499337852, -0.2410558909, -0.1680045575, -0.1262865514, -0.1860620081, 0.1407365650, -0.0180256311, -0.0947201848, -0.0175544042, 0.1864455789, 0.0383082218, 0.0254502892, -0.1662698239, 0.1070036963, 0.1759064198, -0.0154426275, 0.1643094122, 0.0469992533, 0.0843511894, -0.1196473017, 0.2333923578, 0.1496134549, -0.0002031687, -0.0188607797, -0.2149261683, 0.0012075921, 0.1411983669, 0.0479158238, -0.0347025841, -0.0180021673, -0.2106822133, 0.2701101899, 0.0556947999, 0.1628333330, -0.0937241390, 0.0625380427, -0.0699000657, -0.0126528088, 0.0458235964, 0.2308533043, 0.1259881854, -0.1061843038, 0.0348778963, 0.0643765554, -0.2362815738, 0.1307111979, -0.2397098392, -0.1304308176, 0.0628464520, 0.1292934120, 0.0382421128, 0.2811707556, 0.0278115626, 0.2483458221, -0.0330200233, 0.0593313351, -0.2679778636, -0.0453105159, 0.0418882407, 0.1979364008, 0.0434304215, 0.0514211021, -0.0236380212, -0.0972545221, -0.0681995749, 0.2080729753, 0.0279683284, 0.1447287351, -0.2134132832, -0.1931704283, 0.1865857691, -0.0198982228, 0.1166699231, -0.1712679416, 0.2488541454, 0.0427250005, -0.1103130206, -0.0607116781, -0.1997399181, -0.2481102198, 0.0251757279, 0.0474219620, -0.0720522106, -0.1763002574, -0.2079302967, 0.0759110302, -0.0754221380, -0.2797124088, -0.0152149629, 0.0619068593, 0.0329090059, 0.0401661023, 0.0257268958, 0.0353451967, -0.1862950027, 0.1446551532, 0.2252011895, -0.0110617178, 0.2365946770, -0.2395425886, 0.0244887155, 0.0177872870, 0.1517684460, 0.0990865231, -0.0981163681, -0.0256238505, -0.1435731202, 0.1529846638, -0.0969042331, 0.1629371941, -0.2286015153, -0.0302361716, -0.0586981773, 0.0076970956, 0.0138512366, -0.0244302582, 0.1179642156, -0.0914631039, -0.1062861606, -0.0692433044, 0.1507259160, -0.0407415591, 0.1480798870, 0.1370273232, 0.0593432635, -0.0067370888, -0.0395647958, 0.1425463110, -0.1754725128, 0.0570556894, -0.0654403120, -0.0493552312, 0.0436340459, 0.1304152161, -0.1146042645, 0.1906745732, -0.1210196391, 0.0545657873, 0.0588117056, 0.0897734463, 0.0257237181, 0.0124500403, 0.0762817487, 0.1382339448, -0.1130978465, 0.0093384674, -0.0058297496, -0.1958864927, -0.1060591489, -0.0385564677, 0.1884025186, 0.1296359152, 0.1260569841, -0.0596908666, 0.2450260818, -0.0762029216, -0.0621289238, -0.0052956431, -0.0943006948, -0.2600602210, -0.0637161955, -0.0042011091, 0.0080993706, 0.0473525822, -0.0384396017, -0.0297458917, -0.1518628448, -0.2090997845, 0.0372573212, 0.1023767740, -0.2166296393, -0.0478294492, -0.2400881648, 0.0279766023, -0.0507164150, 0.1056555435, 0.2083750367, -0.1547072530, -0.1027224883, -0.0447189137, 0.1727885008, 0.2195944786, -0.0785255730, 0.1085400358, 0.0808711350, 0.0509655029, -0.0243137907, 0.1334828287, -0.0428842045, -0.1314295679, -0.0436239578, -0.0403592773, 0.0905692950, -0.0581609458, -0.0803779513, 0.2094042003, -0.0899522454, -0.2140363157, -0.0921542272, 0.1175984368, 0.0150016490, -0.0875266641, 0.0101176845, -0.1617236286, 0.1704449654, -0.0259105507, -0.0101170354, 0.2121217251, 0.0430255570, 0.2345847934, -0.0903898403, -0.0676765293, -0.0957481116, 0.0846817568, 0.0689771175, 0.0025590945, -0.0681900308, 0.2298664749, -0.1484845430, 0.0525702089, -0.1154834479, 0.0131537504, -0.1776050478, 0.0055376901, -0.0749937892, -0.0261720512, 0.1108711138, -0.0833230987, 0.0034077270, 0.2580206394, -0.1368797719, -0.0312771685, -0.1130461618, 0.1351950020, 0.0492019393, -0.0858186260, -0.0585959740, 0.2375428081, -0.0873401314, 0.0997336283, 0.0703078732, -0.0147632146, 0.0316772386, 0.1731797904, -0.1260722131, 0.1882472485, 0.1618581414, -0.0821837410, -0.0643817037, -0.2461380661, 0.1066247746, 0.1728438884, -0.0227646586, 0.0275025088, 0.0756056532, 0.2113786787, -0.0519875251, -0.0808252469, 0.2553227246, -0.1340527833, -0.0759764463, 0.2225889564, 0.0788379163, -0.1935292035, -0.0178875718, 0.0050208797, -0.0857319310, -0.1789059192, 0.2229201943, -0.0860766992, -0.1191863045, -0.0980560556, -0.0157349966, 0.0494664647, -0.1438020617, 0.0998900384, -0.1675459743, -0.1362938434, 0.0909172371, 0.0696038306, -0.2131909132, -0.1688031107, 0.1017808393, -0.1371891946, 0.2165320963, 0.0394631997, -0.0111108348, 0.0935121477, 0.1821001768, 0.1568687260, -0.1947716027, 0.0197107829, 0.1065100282, 0.1197171435, -0.0645131320, -0.0340548456, -0.1697213054, -0.1351573765, -0.0937792659, -0.1982877105, -0.0951292366, 0.1433355212, 0.2134425640, 0.0382844843, -0.0918645784, -0.0656233430, 0.1760075539, -0.0698964372, 0.0276233237, -0.0668013319, -0.0150042642, 0.2036476135, -0.1143357456, 0.2058925480, -0.0190615207, 0.0909431353, 0.0993721262, 0.1149842143, -0.0392308347, 0.0616015457, -0.1531293988, 0.1509709805, 0.1150342524, 0.1607301533, 0.0599657819, 0.0576102473, -0.0682350919, -0.0959382802, 0.2316651642, 0.1329650134, 0.1709024608, -0.0994127020, 0.2164011747, -0.0915239230, 0.0446341000, 0.2253663987, -0.0808345377, 0.1147987172, 0.0946475416, 0.2180586755, -0.1791294813, 0.1147561818, 0.0516084172, -0.0551863313, 0.0464412831, 0.2176714242, 0.0642898455, -0.0713525489, 0.0612270683, -0.0729108676, -0.0498656854, -0.0836317316, 0.1436390430, -0.2081149518, -0.1303266436, 0.2203459889, -0.0826874450, 0.1371097118, -0.1219286621, -0.0497336909, 0.1339394748, -0.2239547521, 0.1607433110, 0.0073340596, -0.1606917083, -0.2584808469, 0.0560301878, -0.1790044159, -0.0841503590, -0.1495680660, -0.1463066339, 0.0935834572, 0.1659500897, -0.1081209928, -0.0741081014, 0.0436188281, 0.0303800497, -0.0296062753, -0.0751731843, 0.0201500468, 0.0015831914, 0.0129027721, -0.2316435874, 0.0160658062, 0.1134609133, -0.1005908772, -0.0423206128, -0.0180595163, 0.1201839522, 0.1687411815, 0.0272048879, 0.0813223422, -0.1050825566, -0.1508331597, 0.1120814234, -0.1392328888, -0.0213566814, -0.1151557788, -0.1980641782, 0.1326335073, -0.0108842570, 0.1946145892, -0.1851360202, 0.2027713805, -0.1234074458, -0.0751417503, -0.0399562046, -0.2675116956, -0.0632693619, -0.1683237106, -0.0379717611, 0.2730090022, 0.1862910688, 0.1060784161, -0.0695490688, 0.1433497071, 0.0756744519, 0.1012930572, 0.1115882173, 0.0001268031, 0.0820616335, 0.1615246385, -0.1276625991, -0.1913270801, -0.0960592031, -0.2047894299, 0.0808474943, 0.2033464313, -0.0192566179, 0.2033871412, -0.1460135430, 0.1651956439, -0.0295316558, 0.1103662923, 0.0316155367, -0.0194026958, -0.2246817648, -0.0178920273, -0.0584821738, 0.0101023037, 0.1077577099, 0.1264000833, 0.1058134660, 0.0991267785, 0.0997703522, -0.1060068980, 0.1606535316, -0.0645760745, 0.0571216270, 0.0385593846, -0.1915681064, -0.0038755117, 0.2751032412, -0.0624445975, -0.0096356021, -0.0723456293, 0.0445585400, -0.0398830548, -0.0719054788, -0.0212149862, -0.0131859109, -0.0306725074, -0.2208350152, 0.2776061296, 0.0172815695, 0.0232227035, -0.1730508804, 0.0155273722, 0.1153751314, 0.2223755717, 0.0403896980, 0.0868388191, 0.0941949189, 0.0653034821, 0.2151032686, -0.2123622298, -0.1160589755, 0.1710166931, 0.0594947971, 0.1018518955, 0.0831147358, -0.2771910131, -0.1270716488, -0.1517182440, 0.1485220492, 0.0042435653, 0.1855160296, -0.1541833431, -0.0521187633, 0.0521874055, 0.1389263272, -0.0445340052, 0.1604758501, 0.1183881387, 0.0277944151, 0.0304915700, 0.1145757586, -0.1844790578, -0.0381359085, -0.0256305821, 0.0232411455, -0.0998737589, 0.0096772602, 0.0870242417, 0.0200173426, 0.0538784899, 0.0480650142, 0.2662140131, -0.0262182914, -0.0051214616, -0.0520678498, -0.0733407587, -0.0275739394, 0.2325959504, 0.0250691138, 0.0248334389, -0.0254541319, 0.2215467095, -0.0593815185, 0.1109390855, 0.0298660602, -0.0242534298, 0.0678436905, 0.0795993060, -0.1801252961, -0.1369317770, 0.1479724497, 0.1462741345, -0.0624670908, 0.1033317894, -0.0431933179, -0.1391227245, -0.2824571133, -0.1392448843, -0.0533366688, 0.0628453046, 0.1113741100, 0.0224877484, -0.0500904620, 0.0224592835, 0.2201444209, -0.0159702692, 0.0053472207, 0.0301653370, -0.0128440447, -0.0737047940, -0.0517914332, -0.1128987297, -0.0843228251, -0.1771511883, 0.0055520697, -0.2236928195, 0.0327710398, -0.0028140536, 0.0106724817, 0.2327047586, -0.1521816552, -0.0556973405, 0.0075509688, -0.0555963330, -0.0518459417, 0.2300559282, -0.0645167977, -0.1928671300, -0.1247400716, -0.0554198213, -0.0463439077, -0.1791280657, -0.0044471845, 0.1268953234, 0.0605580434, -0.2171561271, -0.0203188974, -0.2055329233, -0.2357380688, 0.1522132754, 0.1298974901, -0.2089951038, 0.2763318121, -0.1319404691, -0.2127945572, -0.0495671555, 0.0319342762, 0.0492745005, 0.1064470634, 0.2494858801, -0.0394025892, 0.1494312882, 0.0280284602, -0.0280497316, -0.0507008620, 0.0542711131, 0.1560846418, -0.1042927727, -0.1423127800, 0.0863619447, -0.0449640490, -0.1129888445, 0.0378143303, -0.2709840834, -0.2284188718, -0.0461392961, 0.0035370644, 0.1443960220, 0.1598958075, 0.0227890387, -0.0697158501, -0.0385081396, -0.2349285185, 0.1547988355, -0.0676470920, 0.0537448898, -0.0965714380, 0.0286932122, -0.1083913669, 0.0103157656, 0.2225482911, -0.2003029138, 0.2149007171, 0.1491640359, -0.0422740430, 0.1108096465, 0.2520107925, 0.0289400313, -0.0930048227, 0.0241929609, 0.2760277987, 0.0518733822, -0.2527742684, 0.1333468705, 0.1439421177, -0.0619410016, 0.0445826501, -0.1090873405, -0.1299889386, -0.0542750917, -0.1217385754, -0.0799520388, 0.1670278609, 0.0571463667, -0.0748480484, 0.2481038272, -0.0214262810, 0.1269729286, -0.0221070461, 0.0259298310, -0.0246718135, -0.0100830151, -0.0184456445, 0.1872538775, 0.1543576568, 0.0477260575, -0.0871069729, 0.0451664515, 0.1937402785, -0.2195024639, 0.2013597041, 0.0770344362, 0.0052677086, -0.0089636063, 0.2074221373, 0.0702879056, 0.1969012618, -0.0851039439, 0.1234241724, -0.0884547755, -0.0339213461, -0.1779848933, 0.0440733209, 0.2064485401, 0.0030534519, -0.2439887226, -0.0466173962, 0.1619210988, -0.2334742248, 0.1194950044, 0.0607502349, -0.0487121344, -0.1600930989, 0.0910727680, 0.0535871163, -0.0654980987, -0.1053254902, -0.1545213610, -0.0409194380, -0.1271947175, -0.0888111740, 0.1307711452, -0.0045477692, 0.2078770697, 0.0159804802, 0.0935793594, 0.0974628851, -0.0066778716, -0.1584526300, -0.1276031584, 0.1667025089, 0.0529384241, 0.0168650597, -0.1048716754, 0.1730501354, -0.1572958678, 0.0719016418, 0.0418489240, 0.0278832354, -0.2226821929, -0.0067010075, -0.0791922212, -0.0573526025, -0.1480294019, -0.2374154180, -0.1981017888, 0.0609606840, 0.0811975226, -0.0166684985, 0.1528147757, -0.1520867348, 0.1157942414, -0.1704546064, 0.2082011551, 0.1289555728, -0.2698606253, 0.0729759037, 0.0418821983, -0.1349302828, 0.0769461244, -0.0173879601, 0.0730763748, 0.0773030445, 0.1681679040, 0.0217728745, 0.0884137824, 0.2628154755, -0.0565287657, -0.1879899353, 0.0185917299, 0.0259306412, 0.1099936813, -0.0208406057, -0.0574570112, 0.0914120153, -0.0051235883, -0.1071695909, 0.0789146051, -0.1585937589, 0.1018602774, -0.1311412901, 0.0891427770, 0.2324957252, -0.0280623008, 0.2061923593, -0.1590138227, 0.0594022609, 0.0403515287, -0.1730820239, 0.1133812591, -0.0483036935, 0.2142703235, -0.0528575219, -0.1495152116, 0.0475251749, -0.0058718319, 0.0088434471, 0.0861663222, 0.0894933715, -0.0806445628, -0.0185893960, 0.0636956319, 0.1854775697, 0.0781545639, 0.1165894121, -0.1162919402, 0.1421448737, -0.0162204932, -0.1292824000, 0.1203000695, -0.1757415682, -0.1613688022, 0.1822495610, 0.1078106239, -0.0282266513, 0.0765777975, 0.1139849201, -0.0110044656, 0.0062180348, 0.1929255873, 0.0888174996, -0.0669705272, -0.2199428976, -0.1142120957, -0.0303180087, -0.1177003905, 0.1079278588, 0.1691421717, -0.1595271379, 0.1658072174, 0.0155032417, -0.0897030905, -0.1878364831, -0.1859248877, 0.0269107409, 0.1876477897, 0.0226574391, -0.0380414724, 0.2091218680, 0.1744579524, -0.2403450906, 0.1501921117, -0.1848704964, 0.2830139995, -0.0415479727, 0.0429869965, -0.1259396523, 0.1046183556, -0.0803269967, -0.0546830073, 0.0524713770, 0.2673434913, -0.0069604567, -0.0670410916, -0.0388181917, -0.1194746867, 0.0910142139, 0.0632111132, 0.0330370069, -0.0226596557, -0.1238774955, 0.0636790320, 0.2058256119, 0.2627879679, 0.1208977252, -0.2533648908, -0.0365659408, 0.2459101528, 0.0744598880, -0.1347435266, 0.1456540078, -0.0079439385, -0.0343204029, 0.1745806485, -0.1594711840, 0.0575209595, 0.1348526478, -0.1423837841, -0.0347691849, -0.1353081912, -0.0332782902, 0.0062477514, 0.0863129124, -0.0095283845, 0.2462256849, 0.0860534683, 0.1676760167, -0.0523900017, 0.2501429617, 0.1317242682, 0.2093492597, -0.2100311965, -0.2156388611, -0.2008348405, 0.0294240024, -0.0612498373, 0.0786669701, 0.0791048780, 0.0823244825, -0.1436330974, 0.1702650338, 0.1124683395, -0.1992600262, -0.0112639088, -0.0905066580, 0.0562787503, -0.1858009398, 0.1469971389, 0.1229160950, 0.0786999092, 0.1096096858, -0.0960104913, -0.0613079779, 0.0172368176, -0.0791020915, -0.1503921449, -0.1347290874, 0.2362383157, -0.0888660699, -0.1384069473, -0.1268039793, 0.2639161944, -0.0820439160, 0.2240302265, 0.1718640924, -0.0502613150, -0.0607760698, 0.1556876600, 0.1922193617, -0.0007999631, -0.1309652478, -0.0626851097, -0.1062513143, 0.1514586508, 0.1983896941, -0.1249431223, 0.1036238819, -0.1300533563, 0.0340389051, -0.1337329745, -0.1232848912, 0.1699491739, 0.2104301900, -0.0404255614, 0.0989365876, 0.1756788641, 0.0393398516, 0.0677057877, 0.0592631064, -0.2188349962, -0.1161749512, 0.2007325739, 0.0572927147, -0.0991165116, -0.0376108736, 0.2709801793, 0.0233681463, 0.2697438002, 0.0799101517, 0.0294558406, 0.0148673579, 0.0005819113, -0.0207696594, -0.0882147774, -0.2618441582, -0.1329069287, -0.0461054072, 0.0523360297, 0.0755417868, -0.0345216468, -0.1971405447, -0.1398384720, -0.1403787136, 0.1155704930, 0.0318429992, -0.0250423681, -0.2535779476, 0.0375966579, 0.0725091472, -0.1857960224, -0.0066761575, 0.0526979975, 0.0080693131, -0.0961498991, -0.1010674164, 0.0998061970, -0.1072384641, 0.0442444533, -0.1206691563, -0.1864745021, -0.0388780423, -0.0894660056, 0.0335769281, -0.0455755778, 0.0965531468, 0.1969940662, 0.0151114911, 0.1260690987, -0.0382554345, 0.1257416010, -0.0280680861, 0.0378330275, 0.2084731758, 0.0192625131, -0.0974993184, 0.1612475365, -0.1228338033, 0.0190431066, 0.1221778691, 0.1592672169, -0.1439011842, -0.0277146790, 0.1945514232, 0.1361504048, 0.0993199870, -0.1562262774, 0.2613207698, 0.0674142763, 0.1603730768, -0.0644040778, 0.0804983079, 0.0904119611, -0.1083022133, 0.1001586840, -0.1467348188, 0.0594928488, -0.0188440140, 0.0842239708, -0.1410681009, 0.0729663670, -0.0838472173, 0.0980368108, 0.0652593374, -0.1439579129, 0.0535240285, -0.2668865919, -0.0668395013, 0.0210328009, -0.0401587896, -0.2319049835, -0.0248948392, 0.0398350470, -0.1635169834, -0.0162421037, 0.1991211325, 0.0259326883, 0.1773445606, -0.0720604584, -0.2816467285, 0.2584682703, 0.2517306209, 0.0112885376, -0.1166638061, 0.0527895205, 0.1180830896, 0.1944346130, -0.0067713731, 0.0335592106, -0.0046587135, 0.1986660808, -0.1574363410, 0.2387472987, -0.1641256511, -0.0144538796, 0.1731314808, -0.0876972452, 0.2592799067, 0.0261086915, 0.1225335151, -0.0347667374, -0.0269907545, 0.1964703351, 0.2613053620, -0.0803586766, -0.0119429100, 0.0975503698, 0.2493023276, -0.0061344085, 0.0642022416, 0.2728096545, 0.1973172873, -0.0290927961, 0.0586930886, 0.0456221178, -0.1329934895, -0.1309077740, -0.0462192297, 0.0146067888, 0.0689420030, 0.0101848636, 0.0896732360, -0.0998002216, 0.0856939852, 0.0979945734, 0.0240147356, -0.1384728402, -0.1381106973, -0.1674333960, 0.1283695400, 0.1523616314, -0.0780258849, -0.0683029369, -0.0251822341, 0.0293281134, -0.0773883387, -0.0556261688, -0.0150746424, 0.2362340987, 0.1193694547, 0.0371749289, 0.0092075914, -0.0003103905, -0.0179119781, -0.1970404983, 0.0261453055, -0.0956677422, -0.1314666569, -0.0092106145, 0.1594139487, 0.0638195649, -0.0137131121, -0.1840829104, -0.0583782084, 0.2031840980, -0.1495690942, 0.1279545724, 0.1081111282, -0.0806454122, -0.0481595695, 0.0830518156, 0.0041327626, 0.0230959188, -0.0879078284, 0.1119995564, -0.1203094497, 0.1066011116, 0.0658772811, 0.0552812591, -0.0040429081, 0.1955161244, 0.0337579884, -0.2064140737, 0.1945871711, -0.1135456488, -0.1943084300, 0.1654167324, -0.0266662799, 0.0961440355, 0.0690646321, 0.2515003681, 0.1760693043, -0.2372204363, 0.0539057218, 0.1254444122, 0.1192318350, 0.0157169774, -0.1025227010, -0.1009571403, 0.0756328404, -0.0889233723, -0.2235339135, 0.0393468067, -0.1047495082, 0.0399751514, 0.1442830265, -0.1921214461, -0.1274534464, 0.0021771174, 0.0197247751, 0.1365872473, -0.0225880574, 0.2083335668, 0.0606130809, 0.0974790379, 0.1358157992, -0.0696709752, -0.1616216898, -0.0706051216, -0.1179667562, 0.0343935005, -0.0290774014, -0.1194980741, -0.0550574102, -0.2272149920, 0.1850463450, -0.0460151024, -0.2421748638, 0.2190021425, -0.1632366329, -0.1435842365, 0.0421927013, -0.1298851967, 0.2070919424, 0.1289636046, 0.0870678201, -0.1387318075, 0.1302708685, -0.0629961565, -0.0044650361, -0.2468024343, -0.1564677209, 0.2224541903, -0.0496272705, 0.0119155198, -0.1874845177, 0.0219783802, 0.0641205385, -0.0346643887, 0.1746291667, -0.0292027481, -0.1958560050, 0.1764251292, 0.1583101451, -0.1203966513, 0.0136747044, -0.1079405099, 0.1911199242, -0.1265224665, 0.0783174708, 0.0241354574, -0.0423039645, -0.0386334322, -0.2533609569, -0.0542541333, 0.0290715881, 0.0116497697, 0.1889574230, -0.1936190873, 0.0018427683, -0.1702365726, -0.2131508440, 0.0570903122, 0.0378603972, -0.0691372752, -0.0342074819, 0.0506036542, 0.1759783477, -0.1550318152, -0.1460961103, -0.0039233011, -0.1175122559, 0.0730502382, 0.0554130673, 0.0798735470, -0.1426097602, -0.0515613630, 0.0841418356, -0.0807538703, -0.0099620214, 0.1533491462, 0.1223692298, 0.0745977089, -0.0965205282, 0.2559489608, 0.0843149498, -0.0512573607, -0.0359152332, 0.2651342452, -0.1549503952, -0.0637775213, 0.2027557343, 0.0264153983, -0.0852627084, -0.1438582987, 0.0546211414, 0.1738013774, 0.0230175909, -0.0836596042, -0.1059925556, -0.0393393971, 0.2063361704, 0.0373790972, -0.0722250640, -0.0297738332, -0.0352176353, 0.2360452563, -0.1119599640, -0.2063086927, 0.1011119708, -0.1106140688, -0.2081308365, 0.1805230975, 0.0581407398, 0.0570602380, 0.0839754790, 0.0396263152, -0.1111603081, -0.1187900752, -0.0544125624, -0.2232885361, -0.0235956833, -0.0308841914, 0.1771840006, 0.1234375909, 0.1375087351, 0.2055777311, -0.1948255599, -0.1169984639, -0.1257497072, 0.0905760378, 0.0195366833, -0.1177372560, -0.0659706518, 0.1436805129, 0.0023746970, -0.0257793926, -0.1142790392, -0.1375250667, -0.0112379985, 0.0502582900, 0.0722339898, 0.0464119054, 0.0025577135, 0.0736797601, 0.2033775002, -0.1480042487, 0.0907865092, -0.0310737658, -0.0396306030, 0.1142318100, 0.2657507062, 0.1849470586, 0.0144825317, -0.0374981165, -0.0566252396, -0.0966604203, -0.0321315750, 0.0574837886, -0.0621211939, -0.0012008247, 0.1078524888, 0.0929957628, 0.2711251974, -0.1998376697, 0.0613182560, 0.1146663055, -0.1027148962, 0.0009745294, -0.1863716841, -0.1627182513, -0.1113537699, -0.1193466559, -0.0159386210, 0.1475857198, 0.0799326599, -0.0472146533, -0.0150740445, -0.0649380386, 0.0437693261, -0.1318305880, -0.1812721044, 0.2040842026, 0.0640252084, -0.0123452516, -0.1953048557, -0.0740640461, -0.1574417502, -0.2066760063, -0.1688929796, -0.1966071725, -0.0175801497, 0.0835309848, -0.0173441321, 0.1242960542, 0.2642574310, -0.1977994293, -0.1325973719, 0.1598769277, 0.0689058006, -0.2173934579, -0.0563388951, 0.0431986116, -0.1947163045, -0.0467467830, -0.1050783545, -0.0701978952, -0.0222010948, 0.2644540668, -0.1697968096, -0.1199644879, 0.0138359889, 0.0064365319, -0.0566428006, 0.0259847734, -0.0265358072, 0.2375263274, -0.1093307883, -0.0240191426, 0.1185763180, 0.0163892228, 0.0915004015, 0.0375839211, -0.0896078125, 0.1199762747, -0.1669908613, 0.2279488444, 0.2040060163, 0.1240477487, 0.0050692963, -0.0586109534, -0.1720937043, 0.0048640780, 0.0917380601, -0.0833381340, 0.0985465273, 0.1768029630, -0.0120180240, -0.1896964610, 0.1318804771, 0.0127254492, 0.0262456778, 0.1155236885, -0.1981122494, -0.2402288020, -0.0306865666, -0.2087306529, 0.0906564519, 0.1773627847, -0.0160771422, -0.0874690861, -0.0622380935, -0.1067726910, 0.1408613920, -0.0759533569, 0.0887691677, -0.0045233490, 0.0637387037, -0.0578374118, 0.1425520182, 0.1753746271, -0.0469014868, 0.0511393696, 0.0729993433, 0.0781303570, 0.2109866142, -0.2374736071, 0.0935619920, 0.1917996556, -0.0116557060, -0.0485829636, -0.2301019430, -0.1581694484, 0.0491516218, -0.0972069055, -0.0225465503, 0.2594366670, -0.1196293384, -0.2230132967, 0.1246825159, -0.1151356399, -0.0069159912, 0.0356736854, -0.0050431346, -0.0130579565, 0.0530490912, 0.1549363583, 0.1539233178, -0.0640759692, 0.0970398337, 0.0997211710, 0.0577616543, -0.0734060332, 0.0145722311, -0.2143783420, 0.0434474461, 0.1832738817, 0.0986541808, -0.2535430789, 0.0388903208, -0.0006498065, 0.0198798291, -0.2702815235, -0.0150909042, -0.1057655737, -0.0643070191, -0.0362337530, -0.1736769378, 0.1574777961, 0.0177913215, -0.1315912604, -0.1727996916, 0.0020189309, 0.0227681678, 0.2516116202, 0.0573884286, 0.0730402842, 0.0931062400, 0.0590069070, -0.0872320086, -0.1218678877, -0.1375438571, 0.0136974948, 0.0397778712, -0.1494819224, 0.1485217065, -0.0072714780, -0.1292305440, -0.0160865206, -0.0876332074, -0.0152530205, -0.0610513985, -0.0092075579, 0.0897848234, 0.0086375130, -0.0405468978, 0.1053541005, 0.0214406569, -0.1364848912, 0.1128074005, -0.0863351449, -0.1492714584, -0.0157856103, 0.2257373184, 0.0210130829, -0.0694196522, 0.1621429324, 0.1202528402, 0.1813867390, 0.1166199446, -0.0169204865, -0.0564310476, -0.0462593548, 0.1534940749, 0.0604204349, -0.1214505360, 0.1662904024, 0.0667901561, 0.1339718848, -0.0637694299, 0.0153873647, 0.2647315860, 0.1605280936, -0.1809906214, -0.1310936362, -0.2710473835, -0.0691720247, -0.1064050347, -0.0428340062, -0.0550934263, 0.1507583112, -0.1515678316, -0.1112896279, 0.1288879514, -0.0463220365, -0.0725901350, -0.1920600832, 0.0750617832, -0.1096974090, 0.0646169707, -0.0380772054, 0.0336941294, 0.1542188078, 0.1815796196, -0.0021149747, 0.0544065312, 0.1073109955, -0.1316288412, 0.1549780220, 0.1057261601, -0.0953804627, 0.0458664559, -0.0793704838, -0.1898984015, -0.0852371454, -0.0877354816, -0.1401542872, 0.1913011074, 0.0011754595, -0.0677305013, -0.0533631518, -0.0662748367, 0.1639448404, 0.0976810977, -0.0347339548, 0.1195837110, 0.0962560028, 0.0347662084, 0.0174102634, 0.0651067346, -0.0535336360, 0.0294784326, 0.1195216179, -0.0821998790, 0.1562749743, 0.0232119560, 0.1200830117, -0.0306002423, 0.0238228235, 0.0158242788, 0.0812393427, -0.1266699284, -0.1925955713, 0.0958150476, 0.1528258920, -0.0434483662, 0.1167890429, -0.0270299688, 0.1277510673, 0.0893179849, -0.0983888432, 0.1818838567, -0.0747371092, -0.0853974074, -0.1348421574, -0.1975613236, 0.1924124658, 0.0114812925, -0.1492069811, -0.0371609032, 0.0621944964, 0.2367973030, 0.0337249152, 0.0122971339, 0.2615285814, -0.0789359137, 0.1494480669, -0.0626435876, -0.0375981964, 0.2572433650, -0.0728612989, -0.0099934191, -0.2267544717, -0.1243620291, -0.0903335735, -0.0668172911, 0.1677374244, 0.0228745006, -0.0314633511, 0.0248879772, 0.0436026193, -0.1314311475, -0.0193282124, -0.0229226761, -0.0695623457, 0.1948742121, -0.1411037296, 0.0861940756, -0.1702455133, -0.0518123992, -0.1199277341, 0.0868567452, -0.2050955594, -0.0474194810, -0.0079761548, -0.1152059287, -0.0678254291, -0.0094630662, 0.0902030990, -0.2674691677, 0.1452426612, 0.0892614946, -0.1803009361, -0.0908753648, -0.1513813287, -0.0426585041, 0.1360065639, 0.0222226959, 0.0500298291, -0.0926685333, 0.1422593147, 0.2359104902, -0.2133562565, -0.0428695120, -0.2060659826, 0.0381345376, 0.0081807226, 0.0323897749, -0.0502377488, -0.0317204632, -0.1303230524, 0.1204514280, 0.0508203469, 0.1204015985, -0.0822678283, 0.0246952195, -0.2705362737, 0.1260438114, 0.0744046718, -0.0503780544, -0.2266072780, 0.0534394309, 0.2591787577, -0.1802572161, -0.0849766955, 0.0647725984, 0.0142898923, 0.0252342653, -0.2395821214, 0.0332889669, 0.0443441011, 0.0742688477, 0.0327253230, -0.0719425604, -0.1484304816, 0.2311966121, 0.1777298898, 0.0076380461, 0.1377199292, -0.0730966851, 0.2730851173, 0.0183909349, -0.2274654657, 0.1697078794, 0.0289905332, -0.1415336579, 0.1178789884, 0.1288200170, 0.1779672652, -0.1016718894, 0.1037802324, 0.0545953847, 0.0787038431, 0.1553001702, 0.0231630746, -0.1046565771, 0.0155582186, -0.0344806798, -0.2165090293, 0.1623087972, 0.0779114366, 0.0834780037, -0.1094971374, -0.0975333303, 0.0521046929, 0.0046739150, -0.2296728194, -0.0314431600, 0.0557213239, -0.2401187122, -0.0977007225, -0.0508768521, -0.0019980706, 0.0915525183, 0.0394840166, 0.0653067455, 0.1676083803, 0.1857159585, 0.0613991767, -0.0736361891, -0.0560929179, -0.0415206738, 0.0333267115, -0.0475947894, 0.0752572492, -0.0767975748, -0.0948464349, 0.0407982059, -0.0083738929, 0.0993577987, -0.1012029201, -0.1318084747, 0.0330482535, -0.2368241698, -0.1963256001, -0.0835907385, 0.0039891405, -0.0031197579, -0.0916101709, -0.0725444332, 0.0821225569, -0.0283308662, 0.0502144508, -0.2746728659, -0.1766326725, 0.1948536634, 0.0682666376, -0.1080940291, 0.0802927390, 0.1194526777, -0.1525013149, -0.0013082515, -0.1229216158, -0.0053350129, -0.0677189678, 0.2426483035, -0.1744441390, 0.1391997188, -0.0452651456, -0.2327132374, -0.0577139631, -0.0859635323, 0.1349881738, -0.1741815656, 0.0296310205, -0.1636637300, 0.1839876026, 0.1360484362, 0.0912358761, 0.0312752873, 0.0479738563, -0.0110129826, -0.0131134894, -0.1702774763, 0.0796231553, -0.0304512382, -0.2163934261, -0.2685151994, -0.1560691595, 0.1095596030, 0.0490677096, 0.0024519912, 0.0285454821, 0.0640712604, -0.0015748687, -0.0972519293, -0.1542398930, 0.1187110022, -0.2788158357, -0.1231256351, -0.0178910457, -0.1331465542, 0.0587840602, 0.1501876712, 0.0416011661, -0.2184561342, 0.1347175241, -0.0619597323, 0.1055383161, 0.0534173213, -0.1468221992, -0.0432019122, 0.1703489870, -0.1693660319, -0.0256006531, 0.0425867997, 0.0120732328, -0.1361946613, -0.1580519378, 0.0205547772, -0.1663549542, 0.0187796187, -0.0580093041, -0.0625588968, 0.1434842646, -0.0244367085, 0.0371518657, -0.0492880978, -0.0135231018, -0.1112852693, -0.0664493591, -0.0561458766, 0.1649040878, 0.0201487858, 0.0827599391, -0.1549091488, -0.0564588793, 0.0278735068, -0.0846291557, -0.1792576760, -0.0143175963, 0.0631676838, 0.0472850278, 0.0556705706, 0.2454432845, -0.1737803519, 0.0257250220, -0.1023974270, -0.0506696962, 0.0976857692, -0.2249970585, 0.1366487294, -0.1366436183, -0.1621222496, 0.1223866269, -0.1379039884, -0.0915451869, 0.0744047388, 0.0188228264, 0.1206600517, -0.1609419882, 0.1292196363, 0.0600160025, -0.0292183012, 0.0235563908, -0.1259277910, -0.0495060682, 0.2357071191, 0.0083732568, 0.2664161921, 0.0726508200, -0.0399685614, 0.0728220344, 0.1868665218, 0.0014517513, 0.0267735999, -0.2028478086, -0.1826807559, -0.1168859079, -0.0879983678, 0.0574367121, -0.0792817771, 0.1131273285, 0.1731811613, -0.0276507512, -0.0556526333, 0.1936841905, 0.0761389732, -0.1868886948, 0.2012529671, -0.0211429205, 0.1078404337, 0.0866358057, -0.0161433239, -0.1845568866, -0.0039932556, -0.0468960032, -0.0135895694, -0.2174212039, 0.0996299610, -0.1257859170, -0.1518222392, -0.1137974411, -0.0786325708, 0.1229456589, 0.0876544788, 0.1184424236, -0.1661698818, 0.1436526775, 0.0228113402, -0.0751525387, -0.1640793979, 0.0834346861, 0.1075252369, -0.0251933970, 0.0434413999, 0.0495897084, -0.1490766257, -0.0504976064, 0.2144701630, 0.2170956433, -0.1478918642, -0.0858245641, 0.2838733196, -0.2016896158, -0.0028147828, 0.0894355550, -0.1301914006, -0.0338347331, -0.0417449288, -0.0154765937, 0.1745024920, -0.0782840550, 0.1611370444, 0.0721600577, -0.0507872924, 0.1867454946, -0.1607543081, 0.0009055995, -0.0167966913, -0.0046733562, -0.0602381192, 0.0746961087, 0.2215127945, 0.1506548226, -0.0912279636, -0.1435804218, -0.0498217754, 0.1652847826, -0.2541680038, 0.2670656443, -0.1212326586, 0.1709100753, 0.0677850321, -0.2452179044, 0.0937100798, -0.1261839122, 0.0887737721, 0.0441507772, -0.1803369671, 0.0548346229, -0.1119717732, 0.1079182476, 0.1638984978, 0.0934147984, 0.0143012302, 0.0202812888, -0.1650377363, 0.0577113405, 0.1052089408, 0.2157232910, -0.0505641103, -0.0378843434, -0.1237878650, -0.0541397743, 0.0367292129, -0.0752653927, 0.0958304182, -0.0157482233, -0.1455806792, 0.1608060449, -0.1140910536, -0.0691816285, -0.0021250523, 0.0815990046, 0.0118366042, -0.2060012221, 0.1040960625, 0.0059548831, 0.1504040211, -0.0317136645, -0.2558622360, 0.1203325093, 0.0261901040, -0.0242700949, 0.0383049659, 0.2301823199, -0.1276858896, -0.1194779724, -0.1345236152, -0.0001428190, -0.0012073633, 0.1087177917, 0.0529776476, -0.0010664235, -0.0549391583, -0.0259440169, 0.1431071162, -0.1148534864, -0.0037958706, -0.0519963764, 0.1622941792, -0.1360552013, 0.0281075649, 0.0466840751, 0.0135848839, -0.0454962403, -0.0802427009, 0.0988491252, 0.0271661039, 0.0490029342, 0.0155638102, 0.0751173198, 0.1700960696, 0.1321685016, -0.0990776643, 0.1887176782, 0.1279158890, -0.1333402544, -0.0908391997, 0.1444721073, -0.1114101559, 0.0155631984, -0.1916594952, 0.0884751081, 0.0391185321, -0.0953672975, -0.0599437580, 0.0761313289, 0.1203209832, -0.1047472730, 0.1020630896, -0.1354123056, -0.1177517995, 0.0921957120, -0.0476040281, -0.0838617757, -0.0053248769, -0.0878849030, -0.0326592512, 0.0180039499, 0.0873326063, -0.0158670954, -0.1598030925, 0.1620180309, 0.0643475428, 0.2734977603, -0.2258030027, -0.1666809618, -0.1641774178, -0.1987857968, -0.0427277572, -0.0264780335, -0.0360744894, -0.0626910031, -0.0644029975, -0.1343882680, -0.0192507207, 0.1319454163, -0.0526247136, -0.0973148644, -0.0901149437, -0.1028852388, 0.0461168438, 0.1749429554, 0.0137687474, -0.0737573877, 0.1223642454, -0.2387013435, 0.0559023470, -0.0039350772, -0.2379062325, 0.1390396506, -0.0243702270, -0.0731293559, 0.0421324410, -0.1078727916, 0.0143974535, -0.0873835459, 0.0256604273, -0.2457682341, 0.1282449812, -0.2603274882, -0.1640016288, -0.0509060547, -0.0820172876, 0.0728041902, 0.0700479895, 0.1412221491, 0.0884885415, -0.1132601500, -0.1918946058, 0.1344147921, -0.0154870180, 0.1363033503, -0.0452118292, -0.0173152220, 0.2766538560, 0.2066129893, -0.2474723756, 0.1312278658, -0.0232309513, -0.1334638745, 0.1900836080, -0.1509784609, 0.0830999017, 0.2691580057, -0.0613879226, 0.1656032205, 0.1269600391, 0.0453989878, 0.1990744323, -0.1440202892, 0.0585926175, -0.2240753770, 0.1340939850, 0.0738545805, 0.0580848195, -0.0769069418, 0.0323801823, -0.1633870602, -0.0341107287, -0.0230124649, -0.1040796041, -0.0200764537, 0.0026151922, -0.0779865533, -0.1734587401, 0.0514458492, 0.1878265291, 0.1176372468, 0.1720289588, 0.1112668738, -0.0715986714, -0.0449234545, -0.2232955396, -0.2132867575, 0.0598168522, -0.0663731322, -0.0827293321, 0.2120357901, 0.0477499887, -0.1129731312, -0.0588289462, 0.0101795364, 0.0998665616, -0.0658929050, 0.0005419797, -0.0651099384, 0.1441264898, 0.0906955898, -0.0518705808, 0.0957057029, -0.2129609585, 0.0961840749, 0.1383846998, -0.1520334035, 0.1320918500, -0.0726884902, -0.1793960929, 0.2166952193, -0.0189538784, -0.0237571225, -0.1512922943, 0.1935686767, 0.2690671682, 0.0372115374, -0.2671347558, -0.2203683555, 0.0408137143, -0.0646151453, 0.1390704215, -0.0492976867, 0.0937453359, -0.2575825453, -0.0081777256, 0.2837130129, -0.0140885450, 0.2755359411, -0.0746831670, -0.0656257421, 0.1412209570, 0.0049819187, -0.0137320729, 0.2120561451, -0.0568602383, 0.1418606043, 0.0060911211, -0.0967616513, -0.0468488932, 0.0257733557, 0.0152147729, 0.0349170528, 0.0876537338, -0.0020979736, -0.0948352069, 0.2825452685, -0.1936070621, 0.0232995190, 0.0499333851, 0.1654550433, 0.2619261742, -0.0584524088, -0.0659834519, 0.2077197284, -0.0422502942, 0.0837723389, -0.0436279140, -0.0878137872, 0.1400207132, -0.0043398603, 0.0490955673, 0.0960899070, -0.2035958022, -0.1652912050, 0.2462666333, -0.0395296589, -0.0366461165, -0.0067938417, -0.0340250842, -0.1013117731, -0.1939378679, 0.2478125691, 0.0965423882, -0.1116581261, 0.1339479536, 0.2360943556, -0.1560776830, 0.0884929895, -0.0214365609, -0.2225590944, -0.1593232453, -0.1815733016, -0.0140385656, -0.0055416576, 0.1668532193, -0.0261555463, 0.2417073399, 0.1590356231, 0.0796997622, 0.0379622653, -0.2239222527, -0.0693611950, 0.0679893568, 0.1940573454, -0.0177948810, -0.0928955302, 0.0152710658, -0.2023427933, 0.2751810551, -0.0591766536, 0.1709269285, 0.0165298730, -0.2447802424, 0.0131302373, 0.0079519060, -0.1702120751, 0.0525367707, -0.0692895576, -0.0945171714, 0.1492078453, 0.2385040820, 0.0652279779, 0.2442487776, -0.1172883064, -0.0133498097, -0.0275772363, 0.0693558306, -0.0615572557, -0.0083779600, 0.0897790492, 0.1206253543, 0.1246736050, 0.2241192758, -0.1230168641, -0.0086932629, 0.0911820829, -0.0261873584, 0.0419469140, 0.1231226400, 0.0133417975, -0.0271675773, -0.0968601629, -0.0355584584, 0.0933957547, 0.0420638099, 0.0979851782, -0.0186823048, 0.0824659467, 0.2090829611, -0.0456890836, -0.0571771488, 0.0889020562, 0.0711666644, -0.0818223432, -0.0746949911, -0.1585023999, 0.0166224260, -0.0831766352, -0.0329565220, -0.1228879616, 0.2544416189, 0.1119335517, -0.2439612150, 0.0445331596, -0.1429753900, -0.0812193006, 0.2255318612, -0.0546413213, -0.0630098209, -0.1933031529, 0.0340251587, -0.1409600973, 0.0075647738, 0.2556342781, 0.0895253792, -0.0010723589, 0.0251933858, 0.0638753325, -0.1012428999, -0.1509811282, -0.0322369412, -0.0098498492, 0.1082649976, -0.0392063484, -0.2651824653, 0.1962807626, -0.0847371891, 0.2474676818, -0.1307875365, 0.1226248741, 0.0724043250, 0.0672124252, -0.0073299054, -0.0393200926, -0.1889391094, -0.0736445636, -0.1369803399, -0.2317330390, -0.1315764934, 0.1324053258, -0.1853348464, 0.1615919471, 0.0027079289, 0.1859353930, -0.1084314585, -0.2392933071, 0.0002760204, -0.0381675176, -0.0123454100, -0.0866573229, -0.2839053571, 0.1910112202, 0.0287252441, -0.0838306919, 0.0094263488, -0.1513415277, -0.0300758053, 0.0817064568, -0.0365241915, -0.1070867702, -0.0144121489, -0.0720449388, -0.0803209171, 0.0043002255, 0.0958391428, 0.0035831581, -0.1363230944, -0.0111960853, -0.0789887235, -0.0054710722, -0.0114279548, 0.0971944481, 0.0266488865, 0.0359163098, 0.1175703853, 0.1718172729, -0.1160614714, -0.0320851766, 0.0385495126, 0.0338380821, -0.0930992216, 0.0308607426, -0.0585936420, 0.0328296423, 0.0877408758, 0.2333442271, 0.1656787544, -0.2646947503, 0.1163634285, -0.0322868936, 0.1594022363, 0.0182043798, -0.0702555478, 0.1667506546, -0.0212712046, 0.1767068952, -0.0000557249, -0.1441924721, -0.0043763747, 0.0221492425, -0.2069657892, 0.0371307544, 0.0750305057, 0.2368209958, -0.0526921675, -0.1234259456, -0.2155334055, 0.1404326707, -0.0138542419, 0.0886600167, -0.1063246354, 0.0933564529, 0.1020867899, 0.0450405329, -0.0979918092, 0.0782621577, 0.1468083709, 0.0101918057, -0.0571010225, -0.0012776902, -0.1224080995, -0.1269150227, -0.2200819105, -0.0640963688, -0.0466231890, 0.0827643946, -0.0253486596, -0.0240548104, 0.1228989810, 0.0135956556, -0.0691815168, 0.0298437085, -0.0267410669, -0.0800081864, -0.0912605003, 0.2682845592, -0.2494902611, -0.0673888996, 0.0702188537, 0.0652673244, -0.2331934720, -0.0696764365, 0.1038085297, 0.1024562865, 0.0946070254, -0.2517785132, -0.1629741639, -0.0226754304, -0.1226485446, 0.0087302020, -0.2218792737, 0.0792019367, -0.0800392553, 0.1169717759, -0.0049181054, -0.0898705199, 0.0146237882, 0.1013456434, 0.0017321213, 0.0871522129, -0.1231357306, 0.0483202636, 0.2687886357, 0.2149839699, -0.0184325408, -0.0265678614, -0.2571884394, -0.0734558702, -0.2736813724, 0.0125117470, 0.1065253764, -0.1578194052, -0.0140049933, -0.0003970859, 0.2154238224, 0.0151046515, -0.1697561890, -0.0225685090, -0.0158135928, -0.0824230909, -0.0223294422, -0.1187486947, -0.2030841261, -0.0949072167, -0.0443624444, -0.0184774511, 0.1254533231, 0.0629886687, -0.1306646466, 0.0044657881, -0.0387342162, 0.1077761576, -0.0732729286, 0.0102349734, -0.0477301553, 0.1602106839, 0.1928635687, 0.0525795370, 0.2071020305, -0.0074468404, 0.1745964140, 0.0250968710, -0.2360276580, -0.2067160010, 0.1878334135, -0.1185414791, -0.0660004988, -0.1294129193, -0.0122706704, -0.0696490481, -0.0476656556, 0.0354328528, 0.0782179460, 0.2517785132, 0.0700818151, -0.0528186932, 0.0916870460, -0.1333816946, 0.0505632758, -0.0157374106, -0.0045525213, 0.2680146992, 0.1918911934, 0.0102426056, -0.0754050091, -0.0272227451, 0.0694660768, 0.1401757896, -0.0516523682, -0.1656764001, -0.1931768209, 0.0368270837, -0.0326787047, 0.0325993225, 0.2400763780, 0.1034564897, -0.1311431080, 0.0297264904, -0.0098617142, 0.1049980149, 0.1092791855, -0.0923537835, -0.0786346123, -0.0531209335, 0.0805552006, 0.2281171232, -0.0961702242, -0.0464338399, -0.1042203829, -0.1851082593, -0.0818032548, 0.2590121031, 0.0511213094, 0.2409488559, 0.2654003501, 0.1760190427, 0.0123408036, 0.0576476306, 0.1478791237, -0.0815779567, 0.0080770543, 0.0500012860, -0.0788636431, 0.0126431007, 0.0257251132, 0.0582975522, -0.1631903946, 0.0651202053, 0.1120718494, 0.0568844378, -0.0891154110, -0.0475595295, -0.1870013773, 0.1106081158, 0.2432747334, -0.1450459063, -0.0186234005, 0.2091018558, 0.0131628020, 0.1441699564, 0.1374917626, 0.2247166187, -0.1215725988, 0.0246629529, 0.0073804343, -0.1052869782, 0.2745459378, 0.0359934568, 0.0567630008, 0.1519876868, 0.0952718779, -0.0311112311, -0.2197417915, 0.1664032638, -0.1041155234, -0.1846428961, 0.0863960758, 0.0357532650, -0.1361710727, -0.0446150005, -0.0575593263, -0.0212264080, 0.1262596399, 0.1300547272, 0.1362692714, 0.2274080962, -0.2393311709, -0.1413282007, -0.1916121989, 0.0489209369, -0.1064154282, -0.0277756304, 0.1416199952, -0.1617153436, -0.0756888390, 0.1308361441, 0.1324435472, -0.0280363224, 0.0732992962, 0.0788015202, 0.1161977500, -0.0260242354, 0.1026521251, 0.0503898710, -0.1857700050, -0.2331716269, 0.0680601150, 0.1505687833, 0.0818837732, 0.0087396987, -0.0019427647, -0.0005364975, 0.1042186990, -0.2138659954, 0.0509402193, 0.1172233373, -0.2115945518, -0.1937159151, -0.1410372555, 0.0227681510, 0.1169083044, -0.2059962153, 0.0852176249, 0.2580738664, -0.2687943876, -0.2226923257, -0.0406738184, -0.1379828602, 0.0049820179, -0.1183342859, -0.0209214967, 0.1933462620, -0.2499644309, 0.0511568300, 0.0469919890, 0.0445208661, 0.2084683627, 0.1738529205, -0.0616338812, -0.1894867867, -0.1922978759, 0.0419273674, 0.0319661088, -0.0608692020, -0.0614597313, 0.2150291353, 0.1676340103, 0.0692035034, 0.0600537285, 0.0622778311, -0.1406366527, -0.1747179180, 0.0770044103, -0.0145226736, -0.2702252269, 0.0437089391, 0.2312254459, 0.0666960552, 0.0949978158, -0.1711234450, -0.0173194483, 0.0408914462, 0.0057112360, -0.0410464592, 0.1153706536, -0.0794449970, -0.1057564169, 0.1170896888, 0.0705626383, -0.0731279030, -0.0824775323, 0.0468126759, 0.0926796049, 0.1750194132, 0.1503800154, 0.0026865646, -0.0083001042, 0.2018969357, 0.0318481959, 0.0582829043, -0.0317742452, 0.0918457657, 0.2521683276, -0.0103932060, 0.1889980137, -0.2545697987, 0.1604508609, 0.1519321054, 0.2021502256, 0.1817299873, -0.1274148673, -0.0950230509, -0.2456653714, 0.0303252209, 0.0536439680, -0.1699117273, -0.1291562915, 0.0695105568, -0.1968186945, -0.1376461685, 0.1823574007, 0.0761147514, -0.1554819047, -0.0223877393, 0.1043585837, -0.0519255996, 0.1640908867, -0.1594391316, -0.1375883520, -0.0751978680, -0.1002056226, 0.2449396402, 0.1244540736, -0.1102237478, -0.0094521632, -0.0661213621, 0.1398682594, 0.0334246233, -0.0065332218, 0.1094477922, 0.1102012992, -0.2089854181, -0.0321949720, 0.1621819586, 0.0722606704, -0.0366539881, 0.0346336961, 0.1935261637, -0.1077135429, -0.0350215919, -0.0888086557, 0.0997260734, -0.1110179350, 0.0046976283, -0.0767565295, 0.0143242441, -0.1629163921, 0.1401264071, 0.0786502510, 0.1177648678, 0.1571855247, 0.2338863611, 0.1604352146, 0.0188717432, -0.0238182023, 0.0691301301, 0.0079565942, -0.2069491297, -0.0019115035, 0.1439730376, -0.0939349607, -0.0008339206, 0.2138352394, -0.0584579371, 0.0768658370, -0.1142409891, 0.1509048194, 0.0370603576, 0.2043880075, -0.0363641530, -0.0812703073, 0.1472060382, -0.1345216632, 0.0696824118, -0.2135865688, 0.2136003077, -0.2508135736, 0.0685780793, -0.2572042346, 0.2457917184, 0.2390009761, -0.0533929765, 0.1422374547, -0.1976793259, 0.0092674410, 0.0999675989, -0.1550138295, 0.1434195489, 0.1747833788, 0.0519300960, 0.0935650021, 0.1776905358, 0.1615482122, 0.0915864110, -0.0324847288, -0.1706900597, -0.1190377772, -0.2804833949, -0.1242757291, 0.1487565339, -0.0202474762, -0.1649500579, 0.0321168192, 0.0279520471, 0.0887442306, -0.0158839356, 0.1598506272, -0.0384281389, 0.1741640568, 0.0346563682, 0.0273677725, 0.0346910544, -0.0216816347, 0.1521779746, -0.2438566238, 0.1502139866, -0.2632391453, 0.0756376684, -0.0840788484, -0.2089020163, 0.0530042015, -0.2779985666, -0.0917119384, -0.2402806729, 0.2270995975, 0.1285917461, 0.0478235669, -0.1361526698, 0.0062601599, -0.0897262245, 0.1584703773, 0.0766412914, 0.2446752936, 0.0381382592, -0.0308533553, 0.2622117102, 0.0632533729, 0.1704098135, 0.1162293702, 0.0228317976, -0.1496642083, 0.1049829349, 0.1172319651, 0.0097906897, -0.0229750220, -0.0102857836, 0.2186619788, 0.1692317575, 0.0166448317, -0.0221498422, 0.0607056879, 0.1345072240, -0.2513115108, 0.1537185758, -0.1395818591, 0.1587664932, -0.1221478432, -0.0308585074, -0.1047374830, -0.1643011421, -0.1379200220, 0.2590455711, 0.0287276171, 0.2597885430, 0.2409816533, -0.1184293553, 0.1131489798, -0.0075129494, 0.0635158420, -0.0327224061, 0.1647399217, 0.1090799123, -0.1318828762, -0.2348494679, 0.0387975425, -0.0282962620, -0.1070246249, 0.2508498430, 0.0285451449, 0.0296798497, -0.2009635270, -0.1116827428, 0.1072205231, 0.1222282425, 0.0837115943, -0.1671275198, 0.1081444547, 0.0967535675, 0.2419347167, 0.0396958664, -0.0310345180, -0.1492479444, 0.0559827052, 0.0514583662, 0.1804479063, -0.0785180554, 0.0031695846, 0.0474972427, 0.1305854768, -0.0464936532, 0.0750774145, -0.0181968603, -0.0988631099, 0.1096380502, -0.2437632978, -0.1287416667, 0.1592944115, 0.0060861818, 0.0797107890, -0.1035170853, 0.0471273810, 0.0253550448, -0.1792091429, 0.2172410786, 0.0127333086, -0.0982699320, -0.0276209805, 0.0966448486, -0.0599222630, -0.0467095971, -0.1207766533, 0.0955783799, -0.0216729697, 0.2388374209, 0.0001262898, 0.1614762545, -0.0904964954, -0.0069949823, -0.0983093306, -0.0497521982, -0.2145127505, 0.0357025005, -0.0387215540, 0.0973261669, 0.1577965617, -0.0675614774, -0.1345916688, -0.1358353943, 0.0327802002, 0.0323468670, -0.1270580739, -0.0528311655, -0.1974711716, -0.1009678468, -0.1631760150, -0.0020227171, -0.2457165420, 0.0397298150, -0.0606230088, 0.1004590392, 0.1655694693, 0.0270308070, 0.0503592081, 0.1914079338, 0.1005046591, 0.1657689661, -0.2341923714, -0.2279447764, 0.1754517853, -0.0816468969, 0.1808899045, -0.2147624344, -0.0511425734, -0.0019954562, -0.0559837520, -0.1003472060, 0.2464139313, 0.0237505641, -0.0352437198, 0.1135105044, -0.0629794747, -0.0067240619, 0.1129540056, 0.2035205960, -0.2085249722, -0.0686048716, 0.2360467166, -0.1434994638, -0.1065408140, 0.2447222471, 0.0991111323, -0.1158951595, -0.0614750572, -0.0739887655, 0.1599306613, -0.1200448722, 0.0752298459, 0.2247988731, 0.2405345440, -0.1864571869, 0.1238345504, 0.1174438074, 0.0987043306, -0.1245713308, 0.1769642085, -0.0302980449, -0.0640853047, 0.0025444557, 0.1426351219, -0.0225960482, -0.0034839166, 0.0988244489, 0.1458462626, 0.2692473531, -0.2420271188, 0.1297880858, -0.1096918136, 0.0985955223, -0.2000158876, 0.1772032380, 0.0448522680, 0.0368325897, -0.2742678523, 0.2229859531, 0.0280133784, -0.1870711744, 0.0873681679, -0.2093710154, -0.0681538731, -0.0499116965, -0.0618602075, -0.0891874880, 0.2669306695, 0.1098012477, 0.0391291417, -0.2463282943, 0.0059665339, -0.0900296047, -0.0409021527, 0.1427754164, -0.2658897638, -0.1393859982, 0.2101494521, -0.2546008527, 0.1291133612, -0.2466006875, -0.1458039135, 0.0247263275, 0.0637829602, -0.1275950670, 0.1277099401, -0.0504884124, -0.0087783281, -0.2162416577, -0.0050155455, 0.0007149914, -0.2493188530, -0.1650885940, 0.0296255369, 0.0699061677, 0.1080335528, -0.2660314441, -0.0085255774, 0.0079243286, 0.0650417879, 0.1921840310, -0.1193125471, 0.0898895711, -0.0297737885, 0.0471372865, -0.0653219149, -0.0826044157, 0.2104674131, 0.2379282713, -0.0820662081, -0.0093359044, -0.0775562674, 0.0692541897, 0.1613508314, 0.1375638992, -0.1685019732, 0.2790496945, -0.1605718285, -0.0514829345, -0.1147438362, 0.1468936056, 0.0258887280, -0.0597401038, -0.1035358831, -0.1290687174, 0.1429503262, 0.0593812838, -0.0712163001, 0.0573395677, -0.0876689255, -0.1614100784, 0.1252410263, 0.1250477284, -0.0481758788, -0.0684230104, 0.0780233294, 0.1343574524, 0.0850179046, -0.1784042269, 0.2432210594, -0.0125326775, 0.1004562825, 0.2122971267, -0.1403955817, -0.0546510257, 0.1865001321, -0.0505099818, 0.1497227401, -0.0803158432, -0.1363795251, -0.0672662035, -0.0658990890, -0.1670273691, 0.1520514637, -0.0158430319, 0.1699053794, -0.1984595358, -0.1080940291, -0.0821463466, -0.1394671798, 0.1924947649, 0.0452797227, -0.1130673960, 0.2436985523, -0.0862450749, -0.0923997089, 0.1989902854, 0.0641178936, -0.0199472252, 0.1290351152, 0.0365491435, 0.0750366598, 0.0604301877, -0.0443461984, -0.1124316901, 0.1228813082, -0.0809417814, 0.0311319735, 0.0769263506, -0.0279156193, 0.1650412977, 0.1525570899, -0.1326761097, 0.2278137058, 0.0794204250, 0.1590586752, 0.1400109231, 0.0214648563, -0.0376632288, 0.1176234856, -0.2339189947, -0.0989202932, -0.0559088439, 0.1224415451, -0.0569032840, 0.0154654225, 0.0102991695, -0.0292664096, 0.1221190691, 0.0723152980, 0.1196779013, 0.0362140760, -0.2250241935, 0.0287359562, -0.0583927818, 0.0871183947, 0.1696307659, -0.0352224261, 0.1547728926, 0.0681443214, 0.1049897149, -0.1347112656, 0.0193746127, -0.1222464740, 0.1396871805, 0.0675833672, 0.0328606740, -0.0194523707, -0.1554174721, -0.1318494827, -0.0822218508, -0.0421150401, 0.0318410620, 0.2014136314, -0.0334790982, -0.2096407562, 0.1412348151, -0.0476991832, 0.1833300292, -0.0041009723, 0.0585592575, -0.0430259518, 0.0729094595, -0.0249937940, -0.1196452156, -0.0802787319, 0.0575952977, 0.1374358982, 0.0145135699, 0.0943858698, 0.0363460965, 0.0922556072, -0.0822480172, -0.1338912994, 0.1720988303, 0.0492888391, -0.1249370128, 0.1177756861, 0.0743807778, -0.0095243594, -0.0128206536, -0.1291241199, 0.2452049106, 0.0793227330, 0.0201228652, -0.0928936303, 0.0183091667, 0.1304651350, -0.1135425419, 0.0932512954, -0.0875706300, -0.0971700922, -0.1503633112, -0.0930968225, -0.0244123600, 0.0439888313, 0.0174942799, 0.1907021850, 0.0576086715, 0.0582688302, 0.0766174570, 0.1334211230, -0.2322907746, -0.1297235936, 0.1784322709, 0.0840654820, 0.2744242549, 0.0432123244, -0.1052846685, 0.0864662603, 0.1034988761, 0.2447403222, 0.1580777615, -0.2430554032, -0.0195274483, -0.0880939513, -0.1476867199, -0.0558686443, -0.1068862006, 0.2274132073, 0.2261426896, -0.0130764218, 0.1204327941, 0.1327821463, -0.1428046972, 0.1149929687, -0.0014545114, 0.0780691877, -0.0222498532, 0.0353508741, -0.1576812863, 0.1074166670, -0.2280773520, 0.1137933433, 0.2620582283, -0.0121947834, -0.0884745196, 0.0160661377, 0.0036509137, 0.0135245984, -0.0068317773, -0.0744995624, -0.0101951128, 0.0143230734, 0.0420161225, -0.0128836287, 0.0215872657, -0.0700235590, -0.0508140922, -0.0321294293, 0.0558835492, -0.2841881514, -0.0924096778, 0.1550247818, -0.0197992101, -0.1701540351, -0.0046786028, -0.1894339323, -0.1951444000, 0.1133152768, 0.1843401641, -0.0824415013, 0.1136524081, 0.0204897970, 0.0704817846, 0.0183664393, 0.0117599033, 0.0353618599, -0.2775926292, -0.0086985258, -0.0926387459, -0.0016726814, 0.0418613143, -0.1998141110, -0.0034474344, -0.2143966109, 0.1468833089, 0.0749008507, -0.1079287305, 0.1667453796, -0.0786866844, -0.1740633994, 0.0017715504, 0.0166598670, 0.0838676840, 0.0304985400, 0.0393362083, -0.2185850888, -0.1188898161, 0.2337585837, 0.1072195023, 0.0182209723, -0.2263372242, -0.0541408919, -0.0146110235, -0.0747919604, 0.0568145812, -0.0270755086, -0.0714442804, -0.0701117888, 0.0675466806, 0.1270020157, 0.0365486406, -0.0256891791, -0.0899754763, 0.1062691659, -0.1943050772, 0.0072593167, 0.0387608856, -0.0336116776, -0.0522390082, 0.0452449508, 0.1905245185, 0.1741966754, -0.0580676645, 0.0415968858, -0.1102196798, -0.0380407088, -0.0489287116, -0.1494812220, -0.1764094234, 0.0475396924, 0.1076578647, -0.0730571151, -0.0914162025, -0.0948329121, -0.0730736852, 0.1337412149, 0.1808767319, -0.1610381007, 0.0709386691, 0.1704581082, -0.1006463021, 0.1535843909, -0.2247299105, -0.1626181751, -0.1408517659, -0.1471868604, 0.0910506994, -0.1615370959, 0.0310774334, -0.0760018155, 0.0350002572, -0.1232845485, 0.0211471245, -0.0362325087, 0.0104960641, 0.0400264300, -0.0145375533, -0.0222173911, 0.1027259603, -0.1777930111, -0.2527755201, 0.1535520852, 0.1169942319, 0.1007261351, 0.2523317933, 0.0721169487, 0.1877237707, 0.2260706276, -0.1182308346, 0.0417572409, -0.0649901181, 0.1018738821, -0.0867456272, -0.0470412150, 0.1132916436, 0.2025400400, 0.0549488030, 0.1031775400, 0.0060719671, -0.0894078389, 0.2488880903, 0.0540300235, 0.0161545631, 0.1063627377, -0.0148160821, -0.1417829841, -0.0122179640, -0.1148217618, -0.1212508753, -0.0360694379, -0.1448887885, -0.1548423916, -0.1418497562, 0.1512404978, -0.1448091418, 0.0286372788, 0.0248819664, -0.0765055567, -0.1623478532, 0.0893649757, 0.1921063960, 0.2478133738, 0.0245545078, 0.2547568679, 0.0203506909, -0.0204841979, 0.0506275967, -0.0286156069, 0.0078463908, -0.1148635894, 0.0728138164, -0.0241166931, -0.1225807890, 0.0414239392, -0.0048956135, -0.0101316040, -0.1218722090, -0.0047082286, -0.0138372937, 0.2647002041, 0.1788628250, 0.0300429240, 0.0595192686, 0.1272104979, 0.0405954458, 0.1718173027, 0.0258325823, -0.0306159630, 0.1201513931, -0.1164765731, 0.0112201935, -0.1764249951, 0.1088355705, 0.0706968755, 0.0998499990, 0.0819521621, 0.0575900115, -0.1214695722, 0.1675654203, 0.1980791986, -0.0624785908, -0.1092305779, -0.0485233404, -0.1704232842, -0.0729917958, -0.2044664323, -0.0315677784, -0.0903765485, -0.1326765418, 0.1539416164, -0.1500526667, -0.2299750596, -0.0086732050, -0.0963925496, -0.2588234842, -0.0571707562, 0.1806053519, 0.1207191348, 0.0633631945, 0.0911969543, -0.0960664675, -0.0556917340, -0.1560266465, -0.0612945929, -0.0961015075, 0.0463164896, 0.1247578114, -0.1804486662, -0.0156616271, -0.1056933776, -0.0258144904, -0.2698353529, 0.0449877568, 0.0099144848, -0.1412231922, 0.1518689543, 0.0176881645, -0.0412474088, -0.2166802436, -0.1265108585, 0.1490885466, -0.1000844762, -0.2432258427, 0.2711677551, -0.1625172943, -0.1340697855, 0.0049291737, -0.0993619785, 0.0443003513, -0.1915486902, -0.0388831310, -0.0374388807, 0.1944511980, 0.1464012116, 0.2365348786, 0.1107354239, 0.0980722979, -0.0039741686, 0.0645100176, -0.0139828837, 0.2358402014, 0.0559529662, -0.0372988246, 0.0967007279, -0.0185847040, -0.0297449138, -0.1402022690, -0.0371307582, -0.0313728116, -0.0538496785, 0.0949397460, -0.0561966710, -0.0356331505, -0.0716085210, -0.1225565970, -0.0405432321, 0.1056183130, -0.1055564806, 0.1768616438, -0.1574596018, -0.2058696151, 0.0485931374, 0.1414380223, -0.0720961988, -0.1315871626, -0.0654649213, 0.0208907221, -0.0462070853, 0.2092450410, -0.0017031949, 0.1154098585, -0.0840213448, 0.1397206038, -0.2285475135, -0.0032693637, 0.0304630864, -0.1886276156, -0.0295299422, 0.2449215651, -0.2683458328, 0.2512147129, 0.0084155519, 0.0005721305, -0.2200609148, -0.0771443695, -0.0752809346, -0.0031284362, -0.1735489666, -0.0645899549, 0.0074455193, -0.0639332682, -0.0907586068, 0.0700428337, -0.2192457020, -0.0029292989, 0.1727552861, 0.1634055674, 0.0210506320, -0.1844615489, 0.1147635877, 0.1726661921, 0.0503213778, 0.2351702005, 0.0820489228, 0.0749933347, -0.2089255154, -0.0383371301, 0.0260734688, 0.0405092798, 0.1823255271, 0.0408448204, 0.2498218417, 0.0949869230, 0.1832655966, 0.1167028695, 0.0972814187, -0.1151854321, 0.0207378604, 0.1098675653, -0.0073776292, 0.2454829812, 0.0523598306, -0.1116735339, 0.1115275770, -0.0825908855, 0.0076365150, -0.1829682589, 0.0520025492, 0.0226805843, -0.0950192735, 0.2534632683, -0.0196672995, 0.1180865914, -0.0773543045, 0.1129422933, -0.1307345629, 0.0698035881, -0.1303316504, 0.0735954568, 0.1563370675, -0.1347372830, 0.0511493422, 0.1844215691, 0.2069101483, 0.0275398716, -0.1210064441, 0.0395948142, -0.1955632418, 0.0461505800, -0.0992228165, -0.1724256724, 0.1604490131, 0.0458616018, -0.0558663979, -0.0165966935, 0.0065749590, 0.1958297491, -0.0679058954, -0.0342146643, -0.1638848335, 0.1384096146, 0.0903597772, -0.1282674223, 0.2009255439, 0.0854119882, 0.2303212434, 0.0914601907, -0.0661935508, -0.0399902500, -0.0791521147, -0.1411964595, 0.0983096138, 0.0752654970, -0.2013295442, 0.1380977482, -0.1811389625, 0.1384879351, -0.1678644419, 0.0982813686, -0.0779289901, -0.0624011159, -0.2273436934, 0.1776246876, 0.1474814564, 0.2420161664, -0.0228808913, -0.0526644550, -0.1663563997, 0.1928425729, -0.0223294701, -0.0238269456, -0.2511191964, -0.2024710327, -0.0529603101, -0.0054607098, 0.0608154275, 0.1886089444, 0.0562590659, 0.1487630755, 0.0526929498, 0.0631732643, -0.0995337293, -0.2425039262, 0.2302283049, -0.1096514016, -0.0816387013, -0.1850717664, -0.0736469701, 0.0533511229, -0.1669863462, 0.1548727751, 0.1161011457, -0.0638264343, -0.1056010425, -0.2243706882, 0.0357576273, 0.0301304590, 0.0896722153, -0.1052751243, 0.0667329431, -0.2136868089, 0.2488759458, -0.0228614379, 0.0372508690, 0.1319488436, 0.0048857876, 0.0323033072, -0.0775022954, -0.1948772073, 0.2519892752, 0.1483643353, -0.0919649303, -0.0298488941, -0.0033346277, -0.0090901842, -0.0379179567, -0.0816664249, -0.0121826064, 0.0632046461, 0.0276265163, 0.0501008816, 0.0032801537, 0.1792465299, -0.0259989668, 0.1919400394, -0.1629936099, 0.0926518962, -0.0444368944, -0.1034905389, 0.1370633394, -0.2248269618, 0.1540671587, 0.1674875915, 0.0236595552, -0.0801907778, -0.0366358235, -0.0660983175, -0.1057153046, 0.1508439928, -0.0254721902, -0.1516604125, -0.2018621117, 0.1093912125, 0.1953095496, -0.1171065941, -0.0936750844, 0.0750091076, 0.0492144376, 0.0968384966, -0.1720960438, -0.0418151319, -0.2725151777, 0.0338028409, 0.1316796988, -0.0365713611, -0.0880079120, 0.0093452903, -0.0106118415, 0.0225206595, -0.2691445053, 0.1449080706, 0.1821257025, -0.1234390512, 0.2629768848, -0.0651986003, -0.1314454377, -0.0175310597, 0.0163826570, 0.1311234832, 0.1275445670, 0.2304638922, -0.1655105650, 0.1424289048, -0.2823622823, -0.0484062880, -0.2478694171, -0.2262047082, 0.2619686127, 0.1283222288, -0.0236489642, -0.1042988896, 0.1702774018, 0.2169115245, -0.1393765211, 0.0533948205, 0.0074902233, 0.0458924100, -0.1420875341, -0.0630322024, 0.0591167696, -0.0699501559, -0.1524510682, 0.2353847474, -0.1397378743, 0.0280835312, 0.0553076528, 0.1021342650, 0.0215979312, -0.0460759290, 0.0601932146, 0.0766857415, -0.1817485094, 0.0844649002, -0.0799274519, -0.0328915268, 0.0258765202, 0.0385254584, 0.2063349485, 0.1869264543, 0.0477710031, 0.0093880165, 0.1611034870, 0.2486788481, 0.1028370857, -0.1332137138, 0.1611249447, 0.0524600074, -0.0736947432, 0.0874295905, 0.1688276380, 0.0649297014, 0.1552140117, 0.0571992509, -0.0269710701, 0.0401983261, 0.0173110515, 0.0187785402, -0.0155243743, 0.2230249345, -0.1480886340, 0.0644416660, 0.0574775785, 0.0260706507, 0.0733910650, -0.2000827640, 0.0099945413, 0.1763160825, 0.0498392619, -0.1660177261, -0.1472131610, 0.1602415293, 0.0944511667, 0.0769087672, -0.0960712805, -0.0430710874, 0.0372151695, -0.0158876516, 0.0734881759, -0.1319494694, -0.0847367868, 0.0540428869, 0.0471254885, -0.0348397382, 0.1350617707, 0.0768421143, -0.0267576799, 0.0948221684, 0.0745973885, -0.0801754966, 0.1114044264, 0.1970487982, 0.1040907502, 0.1071648076, -0.0160654411, 0.0630987585, -0.0710992664, -0.0778429508, -0.0944935977, 0.0197805669, 0.0224058740, -0.0624007322, 0.1401132196, -0.0023546626, -0.0672184750, 0.0551041923, 0.2189269960, -0.2612448037, 0.1514810175, -0.1107591540, 0.2077529281, -0.0239180401, 0.1405889094, -0.0456187427, 0.0436973609, 0.0122925099, 0.0650715157, -0.1669044346, 0.1055625379, -0.0309195686, 0.0582406744, -0.1135634035, -0.0997189432, -0.0124425488, 0.1994398534, 0.1398901641, 0.1307325363, -0.0440004021, -0.0868618339, -0.1924049109, -0.1108387560, -0.1275995225, -0.1182350963, -0.0165252816, -0.2187562734, 0.0020858054, -0.0732067898, 0.1676833779, -0.2293996811, 0.0331773907, 0.0378843471, -0.1538848132, 0.2021983713, 0.1586464942, 0.0974121317, -0.0704984963, 0.0645921305, 0.2149842530, 0.0892756805, 0.0974385738, 0.0546491258, 0.1986257285, 0.2249159962, -0.0254972167, -0.1855420172, 0.1322398782, -0.0298358407, -0.0804214478, -0.1584797502, 0.0781999007, 0.0154169463, 0.0381012596, -0.0947115421, 0.1480399221, -0.1668989658, -0.0952460244, -0.0404682010, -0.0648439378, 0.1623156369, 0.0603933744, 0.2296044827, -0.0317901559, -0.0119653912, 0.2584770620, 0.1407283545, 0.0629953668, -0.0311881937, 0.0064625065, -0.0782131627, 0.1796799153, -0.0576618835, 0.1489658803, -0.0532311350, 0.2444392741, 0.1427773386, 0.0313185416, -0.1519817263, 0.1360917538, -0.1500398219, -0.1233545020, 0.0125094056, -0.1996948719, 0.0077447584, 0.0606258698, -0.0732056648, 0.1045225933, 0.0688935071, -0.0450981669, -0.0325137265, 0.0287618656, 0.1840184331, 0.1424622685, 0.0198280625, 0.1399488598, -0.1616291851, -0.0144050801, 0.1673688889, -0.1221252009, 0.0712128282, 0.1655369848, 0.0485704318, 0.1160678789, 0.1258923858, 0.0709212944, 0.0396066532, -0.0592224486, -0.2115159482, 0.1438766271, -0.1056953222, -0.1690993458, 0.0829923898, 0.1631540805, -0.0745465383, 0.0176369287, -0.1249826774, 0.0762130320, -0.1827003807, 0.0015153274, -0.1009804234, -0.1839412451, 0.0629152581, -0.0079242522, 0.1594863683, 0.1727015823, 0.1878109723, -0.0887045562, -0.2292911857, -0.0383789949, 0.0769536495, 0.0484943017, 0.0569985285, 0.1769389361, 0.0363503732, -0.1290807873, -0.2138305753, 0.0194494147, -0.1714105457, 0.0441191271, -0.1181812733, -0.1234418154, -0.1537714154, 0.0185405165, -0.0647173896, -0.1046862602, 0.0227741543, 0.0284206253, -0.1339771450, 0.0918410346, -0.1778273135, -0.0373992324, -0.1625972539, -0.0341632254, -0.2571340501, 0.2702774704, -0.2319038659, 0.2380691916, 0.1051690951, -0.2582633495, -0.1150944382, 0.0867205039, -0.1100550666, -0.0441448316, -0.1172424033, 0.1136868894, 0.1460282058, 0.1326985508, 0.0509564951, -0.1516655236, -0.0390936993, -0.1097857654, 0.0394692756, -0.0813179016, 0.0649366751, -0.0540783517, -0.1428485066, 0.0224884488, -0.0233261865, -0.0092713675, -0.2432627529, -0.1872170419, 0.0983491018, 0.0275060683, -0.1027643532, -0.0039081546, 0.2606205940, 0.0455707200, 0.0995291844, 0.0721088275, 0.2304548174, 0.0785163939, -0.1953000575, 0.0722684264, 0.1409144551, 0.1387879997, 0.1389163584, 0.1004109457, 0.0403698385, -0.2318542749, -0.0717522278, 0.0540856831, -0.0884249359, -0.1726797074, 0.1022460535, -0.0468334705, -0.0056102616, -0.0475403778, 0.2374315560, -0.0101978350, -0.1422803253, 0.1088183820, -0.1164729372, -0.1644461602, -0.0646011755, -0.1418518573, -0.0820150226, -0.0548197441, 0.0927974954, 0.1709749103, -0.1296745539, 0.0557706803, 0.0400947295, 0.1235724762, -0.0286993198, -0.0841062069, -0.1587549597, 0.0424430035, -0.2313324213, -0.1306747198, 0.0934049338, -0.2340307832, 0.0394832380, -0.2004705817, 0.0883050933, 0.1716465801, -0.1147543862, -0.0850001797, -0.0846649259, -0.1524628252, -0.0091939196, 0.0601531044, -0.1267799139, -0.0611417741, -0.0801064596, -0.0197805017, 0.1143501103, 0.0400884487, 0.1261392981, -0.1229148880, -0.2499199957, -0.0797266737, 0.0131010888, -0.0039058856, -0.1623540670, 0.0287227388, 0.1334928721, -0.1898345947, -0.0430739373, -0.0709990785, 0.0203316845, -0.1163387820, -0.1730363518, 0.0237264950, 0.1655629277, 0.0824285522, -0.0445467606, 0.0976512060, -0.1615048498, -0.1841654629, -0.2209036797, 0.1316681951, -0.0329308473, -0.1082437187, 0.1860880554, 0.0641754121, -0.0232105367, -0.0212236512, -0.0911260024, 0.2447017431, -0.1827393919, 0.1791180372, -0.0143074133, -0.0592010096, -0.0332830474, 0.0960371345, -0.0708205104, -0.1328545511, -0.1286741048, 0.0094489604, 0.0513995402, 0.0433326960, 0.1581411362, -0.1844220608, -0.0025806569, -0.0126925502, -0.0648955554, 0.1384269595, -0.0128988968, 0.2429769784, -0.0382750072, -0.0476161428, 0.2334639579, -0.1664862484, 0.0381052606, -0.0939704105, 0.0993965715, -0.2373113185, 0.1579942107, 0.0536410138, 0.2172629833, 0.2153817862, 0.0625568107, -0.0758398622, -0.1465331614, 0.0742794275, 0.2279794067, 0.0189968366, -0.0971484259, -0.0123361275, -0.0940154642, 0.0094811646, 0.0490968190, 0.0352378860, 0.1310592294, 0.0128241125, 0.0601195544, 0.0559515506, -0.0312240086, 0.0542456731, -0.0427217185, -0.0561408289, -0.0754438788, -0.0804858953, 0.1089791730, -0.0882895142, 0.0770916641, -0.2423099279, -0.0015590228, 0.0446996316, -0.1178020835, 0.0635335147, -0.0842138305, -0.0856038556, -0.0514472947, -0.0905125141, 0.1285304874, 0.0420740172, -0.0788820013, -0.1176161841, -0.0598059483, -0.0859631076, 0.1778319627, -0.0698960200, 0.1082050800, -0.0542247035, -0.1701592505, 0.2152686566, 0.0349682719, 0.0042716591, 0.0003668995, 0.1348691136, 0.0592326745, -0.0937380344, 0.1403355002, -0.0828569457, 0.0198784973, -0.0954467282, -0.0503490418, 0.1262383163, -0.0582279079, 0.0822212920, -0.1141734868, 0.1689460129, -0.0138070844, 0.0100257434, -0.1978552490, -0.2295079231, 0.0912502930, -0.0946391895, -0.1631365865, -0.1397493035, 0.0634336397, -0.2555032969, -0.0152295111, -0.1371641755, -0.1554436833, -0.1936429888, -0.1290992051, -0.1358261555, 0.1192165986, -0.1377442926, -0.0599285439, 0.1419252753, -0.0920938179, 0.0911233351, -0.1418759078, 0.0757794678, -0.0774421319, -0.0146959834, -0.0397205539, 0.0155662848, 0.1379730701, -0.1753866822, 0.0356184319, 0.0939113796, -0.0641586483, 0.1837616712, -0.1064427793, 0.2324978262, -0.0188297648, 0.2045035511, 0.0527223013, 0.0604224019, -0.1251376718, 0.0409018733, 0.1744020581, -0.1534146667, -0.2529633641, -0.0855596513, 0.0436591506, -0.1746328920, -0.1133691147, -0.1550565809, 0.2837630212, -0.1975683868, -0.0450038761, 0.0554601662, 0.1691769212, 0.0978365764, 0.2000612020, -0.1604827940, 0.1308815330, -0.0330661759, 0.1418572366, -0.0092283702, -0.0887180194, -0.1582868546, 0.0641095564, 0.1223652512, 0.0437140316, 0.0773909688, 0.2437548339, -0.0829001144, 0.1750865430, 0.0982164294, 0.0525029749, 0.2020959407, -0.0792017430, -0.0139358444, -0.0105083138, -0.0661845207, 0.1091965660, 0.1922524422, -0.2207739204, -0.0363986753, 0.0112860678, 0.0759041607, 0.0247943513, -0.0534754395, -0.1713590026, 0.2704140544, -0.2221699357, 0.1726277173, -0.0391306505, 0.0719843134, 0.1471684128, 0.0056616305, -0.0723547116, 0.0983357579, -0.0224898998, -0.1647107303, -0.1954097152, -0.0406029560, 0.0091865733, -0.0921235681, -0.2213687748, -0.0713635385, -0.0166723691, -0.0480232984, 0.2244065404, -0.0328058749, -0.0488188751, 0.1529283971, 0.0679681078, 0.1031836942, -0.1649252474, -0.1857416630, 0.1252380759, 0.1505647004, -0.0729460940, 0.0225660186, 0.1853355318, -0.0105806096, 0.0883772820, 0.2115640640, 0.0019353827, 0.0300332736, -0.0033528530, -0.1535665542, -0.1175968945, 0.0074847429, -0.0186434481, 0.0862067938, -0.1482731104, 0.0476105735, -0.0360510275, 0.1283836961, -0.1441904455, 0.0192190912, 0.1264196485, 0.1942016482, -0.0242248438, 0.0845113173, -0.0421490148, 0.0201775115, -0.1306486726, 0.0094780084, 0.1382647008, 0.0262191761, 0.2546166480, 0.0869505778, -0.0684821606, 0.0054887868, 0.1579325050, -0.0587651022, 0.0873821154, -0.0359824300, 0.0016088735, 0.1539452374, -0.2005831599, -0.2291908860, 0.1367312670, 0.0684088096, 0.1284718663, 0.1647220105, 0.0267910231, 0.0567853227, -0.1123751178, -0.0710021555, -0.0348708108, -0.1690490991, 0.2112952024, 0.1187115535, -0.0793879554, 0.0938668624, 0.1315944046, 0.0092016775, -0.1254131347, -0.0072053373, 0.0928005800, 0.2398204207, -0.0531205386, 0.0231989101, 0.2203056216, 0.0719087869, -0.0537082553, -0.1161119938, -0.0650898889, -0.1263947785, 0.0202652495, 0.0230974313, -0.0327829979, 0.0484284461, 0.0697977841, 0.1116428673, 0.0267841704, 0.0432451889, -0.1089404896, 0.1721812636, 0.2416885048, 0.0850154534, 0.1931146383, -0.0006845705, 0.0742736235, -0.1154859364, 0.0817605034, 0.1199528649, -0.1880587488, -0.0599910021, -0.1895271242, 0.1569235176, -0.2158141881, -0.0483788103, -0.1793262661, -0.1749460846, 0.0799778104, -0.0452118106, 0.1003363281, -0.1498294771, -0.0392137654, 0.1531568319, -0.0463619307, 0.1029017568, -0.1570226103, -0.0554135740, 0.0069525065, 0.2807867229, -0.1122547612, -0.1675576270, 0.0490948670, 0.0939687788, -0.0720061511, -0.1499773711, -0.0762571469, 0.0374719761, -0.2763519287, 0.1973225474, 0.1013795733, 0.0970448852, 0.0800785348, 0.2424854040, 0.1127326414, 0.0387133509, -0.1044816598, 0.0110619683, -0.1083403602, 0.0754472613, 0.0329329073, -0.0888724923, -0.0865235031, 0.0059042452, 0.0417108200, 0.0233764593, -0.0172848962, -0.0253701564, -0.0476287715, -0.2519169152, 0.1558747888, -0.0169285554, 0.1901493669, -0.1055333391, 0.2368734628, 0.2073532790, -0.0279443394, 0.1128267124, 0.0531359278, -0.1635224223, -0.0506999977, 0.0745980367, -0.0298224483, -0.1529235691, -0.1594256014, -0.0174946394, 0.0687283874, 0.1291966140, -0.1389434636, -0.0082092043, -0.0364734046, 0.2059041262, 0.1098208204, -0.1451268643, 0.2035674602, -0.1182737201, 0.1158587635, 0.1566505134, 0.1936099678, 0.0246828552, 0.1406405270, 0.1003301665, 0.2317090780, -0.2073857635, 0.1211310327, 0.1071884185, -0.0459020212, -0.1316223145, 0.1585011482, 0.0018717932, 0.1936931759, -0.0385472663, -0.2191288173, 0.0674840137, -0.1779672951, -0.2414191514, -0.1351958364, 0.0899740905, 0.0543041080, 0.1228066012, 0.0446357839, 0.2020074725, 0.2210167646, -0.1218242869, 0.1199017093, 0.2029955238, -0.0919233486, -0.1689333916, -0.1170550585, 0.1220063865, 0.0986233056, 0.0110101374, -0.0640388578, 0.0375797227, -0.0507500991, -0.1628223956, 0.0433720835, 0.1309713721, 0.0573835149, -0.1660088897, -0.2073177248, -0.0843693167, -0.0463836044, 0.0096255066, 0.1622183621, 0.2552921474, 0.2055116445, 0.0446551703, -0.0034360471, -0.2452435493, -0.0102358377, 0.0322979614, -0.0668650493, 0.1228364706, 0.1715004742, -0.0267890710, -0.1133380905, -0.0265389271, 0.2558411360, -0.2458659708, 0.1993832588, -0.0949377716, -0.0228241999, -0.0878977701, 0.0417534672, -0.0727755502, -0.1756529361, -0.0796804726, -0.1801910400, -0.0418744981, 0.0173893161, 0.1066901982, 0.0260992032, 0.0603888519, -0.1966365725, -0.0787011310, 0.2370900065, -0.1574712843, 0.0228345357, 0.0005679952, -0.1180091873, 0.0305677112, 0.0344086960, -0.0921568051, -0.1412819177, -0.0922793224, 0.1286798567, -0.0312799439, -0.2530975640, -0.0749403909, 0.1514112949, -0.0311495960, 0.0990853533, 0.0542762689, -0.0207094029, -0.1008657813, 0.1749913990, -0.0503903888, 0.0338871777, -0.0893015936, 0.1312224567, -0.0519794151, 0.0515043512, 0.1598563492, 0.0927130282, -0.0747467354, 0.0252383258, 0.0946277156, 0.0497398376, -0.1069653034, 0.0889516920, 0.1093280092, 0.0241716243, -0.2238543183, 0.2329119146, 0.0131388241, -0.0472019948, 0.0376754142, 0.0551626086, -0.1469527632, -0.0569216125, -0.1259918809, 0.1403508782, -0.1419749260, 0.0365058817, 0.0057000509, -0.1581356525, -0.0747212470, 0.0865409076, 0.0709516406, 0.0358431078, -0.0642015785, -0.0119053554, -0.0034872661, -0.0586259775, -0.1922899187, 0.2635471821, 0.0441371389, 0.0422779210, 0.0723789483, 0.2689229250, -0.0069386177, 0.0024639731, -0.0777947754, 0.1052604616, 0.1751003563, 0.0923762694, -0.1739238352, -0.1363785118, -0.1989022791, -0.0077616982, -0.0556255355, -0.0615438372, 0.1618353128, 0.0235746875, -0.2110446841, -0.0632016212, -0.1109074578, 0.0882746652, -0.0974898338, 0.1189666539, -0.1056494191, -0.1133686304, -0.1215918362, 0.0121257305, -0.1039208397, 0.0311412420, 0.0081362426, -0.1118138433, -0.0287245698, -0.1958910823, -0.0830907673, 0.0475094467, 0.1220813394, -0.0731752291, 0.1948267967, -0.1014896855, -0.0878337622, 0.0878925622, -0.0500919409, 0.0198302995, -0.1156145781, -0.2342527360, 0.1161451191, 0.0159324035, 0.0829639211, -0.1577412188, -0.1497322619, -0.1241300702, 0.0561776422, -0.1306609660, -0.0334121361, 0.0209641941, 0.1200274974, 0.0946182311, 0.0737296790, -0.2145952284, 0.1120794863, -0.1135052592, 0.0872725844, 0.1225068569, 0.0085696205, 0.1072709486, 0.2781715691, -0.0624448992, -0.2792804241, -0.0845342427, -0.1044317931, -0.1125978529, -0.1076726094, 0.0714555234, 0.0736863986, -0.2389338464, 0.1631528586, 0.0921813473, 0.0109464154, -0.1202228293, 0.0895861834, 0.0756536573, -0.0148696909, -0.1225632429, -0.1197000071, 0.1075653657, -0.0694435388, -0.0269730277, -0.0047962684, -0.0386355296, 0.0725459903, -0.0167224072, -0.0337361805, -0.1362666935, -0.2288179845, 0.1970409602, -0.2121595889, 0.0156360455, 0.0782792568, -0.0016213512, 0.1506036967, -0.0180038512, -0.0747877434, -0.2319277227, 0.0509228110, -0.2613018751, -0.1643062383, -0.0327576585, 0.2219853997, -0.0336099640, 0.0313201770, -0.0769324228, 0.2460320443, 0.0955657214, 0.1134980172, -0.2130829543, 0.2494611144, 0.0260567628, 0.0074728429, 0.0937702209, 0.0469306745, -0.1727881879, -0.0240877252, -0.2512202263, -0.0806332007, -0.1087522805, -0.1472962648, -0.0207630489, -0.0163498744, -0.0715712756, 0.1272619516, 0.0559103750, 0.1715729237, 0.0003029031, 0.1069708318, -0.2800058424, -0.2425629795, 0.0204097498, -0.0762730017, 0.0423471183, 0.1866840124, 0.0585639812, 0.0878690854, -0.1969554573, -0.0661569387, -0.0011559338, 0.0389964394, -0.0273196567, -0.0443395860, -0.2267617881, 0.0176857579, 0.0831431672, -0.1011721715, -0.0002356163, -0.1829462349, -0.0106662251, -0.0523805991, 0.0061149020, 0.2796348929, 0.0093235951, -0.1055601984, 0.0894287452, 0.0527967848, -0.0305214971, 0.0545109883, -0.0456922688, -0.1743279099, -0.1604249775, 0.1269570589, 0.0246365294, -0.1618099362, 0.0873033851, 0.0199315939, -0.1275111437, -0.0339810736, 0.0320280939, 0.0217847098, 0.2245263457, -0.1981040984, 0.0882423893, 0.0513038784, -0.0423428789, 0.0526453890, 0.1395258009, 0.2687161863, -0.1963631213, 0.1275983006, 0.1537289768, 0.1091664732, -0.0717501342, -0.1675764918, 0.1721488237, -0.0234173983, -0.0435673036, 0.0061792876, 0.2577598393, -0.0696627870, 0.1436095685, -0.0881590992, 0.1676584482, 0.1099210382, -0.0109948972, -0.1409428269, 0.2351819873, -0.1626371741, -0.0058863177, -0.1088045686, 0.1148061380, 0.2048729956, -0.1100318730, -0.0746854991, -0.1537192613, 0.0829526633, -0.0920087174, -0.0338801853, -0.2269004583, 0.0177016705, -0.1539446115, -0.0665114149, 0.0873802304, 0.1686195284, 0.0800383016, 0.1082989126, 0.0620342121, -0.0543647967, 0.1173612624, -0.1151211485, -0.1353139430, 0.0348237418, -0.0113610635, -0.2476200312, 0.1150570959, -0.1395511776, -0.1266458333, -0.1997022778, -0.0695610493, 0.0402665325, 0.0482610092, -0.0204643440, 0.1199064702, 0.1689254344, 0.0047456510, -0.1573837996, -0.1928660125, 0.0417847298, -0.1008789390, 0.1923827827, -0.0549034514, 0.0583839044, 0.0095493114, -0.1395071596, -0.2204231471, 0.0049093589, -0.0175930839, 0.1554156989, 0.2003758252, 0.1099143326, -0.1134012640, 0.2223002762, 0.0017644941, -0.0118694110, -0.1971624643, 0.1002247408, 0.1602613032, -0.0828317851, -0.0336619318, 0.0046252166, 0.0964297056, 0.0348538086, 0.0363962539, 0.1584023982, 0.0501661003, -0.0512952022, -0.0752688348, 0.0230742097, 0.0452854037, 0.1132073849, -0.2311657369, 0.2463659793, -0.1555912644, -0.1228434667, 0.2470717877, 0.0467164926, 0.0105161890, 0.0978470519, -0.1808934063, -0.0442885384, 0.0118451240, -0.0355723761, 0.0078131398, -0.1223267689, 0.0435978435, 0.0822713822, 0.0170881208, 0.2585394382, -0.0328427143, -0.0196493566, -0.1354469657, 0.1273362339, 0.1349771917, -0.0655189976, 0.2820480466, 0.0647944957, 0.0122796437, -0.1402912587, 0.0777266771, -0.0149811022, -0.2003890127, 0.0288325418, 0.0267171524, 0.0405271538, -0.0202341229, 0.1985786110, -0.0819439366, -0.1465463340, -0.0639126897, 0.2159439325, -0.0993688181, -0.1840683222, 0.1402793229, -0.0307716466, -0.0185040813, 0.0182114784, 0.0345568061, 0.2294237316, 0.1028290242, -0.0768214539, -0.0709902719, 0.0524514094, -0.1204845682, -0.1419256926, 0.1571626663, -0.0188566484, 0.0221031029, 0.0703927502, 0.1191446632, 0.0392519049, 0.0938809812, 0.1260266602, -0.2494362593, -0.0609424263, 0.0049109999, -0.1655674875, -0.0709339753, -0.1110594645, 0.0145544279, -0.1080921665, 0.0011208518, 0.1372332275, 0.0864086747, -0.0848755017, 0.1012299359, -0.0417758040, -0.0825434774, -0.0790248290, -0.0168053377, 0.1147428229, -0.1921694428, -0.1650673002, 0.0717024058, -0.0398599170, 0.1777052581, -0.0027135618, -0.2166291475, -0.0566257909, -0.1036418080, 0.0864318386, 0.1075900123, -0.0576368943, 0.0553169884, 0.1031983718, -0.0977590904, -0.1200658083, -0.1416831315, -0.0838777646, -0.1641670316, -0.1816065907, 0.2397931814, 0.1651659012, 0.0673471838, 0.0935365111, 0.2604559660, -0.1628740132, -0.0649156868, -0.0776430070, 0.1944858581, -0.0498043820, -0.2452133149, -0.0866303816, -0.1032999903, -0.0784120858, -0.0484918989, -0.0935923830, -0.1988593340, 0.0700904280, -0.2483527809, -0.1953277588, 0.0226748977, -0.0003768837, 0.0787177831, 0.1485809088, -0.0543927178, 0.1033464596, -0.1240219995, 0.0353535749, -0.0226212256, -0.0392144285, 0.0677918419, -0.1011119336, 0.1376063079, -0.0162146129, -0.0507458001, 0.0151415430, -0.0304349605, 0.2272323668, 0.0687792823, -0.0272530578, -0.1268688440, -0.0027366527, -0.1450280249, 0.1974282563, 0.2281563133, 0.1658483744, -0.1500401944, -0.0626911372, 0.1091413870, 0.1103918031, 0.0195844453, -0.1877927333, -0.2407271415, 0.0204276629, -0.1991109848, 0.1078337952, 0.2322292328, -0.0345206857, 0.0243209451, -0.0989940092, -0.0023800121, -0.1503327042, 0.0387003869, 0.0364896953, 0.1119778529, -0.1825525314, 0.0184180681, 0.0002568935, 0.1528409868, 0.1316561401, -0.0357653499, 0.0906445384, 0.0702421069, 0.0205663573, -0.0478607118, -0.0945192426, 0.2285826206, -0.1898140013, -0.1124989912, 0.1340660602, 0.0861167908, -0.0883673579, 0.0730057657, -0.0063602021, -0.0707652345, -0.0424918756, 0.0011746276, 0.0646778643, 0.0233990029, 0.1518601924, -0.0542838387, -0.0597888976, 0.0648350045, -0.0445285812, -0.0118657844, -0.2469221205, -0.1050363183, -0.0884944201, 0.1088562608, 0.1110386476, 0.0444164500, -0.1419787854, -0.0262079779, 0.1603249907, 0.1762543768, 0.0410808995, -0.2120177448, -0.0025776455, 0.0060398234, 0.0128331147, 0.1175114140, 0.1990932524, -0.2243731767, 0.0008416336, 0.0524806865, -0.0730393529, 0.0212043449, 0.1318244785, -0.0343573466, -0.0141167305, 0.0393753089, -0.1778122783, 0.0844065323, 0.0590562858, 0.0481542163, 0.0018883065, -0.1154121608, 0.1724322438, -0.0568187013, -0.0377808139, 0.0535663366, 0.1155437082, 0.0331730321, -0.1194542721, 0.2633261979, 0.0993356183, -0.0503263250, 0.1335284114, 0.1201944053, 0.2681748569, -0.0105740642, -0.0309845880, 0.1529880613, 0.1585464478, 0.0905269310, 0.0183245931, -0.0039771842, 0.0177063029, 0.2170118093, -0.0920768008, -0.0223522354, -0.0894614682, -0.1113230437, -0.1333681345, 0.1384573430, -0.2520230114, 0.0694418475, -0.2205304056, 0.0339613557, 0.0208533294, -0.0367816426, -0.0382952057, -0.0218840837, -0.0047282609, -0.0527909324, -0.2548044026, -0.0162142850, -0.0790477023, 0.2619231045, -0.2542819381, -0.2481203228, 0.0362343676, 0.0448443815, 0.1459242254, -0.1233138666, -0.1833234429, -0.0929227099, 0.0161468741, 0.1187428832, -0.0584132075, 0.0741949752, 0.1058204845, -0.0939441547, -0.0626787320, 0.1959719509, -0.2174724489, -0.1000518426, 0.2154137194, -0.0619368069, -0.0682197958, -0.1709729135, -0.1875717640, 0.2262886912, 0.0466526113, 0.0594860204, 0.0961293727, 0.1215549037, -0.1053058282, 0.1027565449, 0.1155612245, -0.0807697326, 0.0006191604, 0.2548973858, 0.0535552576, -0.0721724853, -0.1138949543, -0.2159214765, -0.0025973232, 0.0223685894, 0.0821677893, 0.0175003484, 0.0487740710, 0.1841288209, -0.0342137404, -0.1417092234, -0.1372302622, 0.1472870409, -0.1060647666, -0.0301424265, -0.0406708866, 0.0814322159, 0.0696919933, -0.0860820636, 0.0592533648, -0.0692171901, -0.2097706795, -0.1234169751, -0.1286083609, -0.0975210741, -0.2487273216, 0.0806344822, -0.1531578749, -0.1319440752, 0.0319796391, 0.0107401442, 0.0954651535, -0.1531481147, -0.1676996201, -0.0282259211, 0.1215281934, 0.1183531731, 0.1374136508, -0.1667359918, -0.1459420323, 0.1439950764, -0.2377039790, 0.2775310576, 0.0702200979, -0.0010285652, 0.0635071173, -0.1102766767, -0.1263236254, 0.1353456825, -0.2013054788, 0.0354369953, -0.0254184566, -0.1423698813, 0.1286472380, -0.1120366454, -0.0413187779, -0.0288625006, -0.0319955051, -0.1044907197, -0.1938141435, -0.1200116277, -0.0780730397, -0.0048991209, 0.0946137756, 0.2290814966, -0.2186683565, -0.1169112176, 0.0033702576, -0.0209005941, -0.1320036352, -0.0886030421, 0.0738009810, 0.0175088923, -0.1820545048, -0.0465041809, -0.0587678924, 0.1200003028, 0.0508429296, -0.0923581645, 0.1615094393, -0.0325486213, 0.0326360539, -0.1107266471, -0.0363033600, 0.1700242758, -0.0003099192, 0.1054008827, -0.0047622770, -0.1964764297, 0.0992684215, -0.0987346396, 0.1131313294, 0.1635044515, -0.0077002333, -0.0820291564, -0.2198669463, -0.1440834403, 0.0749490783, 0.0074821608, -0.1805543751, 0.1997314245, -0.1178070605, -0.1364268363, 0.1523765326, 0.1074574515, -0.0093571357, 0.1510843337, 0.2568978071, 0.2399957776, 0.1265776008, -0.0978880599, -0.1301759183, 0.1558497995, 0.0309970509, 0.0972913429, -0.0079085650, 0.0782529414, -0.2666091919, -0.1409358680, -0.1662402600, -0.0035676744, -0.0226260442, -0.0552364103, 0.0826801956, -0.0609584935, -0.0702475756, 0.0251210462, 0.0243764631, 0.0250878986, -0.0233844761, -0.0192090105, 0.0239602663, 0.0478695668, 0.1408236474, -0.2044830769, -0.2329882830, -0.0785103887, 0.0825144425, 0.2089706510, 0.1284847856, 0.0373781398, 0.0301165543, 0.1075410470, 0.1214394495, 0.0161252711, -0.2286025137, 0.1936907172, -0.0036749607, 0.1732276529, -0.1148687527, 0.0057094856, -0.1404205263, -0.0729126483, -0.1632815450, 0.0871236995, 0.0852904543, 0.1586935669, -0.0884127095, -0.0795639008, -0.1739000380, -0.0521805659, -0.1533484757, 0.2565614581, 0.2499522716, 0.1655664891, -0.1851582527, 0.1382214427, 0.1479276717, -0.0534189567, 0.1407589018, -0.0047211661, -0.0835339651, -0.0321680829, -0.1888088435, 0.0498470515, 0.1560395956, 0.1594458669, -0.1268342435, -0.0190147609, -0.1164666191, 0.1063164994, -0.0603183955, 0.0050911303, 0.1839839965, 0.1146668643, -0.0676222742, 0.0672175139, -0.0463741794, -0.1745712757, 0.1294701248, -0.0795182139, -0.0589229017, 0.2641117275, 0.0198360141, -0.0725577325, 0.0215181522, 0.2060948014, 0.0755779296, -0.1830374449, 0.0037927723, 0.1474205703, -0.1967084557, 0.0878607035, -0.1389485151, 0.2586294115, -0.1463621855, 0.0546694286, -0.0489397533, 0.1074683890, -0.0217338670, -0.0651587322, 0.0553188026, 0.0866421014, -0.0082830293, 0.0094871446, 0.0593240000, 0.0879972801, 0.0597277395, -0.1539161205, 0.1351027340, 0.0319864601, 0.0495495945, -0.0333961658, -0.0439506322, -0.0770004913, -0.2787897885, -0.0089847501, -0.0378124602, -0.1182829291, 0.0274936985, 0.0263929963, 0.2417413145, -0.1569431722, 0.1500964463, -0.2664071321, -0.2590891123, -0.1040218100, 0.1016969830, 0.0751721933, 0.1843594909, 0.0476037115, 0.1262059361, -0.1833807379, -0.1612122953, -0.0292906687, 0.1688203514, -0.0007211493, 0.0764456019, 0.1512473971, 0.0909965411, 0.1222573444, 0.2057609260, 0.1775518805, -0.0388737507, -0.0225301292, 0.0025919417, 0.1285147518, -0.0131825488, -0.0527782515, -0.0051399563, 0.0305890236, 0.1382575631, 0.0300981868, 0.0376350805, 0.0576629564, -0.0031355987, -0.0768377930, 0.1365765035, -0.0651149973, -0.1892771572, -0.0749817044, -0.1964926720, -0.1642978042, -0.1011128724, 0.0116676660, 0.1776956618, -0.2103018612, 0.0504681543, 0.0616653450, -0.0416301787, 0.1042544693, 0.0585126430, 0.0195194632, -0.0760832876, 0.1580986828, 0.1807668507, 0.0589249767, 0.0611188486, -0.0134938704, 0.2144793123, 0.0024218617, -0.2072228044, -0.1263432652, -0.2333904803, -0.1314873844, 0.0413273051, 0.1033148244, -0.1712005138, -0.0831064731, -0.0760711357, -0.1232573092, -0.1540937126, -0.1356423646, -0.0378190503, 0.0263505355, 0.1665008366, 0.1360954344, 0.1613580734, 0.0961654633, 0.2383764088, -0.1724779755, -0.2532976866, -0.0977565572, -0.0702181980, 0.1698430330, -0.0407181978, 0.0059187822, -0.1145090461, -0.0653593466, -0.0893781111, -0.1403170973, -0.0974218920, 0.0407424122, -0.0438905694, 0.1843900681, 0.0896760225, -0.2042420208, -0.0138217751, 0.0582601912, 0.0197470933, -0.0978900492, -0.1696711332, 0.0027113762, -0.0139150647, 0.0050369063, 0.0122568347, -0.1331151873, -0.2547998428, -0.2394562066, 0.0806281641, -0.0412811786, 0.0615464561, -0.2271334231, 0.0034444910, -0.1771495789, -0.0678000376, -0.0337279364, -0.1485349387, 0.0187150482, 0.1943692714, 0.0760393217, 0.2070227265, 0.0823515281, -0.1683912128, 0.0682699904, 0.0981623977, -0.1944483817, -0.1974931210, 0.0233873725, -0.0255173761, -0.0128438920, 0.0554138571, -0.0987866595, -0.1342791021, 0.1429865211, 0.0692690760, 0.1245599985, 0.0423095711, 0.0072555840, -0.0495319180, 0.1765090674, 0.1598720998, -0.1064626724, 0.0538936369, -0.0401800685, 0.0587974824, 0.2376777679, 0.0409103334, -0.0528339520, -0.0909072459, -0.1016787663, 0.0922411606, 0.2071563751, 0.0977445170, -0.0020741832, 0.1417009383, -0.0223809741, 0.1827409267, -0.0433499888, 0.1564484835, -0.0192921497, -0.0493759401, -0.1889459491, -0.0858152807, 0.0323721133, -0.0092702070, -0.0134824421, 0.0151206227, 0.1593037248, -0.0390875451, -0.1451113969, -0.2249798328, 0.0011168909, 0.0365209170, 0.1128037274, 0.0639379099, -0.1463402510, -0.0013445672, -0.0880359188, -0.0238043554, 0.0671658888, 0.1401822567, -0.0950365439, -0.1334178448, 0.0222608391, 0.0960912034, 0.0220192745, -0.0183256436, 0.0426303595, 0.2078228444, -0.2245659232, -0.1395071149, -0.0393012166, -0.0195403956, -0.0618903860, 0.0439608991, -0.0885564238, -0.0367819481, -0.0069732815, 0.1026412100, 0.0344591998, -0.0007736997, -0.0956078470, 0.1202511862, -0.0191529226, -0.1394245028, 0.1181403771, -0.0545528568, 0.0930633396, 0.1000021696, -0.0216193087, -0.2062225640, 0.1204963326, 0.0042058052, -0.1560809761, -0.0804827735, -0.0845002308, -0.0346155800, 0.0889601037, 0.2818315327, -0.1295071244, 0.1511510909, -0.1833975017, -0.1153245196, -0.1293957084, -0.1092630625, -0.1366452724, 0.1270113438, 0.0189558696, -0.0486675762, -0.1217203736, -0.0306008328, 0.0329564102, 0.1630827785, -0.1782762408, -0.0349072404, -0.0260673799, 0.1246749088, -0.1006618813, -0.2746230364, -0.1531294286, -0.1111373380, 0.1977425218, 0.0696866438, -0.1827707440, 0.0171420164, 0.0449902080, 0.0243986025, -0.1995232105, -0.0954187065, -0.1144296452, -0.1109350249, 0.1217361763, 0.0458189435, 0.0942983255, -0.2241728306, 0.0189609788, 0.0481905900, 0.0699869841, -0.0453632697, -0.0686051175, -0.1555207074, 0.1361660510, -0.0765266567, -0.0022958831, 0.1642852128, -0.0250179544, -0.0925019607, 0.0241331030, 0.0016603891, 0.0504914261, -0.1737397909, -0.1782560945, 0.0670181438, -0.0548200794, 0.1136095524, -0.0607586130, -0.0750536695, 0.0869252309, 0.0819270387, 0.0197397787, -0.1134560928, 0.0910980403, -0.1746686995, 0.0805573538, 0.1139186546, -0.0854857042, -0.0434137881, 0.1101657525, -0.2288411856, 0.1213353053, 0.0736803412, 0.0189241171, 0.0455350615, 0.0776749104, -0.2096290588, 0.0003705506, 0.0210971665, 0.1200010777, 0.0712441728, 0.1823987365, -0.0240063760, -0.1222300306, 0.0924927890, 0.1126824841, -0.1244795769, -0.2497187853, -0.0468514189, -0.2422454655, -0.0084424093, 0.0605334528, -0.1013549119, 0.1364817321, 0.1164261475, -0.0345961228, -0.0406133197, -0.1423232108, 0.0261628851, -0.1369574666, 0.0011247253, 0.0623027235, -0.0478983372, 0.0132323811, -0.0120380893, 0.0359772667, -0.0851093084, 0.0325544961, 0.2042546421, 0.0360956080, -0.1466317475, -0.0667654127, -0.0927617699, 0.0193861891, 0.0378598087, 0.0090475436, 0.0978714898, -0.0825338364, -0.0159349460, 0.0083684847, 0.0641667396, 0.1413521171, -0.0515407771, -0.1902232170, 0.1411566436, 0.0278705750, 0.0194184035, -0.2163229436, -0.0184513610, 0.0076892963, -0.1711381227, 0.0343885273, -0.2698806524, 0.0786521658, -0.1502617002, 0.0401171595, -0.0598954000, 0.1253169626, -0.0877186134, -0.0251565613, -0.1319382489, -0.1652172506, 0.0088226888, 0.1036743820, 0.1571462750, -0.1817155033, -0.1525018811, 0.0673482791, -0.0616971180, 0.0223941207, 0.1027741954, 0.2276496440, -0.1684165597, -0.1191913337, -0.1005589664, -0.0487088040, 0.1443149149, 0.1518062353, -0.0349353664, -0.1399665773, -0.0511539578, 0.0287630018, 0.1440281570, 0.1144899800, -0.1505434364, 0.0962371230, -0.1071991846, 0.0445082188, -0.1364599019, -0.0544726774, -0.0695748925, 0.0057010478, -0.0725463778, 0.0940929279, 0.1453650445, 0.0516662262, -0.2166960090, 0.0197840780, 0.0088972542, 0.0845945030, 0.0242953319, -0.1047930345, -0.0872240886, -0.1182156503, 0.0652316138, 0.1195227206, 0.1638699919, -0.0575188138, -0.0312870741, -0.0888257548, -0.0633904710, 0.0335957631, -0.0429150350, 0.1030676067, 0.0931228027, -0.2594383955, -0.0225628968, 0.1178270876, 0.1483033001, -0.2005035132, 0.0594904274, 0.1275360286, -0.1330929548, 0.1913901269, 0.0761058703, -0.2120004445, -0.0931122005, 0.0999432802, 0.0866209939, -0.0449216142, 0.2627189159, 0.2258723527, 0.0496296957, -0.1091053337, 0.1295202374, 0.0610883646, -0.0204890557, 0.0218292177, -0.0441183224, 0.1051154658, 0.1282701194, 0.1541890949, -0.1367495507, -0.0946702436, 0.0883460641, -0.0431129262, 0.1073084474, -0.0163603947, -0.0813939422, 0.0174172949, 0.1624875665, 0.1427165270, -0.0485617220, -0.0074650375, -0.0706423149, -0.0669197291, 0.0664670393, -0.0124057885, -0.0514855608, -0.0321716927, -0.1304687858, 0.0495771840, 0.0955506787, 0.1197053492, -0.0777199939, 0.0404785052, 0.1137500778, 0.0341816247, -0.0073594903, -0.1584113538, 0.0554708615, 0.0099270353, -0.0946913585, -0.2837923765, 0.1370309591, 0.1492772251, -0.0522498228, 0.1276767552, -0.0442402512, -0.0792794898, 0.1018121243, 0.2131096423, -0.0532978363, -0.1990685463, -0.1390427202, -0.1608387828, -0.0222412366, 0.0259169396, 0.1285390407, 0.0391199812, 0.0445398875, 0.0538850613, 0.1241238564, -0.0306260586, 0.1244867146, 0.1909726858, 0.0526503474, 0.0886441693, -0.0622744672, 0.0441092812, -0.0395726934, -0.2012223601, 0.0516318157, -0.0574730001, 0.0190736409, 0.1008326411, -0.2685533762, 0.0349961556, 0.1148175895, -0.1195252910, -0.0091681676, -0.2211887985, 0.1359425187, -0.1194650829, 0.2066830993, 0.0684803426, 0.0284226239, -0.1686647087, 0.0280407649, -0.0018411293, -0.0671674684, -0.0473605804, 0.0626677722, 0.1250393540, 0.0182577521, -0.0266651604, 0.2441833913, -0.1179804355, 0.0176405217, -0.1031799912, -0.0456330180, -0.0283451453, -0.0884935185, 0.0895114690, -0.0425023660, 0.1441668570, -0.0065430556, 0.2497585267, 0.0492771156, 0.1551378220, 0.0033536376, -0.0316095874, -0.1286948919, 0.0122738006, 0.1099178642, -0.0392919593, 0.0226848368, 0.1018121466, 0.1423446983, -0.1536288112, -0.0270500164, -0.0081034042, -0.0396395214, 0.0336581804, -0.1386073232, 0.0358038507, 0.2224217504, 0.1593502015, 0.0498496704, 0.1154541969, 0.0243691187, 0.1802704483, -0.0549033694, 0.0186169706, 0.0402855389, 0.0634965301, -0.0248531513, 0.1061745137, -0.1501101255, 0.0476480052, 0.1871487796, 0.1771873385, 0.0482171848, 0.0432195589, -0.0559374578, 0.0326503366, -0.0883828700, 0.1104036644, 0.1461995244, -0.1617849618, 0.2674304247, 0.0504122227, -0.1212035418, -0.1263666004, 0.1167029664, 0.2017871737, 0.0135907540, -0.0806672275, 0.0742082596, 0.2327352017, -0.0916114226, -0.0396015048, 0.1242023259, -0.0126620904, -0.2580888271, 0.2300688624, -0.0452078022, -0.0071999598, 0.0104104960, 0.0011182372, 0.1742097288, -0.0423178114, -0.0799829513, 0.0092437705, 0.0061013885, -0.1366768330, -0.0614512451, 0.0391391367, 0.0231880117, 0.0479837209, -0.0058050533, -0.1823361516, 0.0412419364, 0.0927727297, -0.1135616750, 0.0451289713, 0.0188743491, 0.1290792674, 0.1140305474, -0.0184744876, 0.0702910647, 0.0392960049, 0.0404776148, -0.0907664374, 0.0826023892, 0.1619353443, 0.2097908854, 0.0661584735, -0.0332443565, 0.0648094192, 0.0056053577, -0.1161534861, -0.1113247499, 0.1435371935, 0.0413525589, 0.0999187827, -0.0418157615, 0.1245195866, -0.0311923679, 0.1100510508, 0.0070553152, -0.2216528356, -0.1366125494, -0.0178778656, 0.2422908247, 0.0365245119, 0.0073110224, 0.0147967599, 0.2608832419, 0.0125822052, -0.1012875736, -0.0358757451, -0.0672734976, -0.0802929848, -0.1699870825, 0.0078964112, 0.0502785556, 0.0640230477, -0.1101689562, -0.1892282814, 0.0012654727, -0.2102678120, -0.1558739692, -0.0276535973, 0.0131081734, -0.1277859062, 0.1435704678, 0.0992844701, 0.0134447571, 0.1388272196, 0.1181421950, 0.0409242511, -0.1724696457, 0.1482815146, -0.0260439925, 0.1067881957, -0.0121762222, -0.0642595813, -0.0426165164, 0.1063634381, 0.0916575715, 0.1042561308, -0.0956962332, -0.0660237893, 0.0017740957, -0.0411671177, -0.1331150532, 0.1024846882, -0.0388048142, 0.1338192523, 0.1812471151, 0.2794617116, -0.1337928772, -0.1823588908, -0.0929278135, -0.1839440018, -0.0477572232, 0.0744414032, 0.0638911128, 0.0442275926, -0.0886769220, -0.0563902371, -0.2107889056, 0.1120544970, -0.1856064200, 0.0888938010, -0.0759978145, -0.2186251879, -0.0994179845, -0.0009937130, -0.0601095855, -0.0812764242, -0.0108974781, -0.2598437965, 0.0831651762, 0.0758141652, 0.1058204174, -0.0528843999, -0.0146553181, -0.1255665272, -0.2361944616, -0.0558864065, -0.0909834132, -0.1690220833, 0.0417763442, -0.0269966200, 0.0368765444, -0.2512378693, 0.1695792526, 0.0491763726, 0.0285772588, -0.2468811274, 0.1932868510, -0.0413375758, 0.1080501974, 0.0147246830, -0.0050039589, 0.0318861753, -0.0495396815, -0.2232841849, -0.0978373960, 0.0419428721, 0.1663086563, -0.2378428131, -0.0824391767, -0.0341946557, -0.0974505395, -0.0962593183, 0.1098115742, -0.1508387625, -0.2554426193, -0.0502896085, -0.0275519136, 0.1260282397, 0.0719377324, 0.0904082358, 0.0687263310, 0.1796631813, 0.1896188259, -0.1079478115, 0.0226345100, -0.0490308665, 0.2289468050, -0.0208055619, 0.1160874590, 0.0284767207, -0.1513538063, -0.1692643613, -0.0911108479, 0.2703876495, 0.1212293133, -0.1729158759, 0.0497795492, -0.1867419928, -0.1504303366, -0.0487975553, -0.0368231498, -0.0463376269, -0.0763869882, -0.0430384018, 0.1352255493, -0.1357861906, 0.0366106965, -0.1648894846, 0.0430445559, -0.2129276395, -0.2290389091, -0.0482298769, 0.0364397615, -0.2081963271, -0.0606932528, 0.2631736100, -0.0165409986, -0.1221023276, 0.2099677920, -0.1472306252, -0.1406542212, 0.0798531324, 0.0010486861, -0.0850820541, -0.0481393412, -0.1915863603, -0.1121407747, -0.1557955593, -0.0082399501, -0.0415284187, 0.0966157690, 0.2521824539, 0.0205188803, 0.1179560721, -0.0809333697, 0.0906451568, -0.1773222238, -0.2120944858, 0.0267491136, -0.0176938903, 0.0441616513, 0.1727578342, 0.0309583787, -0.0025079420, 0.0412441529, -0.2043856531, -0.1473805606, -0.1082245484, -0.2099220306, -0.0720300153, -0.1339351237, -0.0684801489, -0.0565715060, -0.0640468895, -0.1689685434, 0.1876429617, -0.0123769632, 0.0297602694, -0.1805551499, -0.1295522004, 0.0329549573, -0.1903993785, 0.0955342576, -0.1164878234, -0.0737628639, 0.1517168283, 0.0440397002, 0.1402621716, -0.0199160222, 0.2666736543, -0.0282065310, -0.0264266152, 0.1230145469, -0.1431432664, 0.0876857638, 0.1833455712, -0.0190740954, -0.1085312068, -0.0314538367, -0.0409418382, -0.0134565700, 0.0531127192, -0.1499777734, 0.0619325005, 0.0110656554, -0.2473819852, -0.1585231274, -0.0231980290, -0.2146285921, 0.1097912490, -0.0132353315, 0.0703262836, -0.2502069473, -0.1003756449, 0.0671642348, 0.0807858855, 0.0255232994, 0.1700045168, -0.0503345393, -0.0271224696, 0.0360924117, -0.1774308830, 0.1699724644, -0.0695407689, 0.0928510204, -0.0479616746, -0.1400260925, -0.1270324588, -0.0476424620, 0.0046989699, -0.1076349765, -0.0877682269, 0.1044025794, -0.0696007311, -0.1246250868, 0.0744617581, 0.1295917630, -0.0534715764, 0.1530101746, 0.1293529570, 0.0248036850, -0.0801023021, -0.1037154645, -0.0463001765, -0.2222362310, 0.1883527189, 0.0996746644, -0.1618059576, -0.0451173708, -0.0516824573, -0.0385547020, 0.0115088793, 0.0290203467, -0.1433655769, 0.0442520715, 0.0319080725, 0.1058122441, -0.0925009847, -0.2752650678, 0.0226948224, -0.0542894825, 0.0413121395, -0.0705674738, 0.1849475801, 0.0528628491, 0.2560102046, 0.0257464908, -0.0194898508, -0.1497054994, -0.1122886389, -0.1171998009, 0.2418385893, -0.0681335777, -0.0168894343, 0.0502121076, -0.1084120348, 0.0489915311, -0.0454534888, -0.0544068478, -0.0749329627, 0.0302426498, 0.0774384364, 0.2738156319, -0.1109666303, 0.0824896991, -0.0675153360, -0.1198863909, -0.0323880799, 0.0817538574, 0.2460883707, 0.0861785635, 0.2620181739, 0.1423435807, -0.0073590972, 0.1476103812, 0.1212386191, 0.1092447490, 0.2150733471, 0.0435478948, 0.2478438467, -0.1254023910, -0.0731506422, 0.1059069037, 0.0079783993, 0.0102761826, -0.2816433907, -0.1306199878, 0.1455880702, -0.0901651084, -0.2350875884, -0.0773695782, -0.0822293684, -0.0277097970, -0.1135201827, -0.0948925093, 0.0206536967, -0.1123262048, -0.0547525734, -0.0244467594, 0.0506239124, -0.0933058932, 0.1524357200, -0.0427981541, 0.0852904394, 0.1773277223, -0.0393144041, -0.0420881212, 0.0369884707, -0.0505156629, -0.0564325377, 0.0603132546, 0.0723102465, 0.2390315086, 0.0493457802, -0.0511669107, -0.1110545695, -0.0830703303, -0.0598695092, 0.0311686434, -0.0007179398, -0.1197556108, -0.0790586397, 0.1311041415, -0.0842760876, 0.1032682061, 0.0008847380, -0.0714317635, -0.1665898561, 0.0816925168, -0.2322103083, -0.2390415668, -0.2019833624, 0.1646710932, 0.0397094153, 0.0924654827, -0.0866691321, -0.0709847137, 0.0609668680, 0.0563291386, 0.1757993698, 0.0088522201, -0.2297872156, 0.0870173275, -0.1336097866, 0.1049509943, 0.0584989488, 0.1234645918, -0.0805477127, 0.1449033469, -0.0373711176, -0.0516415127, -0.0850273147, -0.0950250477, -0.0007916086, -0.0848467574, 0.1618256569, -0.0540777035, -0.1146644130, -0.0289186221, -0.0719678327, -0.0438640751, 0.0395811535, 0.0374007560, 0.1684287339, -0.2100561112, -0.0593835413, -0.2217334509, 0.0738314167, -0.0081330864, -0.1159289405, 0.0494066961, -0.0259343069, -0.1362685561, 0.0226373989, -0.0818317831, 0.0749251768, 0.0435702614, -0.1044989526, -0.0174652487, -0.1643820852, 0.0553154461, -0.0090588629, -0.1243687496, -0.1913433969, 0.1773609817, 0.0368143991, 0.1206178889, -0.1042883620, -0.0921393484, 0.1983363330, -0.1623101681, 0.0080769220, -0.0064671407, 0.0545168221, -0.0475912429, -0.0363664217, 0.0156026650, 0.0318009406, 0.1710421890, 0.2049345672, 0.1359926015, -0.0236672573, -0.0746338293, 0.1244442090, 0.2243773043, 0.1053790450, -0.1713829190, -0.0241995081, 0.1472533494, -0.0980431810, -0.1474097818, -0.1068627983, -0.2260822207, -0.0450465567, -0.0598934628, 0.0495887734, 0.0213948209, 0.0365950465, 0.0475948229, -0.0270039234, 0.2281579375, -0.0452962182, -0.1506930739, -0.1023459360, 0.0628833994, -0.0400213040, 0.1343101114, 0.0532714836, 0.0002853709, -0.2049317807, 0.0312007386, -0.1155935451, -0.0369144417, 0.0880006552, 0.0722951069, -0.1637705415, -0.0589036271, 0.1247744933, -0.1002394557, 0.1340880692, -0.1866404414, 0.1780515164, -0.0481248088, 0.0712523311, -0.2093442976, -0.0646382198, -0.1473255903, -0.0035153585, 0.0790713876, -0.0581084825, -0.0027997673, -0.0327267535, 0.0552545376, -0.0486549363, 0.0260797068, -0.1482355297, -0.1730418205, 0.2341704667, -0.1265242994, -0.2054558098, -0.1564636379, 0.1719962358, -0.1670925319, -0.0171614438, -0.0123448130, -0.1245993525, 0.0230932850, 0.0633416399, -0.1044593826, 0.0632314757, -0.0506827608, 0.0393159352, 0.2333406061, 0.0433984436, 0.0512730926, -0.2588809431, 0.0921540186, -0.0076914611, 0.0053359070, -0.0273388587, -0.1019461900, 0.2087209374, -0.1605892628, 0.0708171874, 0.1142131612, 0.0408620611, 0.0108868834, -0.1188834757, 0.2157306522, 0.1293323189, 0.0032076607, 0.1495844424, 0.0394115783, -0.0156395193, -0.2792057693, -0.1143309921, 0.0961201787, 0.0305734035, -0.1878076196, -0.0773886591, -0.0048919870, 0.0558783524, 0.1473088861, 0.2021180242, -0.0354636908, -0.0029910549, 0.0507155396, -0.1010341123, 0.0218242835, 0.0727212131, 0.0230188593, 0.0822025687, 0.1390934587, 0.0939232334, 0.1010102555, 0.0412186533, 0.1592049003, -0.1074127704, -0.0087365313, -0.0670138970, 0.1334483624, 0.0340327956, 0.0946286693, 0.1442350596, 0.1400249898, 0.0084594898, -0.1950959712, 0.2493682057, -0.0579345971, -0.2533488870, -0.1030169576, 0.1492785513, 0.1366780102, -0.1291064769, 0.0499338545, 0.0777607784, 0.0443914123, 0.0993036255, -0.1182191670, -0.1641860157, -0.0365247801, 0.1076158583, -0.2060905844, -0.0821762383, -0.1130801588, -0.2324020267, -0.1183314845, 0.0642395541, 0.1654787660, 0.1090819538, 0.0657090992, -0.2399927825, 0.0735005289, -0.0951796621, 0.0820054486, 0.0769130513, -0.0274508670, 0.0321589895, 0.0928901210, -0.0564149320, -0.0569736771, -0.0434385464, 0.0694830120, -0.2552303970, 0.0607932284, 0.2218692452, 0.0899188668, 0.1379603148, 0.1236182377, 0.0621971525, -0.0319787078, 0.0019385961, -0.0180741232, 0.2671518922, 0.1501868963, 0.0475994162, 0.0308098085, 0.0813001543, 0.0398645587, 0.0533490293, 0.1239574477, 0.0789292976, -0.1353379488, 0.1598162204, -0.0567397177, 0.0464732051, 0.1029425636, 0.0225967821, 0.1512762606, -0.0916332528, -0.0565540232, -0.0816906840, 0.2467987984, 0.1822662652, -0.0324727036, 0.1163338721, -0.2178579718, 0.0365447998, 0.1234178469, 0.1477223784, -0.1056410894, 0.1043174043, 0.0155085083, 0.0409978665, 0.0821036473, -0.0495198220, 0.0106469998, 0.0780948102, -0.0746916458, 0.0355790518, 0.1316604763, -0.0477976017, 0.0305040069, 0.0876246169, -0.1554577053, 0.1349682957, 0.0121470476, 0.0419382229, 0.2001396716, 0.0101945642, 0.0465962440, -0.1106038913, 0.0428835675, 0.0742533505, 0.1040092483, 0.0104221087, -0.0676190034, 0.0011295869, 0.0048294645, 0.1052662805, 0.0516810641, -0.1251927763, -0.0794911310, 0.0686308891, 0.1072287709, 0.1287537366, 0.0465557575, 0.0712457150, -0.0453399718, -0.0729277804, 0.0114614237, -0.0784578249, -0.0435432605, 0.1867731810, 0.0284854267, -0.1773923635, -0.2557573020, 0.1453365535, -0.1168099642, -0.2291208357, -0.1590680480, 0.1410281360, 0.2548284829, 0.0684461221, 0.0471452586, 0.2041847855, 0.1745371073, 0.1272374243, 0.0098013114, 0.1217889041, -0.1965425164, 0.2357776612, 0.1646268815, -0.1571387500, 0.0153225381, 0.1518133879, 0.0624660701, 0.0277366806, 0.1717908084, -0.0178403948, 0.0167673044, 0.1674180180, 0.1307857037, -0.0013892195, -0.0408317186, -0.0286977831, -0.0640490651, 0.2732747495, -0.1685262322, -0.1277527660, -0.0644456223, -0.0358384103, -0.1112409458, -0.0054030414, 0.1992266029, 0.1109457389, -0.1119455546, -0.1576747149, 0.0041208072, -0.1257471293, -0.0804014131, 0.1120215729, -0.0095333485, -0.2607387304, -0.2350414842, -0.0590178296, 0.1269216090, -0.1499215662, -0.2305431366, 0.1639963686, -0.0723055154, 0.1787206829, 0.1804962456, 0.2456951439, -0.0403298847, 0.1377470791, -0.0905938148, -0.0205199420, -0.0706867874, 0.1469584554, -0.1567673236, 0.0550239012, -0.2568739355, -0.0167950392, -0.1140502319, -0.0466450825, -0.1049697995, 0.0969906449, -0.1005417556, 0.1172505543, -0.0764992312, 0.0018091932, 0.1562431157, 0.0480591096, -0.0056728655, 0.0137246912, 0.0909380838, 0.1342605352, 0.1225346476, -0.0486171208, 0.1197960824, 0.0636789426, -0.2624453306, 0.0617603958, 0.1806532443, 0.1052912846, 0.0437317528, -0.0931696519, -0.2320406735, 0.2363294214, 0.0990118682, -0.1394899189, 0.1341214180, 0.0800656155, 0.2410578281, 0.0410138816, -0.1598294824, 0.2082570642, 0.0290824156, -0.1724814028, -0.0866900608, -0.0315494575, 0.0713438243, 0.0826058164, -0.0138562089, 0.2048725784, -0.1149813533, 0.0677367747, -0.0510068014, 0.0853966177, 0.0012069648, -0.2282731682, 0.2612667680, 0.1371432096, 0.2706393301, 0.0701423883, -0.1061787978, -0.2086833417, -0.1003277376, -0.0130644329, -0.1845329255, 0.2690468132, -0.2258033156, 0.0308240242, 0.0022656501, 0.0397748798, -0.1276466846, -0.0788117349, 0.0403238460, -0.0570643172, -0.1122584417, 0.1756359041, 0.0191727635, -0.1034520417, 0.1181013137, 0.0249927528, 0.0359842703, 0.0023216051, 0.0606031269, 0.2198279202, -0.0539684668, -0.1470656395, -0.0297699571, 0.0143204657, -0.1552325040, 0.0383424796, 0.1675636023, -0.1586386859, 0.0210346226, 0.1701947898, -0.0529168509, -0.0547295585, 0.0697139204, -0.1873040944, -0.0329757035, -0.1253820658, 0.0557124168, 0.0262853708, -0.0532758497, -0.1846040636, 0.0032770738, -0.1483022124, 0.0597346574, 0.1627528667, 0.1076383814, -0.0790667310, 0.1090060025, -0.2022307813, 0.2317230105, -0.1357625574, -0.0477816314, 0.0013990678, 0.1661759913, -0.0157417674, -0.0248706099, 0.0537256710, 0.0406985581, -0.1197577789, 0.0899760798, -0.0185654964, -0.0363220274, -0.0774596706, -0.0588372163, -0.0420970619, -0.2445720136, 0.0029578893, -0.0897891968, 0.0791097358, -0.0132248309, 0.1189368591, -0.0695668086, 0.0993466228, 0.2058379352, -0.0375280790, -0.1007988751, -0.1676509678, 0.0054363534, -0.0124243628, -0.0745622739, 0.0363120511, -0.1576198041, 0.0138755292, -0.0359794199, -0.0255293176, -0.0584504940, 0.1653239727, 0.1208297238, -0.0186724458, 0.0281606037, -0.0915650353, 0.0959798917, -0.1404813975, 0.2095113993, 0.0419875532, -0.0368697755, -0.0319824405, 0.0923326910, -0.1079067662, -0.2625776827, 0.1503010392, -0.0855952203, 0.1070263237, -0.1206030473, 0.0897306800, -0.0218831096, 0.0520059764, -0.0660179183, 0.0988121629, 0.1148229912, 0.0191229302, 0.0461559854, -0.1923993975, -0.1253420860, -0.0835758224, -0.1916357875, -0.1466164738, -0.0738970414, -0.0195897594, -0.0945131332, 0.0067984313, -0.0861959159, -0.1810040921, -0.2449115068, -0.0620986000, -0.1381728351, -0.0666223988, 0.0113870706, -0.0484581031, 0.1053042263, -0.0326384455, 0.0833938196, 0.1489133984, -0.0505582951, 0.1713817716, -0.1671458036, -0.1656107605, -0.0186744574, 0.0881840661, -0.0923329368, -0.0213686060, 0.0148915909, 0.0913535282, 0.0491727665, -0.0456643514, -0.0288921688, 0.1479841918, -0.0712312683, -0.0479413494, 0.0936829597, 0.2049589157, 0.1509406120, -0.0087574553, 0.0144967455, 0.0430194512, -0.0884044841, -0.0014563899, 0.2192155719, 0.0194958411, 0.1035143733, 0.1760156602, 0.1120207608, 0.1409084648, -0.0586796962, 0.0994708613, 0.0213870984, -0.0655901507, 0.0960049704, 0.0092102457, -0.2491271049, 0.1005696654, 0.2015358806, -0.1927499473, 0.0123187592, -0.0429266281, -0.0423614904, -0.0022601048, -0.1775548309, -0.2162124366, -0.0526567176, 0.0789177269, -0.1767199486, -0.0602124222, -0.2640248239, 0.2386516631, -0.0059213601, -0.0618572868, 0.1253582537, 0.0643389672, -0.0723578632, 0.1778509021, 0.1219334230, -0.0336518995, -0.1990286261, -0.0457206555, 0.1626705676, 0.2795838714, -0.1164782867, -0.0427872166, -0.0371934995, 0.1853821874, 0.1156150773, -0.0533717759, -0.0506940521, -0.0107205780, 0.2403820157, -0.0843560249, 0.0644679368, -0.0533241220, -0.1130214781, 0.1963205487, -0.0784825385, 0.0291014165, 0.1564181149, 0.0328008495, -0.0505940840, -0.2102439851, 0.2387474924, 0.1688860208, 0.0547094531, 0.1367040426, -0.1126212701, 0.0262602251, -0.1492878795, -0.1474466920, 0.0449022911, 0.0332942493, -0.0207288023, 0.0532724597, -0.0330024362, -0.1085777655, -0.0599500462, -0.0974504277, -0.0601646006, -0.2616446614, 0.1853724718, -0.0858238637, 0.0933170468, -0.1036003977, 0.0038749061, 0.1183378398, 0.2090141922, 0.2261395305, 0.1854993403, 0.0342752710, 0.0819151625, -0.0475996397, -0.0295130499, -0.0364974141, 0.1547989994, -0.2048549354, 0.0127879828, 0.0959066004, -0.0113957310, -0.1927868277, -0.1163308173, -0.2557733655, -0.0344506316, 0.2505676448, -0.0615367889, -0.2398425788, 0.0606244057, -0.0841547996, 0.0462939516, 0.1985867471, -0.0198460501, -0.0421723388, -0.1214095503, 0.1305221319, -0.0106492471, -0.1980151683, -0.0437692739, 0.1817977279, -0.1652070582, -0.2511829436, 0.1652978659, 0.2433279753, 0.2563188970, 0.0809197128, -0.0780077502, 0.0468610339, -0.2068138570, 0.0041001271, -0.0815000236, 0.0841718018, -0.0058289887, -0.1865817755, 0.1234692857, -0.1193360463, -0.1559053212, -0.1367479116, -0.0401460528, -0.1739797741, 0.2036140114, 0.0419549942, 0.0632378682, 0.0439082496, -0.0078938892, -0.1763240844, -0.0189122520, -0.0403824188, 0.0364783593, -0.1165357232, 0.0197270494, 0.0608016998, -0.0129816709, -0.0596184582, 0.0732987747, -0.2294730097, 0.1984151006, 0.1055200994, 0.1016641706, -0.0597486757, -0.0252045486, 0.1782541126, -0.0896459371, -0.0094945533, -0.2123660147, 0.1048162133, 0.0885343105, 0.2625515461, -0.2207916826, 0.0181359146, -0.0811876059, -0.1603015214, -0.1459663808, -0.1627019644, -0.0807656646, 0.0118303727, -0.0207618475, -0.1326578856, -0.0587525629, 0.2412599772, -0.0131872259, 0.0714716762, 0.1177391931, 0.0264295898, 0.1987032890, -0.0001293412, 0.0541565120, -0.1809265763, -0.1761673689, 0.1800773889, -0.2081694901, 0.1174557954, -0.0628224090, -0.0016740103, 0.0527561717, -0.2743423283, -0.1172790378, 0.0558158420, -0.1475365013, 0.1131741181, -0.1303629577, -0.0682810247, -0.1726672500, 0.2496826798, 0.2587306798, -0.0602511987, -0.1455990374, -0.0980868191, 0.1563329846, 0.0155182891, 0.1949353516, 0.2423419505, 0.1160665378, -0.0431795530, 0.0135618914, 0.2187392861, -0.1066515446, -0.1563588530, -0.0041469713, 0.1043492481, 0.0012094831, 0.0390774794, -0.2265747488, 0.0582555011, -0.1266466081, 0.2631862760, 0.1812854409, 0.0670412481, 0.0592060760, -0.0166480858, 0.1459296197, -0.1124054268, -0.2009448558, -0.0033136832, 0.0185299311, -0.1736550927, 0.0674734339, -0.1763835251, 0.0087143565, 0.1032996476, 0.2061376274, -0.0399967320, -0.1360394210, -0.0443496890, -0.1387809664, 0.0918652192, -0.0873114318, -0.1743672788, 0.1785641164, 0.0044529652, 0.1106607392, 0.1371409893, -0.1743959785, 0.1646310240, 0.0352953337, -0.2131056190, 0.0867096186, 0.1925740689, 0.1670313329, -0.0162185039, 0.0577875935, 0.0348307528, 0.1085431054, 0.0936665237, 0.0992357135, -0.0204243548, -0.0636945069, -0.0069919787, 0.1223949343, 0.0137989018, -0.0047430545, 0.1889023930, -0.0964105055, -0.2268873304, 0.1857740283, -0.0434813164, 0.0434151553, 0.0188839138, 0.0641919598, -0.0944194794, -0.0191252921, -0.1952481568, -0.0500986315, -0.0779660046, 0.0871864632, 0.0559669696, -0.1055853143, -0.0216909908, -0.1684506983, 0.1560784280, 0.1957457662, -0.1493541896, 0.2026506811, 0.1942924857, -0.0256376546, -0.0066183764, -0.0548703931, 0.2254604846, -0.1332874149, 0.0771451443, 0.1063195989, -0.1124535054, -0.1152658686, 0.0401740745, 0.1484567076, -0.2012368888, -0.0264136046, -0.0634431243, 0.0415427946, -0.0134984339, 0.1803747714, 0.0174137577, 0.0967348889, 0.0356625095, -0.0445740409, -0.0574982837, 0.0834850147, 0.0820128247, -0.0884593725, -0.0067778216, 0.1659928262, -0.0061036781, -0.0174324140, 0.0517917275, 0.1222138256, -0.0990831554, -0.0053212633, 0.0024997685, -0.0636155531, -0.1101327240, -0.1889547408, -0.0607221611, 0.0287378095, -0.0520176589, 0.0665739551, 0.0872436389, 0.1711719632, -0.1315178126, 0.1243947968, 0.1511938572, -0.1345251352, -0.1430595964, 0.0236995462, -0.1642760634, 0.2140311748, 0.1057706326, 0.1143849120, -0.0616785847, 0.1939259768, 0.1967353821, -0.0897140279, -0.2188106477, 0.1505761445, -0.1160412505, -0.0573459826, -0.1781724542, -0.1400201619, 0.0011815153, -0.1484329998, -0.0147712994, 0.0146094337, -0.2170359939, -0.0461811312, -0.0015524171, 0.0527169332, 0.1746652126, -0.0090328380, 0.1243379340, -0.0832718909, -0.0987255648, 0.0236208551, 0.2456056178, -0.0808591545, -0.0391193852, 0.0722647309, -0.2532521784, -0.0079755131, 0.0659217983, 0.0721381381, -0.1490514874, -0.0450032316, -0.0617430024, -0.1359076947, 0.1395243406, -0.1804115772, 0.1318303496, -0.1459908932, -0.0376669951, 0.2803489864, 0.0104848463, 0.1691644639, -0.0161100198, -0.1474405080, -0.1794856340, 0.0400411636, 0.0611784160, 0.0098836850, -0.1543530375, -0.1187211871, -0.0172943193, -0.0149526615, -0.0735817254, 0.0641967654, -0.1217829511, -0.2028098702, 0.1982502639, 0.0715492964, 0.2314286977, 0.1365994811, -0.0821019784, 0.0021635101, -0.2694436312, 0.1897060424, 0.0228291247, 0.1763029397, 0.2353447825, 0.1083567217, 0.0428762510, -0.0017037354, 0.2394303679, -0.0551072694, 0.0080295317, -0.1048773900, -0.1305804104, -0.1242178977, -0.0283067562, 0.0411731303, -0.2001076341, -0.1511419415, 0.1502303630, 0.0326804221, -0.0666478723, 0.0236173924, -0.0558817759, -0.0270128790, -0.0229512714, 0.0085547725, 0.1642849892, -0.2025754303, -0.1101429984, 0.2821037471, 0.0600729436, -0.1256699860, -0.0145111466, -0.2572987676, -0.0479629114, 0.0402211063, -0.1710986793, 0.1666817069, -0.2460292429, -0.1033267304, -0.1092227027, -0.0683979914, 0.0844468996, -0.1571312100, -0.0141824791, -0.0683692694, 0.0333372988, -0.1748585552, -0.2123976499, 0.2780205011, 0.2393967956, 0.1248764470, 0.0112185357, 0.0060763415, 0.2111705244, 0.2188751101, 0.1126720756, -0.1327738464, 0.0771491677, -0.0598260462, 0.0356828533, -0.1335639954, -0.0882958695, -0.2114824951, -0.0472073704, -0.1717819870, 0.1882952303, -0.0961071625, -0.0923032835, -0.2795312107, 0.1812403202, -0.1550460905, -0.2694332600, 0.0341296494, -0.1223360822, 0.0097730104, 0.1108695120, 0.2251084000, 0.1729299873, 0.1090130955, -0.0151465088, -0.0377196074, 0.1142894700, 0.0315856487, 0.2648640871, 0.1207795292, -0.1156661436, -0.0153572066, -0.2380715162, -0.2291885465, 0.0630242974, -0.1655808538, -0.0350941792, -0.0129265180, 0.1994024068, 0.1884725094, -0.1018739641, 0.0580416769, 0.0908003971, 0.1128774211, -0.1916525811, -0.1636496186, 0.1386023611, -0.0813065320, 0.1878393888, 0.0598505735, 0.0436685942, -0.1690145582, -0.0609611236, -0.2407516837, 0.1365458518, 0.1019848511, 0.1339678913, -0.2438330203, -0.0272768941, -0.0224853121, -0.0227716900, 0.1182453930, 0.0023351230, -0.0480500273, 0.1264383495, 0.1929756105, -0.0145447608, 0.0718825981, 0.0543520488, 0.0403791927, -0.1128184646, 0.1211750582, 0.1479769796, -0.0706954673, 0.0380388312, 0.2300368994, -0.1494000256, -0.1980449557, 0.0306507070, -0.1735670865, 0.0601204038, -0.0497632511, -0.0189405773, -0.0553996973, -0.1698042005, -0.0904855281, -0.0904239863, 0.0291151181, -0.2056512088, -0.1435135454, 0.1568522751, -0.1083366945, -0.1096272618, -0.1410417408, -0.1609268486, 0.0277553760, 0.1528381854, 0.1333665848, 0.0693582818, 0.1262339056, 0.2500943840, 0.1610171944, -0.0828752667, -0.1198813617, -0.2657305896, -0.0536170080, 0.2481175363, 0.2088098377, 0.0497211181, 0.1241686493, 0.0163284168, -0.1835158169, -0.1590296775, 0.0241841469, 0.0956929550, -0.0989252254, -0.0280395430, -0.0925439522, 0.0950479805, -0.1238663569, 0.2168973535, 0.1137229130, -0.2205339074, -0.1449705809, -0.0942854136, 0.1286115646, -0.0308821294, 0.0296382383, 0.0202979948, -0.0732742399, -0.2755086720, 0.1967411637, 0.0477965586, 0.0592121594, 0.1927612573, -0.0187350661, 0.0504557379, 0.0292874593, -0.0402249992, -0.0674391016, 0.1146520451, -0.0404989235, -0.1127697900, -0.2580118179, 0.0327924304, -0.0705026016, -0.1318737566, 0.1559093446, -0.0082138386, 0.0649314150, 0.0563987568, -0.1317759007, -0.1700332165, -0.0024658323, -0.0729856640, -0.0839720219, -0.2081653178, 0.1361835748, -0.0144073777, 0.1533814967, 0.0335630216, -0.0188007038, 0.1607267112, 0.0951398984, 0.0013030864, -0.0471831225, -0.1558621079, 0.0522022508, -0.0575886816, 0.1226739883, 0.0362723544, 0.2531333268, -0.1965383887, 0.2251548469, -0.0631549060, -0.1921994239, 0.0493107364, -0.1658234447, -0.0667188913, 0.0640869662, -0.1623398215, -0.0180639718, 0.0985274464, 0.0350183956, 0.1360725164, 0.0081257429, 0.1900902092, -0.1884557754, 0.1861634701, -0.0271358620, 0.1035479531, -0.2294023186, 0.0474705622, -0.0721931159, -0.0492436439, -0.1924903989, 0.2350538373, 0.1694703549, -0.0089674806, 0.0788287818, 0.1838966459, 0.1457174420, -0.0044173296, -0.0722093359, 0.0697337985, -0.1028294936, -0.0032485293, 0.1633873731, -0.0251895972, 0.0692843422, 0.2181481272, 0.1557003409, 0.1139718741, -0.1961442530, 0.2321907282, -0.0722543523, 0.2339737862, -0.1132875159, 0.0319615975, 0.2730349004, 0.1522364169, -0.0240544807, 0.1642260849, 0.0789529532, 0.0289106146, -0.1276849806, -0.0152288433, 0.0548996776, -0.0113670006, -0.1611597985, -0.0162194204, 0.1440834552, -0.0880747214, -0.0652193874, 0.0053479094, 0.1237438247, -0.1503690779, 0.2433022261, -0.0399821401, 0.0215970092, 0.0735103637, 0.1380951852, 0.0364750363, -0.1308012903, -0.0181989763, -0.1424036622, 0.0460413657, 0.1477330327, -0.0801465958, -0.1236160919, -0.0476307161, 0.0850432217, -0.0247667972, 0.0001957686, -0.1685151756, -0.0473049693, -0.0866453499, 0.1004657894, 0.1017799526, 0.1207292005, -0.0926654413, -0.0977703929, -0.1336783320, 0.0823550150, 0.1348147094, 0.2203342021, 0.0137320133, 0.0983912870, -0.1107046679, -0.0699637383, 0.0815023258, -0.0853383914, -0.2505812943, -0.0384633429, 0.0272258855, -0.0291228984, 0.1239214167, 0.0526713841, -0.0202564523, -0.2659131885, 0.0544875264, -0.0755737349, -0.0683849975, 0.1709346920, -0.0480890833, -0.0631772727, 0.0329288468, -0.0431571305, -0.1795839965, -0.0921651348, 0.0429082997, 0.2294584066, 0.0088128811, -0.2328411639, -0.0814992338, 0.1970989257, 0.1679289043, -0.1966149956, 0.0764726698, -0.2147350013, 0.0688226670, -0.2550194561, -0.1126115769, 0.0258670636, 0.0598435625, 0.1286708564, 0.0710054189, -0.0488759428, -0.0948843434, 0.2354107648, -0.1521364152, 0.0430114530, 0.2126186490, 0.0638040155, 0.0599639155, -0.0133520076, 0.1859870851, -0.1358799934, -0.0869348571, 0.0008695433, -0.0005720177, -0.1931316406, -0.1345809102, -0.2206623852, 0.2475190014, -0.1132076755, -0.0356321372, -0.0663270950, -0.0933519825, -0.1346280724, -0.0133103048, -0.1516323388, 0.1677938253, -0.1097357348, 0.0800522864, -0.1584306061, 0.0146665610, -0.1138026938, 0.1016571447, -0.1003159955, -0.0739541054, -0.1481887400, -0.0866791904, -0.0351992399, 0.2555320263, 0.1368443072, 0.0939989910, 0.1684400588, -0.0812065899, 0.2801786661, 0.0093137715, 0.0895487443, 0.2822330594, 0.2656670809, 0.2221918702, -0.2218315452, -0.0074658412, 0.0396920666, 0.0267284792, 0.0315191597, 0.1112139001, 0.0257220622, -0.0347550362, -0.0524383783, 0.1236923710, -0.0443649516, -0.0909559280, 0.0659022927, 0.1693044603, -0.2180279791, -0.0928250700, 0.0323764384, -0.0777855217, -0.0052658333, -0.1327868849, 0.0380575247, -0.0985296518, 0.0840585157, -0.0174491331, 0.0288995057, 0.0499393903, -0.1291954070, -0.0992230624, -0.0172571074, -0.0153088188, 0.2002583295, -0.0967793167, -0.0444714054, 0.1181357950, -0.0275240112, -0.0591512658, 0.0661826506, 0.0642093644, -0.0390123464, -0.1749573648, 0.1962277144, -0.0315481387, 0.0732972026, 0.1876573414, 0.0686388388, 0.1836192310, 0.1244695783, 0.0007791296, 0.0496208929, 0.0503908396, 0.0317592025, 0.1497976035, 0.1626308560, -0.1031588092, -0.2360887080, 0.0669968352, -0.1786739975, 0.0945980400, 0.0299558695, -0.0513615012, -0.0341797955, -0.0217574108, 0.0166035090, 0.1580585390, -0.2381406575, -0.0268297177, 0.2575205564, 0.2166472226, 0.1160145253, 0.1018914208, -0.1459395587, -0.2090582252, -0.1389794350, -0.0931135416, -0.0214095637, 0.1696069986, 0.2225938141, -0.0021088028, 0.2362173349, 0.0429417752, -0.0973971486, 0.0883454233, -0.1683544964, 0.0872640908, 0.1810358614, -0.1545522809, -0.0071462551, -0.1641707569, 0.1371292174, -0.1422362775, -0.0321382061, 0.1369172335, 0.0439975001, 0.0452415608, -0.0618132874, 0.1762052625, 0.2122054547, 0.0514121279, 0.0486899205, 0.1796295792, 0.0159449317, -0.0362931415, -0.1364729702, 0.1936085671, -0.0929993391, -0.0976481661, 0.0604117736, -0.1047838926, 0.1404396445, -0.0609291531, -0.0806693286, 0.2511574626, -0.0170416441, -0.0029230404, -0.0087459590, -0.2262845039, 0.0400411412, -0.2543323338, 0.1290686876, 0.0254354607, -0.0794726834, 0.0356763005, -0.0544622801, 0.0929969326, 0.0814689174, -0.1954607219, 0.1434076726, 0.2113224715, -0.0225394629, 0.1699863970, -0.1463454366, -0.0600490049, 0.1276011467, -0.2058694363, 0.0141734406, 0.1083386689, 0.0784364715, -0.0758376494, 0.0604601689, -0.1877723932, -0.0823564604, -0.1371050030, 0.0392403416, 0.0339033753, -0.2494489253, -0.0916268080, -0.0250580013, -0.0508028381, 0.0523460060, -0.1185719818, 0.1754987985, 0.0169163495, 0.0725984946, -0.1121260226, 0.1155176386, 0.1492828876, -0.1268992424, 0.0962685570, 0.1224952415, -0.0255005080, 0.0243934970, -0.1496373713, -0.0552978776, 0.1325895786, 0.1880384237, -0.2281439602, 0.1058465168, 0.1003376022, 0.0513482615, 0.0916117132, -0.0159645192, 0.0124349529, -0.1116293222, 0.0589339249, -0.2107548118, -0.0277017616, -0.0151788071, -0.0200697556, 0.1332577765, 0.0622885115, -0.0525110960, 0.0075372648, -0.2053709775, 0.0589165948, 0.0420875810, -0.2239400148, 0.2114265859, -0.0922902673, -0.0898527578, -0.1020910516, -0.1352415383, 0.1369533539, 0.1050125137, -0.0089477459, 0.0724457055, -0.1039850339, 0.0851395875, 0.1472797096, 0.0529512055, -0.2521493435, 0.0193125978, 0.0845597610, 0.1249814779, -0.0345461145, -0.0567265600, 0.1290099770, -0.1177747846, 0.1240989491, -0.1037402153, -0.1542876363, 0.1717499197, 0.0577337407, -0.2728868723, 0.0140279764, -0.0223610327, -0.0552547015, 0.0851818174, 0.1344733387, 0.0608068071, 0.0088557499, 0.0650381297, 0.1104254052, -0.0588297322, -0.0157351177, 0.0940050334, 0.1742783934, 0.1950274855, -0.0206318647, -0.1796763986, -0.1600534171, 0.1552291512, 0.0729957968, -0.0458555035, 0.0293216016, 0.0635896549, -0.0768536776, -0.1265265346, 0.0803610682, -0.0201733131, 0.0948710218, -0.0594707318, -0.0320037119, 0.1483215839, 0.0565005206, -0.2010985762, -0.1121437401, -0.1858808398, 0.1382597685, -0.0940087661, -0.0119481729, 0.1062360480, 0.0856774598, 0.1818878800, 0.0760451257, -0.2486517280, -0.1387616843, -0.1710893512, 0.2207145244, -0.0319424681, -0.1108136922, 0.2385251075, 0.0809200183, -0.0784523487, 0.0533618107, 0.0240323730, 0.0032366754, -0.1562216282, -0.0059580952, -0.0101890257, 0.0400894023, 0.0568924695, 0.2202648669, -0.0320105813, -0.0415518321, 0.0276558418, 0.0654814541, 0.1557002217, 0.0983720422, -0.2771661878, 0.1660870016, 0.1701301038, 0.1114002913, 0.1754305363, 0.0031117469, 0.1419159323, -0.0511938334, -0.1364235431, -0.0252847318, 0.2203959674, -0.0243776254, -0.1662590951, -0.0576663092, 0.0550950728, 0.2183386534, 0.0790775046, -0.0413089357, 0.0351744667, 0.1390738338, 0.2438407242, 0.0590512082, -0.0528068468, 0.0235414226, -0.0697679371, -0.2088622302, 0.0672394261, 0.1195437238, 0.0576801710, -0.2005823702, -0.0535589829, 0.0640757829, -0.0574333407, 0.0709186941, 0.0742843002, -0.0760338157, -0.0607570708, 0.1143028140, 0.1118100807, -0.2436846644, -0.1136713028, 0.2338247746, -0.1895849556, -0.0220970176, -0.2610585690, 0.0071805906, 0.1092528999, -0.0206682067, -0.0006833672, -0.1018249691, -0.1306428611, 0.1877071857, 0.0416221283, 0.0015519927, 0.0109864231, -0.1204441562, 0.1832261384, -0.1162508205, -0.1062882990, -0.1497710943, -0.0415730514, -0.0040854155, 0.1111243814, 0.0596866868, 0.0750657544, 0.0372592099, -0.0017724566, -0.0634341761, -0.1728455126, -0.0979876518, -0.1038676575, -0.0499022827, -0.1400932521, -0.0370614976, 0.0936472341, 0.1623131186, -0.2486509532, 0.0905986279, -0.0702924803, -0.1275532693, 0.1320775002, 0.0885737017, -0.0942421407, 0.2625753582, -0.0447681211, -0.0110884663, 0.1588487625, 0.0213940870, -0.0398595035, -0.0275080204, -0.2090998739, -0.1063745320, 0.2267815173, 0.0914127082, -0.0262331907, 0.1064834073, -0.1391462386, -0.1240582094, -0.0546693206, 0.1085030586, -0.1354665011, 0.0080496520, 0.0054346393, -0.0747739822, 0.0339977928, -0.1172618791, 0.2514322698, -0.0577637330, -0.2311310172, 0.2001205087, 0.0033651935, -0.0904282779, -0.1725250185, 0.0656569228, 0.1179625541, -0.0626713410, 0.1402036399, -0.0378529020, -0.0170342624, 0.0193209387, -0.0603604801, -0.0222855937, -0.1151430011, -0.0212397519, 0.0859601572, 0.0195668656, -0.0242795013, 0.1922018081, 0.1905026436, -0.1198402867, 0.1301381886, 0.0520699918, 0.0048113605, 0.2526181042, 0.1665417999, 0.0581643805, -0.1837632954, -0.0619166382, -0.2063890994, -0.0822052807, 0.0243122801, 0.1444343477, -0.2099985480, -0.0054990719, 0.0084499037, -0.0655621216, -0.0727730095, -0.1783688962, -0.0895905271, 0.0208853483, 0.0389887765, -0.1107905954, -0.2121860385, 0.1437802762, -0.2632918060, 0.0270018429, 0.1351057887, -0.2580824792, -0.0763604939, -0.1018640101, -0.0719298273, 0.2480396777, -0.0238102060, 0.0197541658, -0.1207899600, -0.0839874372, -0.1432370991, 0.2550553977, 0.0446668267, 0.0359438248, 0.0585648529, -0.0014443994, 0.0717303082, -0.0305711888, 0.0228595957, 0.2537806630, 0.1186429188, 0.0139201982, 0.0344529413, 0.2041603923, -0.1458008438, -0.0213905964, 0.0529118404, -0.1752868444, -0.0824597329, 0.2396327555, 0.2062412947, 0.1502057016, -0.0181191396, 0.0455558710, 0.2209244370, -0.1637054235, -0.0049929954, 0.0000558046, 0.0045636953, -0.1929859370, -0.0259255245, -0.0646715760, -0.0260183532, 0.0816797316, 0.0899205431, 0.1491062790, -0.1542141587, -0.0525262281, 0.1389873773, 0.1307380348, 0.2119846642, -0.0575498343, -0.1332759708, -0.0144739142, 0.1097679511, -0.1596811116, 0.0841227248, 0.0019964362, -0.2338066846, 0.0015401163, -0.0995691493, -0.0456756912, 0.0269504543, -0.0740443692, 0.1369162798, -0.1206809506, -0.2301691175, 0.1145848706, 0.0443286113, -0.0630878210, 0.0550387166, 0.0089837434, -0.1296499223, -0.2210315615, 0.0754330978, 0.2415174842, 0.0630639270, -0.0648193285, 0.1072380468, 0.2100399286, -0.1123799682, 0.2257450670, 0.0092363218, -0.1392242014, -0.0118586579, 0.1506834179, 0.1651608199, -0.0082884654, -0.0839695483, 0.0820666179, 0.1128813624, -0.0510794818, -0.0986139774, -0.0732323304, 0.0161607880, 0.0026461980, 0.0667333081, 0.0253454670, -0.1340958476, -0.0104370276, 0.1204513758, 0.1566486210, 0.0438681319, -0.0606337264, -0.0105491979, -0.2134617865, 0.0308685340, -0.0774878934, -0.1600506902, -0.1046475768, 0.1606590301, -0.1229455844, 0.1200590208, 0.0220347140, -0.1798927337, -0.0911822468, -0.0392531231, 0.1194336787, -0.0008799692, 0.1657213122, -0.0813721865, 0.0113511896, 0.1215939745, -0.0165631380, 0.1530286223, 0.0230198111, 0.0758873746, -0.1227312610, -0.1133741513, 0.0081359968, -0.0164172202, 0.0274173375, 0.0031222359, 0.1733276695, -0.0161566250, 0.0351800285, 0.1288766712, -0.0791492239, -0.0413374230, -0.0620949268, 0.1137182787, -0.1092235446, 0.2104860097, -0.1770308316, -0.0050130426, -0.1530923545, 0.0167877935, 0.1146025732, -0.2037606388, 0.0958542898, -0.1512495428, 0.1096103042, -0.2370918244, -0.0643809810, -0.0989258289, -0.2801419199, 0.0734106377, -0.2426211536, 0.2197387815, -0.0179541595, -0.2000420690, -0.0036259778, -0.0610340871, 0.1959057599, 0.1166835353, -0.2059702426, 0.1073242277, -0.1661095172, 0.0612713285, -0.0352797024, -0.0721292868, -0.2240594476, 0.0304796640, -0.2033954561, -0.2307580858, 0.0009215427};
# 25 "firmware/parameters.h" 2
# 1 "firmware/weights/wr6.h" 1
# 12 "firmware/weights/wr6.h"
model_default_t wr6[12288] = {0.0208569765, 0.1272556931, -0.0000813407, 0.0163526461, -0.0311561991, -0.0406893045, 0.0520521998, 0.1093063578, -0.1562489718, 0.1038212925, 0.0230149440, 0.0982173532, 0.0859482512, -0.0586319342, 0.0135655450, 0.0663930699, -0.0775710866, -0.0534373671, -0.0352163427, 0.0213461574, -0.0217585191, 0.0873560011, 0.0223385766, 0.0045820777, -0.0134178568, -0.0715292096, 0.0432711318, -0.0102577135, 0.0449190028, 0.1112584621, -0.0589522719, 0.0884076208, -0.1473606974, -0.1195626557, -0.0068745352, -0.0176194888, 0.1546774507, -0.0250545982, -0.1772416085, -0.0428251587, -0.0041058720, 0.1172536910, -0.0623428710, -0.0833786801, -0.0764387250, 0.1153828651, 0.0943746716, -0.0875174329, 0.1303986609, 0.0018885144, -0.0538451672, 0.0362682454, -0.0788568780, 0.1428251415, 0.0314451009, 0.0861868188, -0.0581076443, -0.0088771014, -0.0363667719, -0.0062410324, -0.0205150656, -0.1144731864, 0.0332321338, -0.0543052740, 0.0263846945, -0.1310578287, 0.0003515924, 0.1324166059, -0.0463837273, -0.0805782601, 0.0385443233, -0.1223349348, -0.1101611033, 0.0353800170, 0.0829616413, -0.0770977885, -0.0329344980, 0.1719341874, 0.0229237285, 0.0086400509, -0.0421262942, -0.0674631968, -0.0311998222, -0.0187176634, 0.0382701196, -0.0365971439, -0.0206041858, -0.1299707144, 0.0599766262, 0.0590688139, 0.0213086531, 0.0544980913, -0.0363779142, 0.0260766707, -0.0442726649, -0.0171675850, 0.0460335240, -0.0419733822, -0.0199571438, 0.0225502104, -0.0827215016, 0.0172370002, -0.0710059106, -0.0891628414, -0.0356442109, -0.0569711216, -0.0782219097, -0.0084197056, 0.0270889588, 0.1058457494, -0.0281639062, 0.0228393059, -0.1223494709, 0.0381478481, -0.1788989753, -0.0745306686, -0.0279282704, -0.0465868004, 0.1086440831, -0.1623963118, 0.0493599027, 0.0386543833, -0.0077767237, -0.0486384183, 0.0129482634, 0.0509513654, -0.0160728544, 0.0937139764, 0.0184402391, -0.1448962688, 0.0167288035, -0.0079952590, -0.0136141991, 0.0119190859, -0.0071010562, 0.0659223571, 0.1026611328, -0.0297227502, -0.0240400117, 0.0406907611, -0.2256764323, 0.0707505420, 0.0075801131, -0.0226736423, -0.0468692146, 0.0614270903, 0.0137289595, 0.0079333028, -0.1402756572, 0.0282205809, 0.0619855933, -0.0941623077, -0.0775264949, 0.0224353615, -0.1758845448, -0.0394235626, -0.0622228235, -0.0577822998, 0.0569132604, 0.0071459692, 0.0031515760, 0.0374456123, -0.0591894127, -0.0345467590, 0.0123871043, -0.0372197144, 0.0406567007, -0.0294398870, -0.0078693572, 0.0897477195, 0.0335223079, -0.0454828367, 0.1017331481, 0.0497175567, 0.1241203994, -0.0593327768, -0.0335468762, -0.0419761501, 0.0240435190, -0.0243914593, 0.0500377007, -0.1209968925, -0.0102221891, -0.0752803981, -0.0225410815, -0.0860295221, 0.0503404960, 0.0993538573, 0.0746174753, 0.0603422634, -0.0349518768, 0.0257425588, -0.0011357069, -0.0832011700, -0.0139308684, 0.0699124634, -0.0381613150, 0.0154457819, 0.0084032947, 0.0037060077, -0.0634211749, 0.0890520215, 0.0465537943, 0.1831519902, 0.0134473741, 0.0971034691, 0.0566897132, 0.0620215051, -0.0458900854, -0.1346139908, 0.1083334535, -0.0162931569, 0.0799439475, 0.0023232298, 0.0629505888, 0.0267329756, 0.0598995611, 0.0082976893, 0.0285673607, -0.0690922439, -0.0960217118, -0.0376165584, -0.0010640033, -0.0579906739, 0.0741298422, 0.1947712451, -0.0153479483, -0.1143681332, 0.0425447263, 0.0749405324, 0.0757722706, -0.0222880542, -0.1322465092, 0.0361462682, -0.0662516505, -0.1084834635, 0.0872014090, -0.0237571672, -0.0801772848, 0.0875114650, -0.0638268888, 0.0269739386, -0.0380587615, 0.0024779900, 0.0636376143, 0.0993961841, 0.0277268589, -0.1793053299, -0.0683591813, 0.0440740846, 0.0393446758, 0.0976851210, -0.0271679591, 0.0669578463, 0.0113028334, -0.0067190705, 0.0882014334, -0.0402592123, 0.0597033799, -0.1240725964, 0.0665291771, -0.0139283054, 0.1055864617, -0.0320847556, -0.1385556161, -0.0377040356, 0.0236401185, 0.0419275835, -0.0079517094, -0.0435518473, -0.0547302030, -0.0695245117, -0.0726037920, 0.1180719510, 0.0055310051, -0.0826912001, -0.0100943008, -0.0657529160, -0.0496711470, 0.0726305544, 0.0099738156, -0.0266285297, 0.0411372706, 0.1681723893, -0.0321914814, -0.1207752973, -0.0565268286, 0.0009635576, -0.0758352503, -0.1328295916, -0.0801007003, -0.0071288762, 0.1217681542, -0.0104504442, 0.0383137055, 0.1478940994, -0.0347489528, 0.0570773184, 0.0285135210, -0.0753555745, 0.0312786624, 0.1823699623, 0.0158319958, 0.0108809145, 0.0047507235, -0.0175723024, -0.0222373847, 0.0402422361, 0.0654467717, -0.0715907142, 0.0244296752, -0.0060447976, 0.0533014126, -0.0733522847, 0.0338077247, 0.0593386851, -0.0488721058, -0.0383998491, 0.0259270817, -0.0908689722, 0.1379731596, -0.1658603698, -0.0225896966, 0.0405064858, 0.0379986912, -0.0291333310, 0.0034869285, 0.1059785038, 0.0093659339, -0.0520534925, 0.1229013875, 0.0958544612, 0.0469055660, 0.0582870357, 0.0624050274, 0.0001396593, -0.0345597081, 0.0113062095, 0.0526147112, -0.0477926880, 0.0773778707, 0.0517817587, 0.0172486696, 0.0089907646, -0.1302016973, -0.0353683271, 0.0816157833, -0.1411269456, 0.0463539213, -0.1170860976, 0.0098299747, -0.0243721977, -0.0862902105, -0.1205874607, -0.0143647445, 0.0421499386, 0.0518758893, -0.0075094891, -0.1083264723, -0.0952325463, 0.0441945419, 0.0933773369, 0.0765204057, -0.1487821788, 0.1429201961, -0.0595655590, 0.0258110259, -0.0183109250, 0.0742514208, 0.0956007019, -0.0659975037, 0.0121501517, 0.0563934296, 0.0124376472, 0.0022129880, 0.0502632894, 0.0612928867, -0.0405946523, 0.0670888647, 0.0800614357, 0.0123524573, -0.0389951691, -0.0095284600, -0.0638586283, 0.1069675460, -0.0724604502, 0.0874089003, -0.0703383982, 0.0023767697, 0.0581034496, -0.1072789803, 0.1059455648, -0.0679649711, 0.0252700318, 0.1170002744, -0.0601450726, 0.0113086337, -0.1063583940, 0.0193753690, -0.0824031606, 0.1118805408, 0.1406065077, 0.0624396205, -0.0171836857, -0.0285429545, -0.0141458064, 0.0405390486, 0.0832962096, -0.0558777228, 0.0531137809, 0.0272753183, -0.0042770305, 0.0542493872, 0.0434360318, 0.0552141070, -0.0916348398, -0.0830905885, 0.1227943823, 0.1159169078, 0.0261843950, 0.0397843756, -0.0317514054, -0.0336098820, 0.0772977620, 0.0498518534, -0.0944880769, -0.0518928431, 0.0248204134, -0.0407584086, -0.1149566174, 0.0265076980, 0.0080182832, -0.0038337391, -0.0188567378, 0.0787343904, -0.0972047150, -0.0942654908, 0.1749945581, 0.0229935423, -0.0154875284, -0.0401474014, 0.0698732436, 0.0321342759, 0.0261374116, -0.0907423794, 0.0113357110, -0.0355684385, -0.0763079897, -0.1601432562, -0.0766364262, -0.0310160127, 0.0122851534, 0.0096029267, 0.0701894537, -0.0331779718, 0.0309127551, -0.1252615005, -0.0014831853, -0.0143617438, -0.0462734699, -0.1417575926, -0.0154870721, -0.0572322495, 0.0463250093, 0.1202518269, 0.1309470832, 0.0320445970, -0.0198368412, -0.0972387791, 0.0434202179, -0.1321505606, -0.0157174747, -0.0095477747, -0.0555873103, 0.1009035707, 0.0869928971, 0.0693202317, 0.0858342573, -0.1339084208, 0.0403977185, -0.0437771194, 0.0602352843, 0.1136780009, -0.0783337280, -0.1054748744, 0.0354322866, 0.0192625802, 0.0539492592, 0.0550255626, -0.0425148346, 0.1053504571, -0.0858991519, -0.0374616683, 0.1277349293, -0.0312751457, -0.1288906932, -0.1154038310, 0.0507922545, -0.0568329096, 0.0135566853, 0.0242671892, -0.0326315649, 0.0480565690, 0.1283115447, -0.0417589545, -0.0164256133, 0.0540074185, -0.0146348886, -0.0159573443, -0.0094908392, 0.0224004127, -0.0083495490, -0.0576879531, -0.0145012736, 0.0491504557, -0.1056921333, -0.0530490950, -0.0643083826, 0.0574959256, -0.0501255505, -0.0238706190, -0.0166813917, -0.0174348280, 0.0421882570, 0.0029036335, -0.0159820393, 0.0123111885, 0.0366000421, 0.0914496407, 0.0215235669, 0.0787407607, -0.1188437268, 0.0508901775, -0.0110085746, 0.0261098351, 0.0371239334, -0.0170948375, 0.0806334689, -0.0332939960, 0.0033230516, 0.0121426973, 0.0844676271, 0.0675102696, 0.1801324934, -0.0875058025, -0.0908567756, -0.0260376520, 0.1334087402, -0.0878612399, 0.0782422796, -0.0368738361, -0.0891080648, -0.0618542805, -0.0307956487, -0.0941716507, 0.2384075522, -0.0369975977, 0.1122791618, 0.0543494783, -0.0114448974, 0.0697045550, 0.0144762425, -0.1025227308, 0.0436264724, -0.0580863804, 0.0578871965, -0.0128585398, -0.0683872700, 0.0333644338, -0.0706641227, 0.0245518461, 0.0721479505, 0.0197162684, 0.1484858841, -0.0740326568, -0.0257157814, 0.1261980236, 0.0011200886, -0.0058622155, 0.0232028961, -0.0624219030, 0.0296244398, -0.0444515683, 0.0528755598, -0.0063342662, -0.0424505509, -0.1425283700, -0.0126412520, 0.0695481822, 0.0070572500, 0.0266287494, -0.0574672781, 0.0043572001, -0.0188029576, 0.1174299642, -0.0777861848, -0.0887573734, 0.0509463474, -0.0415090360, -0.0415244475, 0.0404454097, 0.0281025674, 0.1117198542, 0.0129562905, 0.0543338768, 0.0470518395, -0.0458567068, 0.0132072400, 0.0222815331, -0.0454956144, 0.0015305782, 0.0185475163, -0.0314064361, 0.0571480282, -0.1532366276, -0.0129499016, 0.0084978640, 0.0917886496, -0.0705992207, -0.0645391792, 0.0584256388, -0.0003194406, -0.0169735830, -0.0569228306, -0.1457688808, -0.0683107302, 0.0156454388, -0.0608513020, -0.0391388312, 0.0197097436, 0.0057705990, -0.1230804026, 0.0195234828, 0.0685659051, 0.0153601021, -0.1135296300, 0.0199568868, -0.0839613602, 0.0465274565, 0.0662963763, 0.0090567488, -0.0504046157, 0.1119519472, -0.0269465204, -0.1055003852, -0.0620097555, 0.0491441600, 0.0316925533, 0.1809876263, -0.0651752353, 0.1963098794, -0.0666770563, -0.1431744099, 0.0585773773, 0.0030626920, -0.0486502759, 0.0930607319, 0.1981430501, -0.1563910693, -0.0518911891, 0.0186277051, -0.0145343672, -0.0058397250, 0.0761274248, 0.0430054255, -0.0004851313, 0.0715377703, -0.0278532822, -0.0015710078, -0.0467190482, -0.0816871971, 0.1259135008, 0.0011840058, 0.0598304719, 0.1276071966, -0.0246033259, -0.0059901602, -0.0745402128, -0.0734956712, -0.0663528666, -0.0581001081, -0.1082547083, -0.0492610298, -0.0225341488, 0.0846770629, -0.0223754067, 0.0201889053, 0.0088757519, 0.0324545652, -0.1767369509, 0.0566919148, 0.0859058425, 0.1024689972, -0.0088549890, -0.0781537816, -0.0455751196, 0.0357198864, 0.0500460230, -0.0829343200, 0.0626971722, 0.1060620025, -0.0343092717, 0.0271806307, 0.0080629606, 0.0132440180, 0.0032536355, 0.0481460467, 0.1649044901, -0.0674966574, 0.0054361499, 0.0739067048, 0.0355346240, 0.0773620903, 0.0515379235, 0.0351109095, 0.0588604361, -0.0053573987, -0.1317493618, -0.0454278439, -0.0072036674, -0.0451230668, -0.1033219323, -0.1860993057, -0.0277885608, 0.0337301083, 0.0495963842, 0.1441948712, -0.1246264651, 0.0347824283, -0.0534303710, 0.0606995039, 0.0176653601, 0.0629468039, -0.1090551019, -0.0377181806, 0.0881396160, -0.0244623106, -0.0194886718, 0.1539891809, 0.0298697054, -0.0610917993, 0.0012189852, 0.1328696311, -0.0246265139, 0.0185213294, -0.0146329971, 0.0041535585, -0.0213132072, -0.1155696139, 0.0054897540, 0.0309872869, 0.0606608838, 0.0288481917, -0.0774261728, -0.1250263304, 0.0160762928, 0.0882903859, 0.1314621717, -0.0207236856, 0.0453413315, -0.0696527362, 0.0806826726, 0.0336220153, 0.0253164023, 0.0886541829, 0.0011056678, 0.0951150805, 0.0596042201, 0.0366042629, 0.1068281680, 0.0152327316, 0.0261796154, -0.0126881599, -0.0434075370, 0.0672431067, 0.1397481859, 0.0122418841, 0.0757655054, -0.0196987502, 0.1766109467, 0.0148025705, -0.0820814446, -0.0239286702, -0.0514345765, -0.0018348631, 0.0346191153, -0.1065839231, -0.1400216073, -0.0466579609, -0.0587679893, 0.0163080767, 0.0087448582, -0.0530731268, 0.0841593593, 0.0872875303, -0.0014883294, -0.1310365498, -0.0658027083, -0.0023094588, 0.1296499819, 0.0698236376, 0.1613574177, -0.1284647435, -0.0219574571, 0.0379449129, -0.0584760755, 0.0890273228, 0.0622315481, 0.0220063385, 0.0698616132, -0.0321887434, 0.2282364070, -0.0852313638, -0.0423924513, 0.1130432636, 0.0581127666, 0.0005689404, -0.0260659643, -0.0089670811, -0.0684798062, 0.0100212600, -0.0438867882, -0.0277766287, -0.0858040974, 0.0930524096, -0.0798900649, -0.1070636213, -0.0307071432, -0.0190862976, -0.0483701155, -0.0246283226, -0.1095267385, -0.0632510111, 0.0549590960, -0.0425742306, 0.1508933157, 0.0103542516, 0.0243151002, -0.0438659303, -0.0150616225, -0.0421774723, 0.0176222250, -0.0092290863, -0.0524528250, -0.0944029018, -0.0785504878, -0.0305645317, -0.0401309803, -0.2040917277, -0.0046054078, 0.0178415403, -0.2270426303, 0.0211325623, -0.0564771481, 0.0502334796, -0.0812316984, -0.0068399054, -0.0261179488, 0.1001995653, 0.0896905884, 0.0950393528, 0.1214803383, 0.0376472883, -0.0633504018, -0.0199383851, -0.0804904923, 0.1008304730, 0.0428234115, 0.0205369983, 0.0803220496, -0.0300531685, -0.0372035690, -0.0023251791, 0.0423182920, 0.1092831567, -0.0008293763, -0.0140004149, -0.0622044802, 0.0709947348, -0.0609488897, 0.1145021096, -0.0130700199, -0.0092678154, -0.0160304178, -0.0560703389, -0.1044928506, 0.0004295301, -0.0557842031, 0.1559456140, -0.0627977923, 0.0299824756, -0.0783303753, 0.0465043485, 0.0189374667, -0.0543558076, 0.0553236082, -0.0735791102, 0.0987414420, 0.0867786407, 0.1208286807, 0.0195674039, 0.0133738648, 0.0009956880, -0.0949196815, 0.0425632894, 0.0172525402, 0.0063520609, 0.1182259470, 0.1386484206, -0.0078529054, -0.0891286209, -0.0048842593, 0.0531889796, 0.0995957479, -0.1504820287, 0.0120168002, 0.0466802903, -0.0370924883, -0.0254358910, 0.0219347086, -0.0127857300, 0.0489745885, -0.0780175477, -0.0329495966, 0.0123372143, -0.0550459400, -0.1089098677, 0.0131692970, -0.0406872183, -0.0281141680, 0.0615516417, 0.0129019003, -0.0208361391, 0.0766270310, 0.0295772944, -0.0394200385, -0.0033323553, 0.0098024933, 0.1007179916, -0.0641451105, -0.0989912450, -0.0375950150, -0.0341543145, -0.0980832651, -0.0332975015, 0.0043913429, -0.0329244286, -0.0931553990, -0.0657544136, 0.0287670270, 0.0586927198, -0.0202644318, -0.0714179724, -0.0498337373, -0.0157865938, 0.0839424133, -0.0147904707, -0.1343075782, -0.0440111160, 0.0976022184, 0.0529352203, 0.0116482638, 0.1262325943, -0.1118227839, -0.0165020805, -0.0111819506, 0.0221913047, 0.0609874614, -0.0079975789, -0.0249073543, 0.0408780240, -0.0441525914, 0.0844280943, 0.0644707382, -0.0940617174, -0.0118107125, 0.0772456080, 0.0954868793, -0.0109356726, -0.0540265255, 0.0149598802, -0.1846407503, 0.0389246792, 0.0679697543, 0.1004230902, -0.0432306230, 0.0345957428, -0.0520177707, -0.0027227895, 0.0378134809, 0.0726196095, 0.0601237789, 0.0768466294, -0.0336856470, 0.0238919556, -0.0004961009, 0.0170271769, 0.0155421067, 0.0446165130, 0.0674348772, -0.0833480433, 0.0009966932, 0.0180948004, 0.1317001879, 0.0310886353, 0.0133600915, -0.0041510928, 0.1640935689, 0.0900745466, -0.0013397296, -0.0277927537, 0.1543992907, -0.0530247763, -0.0418634638, 0.1554233730, 0.0352356844, -0.0967405587, 0.0016481404, -0.1068046391, -0.0673076734, 0.1111529469, -0.0516970232, -0.0385168493, 0.1148251593, 0.0423377827, -0.0067700921, -0.1128945872, -0.0324001983, 0.0510938913, -0.1005419493, -0.0222234447, -0.0713138208, 0.1222282201, 0.1221388951, 0.1050773337, 0.0454119109, -0.0686333552, -0.0423715301, -0.0159480125, 0.0501448847, -0.0058212276, -0.0102117620, -0.1076723337, -0.0517569110, -0.0105053829, 0.0445030369, -0.0783671662, -0.0354591832, 0.1238122061, -0.0380852111, 0.0693182871, 0.0467443168, 0.0718326569, 0.0078916308, 0.0070668766, 0.1494044662, -0.0167436432, -0.0120679121, -0.0675192624, -0.0889964253, 0.0618387572, 0.1381019354, -0.0276592709, 0.1705219597, -0.0072881705, -0.0762243494, -0.0595549084, -0.0382839441, -0.0027630588, 0.0060632564, 0.0023196295, -0.0774585009, -0.0106359851, -0.0156767014, 0.0185503885, -0.0189463906, 0.0115853250, 0.1808810681, 0.0356328078, -0.0347332545, -0.1009403914, -0.0637608469, 0.0302464589, 0.0104885818, 0.0920040831, -0.0131949848, -0.1076485887, -0.0246312283, -0.1229106262, 0.0265665222, -0.0105141159, -0.0375566036, -0.0225075651, 0.0837631524, 0.0168285985, 0.0934553817, -0.0575604029, 0.1554123312, -0.0166097917, 0.0295313857, -0.0610641502, 0.0216026399, -0.0619122833, -0.0795046613, 0.0890330076, 0.0953983292, 0.1152049601, 0.0761491507, -0.0880373418, -0.0807633027, -0.0329334252, -0.0800037310, -0.0609121732, -0.0495369211, 0.0830219388, -0.0949316025, -0.0897847041, -0.0101808934, -0.1136222854, 0.0070362352, -0.0148932543, -0.0147805568, -0.0065384717, -0.1465241760, -0.0548393577, -0.1170818061, -0.1100861728, -0.0525598079, 0.0393277891, -0.0555572994, 0.0584332421, 0.0263863113, 0.0244330056, -0.1493502557, 0.1295699477, -0.0137644000, 0.0518608615, 0.0580579825, 0.0025777109, 0.0280915666, 0.0419988111, 0.0685698912, -0.0470410064, -0.1351900697, -0.0416395701, 0.0951000750, 0.0846364945, -0.0612708591, 0.0815475956, -0.0096710445, 0.0968987793, -0.0374403410, -0.0013579316, 0.0559946708, 0.0824016929, -0.0056014983, 0.1056269109, -0.0562124699, -0.0375554562, 0.0221814495, 0.1245972663, 0.0238528755, -0.1180867180, 0.0310281608, -0.1420225948, -0.1074790806, 0.0770521984, -0.0316338576, 0.0200493559, -0.1398101449, 0.1743521690, -0.0468333140, -0.0571177490, -0.0466583483, -0.1635148376, -0.0301766060, -0.0928734988, 0.0277428068, 0.0050760214, -0.0023153706, 0.0328708068, 0.0451610461, -0.0851026103, 0.0463521779, -0.0345884785, -0.0067488067, -0.1147425324, -0.0380634256, -0.0177463815, 0.1056238189, 0.0543821007, -0.0505291894, -0.0290001202, -0.0795697048, -0.0237315632, 0.0077041592, -0.1234678105, -0.0326006152, -0.0211088844, -0.0289954357, 0.0229678024, 0.1595124751, 0.0194391478, 0.0291381013, 0.0260324553, -0.0564255416, -0.1419708878, -0.0567807294, -0.0503877401, 0.0945862457, 0.1303777993, 0.0194623694, 0.0352220908, 0.0044300123, -0.0334893093, -0.0066212756, -0.1177893728, -0.0178785715, -0.0609838180, 0.0146024777, -0.1279965192, -0.1341542453, -0.0842199028, 0.0248632040, 0.0518386327, -0.0632296652, 0.0705945790, 0.0451657847, 0.0468560904, -0.0458559915, 0.1161043867, 0.0159051754, 0.0697117820, -0.0923034623, 0.0460815392, 0.0271485969, -0.0612974055, -0.1388092786, -0.0795995668, 0.0083058150, 0.0690476000, -0.0761039630, 0.0604386330, -0.0085887667, -0.0357966498, -0.0934576616, -0.0173766427, 0.0178244859, -0.0113010872, 0.0210377835, 0.0175812524, -0.1562287509, 0.1270443350, -0.0325847901, 0.0453270115, 0.0784574002, -0.0236503258, 0.0308883078, 0.0429077148, -0.1049238145, -0.0568071045, 0.0341199525, -0.0552398935, -0.0209338274, 0.1424134672, -0.0079301316, 0.0020161760, -0.0406140275, -0.0800542906, 0.0427144319, -0.0431221239, 0.0388222635, 0.1846049726, 0.0799830481, 0.0824185610, -0.1165559515, 0.1216454208, -0.0542447269, -0.0229878090, 0.0506729037, -0.0283594150, -0.1538025886, 0.0016877709, -0.1769423783, -0.0045404546, -0.0685473457, -0.1771771610, -0.0503426418, 0.0324153751, 0.0163529646, -0.0283195786, 0.0517244302, -0.0684760213, 0.0153056057, 0.0361246839, -0.0219555069, 0.0350778624, 0.0844964609, 0.0199241433, 0.0030152947, -0.0183519498, 0.1786462218, -0.0803712010, -0.1363803148, -0.0227957163, -0.0496710204, 0.0110854115, 0.0008750319, -0.1357463002, -0.0067367838, -0.0333863087, 0.1137558520, 0.0606507547, -0.0371482521, -0.0117649920, 0.0134445438, 0.0457696915, 0.0150915598, 0.0075655081, -0.0148523673, -0.0308582336, 0.0010542328, 0.1324948817, 0.0235520713, -0.0692008212, -0.0057617617, 0.0375118442, -0.0630411133, -0.0000245987, -0.0442638248, 0.1081557944, 0.0402078591, 0.0679285601, 0.0352841206, -0.0066912677, -0.0370698348, 0.0726502240, 0.0663405955, -0.0989802331, 0.0198194757, -0.0967212319, 0.0562844872, 0.0000509809, 0.0449845269, 0.1034536958, -0.2041838467, -0.1214995980, -0.0609231591, 0.0577550977, -0.0481333509, -0.0085793585, 0.0754026175, 0.0710932314, 0.0578809008, -0.0272513870, 0.1171253324, -0.0672674328, -0.0692747310, 0.0453279279, 0.0047721006, -0.0548594408, 0.0568357594, 0.0167373549, 0.0302793439, -0.0554702207, 0.0876675397, 0.0374631062, 0.0820503533, 0.0218339078, 0.0833567977, 0.1055111066, -0.0169938430, -0.0384382233, 0.0408676490, -0.0278595388, 0.0518255681, 0.0427564941, 0.0453635193, 0.1391466707, -0.1980267614, -0.0451883525, -0.0097409897, 0.0507845059, 0.0017309008, -0.0514291003, 0.0523778349, 0.0336739831, 0.1096886620, 0.0076094172, -0.0000621252, 0.1301271468, 0.0646266490, 0.1327516139, 0.0003691752, 0.0217249002, 0.0678620860, -0.0233964454, 0.0301654302, 0.0302459765, 0.0977655873, 0.0611388013, -0.0053006914, -0.0280150902, 0.0160495006, 0.0979477093, -0.0795778632, -0.0270742867, 0.0369686857, 0.0960514769, 0.0252260696, -0.0631132200, -0.0707830489, 0.0108095249, 0.0573567711, -0.1499627978, -0.0944533050, -0.0451440103, 0.0171391945, 0.0584606156, 0.0229633432, 0.1107243076, 0.0073314444, 0.0760529712, -0.0457768142, 0.0207921732, 0.0460547358, 0.0915377885, 0.0922815055, 0.0050923931, -0.0319612324, -0.0691229403, 0.0151177971, 0.0280417092, 0.0150710177, -0.0085410746, -0.0705968440, -0.0744368359, -0.0375429094, 0.1407692879, -0.0001618124, -0.1303007007, 0.0559099540, 0.0770489797, 0.1412219703, 0.0303069726, -0.0587174036, -0.0415613241, -0.0177486502, -0.1617822796, 0.0405512340, 0.0462549515, -0.0157615095, -0.1089846641, 0.1095901653, 0.0835383683, -0.0518973768, -0.0681334659, 0.0228498783, 0.0347354077, -0.0736889988, 0.0028521218, -0.0523361340, -0.0120629966, -0.0330809765, 0.0020388647, -0.0463014767, -0.0509141609, 0.0549183972, -0.1235180944, 0.0040699830, -0.0402497798, -0.0140926186, -0.0530738831, -0.0228343830, 0.0593117848, 0.0230171047, 0.0022276246, 0.0108505012, -0.0457774252, -0.0315057449, -0.1103437766, -0.0256140735, 0.0147162471, -0.0230753217, -0.1263330579, -0.0116065815, 0.1639085710, -0.0801763162, -0.1452665478, -0.0156584177, -0.0376181379, -0.1449380070, 0.0678612441, 0.0533902906, 0.0182395633, -0.0182691906, -0.0317065455, 0.0534324981, 0.0852862597, 0.0816502795, -0.0582188219, 0.0935020298, -0.0031118873, 0.0659043863, -0.0102061350, 0.1320108175, -0.0734992549, -0.0419875868, 0.0464949645, 0.0627708808, -0.0157037135, 0.0408426262, 0.0584512800, -0.1028378755, 0.0400321260, -0.0696349144, -0.1391438842, 0.0337799042, 0.0997010916, 0.1487761140, -0.0030062210, 0.0275993105, -0.1249308586, -0.0472296029, -0.0044319802, 0.0590838678, -0.0992314965, 0.0348059423, -0.1295631826, 0.0180566385, -0.1708082706, 0.0165754016, 0.1282217354, 0.0224577300, 0.0811064318, 0.0572396852, 0.0830768719, -0.0343843400, -0.0908506066, 0.0637235343, -0.0347435400, -0.0144933769, 0.1577294022, 0.1187690571, -0.0415264368, -0.0204409659, -0.0476050712, -0.0373725742, 0.0026031001, -0.0195028391, -0.0178919118, 0.1267839819, -0.0873867944, -0.0659190267, -0.0112837832, 0.0374762565, -0.0338193774, 0.0562335178, -0.0198071059, -0.0443715453, -0.1292534173, 0.1176927537, -0.0575513914, 0.0791846737, 0.1192759275, 0.0461625755, 0.0685045198, -0.0604177527, 0.1160539463, 0.0923347548, -0.2104242742, 0.0116610220, 0.1157742143, -0.0370728299, 0.0622075386, 0.1676449925, -0.0343276747, -0.0246625766, 0.0449786633, -0.0772223398, -0.1321374625, -0.0158067532, 0.0080873035, -0.0124556758, 0.0923881233, -0.2096309513, 0.0390594862, 0.0574059039, 0.0802023560, 0.0248400271, 0.0983281359, -0.0627651438, -0.1379244030, 0.0194911156, 0.1139497608, 0.0347343795, 0.0230311919, -0.0515786335, 0.0576802604, -0.1065359339, 0.0206219759, -0.0846798196, 0.0641638562, -0.1150328740, 0.0200529899, 0.0205758344, 0.0032028921, 0.0374362767, -0.0525229312, 0.1147779673, 0.0368792675, 0.0288877320, -0.1423837245, -0.0237046629, -0.0390588567, 0.0083461683, 0.0570699759, -0.1428588629, 0.0803659558, 0.0949584171, 0.0009106732, 0.0044843676, 0.0559324734, -0.1139957756, -0.0388755128, -0.0188172255, 0.0262896717, -0.0316256657, -0.0975524262, 0.0230081119, -0.0443126634, -0.0074537168, -0.0361362360, -0.0462424979, 0.0096484190, 0.0470678657, 0.1385872066, -0.0275190771, 0.0963108763, -0.0822459012, 0.0203839857, -0.0524099693, -0.0063806628, 0.0193669982, 0.0161406789, -0.0477893539, 0.0529229715, 0.0716348663, 0.0665596649, -0.0466310978, 0.0296998229, 0.0042125159, -0.0670605749, 0.0993851945, -0.0690292194, -0.1540467739, 0.0496982038, -0.0395795219, -0.0794711560, -0.0116703594, 0.0590683892, -0.1080444455, -0.0648430362, 0.0109327147, -0.0811215863, -0.0504934229, 0.0430957340, -0.0364969335, -0.0026116972, -0.0814505294, 0.0629000962, -0.0679415539, -0.0785160735, -0.0792853907, 0.0114052743, 0.0276067760, 0.0229169447, 0.0719990954, 0.0302929059, 0.0152947549, 0.0451576672, -0.0044534211, 0.0988045111, 0.0474969223, 0.0180998705, -0.0035341342, 0.0641889349, -0.0971580520, 0.0572199449, 0.0156688597, 0.0769221708, 0.0046248226, 0.0422206782, 0.1112989113, 0.0593384095, -0.0859062523, 0.0070605585, 0.0278395507, 0.0878777206, -0.0214756969, -0.0935664997, -0.1071668118, -0.0785482675, 0.0775184110, -0.1139379814, -0.0252601951, -0.0555608124, 0.0362552665, -0.0340485647, 0.0234314334, -0.0349310413, -0.0623037480, 0.1919366121, -0.0761211291, -0.1198607832, -0.0684776828, -0.0055791219, 0.0841032639, -0.0604892187, 0.0072715068, -0.1242403388, -0.0049358839, 0.0080309492, -0.0867844149, 0.0229561403, 0.0078641977, -0.0594694689, -0.1015232056, -0.0629389286, 0.0173961818, -0.0030020634, 0.0386788659, 0.0266042277, 0.0104110725, -0.1342557669, -0.0110403039, 0.0885596648, 0.0125927925, 0.0794596374, -0.0156418029, 0.0211732164, 0.2376147658, 0.0795239657, 0.0332991406, -0.0446827859, 0.0814727396, -0.0380930640, 0.0114219058, -0.0868865028, 0.0601020344, 0.0684343204, -0.0142489178, -0.0020155618, -0.0176475905, -0.1550610512, 0.1001529023, 0.0959243923, -0.0375788659, -0.1349529326, 0.0381161906, -0.0221429784, 0.0092217866, -0.0178862475, -0.0895673856, 0.0837983936, -0.0899963230, -0.0370618589, 0.1735206693, -0.1003651023, -0.1831958741, -0.0655735731, -0.0163128767, -0.0750782788, -0.0942379758, 0.0579521731, -0.0551309846, -0.0261904784, -0.0050622560, 0.0075075021, 0.0264028776, 0.1240036860, 0.0129313264, -0.0110286037, 0.1065079868, 0.0250823628, -0.0208064727, -0.0057417597, -0.0865923315, -0.0892630965, -0.0553113855, -0.1048272252, -0.0750811696, -0.0669770092, -0.0159262344, 0.1536554992, 0.0309586897, -0.1051933393, -0.0301326755, 0.0513442382, 0.1347202808, 0.0028382153, 0.0961916298, -0.1191278920, 0.0914989784, 0.0405590497, -0.1883110553, 0.0501344055, -0.0198709853, 0.0563352108, -0.0294270031, -0.0081284791, 0.0068343431, 0.1283626407, 0.0522125550, 0.0776840225, 0.0744304880, 0.0726255104, -0.0737953708, 0.0439073071, -0.0339195840, -0.0176150259, -0.0639290437, -0.0819260851, -0.0189168528, 0.0635175109, 0.0148619991, 0.0624812730, -0.0207795147, -0.0805865005, 0.0366544127, 0.0128787607, 0.0377664641, -0.0282308049, -0.0561411306, -0.1054480374, 0.0062488443, -0.0144461738, 0.0631244704, -0.0310668331, -0.0333425663, 0.1234383658, -0.0770718977, -0.1509676874, -0.1811317652, 0.1402022243, -0.0383145772, -0.0451652035, -0.0200078897, 0.1176461652, -0.1038154960, 0.0077567492, 0.0794196501, -0.0428500734, 0.0649789646, 0.0175037384, -0.0433917679, -0.0084611150, 0.0295073688, 0.0358505100, 0.0910394266, 0.0941631645, 0.0993702412, -0.0417765230, 0.0370542891, 0.0077526295, -0.0394835845, 0.0415524095, 0.0246937666, 0.0148947183, 0.0548251495, 0.0606677644, -0.0835158303, 0.0184886958, -0.0275885202, -0.0439260863, -0.1210739389, -0.1034129634, -0.0433880836, -0.0198113229, -0.0562279187, 0.0084292991, 0.0035188366, -0.0802390501, -0.1070294306, -0.0662571043, 0.0113748796, 0.0065380512, -0.0221564546, -0.0920619145, 0.0263483468, -0.0456089005, -0.0966138020, 0.0044661928, -0.0625271425, 0.0642677471, -0.1592473388, 0.0728476346, -0.0382953212, 0.0456934236, 0.0117891552, 0.0032614423, 0.0249860380, 0.0249522217, 0.1039189771, 0.0842838362, 0.0363088958, -0.0208922345, 0.0995834023, -0.0477370620, 0.0891350135, 0.0523701608, -0.0648821667, 0.0128548788, 0.0451346934, -0.0616277866, -0.0824178830, 0.0159179848, -0.0536175035, -0.0252855588, 0.0914390087, -0.2263345569, 0.0274426211, 0.0717954114, -0.0315459520, 0.1411216408, -0.0520854294, 0.0052765422, -0.0018626601, 0.0719841272, 0.1176683605, 0.0151238441, -0.0117401090, 0.1398263872, 0.0544242598, 0.1443022788, -0.0615949593, -0.0182290170, -0.0516024381, 0.0507333316, 0.0379597321, -0.1130566299, -0.0594686791, 0.0338397101, 0.0417401828, -0.0402018800, -0.0837354660, -0.0201596953, -0.0157726817, 0.0110341106, -0.0145634087, -0.1125585362, -0.0446619689, 0.0203986987, 0.0265135579, -0.0056474889, 0.1118915603, -0.0330775268, -0.0538095422, 0.1783994138, -0.0041747498, 0.1500112861, -0.0179956518, -0.0571065620, -0.0334258527, 0.0596374162, 0.1172836497, -0.0275321379, 0.0179065224, 0.0223280471, -0.0714894310, 0.0585783906, 0.0004371130, 0.0509639941, -0.0528186634, -0.0222668219, -0.0423581414, -0.0755579248, -0.0097453333, -0.1230565682, -0.1772913188, 0.0372188911, 0.0080792559, -0.0392041430, -0.0075669447, 0.1159597486, -0.0419059135, 0.0429671705, 0.0659055561, 0.0656833947, 0.0771020427, 0.0405302048, -0.0045745755, -0.0808189884, 0.0209047329, 0.0598969609, 0.0439065732, -0.0241123494, -0.0327750817, -0.0658896789, 0.0996424928, -0.0459263548, -0.0340097323, 0.1353664398, -0.0292581264, -0.0373584367, -0.1402460337, -0.0832182840, 0.0430759117, -0.0664235055, -0.0932016969, 0.0040392275, 0.0018969064, 0.0749462321, -0.0555894673, 0.0671933070, 0.0407989807, 0.0069384961, 0.0175982453, 0.0344996080, -0.0760125816, -0.0286425203, -0.0154063404, 0.0322302580, -0.0027307647, 0.0183504559, -0.0630460009, -0.1675569564, -0.0119859595, -0.0608101301, -0.0172715280, 0.0141280601, 0.0760336965, -0.1706824452, -0.0492955521, 0.1846629977, 0.0730790570, 0.0612770468, -0.0544792563, 0.0411776341, 0.0001213644, 0.1505319625, -0.0771405399, -0.0597257316, 0.1904767603, 0.0820791051, -0.0149120297, -0.0230038930, 0.0980460793, 0.0136531545, 0.0562509634, 0.0837782696, -0.1934613734, -0.0155947283, 0.0416662022, 0.0142179821, 0.0179220662, 0.0772737637, 0.0152959982, -0.0845854953, 0.0639102459, -0.0411618650, -0.0182673000, -0.0273945276, -0.0681291521, -0.1027310714, -0.0691534057, 0.0664654523, -0.0442683026, 0.0394629203, -0.0620404556, 0.0002979774, 0.0078061540, -0.0464575104, 0.0748018697, 0.0308549087, -0.1410077959, 0.0911187530, 0.0723737329, 0.1000658572, 0.0735355839, 0.0800238103, -0.0281756893, -0.1168674529, 0.0958971977, -0.0272747241, -0.0579744130, 0.1142364293, 0.0776807815, 0.0113222869, 0.0994237810, -0.0720270425, -0.0714706033, -0.1068311259, 0.0368788987, 0.0029301220, -0.0596563816, -0.0005280002, 0.0070070457, 0.0013333613, -0.0548148938, 0.0047524478, 0.0094059026, -0.0323190130, -0.0672168881, -0.1086275950, 0.0030544319, -0.0176632442, -0.0119610419, -0.0089533497, -0.0000033927, 0.0307492204, 0.0648109689, 0.0972646847, -0.0251800530, 0.0087843128, 0.0478811637, 0.0413783416, 0.1690342724, -0.0128179472, -0.0651435778, -0.0460796505, -0.0038526086, 0.0737809613, -0.0940822363, 0.0596134327, 0.0060525676, -0.0367107466, 0.0315641090, 0.0582758076, 0.0083608525, -0.0407847054, -0.0081555545, -0.1410275996, -0.0011550586, -0.1629568785, -0.0430471897, -0.0222019907, 0.0805674344, 0.0578419268, 0.0028284101, -0.1896507293, -0.1172680408, 0.0469100028, -0.0203222893, -0.1230950281, 0.0746271387, -0.0187572315, 0.0317138061, -0.0225188062, 0.1147134453, -0.0680857226, -0.0455658250, -0.0295178760, 0.0753332525, -0.0071279551, 0.0161607787, -0.0682808906, 0.0108085508, -0.0363540575, -0.0670757964, -0.0402329676, -0.1019965336, 0.0244171973, -0.0333081894, -0.0597220175, 0.0309780706, -0.0866097137, 0.0445290543, -0.0537515841, 0.1738415956, -0.0139539279, 0.0078402516, -0.0371315703, 0.0561784618, 0.0421047173, -0.0501534715, 0.0515362956, 0.0177435223, -0.0190946013, -0.0260568075, -0.0806522816, -0.0555881076, 0.0969095603, -0.0778178200, 0.0590836518, 0.0721555948, 0.0456389785, 0.0447585844, 0.0805932283, -0.0768386722, -0.0553372353, 0.0324376151, -0.0414092354, 0.0189321935, 0.1288989931, -0.0320480764, -0.1388577223, -0.0831976011, 0.0790212303, 0.0180110056, 0.0997816324, 0.0149156954, 0.0084786844, -0.0463529564, -0.0573525913, -0.0364216119, 0.0492353700, -0.0046840454, -0.0104780681, -0.1123491228, 0.0054269056, -0.0006215233, -0.0428187363, -0.0213790406, -0.0469927862, -0.0171600599, 0.1254685074, 0.0223115720, -0.0663116425, -0.0590596832, 0.0520350151, 0.0588547997, -0.0499558933, 0.0456766859, 0.1119114459, -0.0218020175, -0.0165614858, -0.0710047111, 0.1068567187, -0.1613653153, -0.1179587841, 0.1221769154, -0.0029386915, -0.1156605259, -0.0216776673, -0.1755834222, -0.0161524117, -0.0353909247, -0.1143446639, -0.0046249684, -0.0339464135, 0.0588081107, 0.1104559526, -0.0227906480, -0.1212204173, -0.1113459468, 0.0399877690, -0.0080713825, 0.0698923320, 0.0964648575, 0.0587776788, -0.0632629618, -0.1609721184, -0.0178592876, -0.0707896724, -0.0885741562, 0.0086450791, -0.0621165261, 0.0392098166, 0.0103875175, -0.0475464836, -0.0584842116, -0.1149662137, 0.1750046313, -0.0739477426, -0.0451343246, 0.0220988002, -0.1202981845, 0.0052305008, 0.1025970504, -0.0639623851, -0.0164667182, 0.0536090173, 0.0703485087, -0.1251674891, -0.1845846176, -0.0447834134, -0.0379976183, -0.0053678565, 0.0389824659, -0.1062265486, 0.0221462622, -0.0350076035, 0.0082184561, 0.0935636088, 0.0223111901, 0.0274420921, 0.0859273300, 0.0389723815, -0.0750681534, -0.0918984860, -0.0786817297, -0.0150555549, -0.0154574616, 0.1170171797, 0.0796196014, -0.0748683810, -0.0188513249, -0.0598361194, 0.0442587174, 0.0316242203, -0.0252141561, 0.0987590626, -0.0179842170, 0.1326968968, 0.0094603058, 0.0202763826, 0.0511111505, 0.1157472357, -0.0788450241, 0.0457194448, -0.0875570178, 0.1370931566, 0.0777077526, -0.0940542147, -0.0274667218, -0.0113037825, 0.0295863859, -0.0532833114, -0.0153945703, 0.0931949168, 0.0292171407, 0.0526238158, 0.0610482916, -0.0872375369, -0.0466556288, 0.0515262261, 0.0500875339, 0.0503724366, 0.0038721859, -0.1150175780, 0.0021272849, -0.1154324412, -0.0572097972, -0.0121420138, -0.0948280096, 0.0478718579, 0.0462888815, 0.0547430851, -0.0628280640, 0.1042889133, -0.0177531913, -0.0719483420, -0.2049055696, -0.0116001675, 0.0292257015, -0.0067677209, -0.0609165393, -0.0708521008, 0.0419655852, -0.0394350551, 0.0730927140, -0.0521570444, 0.0079958988, -0.0142104449, -0.0654491037, 0.0984651968, -0.0257082749, 0.0637766048, -0.0324907117, 0.0190730318, -0.0123335784, 0.0422477499, 0.0462091565, -0.0382661298, -0.0299153384, -0.0174950901, 0.1526709348, 0.1037895009, 0.0513149388, 0.0121885594, 0.1041121185, -0.0680388361, 0.0270919707, 0.0065943007, 0.0363160968, -0.0374665521, -0.0089207143, 0.1023254693, 0.0507832281, -0.0853757262, -0.0211989004, -0.0225937832, -0.0206516366, 0.0353584997, -0.0163949337, -0.0733127818, 0.0336238779, 0.0062846923, 0.0289092585, 0.0390557759, 0.0077492287, -0.1448412538, 0.0951693356, -0.0550019853, -0.0336428657, -0.0458743647, 0.0700312033, -0.0916686356, -0.0621304810, -0.0823971555, 0.1069304496, -0.0358845294, 0.0363724977, 0.0689303130, 0.0648348927, -0.0585389547, -0.0201867856, 0.0555917174, 0.0126408245, 0.0135021443, 0.0041181203, -0.0465542674, 0.1228762195, 0.1224306151, 0.0125897350, -0.0409070551, -0.0188251454, 0.0529306754, -0.1037908569, -0.0951520428, -0.0148317860, 0.0840732902, 0.0444398485, 0.0190448798, 0.0772236809, 0.1113288626, -0.0011963345, 0.0317529403, -0.0917072296, 0.0063952198, 0.1616722643, -0.1182839572, -0.0323215388, -0.0736695826, 0.0306749362, -0.1105047241, 0.1069331169, -0.0269538295, -0.0390224904, -0.0365073644, -0.0482487045, 0.0264782365, 0.0363704525, 0.0638447627, 0.0882644504, -0.0534951054, 0.0793841407, -0.0267178360, -0.1181490272, -0.0361089744, 0.0701707304, -0.0196934342, 0.0577477403, -0.0902309865, 0.1367824525, 0.0928215012, 0.0654328093, -0.0016786796, 0.0188370142, 0.0219651666, -0.0090128286, 0.0137788001, 0.0464745909, -0.0089689810, 0.0524959266, -0.0611573495, -0.0814700499, -0.2597598135, -0.0859568194, 0.0905547515, -0.2116799802, 0.0268776361, 0.0833328515, 0.0855334923, 0.0009090195, 0.1036060899, 0.0262620822, 0.0408662073, -0.0338061713, -0.0040570302, 0.0429332741, 0.0162051991, 0.0464275889, 0.0765231252, 0.0177567434, 0.1053576469, -0.0970422253, -0.1954248399, -0.0263870861, -0.1201024204, -0.0671525821, 0.0390937030, 0.0478479937, -0.1028170809, -0.0801726207, -0.0619925372, 0.0306549408, -0.0233198348, -0.0493439324, -0.0232003145, 0.0283306949, -0.0111969411, 0.0759544522, 0.0298907217, 0.1504472196, -0.0440373719, 0.0038008755, 0.0248088632, 0.0323543549, -0.0678792223, 0.1413787752, 0.0498210080, 0.0383482762, -0.0349029005, 0.0936943591, 0.1256162226, -0.0764833987, -0.0898856148, -0.0234229565, 0.0511394329, -0.0858557746, 0.0122509561, 0.0310813505, -0.0330894031, -0.1409473717, 0.0338893794, 0.1079640165, -0.0661715940, 0.1330673993, 0.0005279673, 0.0353820436, -0.0957241580, 0.0439535603, 0.0619285814, -0.0353078060, 0.0656471625, 0.0441959091, 0.0366462246, 0.0696557388, -0.0450493284, -0.0097699277, 0.0132046062, 0.1797288656, 0.0688894242, 0.0818370730, -0.0683472082, 0.0936165005, -0.0681142360, 0.0133640980, 0.1399864703, 0.0304596890, -0.0656583235, -0.0247959960, 0.0304415803, 0.0612315796, 0.0115396259, -0.1156719103, -0.1245826110, -0.0518384464, 0.0051591918, 0.0585364476, -0.0173714794, -0.0744559318, -0.0115051987, 0.0083035361, -0.0436007641, 0.0491353534, -0.0278473776, 0.0937454849, -0.0492560007, -0.0096212821, 0.0035690910, 0.1287418008, -0.0557487495, -0.0030729473, 0.1004060358, -0.1958128661, -0.1866258383, -0.0764505714, -0.0577315427, -0.0824459046, 0.0976337790, 0.1639193147, 0.1359777153, 0.1149301901, 0.0504262075, -0.0822897479, -0.0829870626, -0.0474003963, -0.0160291214, -0.0133024100, -0.1233293712, 0.0353058912, 0.1165165976, -0.1014753431, -0.0444083624, -0.1601289660, 0.1346036792, 0.0029317355, 0.0389400981, -0.0917305425, -0.0033178041, 0.0564440973, 0.0529160574, -0.1125573218, 0.0325288959, -0.1153083816, 0.0083743818, -0.0071975105, -0.0640215799, 0.0634773001, 0.1339784563, -0.0046272045, -0.0670743212, -0.0309833642, 0.0977071747, 0.0874917507, -0.0211676080, -0.0840942487, -0.0234568585, -0.0157564003, 0.0332578085, 0.0166718680, 0.0161864571, -0.0441384912, -0.0152647747, -0.0547277480, -0.0725929812, -0.0355109312, 0.0298155025, 0.0094644697, -0.0856882334, -0.0596018285, -0.1642477810, 0.1194175333, -0.0221827254, -0.0385454856, -0.0182398874, -0.0172533672, -0.1201385334, -0.1364931613, -0.0322395377, 0.0403578244, -0.0757503062, -0.0275245458, 0.0154543677, 0.0262441672, -0.0439310260, 0.0421641544, -0.0147053376, 0.0489328243, 0.0491180383, -0.0030427042, 0.0051377043, 0.0436524563, -0.1146244109, -0.0677600130, -0.0278046131, 0.0701158047, -0.0001758515, -0.0107200509, 0.0632696822, 0.0363185331, 0.0400099158, 0.0833218843, -0.0139602963, -0.0039334064, 0.0673206374, 0.0362156928, -0.1453154832, 0.0296457019, -0.0048657637, 0.0307410397, -0.0633938611, 0.1018529683, -0.0183092169, 0.0446799248, 0.1007270142, 0.0548723489, 0.0743549168, -0.0083069792, -0.0647825152, 0.0200897921, 0.1085316837, -0.0032052041, -0.0779649913, -0.0277688745, -0.0227753185, -0.0325037874, 0.0028571161, -0.0648041517, 0.0244016424, 0.0286502168, -0.1752509773, -0.0728280693, 0.0230400078, 0.0866274238, 0.1216768175, -0.0395899117, -0.0182306394, 0.0988738462, -0.0079029799, -0.0387625657, -0.1043534130, -0.0287803877, 0.0161586888, -0.0325008258, -0.0010360479, 0.0106272241, -0.0576087311, -0.0531660020, 0.0972256660, -0.0341708697, -0.0914973989, 0.1372541338, 0.1525273025, -0.0707062557, 0.0544360243, 0.0568530075, 0.0064776563, 0.0201341901, -0.0285153929, -0.0437503420, -0.0666036680, 0.0294151064, -0.0780247003, -0.0527915731, 0.0930563509, 0.0224787854, -0.0565362982, 0.0533638783, 0.0905143917, 0.0152628943, 0.0899310485, 0.0103890244, -0.0967554376, -0.1307729036, -0.1021584794, 0.0349118933, -0.0177455451, -0.0168911815, 0.0063161175, -0.0177603234, -0.1142529696, 0.0453882664, -0.0117648272, 0.1586432904, -0.0266491044, -0.0803221911, 0.0815692097, 0.0071917493, 0.0455355570, -0.0613731183, -0.0290147904, 0.0589653887, -0.0247367453, 0.0167820882, -0.0639417470, -0.0882745758, -0.0613006912, 0.0021431556, -0.0640932843, 0.0407812819, 0.0239846352, 0.0194240995, -0.0356092416, 0.0725561902, -0.0778270736, -0.0194322690, 0.0401752032, -0.0193562694, -0.0789489746, -0.0940938890, -0.1342396587, 0.0188605469, 0.0673182607, -0.0874921679, 0.0700052083, -0.0946822986, 0.1469577402, 0.0933383703, -0.0016799920, -0.0512473620, -0.1005613208, 0.1044983044, 0.0073872330, 0.0756097510, 0.0312451962, 0.1220311001, -0.0116164479, -0.0355351083, -0.0676794425, 0.0981821194, -0.0311754495, -0.0210255925, 0.0583711043, 0.0970366374, -0.0850465149, 0.1239605322, -0.0001685424, 0.1137715876, -0.0002793517, 0.0017191911, 0.0281533338, -0.0055437763, 0.0076302630, -0.0761514828, 0.0366672724, 0.0233501364, -0.0351974815, 0.0106879640, -0.0525830984, -0.0670604706, -0.1008429900, 0.0245958753, 0.0247104224, -0.1215112135, -0.0673742145, 0.0181950759, -0.0005712010, 0.0901276469, -0.1007596925, -0.1282883137, -0.0910752192, -0.0322759785, -0.0069635538, -0.0237175319, -0.0192180313, -0.1444665939, 0.0178727023, 0.2004382461, 0.0946152136, 0.0326689407, 0.0205016211, 0.0397166349, -0.0706244484, -0.0527637191, 0.0432450660, -0.0396556035, 0.0494754799, 0.1457049102, -0.0097372718, -0.0296161287, 0.0593293048, 0.0322861411, -0.1237019673, -0.0010885457, -0.0663149729, -0.1465275884, 0.1293004751, -0.1013561264, -0.1967156678, 0.0871322528, 0.0313916169, 0.0895048156, 0.0160682574, -0.0253943503, -0.0232735109, -0.0918916687, 0.0677759051, -0.0452494696, -0.0128197232, 0.0731719732, -0.0333527550, -0.1459688842, -0.0517225266, 0.0243864190, 0.1014178023, 0.0754081681, -0.0412750170, 0.0344360396, 0.0710547566, -0.0045896680, -0.0079328399, -0.0716781616, -0.1451244950, -0.0290328395, 0.0360446498, 0.0841928795, 0.0249643661, -0.0921005309, -0.0055859294, 0.1754537672, 0.0120663885, 0.0182452872, -0.0335285030, -0.0746439919, -0.0916826129, -0.0175466556, 0.0572032481, -0.0179292019, 0.0183914881, 0.0088540753, 0.0048737475, -0.0426993370, -0.0645207092, -0.0475124232, -0.0566189177, 0.1765027940, 0.0061357571, 0.0020019491, 0.0526941270, -0.0875795409, 0.0013166657, -0.0608433709, 0.0280439816, -0.0410627574, -0.1396007091, -0.0941044614, 0.0945141912, -0.0393515490, 0.0993771181, 0.0043761898, -0.0177540537, 0.0339410082, 0.0295502115, -0.0587707125, -0.0348330699, 0.0944097340, 0.0178828761, -0.0304619335, 0.0588773414, -0.0142551940, -0.0866708755, 0.0169991162, -0.0163745731, -0.0216387976, 0.0495640859, -0.0590790808, 0.0008137234, -0.0652397648, -0.0630582571, -0.0481678098, -0.1459893584, 0.1000575796, -0.0444729850, -0.0040519256, -0.1417557150, -0.0581019558, 0.0454629436, 0.0883072913, 0.0069054090, 0.0349129960, 0.0725008696, -0.0342267938, -0.0687484294, 0.0835102201, -0.0689672083, -0.0798093900, 0.0773896500, 0.0194355473, 0.1070055738, 0.0366396978, -0.0707638487, 0.0035978414, 0.0262524150, -0.0501004346, 0.1123794764, 0.1006334946, -0.0490593873, -0.0837102160, 0.0318800099, 0.0468202271, 0.1399875432, -0.0278983600, -0.0627403408, -0.0435981415, 0.1557394713, 0.0195429027, 0.0542451292, 0.1623593718, 0.0136218788, 0.0076934276, 0.0223569907, 0.0375245400, -0.1387870759, 0.1570258290, -0.0590763204, -0.0729379207, -0.0002456464, 0.0216122139, 0.0596958436, 0.0793428868, -0.0235301554, -0.0592562445, -0.0103093823, -0.0797589570, 0.0598289371, -0.1111167669, -0.0031150891, -0.0161460359, 0.0333138332, 0.0182670783, 0.1184129119, -0.0111190556, 0.0240667984, -0.0360490456, 0.0923641473, -0.1227638647, 0.0253043026, -0.0194494519, 0.0731639862, -0.0477752462, -0.0475462936, 0.0358465351, 0.0814219862, 0.2333900481, 0.0965444744, 0.0423808172, -0.1132915989, 0.0214405190, -0.0665311664, -0.0161696766, -0.0028984877, -0.1493366212, -0.0476040840, -0.0583151951, -0.0087587126, -0.0649607331, 0.0016681948, -0.0572867692, 0.1039424315, 0.0198483542, -0.0536034741, -0.0116870189, -0.1465070397, -0.1140164360, 0.0706734434, 0.0113775376, 0.0063518803, -0.0503856950, -0.0466981232, -0.0947569385, 0.1229305193, 0.0653536394, -0.0997125581, -0.0889717340, 0.1217206642, 0.0499355234, -0.0598110743, -0.0476409420, 0.0713093728, 0.0657846257, -0.1358217150, 0.0188805424, -0.1149722561, -0.0124642188, -0.1447576582, 0.0233303905, 0.0058809659, -0.0081980368, 0.0534980930, -0.0736541450, 0.0029756348, 0.0131680984, 0.0547611751, -0.0098422077, 0.0219473206, 0.1246522069, -0.0793022439, 0.0356576182, 0.0247753952, 0.0421358608, -0.0378041230, -0.0441905372, 0.0495847389, 0.0969690308, 0.0967443287, 0.1286601573, 0.0061755278, 0.0734226257, -0.0134129366, -0.1008438766, -0.0115204435, 0.0946105421, 0.1132613197, -0.0392796025, -0.0289854445, 0.0485050082, 0.0222421214, 0.0235583242, 0.1637597531, -0.0073446427, -0.0324971303, 0.0445187762, -0.1236608624, 0.0872225240, -0.0059626102, 0.0001888851, 0.0569343120, 0.0731129497, -0.0336171612, -0.0188722499, 0.1608490646, -0.0101192910, 0.0741227493, 0.0019376809, 0.0874354541, 0.0671371073, 0.0232783221, 0.0671310872, 0.0072224094, 0.0014664619, 0.0673564076, 0.1112669408, -0.1854629815, -0.0564671420, -0.0009888527, 0.1460985094, -0.0371394567, 0.0067495401, 0.0232254639, 0.0444662496, 0.0811106041, -0.0668247193, 0.0523953587, -0.0508752018, 0.1837406009, -0.0181013811, 0.0000378459, -0.0661196187, 0.0571436435, 0.0592584796, 0.0248953775, -0.0116194580, -0.0905574560, -0.1506186128, -0.0001497893, 0.0606089197, 0.0485390089, -0.0578851514, 0.1105298996, -0.1571538001, 0.1234025732, -0.0805158839, -0.0658803657, 0.0592269599, -0.0050010458, 0.0290163215, 0.0697746128, -0.0410255827, 0.1160103753, 0.0876864642, -0.0063669183, 0.1069361642, 0.0876103714, 0.0185301974, 0.0176915675, 0.0517588817, 0.1131317765, 0.0064079091, 0.1279710829, -0.0836766437, -0.0574883781, -0.0154307745, -0.1168163046, 0.0949607491, -0.0391553864, 0.0579691418, 0.0879530162, 0.0675611421, -0.0354324393, -0.0260433853, -0.0392589755, -0.0101984059, -0.0258085914, 0.0008064524, -0.0091150906, 0.0697072893, -0.0365445018, 0.0070564467, -0.0064116288, 0.0412842631, -0.0872097984, -0.0028742733, 0.0602228567, 0.0735422447, 0.0067256484, -0.0370932259, -0.0537832975, -0.0836668611, -0.1484625041, -0.0867257267, -0.0669227093, 0.0417173542, -0.0123224650, 0.1334071904, -0.0493521206, 0.0198921617, 0.0626974925, -0.0145938210, -0.1030163541, 0.1042806432, 0.1163916811, 0.0320258699, 0.0241191387, 0.0273677669, 0.0210796315, 0.0322624035, 0.0507129878, 0.0710750148, 0.0478988551, 0.0845498741, 0.0438886695, -0.0601728149, 0.1684907824, -0.0641755685, 0.0608878620, -0.0015964665, 0.0867168158, 0.0399214514, 0.1242792979, -0.1264576912, 0.0045023537, -0.0867555588, 0.0050341529, 0.0230580457, 0.0001247438, 0.0161153339, -0.0452443771, -0.0780140460, -0.0458109677, 0.0155403307, 0.0625566095, -0.0072239800, 0.0660458952, -0.1080568582, -0.0874880776, 0.0797928274, 0.0257128179, -0.0740295798, 0.0627940968, 0.0572439395, -0.1377660781, -0.0047317338, 0.0311258174, 0.0921622440, 0.0842229575, -0.0446323864, -0.0038937835, 0.0247414224, -0.0013533217, -0.1406357586, -0.0535633750, 0.0621687919, 0.0303889234, -0.0157065708, -0.0424607806, 0.0756558627, 0.0279450174, -0.0409376584, 0.0704238638, -0.0531269759, 0.0546793304, -0.1320349127, 0.1223303080, -0.0954849347, -0.1243251488, 0.0068396521, -0.0772038177, 0.0872772187, 0.0277696680, 0.0853449926, -0.0288728438, -0.0397258103, -0.0742855668, -0.0825675204, 0.1653425694, 0.0392976627, -0.0320290327, 0.0617345907, 0.1312275380, 0.0338633433, 0.0173961222, -0.1052561924, 0.0058303699, -0.0121753607, 0.0887450501, 0.0636792034, -0.0100357812, 0.0813158751, 0.0757877976, 0.0329449289, 0.0766462386, -0.0307779256, -0.0659871027, -0.0622697696, 0.0887428373, 0.0097536761, 0.0080113774, -0.1094635651, -0.0784281641, 0.2089810371, -0.0776648447, 0.0868659690, 0.0080873789, -0.0312657729, 0.0653613210, 0.0293115266, 0.0128730563, 0.0560424030, -0.0642155260, 0.0225096904, 0.0243314821, 0.0803600922, 0.0913867950, -0.0039063776, 0.0113500608, 0.2117313296, -0.0643850267, -0.0184045397, -0.0075555565, -0.0344866775, -0.0278682318, 0.0738489330, 0.0731621012, 0.0092220753, 0.0401251689, 0.0355361737, 0.0062723029, -0.0066041066, -0.0097878063, -0.0484545678, 0.0478914119, 0.0120656416, 0.0766580254, -0.0744631067, -0.0417292267, -0.0014422121, -0.0494647026, 0.0128355352, 0.1457075328, 0.0239211712, -0.0688251257, 0.0222152304, 0.0710933432, -0.0768501982, -0.0691603422, -0.0074037351, -0.1068822891, -0.0692021251, 0.0589057058, 0.0269785989, -0.0572839119, -0.0294209924, -0.0140992785, -0.0250712559, 0.1531628221, 0.0153478179, 0.0313954800, -0.0101797646, 0.0814818293, 0.1671516448, -0.0437091663, 0.0653687418, 0.0391351432, 0.0686048940, 0.0015555333, 0.0455194451, -0.0507646315, -0.0093319295, 0.0940217748, -0.0258352626, -0.0014322110, 0.0793710873, -0.0532468185, -0.0367627330, -0.0167982988, 0.1536003649, -0.0654245466, -0.0341275521, 0.0028440733, 0.0700854510, 0.0033389577, 0.0829451755, 0.0801526308, 0.0557792522, -0.1358473152, -0.1276811361, 0.1041204482, -0.1060701981, 0.0275610182, 0.0094943698, -0.0293370392, 0.1201114878, -0.0855043754, 0.0689235106, 0.1094157398, 0.0037554775, 0.0228882022, -0.0434192419, 0.0904167816, -0.0142947761, 0.0162552148, -0.0937574580, 0.0565755181, -0.0633482188, 0.0419541337, 0.0403157845, -0.0187096205, 0.0547077991, 0.1687364280, 0.0526794456, 0.0697703063, 0.0555092357, 0.0063527580, 0.0643329173, 0.0012691743, -0.0319993868, 0.1579308659, 0.0416245759, 0.0093722651, 0.0702283382, -0.0577185974, -0.0564557947, -0.0097764125, -0.0870343894, -0.0523675233, 0.0608998425, -0.0201499686, -0.0419298485, 0.0181745291, 0.0160836894, -0.0797447488, 0.0058996361, -0.0058199982, -0.0077383006, -0.0440443717, 0.0828589275, 0.0401829071, 0.0322458819, -0.1078597456, 0.0280061271, -0.0878069848, 0.0226494931, -0.1574484706, -0.1674277484, -0.1669297218, 0.0320500880, 0.1221373081, 0.0669855401, -0.0563287437, 0.0448820256, -0.0262054093, 0.1104819328, 0.1544873714, 0.0054552276, -0.1132586896, -0.1153229699, -0.0208944306, 0.0966155827, -0.1150988042, 0.0045927581, -0.0104923276, -0.0740533471, -0.1789845079, -0.0187979713, -0.0300443936, -0.1139680743, -0.0580266118, -0.0011552541, 0.0154472683, 0.0286358818, -0.0439469516, -0.0296673216, 0.1695308685, 0.0555748194, -0.0857098401, -0.0520616136, 0.0598377995, 0.0987122506, 0.0243209470, -0.0770395100, 0.0864512920, -0.0678543374, -0.1281796098, -0.0064142845, 0.0440922789, -0.0249977428, -0.0714589059, 0.0545324534, -0.0337694734, -0.0121607361, -0.0182125736, 0.0394729525, -0.0693624616, 0.0398740806, 0.0200261008, -0.0037151785, 0.0832293183, 0.0836259499, -0.0453855284, -0.0239797793, 0.0241978578, -0.0965526104, -0.1338455230, 0.0007783044, -0.0821002051, 0.2103963792, -0.1136850864, -0.0419515632, 0.0221702438, 0.0184070133, -0.0573836938, 0.0689206123, -0.1254368722, -0.0369609520, 0.0382469967, -0.1269864738, 0.0179725569, -0.0547592044, -0.0321998298, -0.0344809331, -0.0652064383, -0.0539928526, -0.0062645189, -0.0979872048, -0.0773418322, 0.0568497516, 0.1079934165, -0.1069061384, 0.0089386981, 0.0810049549, -0.0702530220, 0.0683782697, 0.0791905895, 0.0138825988, -0.0283787269, -0.0118424967, 0.0829147398, 0.0198568366, 0.0435910486, -0.0408908576, -0.0688148513, 0.0868998691, 0.0909567848, 0.0041685491, 0.0515990779, -0.0807149485, -0.0157657545, 0.2198896855, 0.1060832515, -0.0086808326, -0.0707847029, 0.0797147900, 0.1141807139, 0.0691134483, -0.0602417961, -0.0447875857, 0.0189315397, -0.0121926293, -0.0216879435, 0.0478310026, 0.0426965989, 0.0236850586, 0.0679929778, -0.1292578131, -0.0425243825, 0.0193270482, 0.0818793252, 0.0130564570, 0.0486825109, -0.0914880186, 0.1314396113, -0.0921157375, 0.0404383838, -0.0306893196, -0.0901300982, 0.0006457340, -0.1006572396, -0.0292771105, 0.0513170026, 0.0553065650, 0.0478879586, 0.0308089368, -0.1243729740, -0.0023440965, 0.0288643986, 0.0223645270, 0.0539006926, 0.1165379062, -0.1201736853, -0.0440265164, 0.0954831392, -0.0272764042, 0.0710489526, -0.0027906019, 0.0097954236, -0.0251976699, 0.0336404741, -0.1739517748, 0.0360671207, -0.1602607071, 0.0265744980, -0.0959069878, -0.0514329150, -0.0995692462, 0.0198455378, 0.0790572688, -0.0698764846, 0.0774359927, 0.0323913395, -0.0531114005, 0.0086308271, 0.0878313109, -0.0420175046, -0.0653136149, 0.0203467477, 0.0217948221, 0.0733500794, 0.0858644992, 0.0167602543, 0.0202298872, -0.1216767281, 0.0005636204, 0.0926601216, 0.0318829603, -0.0200266670, -0.1243117005, 0.0044076229, -0.0976687372, -0.0617102198, -0.0681671947, 0.0130983638, 0.1341377497, -0.0849648938, -0.0471285544, -0.0635030791, 0.0137872333, -0.1052224562, 0.0435184650, 0.0525028482, -0.0881773755, 0.0007380294, 0.1008470431, 0.0511384383, -0.0023202507, 0.0329325758, 0.0432436913, -0.0423586406, -0.0020705722, 0.1553780735, -0.0125042936, -0.0625522882, 0.0795889571, -0.0468736887, -0.0387453251, -0.0064231791, -0.1042973548, -0.0334860124, 0.0520182848, 0.0391634107, 0.0688793510, -0.0517299622, -0.1204016134, -0.0817372799, -0.0832161307, -0.0961168706, 0.1621669531, 0.0662078485, -0.1062239110, 0.0897058398, -0.1168743297, -0.0672466010, 0.0218559355, 0.0050734803, -0.0296759605, 0.0553810261, 0.0129150087, 0.0000513161, -0.0181250758, 0.0515805073, -0.0958028510, -0.0285076872, 0.0214478299, -0.0618486553, 0.0160428435, 0.1291568279, -0.0603254959, 0.0902380273, 0.0134175150, 0.0424921960, 0.0067777936, -0.0943322927, 0.0203801468, -0.0026671954, -0.1588412821, -0.0228045657, -0.0152395247, 0.0530699827, -0.1218482703, -0.1417750120, 0.1252148449, -0.0052386438, -0.0340442844, 0.0105363131, -0.0438109413, 0.0056144390, 0.0510074385, -0.0103245266, 0.0121088559, 0.1997838765, -0.0345810615, 0.0971429422, 0.1009270623, 0.0257744435, 0.0698157549, 0.0296992976, -0.0005758596, 0.0238736793, -0.0334807858, -0.0170560274, -0.0483697504, 0.2354348898, 0.0747697502, 0.0195548646, -0.0941570327, -0.0385670364, 0.0271278638, -0.1319189966, 0.0429065116, 0.0942079127, -0.0170036573, 0.0219317935, -0.0940582231, -0.0418793932, 0.0023884997, -0.0356085338, -0.1209431142, 0.0391790569, -0.1059161574, -0.0378788225, 0.1194250286, 0.0437599830, -0.0609893464, 0.0564155020, -0.0680677444, 0.0732514262, 0.0249367803, 0.2439361513, -0.0859879553, -0.0714526996, -0.0236366447, 0.0178222600, 0.0361495577, 0.0576562695, 0.0803618878, -0.0506387576, -0.1257403046, -0.0195859168, 0.0487712994, 0.1151759252, 0.0080986880, -0.1304698437, 0.0507494025, 0.0563767776, 0.0102990353, 0.0464154147, -0.0186121501, 0.0790107250, -0.0401366055, -0.0794236213, 0.0103213042, 0.0066424198, 0.0490878187, 0.0110114533, -0.1119016632, 0.0746920928, 0.0574095659, 0.0197063126, -0.0759655908, -0.0850359946, -0.0383208357, -0.0968296379, -0.0984874591, -0.0422967188, 0.0291069783, -0.0896247998, -0.0817076787, -0.0301384199, 0.0065683066, 0.0413574688, 0.0264765769, -0.0787192136, 0.0430310629, -0.0243533198, -0.0846701115, 0.0911835805, 0.0412633307, 0.0994549319, 0.0083621396, -0.0689767823, -0.0158940181, -0.0009628097, 0.0476832241, 0.0532224514, -0.0729031414, 0.0016843412, -0.0782572031, 0.0624111779, 0.0379929431, 0.0420431793, -0.0871324241, -0.0883425847, 0.0981696546, -0.0873012915, 0.1130739376, 0.1010827571, 0.0882504582, 0.0134694995, 0.0977635533, 0.0573650189, 0.0493196920, -0.0114549650, -0.0863954127, -0.0315509774, 0.0009411438, -0.0087885987, 0.0861302614, -0.1040150523, -0.0714698285, -0.0184496082, 0.1037433073, -0.1548810452, -0.0049068537, 0.0636281818, 0.0232060160, -0.0431726314, -0.0381353311, 0.0462075472, -0.1072213873, 0.0154725732, -0.0151490355, 0.0092076994, 0.0347471610, 0.0242579151, -0.0222287364, 0.0665237308, -0.0056347130, -0.0493258946, -0.1251291633, 0.0220922772, 0.0751060024, 0.0865276456, 0.0637481660, 0.0622026622, 0.0299993698, 0.0344802439, -0.0200301446, -0.0368580632, 0.0833316818, 0.0865860209, 0.1450538784, -0.0454145297, 0.0416915491, -0.0786233470, -0.0505163632, -0.1367824972, -0.0001511741, 0.0125913024, 0.0473473035, 0.0007416732, 0.0229983237, 0.1914096624, 0.0398840941, -0.0313673988, 0.0731110722, 0.0208721980, -0.0530163869, 0.0100689819, 0.0943827108, -0.0145588843, 0.0166615881, 0.1139361113, -0.0538092442, 0.0264776293, -0.0916142687, 0.0334092826, -0.1057851836, 0.0146050919, 0.0191169549, -0.0679218471, -0.0228169207, -0.0950490683, 0.1040488482, -0.0360765010, 0.0042657470, -0.0102268746, 0.1798235625, 0.0636180043, -0.1335318089, 0.0130655440, 0.1416250914, 0.0113335578, -0.0022194202, -0.0113188662, -0.0879702047, 0.0604476593, -0.0131089874, -0.1016011834, -0.1254963875, -0.0150026055, -0.1550388038, -0.0339701958, -0.0060774554, 0.1085064709, -0.0468938798, -0.0123394337, -0.1110958233, -0.0156155694, 0.0142708439, 0.1182109341, 0.0734954998, 0.0049898881, -0.0468929112, 0.0442090221, -0.0166577250, 0.0720424950, 0.0204515122, -0.0950943008, 0.1053755358, 0.0541034825, 0.1258007288, 0.0741529092, 0.0426499397, -0.0813820958, 0.1012632474, 0.1343221217, -0.0355770998, -0.0658359826, 0.0834755599, 0.0749089494, 0.0687122270, 0.0310351700, 0.0542884953, -0.0812855661, 0.0300815981, 0.0102574667, 0.0253178682, 0.0081176739, 0.0540204793, 0.0536383875, -0.0264176298, 0.0477903336, 0.0204279125, 0.0834441110, 0.0360392220, 0.1178029478, 0.0626823604, 0.0690364987, -0.0259394031, -0.0792092010, 0.0026149626, 0.0191037599, 0.1295855492, 0.0589824021, 0.0716928840, -0.0313340984, 0.1151900962, -0.0329127200, 0.0142323263, -0.0237017218, -0.0674042553, 0.1283106506, -0.0768298805, 0.0278504882, 0.0462682284, 0.0093266005, -0.0524202473, 0.0234445687, -0.0919661298, 0.0137175722, -0.1333470047, -0.1268091500, 0.0153346024, -0.0323224179, -0.0377622172, 0.0580800101, 0.0626814291, 0.0578652956, -0.0207372699, -0.0579147227, -0.2024160773, 0.0881060809, 0.1260193288, -0.0169266928, 0.0048750350, -0.0540420637, -0.0861315951, -0.0147763835, 0.0721973926, 0.0332406536, 0.0618743598, 0.0290571805, 0.1534718871, 0.0415793806, 0.0316045880, -0.0765059441, -0.1111333221, 0.0559767447, 0.0538396500, 0.0107831256, 0.0068567749, -0.0160995796, -0.1406645775, -0.0396242365, -0.0559605137, -0.0677256733, 0.0526693575, -0.1245793402, 0.0153996926, -0.1213660315, 0.0108407317, -0.0216448456, -0.1261765063, -0.0469161868, -0.0691894814, 0.0238361601, 0.0642322302, 0.1117692068, -0.0709031746, -0.1103818640, 0.0453511141, -0.0726423040, 0.0304128341, -0.0221242737, 0.0196586438, -0.0233312380, 0.0017502361, 0.0013777938, 0.0762589425, 0.0085088126, -0.0113452235, 0.0120323421, 0.0720280185, -0.0023770202, -0.0507283509, -0.0235821642, 0.0203076787, 0.1548691392, 0.0204606801, 0.0078305760, 0.0200431123, 0.0088570993, 0.1041210294, -0.0691506714, -0.0079423636, 0.0587527007, -0.0160465427, 0.0121524027, -0.0223706570, -0.0482843146, -0.0326083899, -0.0612890236, -0.1074414402, -0.0301357843, -0.0183428712, 0.1306585222, -0.0478700623, -0.0519223958, 0.0577231310, 0.0901852474, 0.0282069575, -0.0058350400, -0.0264355335, -0.0418496206, -0.0329964831, -0.0516269580, -0.0475947820, 0.0232709646, -0.0354283936, 0.1473980695, 0.1056659818, -0.0327971391, 0.1134982482, -0.0328853168, -0.0289962608, -0.0430507436, -0.0002362828, -0.0088244295, -0.1065561175, -0.0947490707, -0.0404929705, -0.0110871335, 0.0824669302, -0.0083679613, -0.0255680475, -0.0115395430, 0.0685898215, 0.0728119761, 0.0620458126, -0.1192451790, -0.0467780568, 0.0515235364, -0.1156294420, -0.0280419812, 0.1098638624, 0.0297459401, 0.0365925059, -0.0248221904, 0.0283779800, -0.1201326847, -0.1501233578, 0.0658755824, -0.0647841394, 0.0394935682, -0.0629486591, 0.0336970538, 0.0427250415, 0.0619626902, 0.0477197953, 0.0722250566, -0.0521442294, 0.0310062040, 0.1591831744, -0.0314957611, -0.0391033329, -0.0443119556, -0.0036448403, -0.2605889440, -0.0343720354, 0.0597182177, 0.0893674642, 0.0296812281, 0.0111475606, -0.0338080116, -0.0483819656, 0.0203020200, -0.0454770252, -0.0690290406, 0.0181474313, 0.0602151491, -0.0342521332, 0.1060257331, 0.0621915571, -0.0222408567, 0.0155592160, -0.0711726472, 0.0305890553, 0.1162358820, -0.1092919335, 0.0486385785, 0.0416495092, -0.0604256950, -0.0699974298, -0.1745685488, -0.0216241963, 0.0597310178, -0.1255599111, -0.0893984064, 0.0705609769, -0.0468054600, -0.1126428917, -0.0072304676, 0.0969175547, -0.0340537503, 0.0320966765, 0.0723952726, -0.0123866415, 0.0509342328, 0.0584753007, -0.1734406650, -0.0217446871, -0.0243458468, 0.0115857357, -0.0067552696, 0.0004703052, -0.0615231097, -0.0505189002, -0.0405276679, 0.0737490654, 0.0291101392, -0.0553291775, 0.0446681418, -0.0151095726, -0.0733678639, 0.0411349386, -0.0885702446, 0.1005892232, -0.0076044439, 0.0569936410, 0.0236496329, -0.0973860919, -0.0957545936, 0.0777925998, -0.0130921658, 0.0165977105, 0.0080071576, -0.0211350136, 0.0984927043, -0.0712426379, -0.0204691458, -0.0062071560, 0.0160430614, -0.1184501275, 0.0523219481, -0.0122822579, -0.0841906145, -0.1249218434, -0.0124990186, 0.0315719582, -0.0748575926, 0.0503231212, -0.0361110196, -0.0351121947, 0.0506999008, -0.0163764544, 0.0788066909, 0.0741702467, -0.0278462637, -0.0201856159, -0.1219725907, -0.0650945604, 0.0955844223, -0.2866591215, 0.0410725884, 0.0797279477, 0.0053914315, -0.1035585031, -0.0092879822, 0.0882193670, 0.2345323712, 0.0214069914, 0.0878892392, -0.0017655874, 0.1091284603, 0.1399340779, -0.1359725744, 0.0100940000, 0.1320474148, -0.0966182798, 0.0662619919, 0.0044553634, -0.0002320763, -0.1068186089, 0.0324431993, -0.0201682188, 0.0631776303, 0.0491540655, -0.0000864938, -0.0960861892, -0.0536223203, 0.0069631822, -0.0244490225, -0.0837394297, -0.0077410936, -0.0281858034, -0.0599884093, 0.1681564450, -0.0915236324, 0.0212854519, -0.0559944957, -0.0882653743, -0.1403362751, 0.0138805714, -0.0229826793, 0.0169970151, 0.0886787400, 0.0615095235, 0.0951691940, -0.0487438627, 0.0709145144, -0.0952762365, -0.0365570299, 0.1582123935, -0.1130008176, -0.0669636130, -0.0214033723, 0.0090549476, 0.0403287560, -0.0414751880, 0.0396166667, 0.0468940102, -0.0061468342, -0.1037631556, -0.0447975211, -0.0548897758, -0.0113910474, 0.0102219731, 0.0251506642, 0.0097483480, 0.1306868643, 0.0102140624, -0.0719471797, -0.0011011838, 0.1052635983, -0.0528153777, 0.1168537959, 0.0162652414, -0.1148059964, 0.0308606308, 0.1443434805, -0.0890858620, -0.0647070110, -0.0589136295, -0.1260615289, 0.0425326340, 0.0920444354, 0.0368188061, 0.0406398438, -0.0109254904, -0.0648535043, 0.0953782648, 0.1555072516, -0.0001281432, 0.0493218191, -0.0326080360, 0.0497607738, -0.0637680516, -0.1222517341, 0.1320959926, 0.0007492392, 0.1197416857, -0.0588067956, 0.0046151006, 0.1315536499, -0.1028036401, -0.0210972801, 0.0612342991, 0.0392727368, 0.0462636389, 0.1272519976, 0.0456247516, 0.0004853762, -0.0086492645, -0.0032596770, 0.0121667227, -0.0386112332, -0.0514347367, -0.0562008284, 0.0032142708, 0.0415414870, -0.1112143844, -0.0708374679, -0.0076084803, 0.0193813350, 0.1233049035, 0.0599936359, -0.1056919619, -0.0789275691, 0.1363343149, 0.0590149872, -0.0725561380, -0.0180004630, -0.0206879824, -0.0516903438, 0.0556288138, 0.0144001842, -0.0344022140, 0.0575301610, -0.1273558736, -0.0502380840, 0.0866555572, 0.0337058976, 0.1544628590, -0.0357475504, -0.0678542033, -0.0497161746, -0.0176034290, 0.0903000459, -0.0195932221, -0.0447062440, 0.0422106013, -0.0243377462, -0.1247332394, 0.0966917500, 0.0028962553, 0.1136120707, 0.0219253935, 0.0640311092, 0.0123624383, -0.0625298470, 0.0127984649, 0.0031850371, -0.0223097261, 0.0605222359, 0.0693637580, -0.0104508810, -0.0932764113, -0.0023737904, -0.0806139186, 0.0381016620, -0.0129782232, -0.1135127097, -0.0656520277, -0.0064629978, -0.0391742140, 0.1135193631, 0.0301949661, -0.0601524971, -0.0019216320, 0.0118125658, -0.0692637861, -0.0261847340, 0.1155453920, -0.0210087337, -0.1406065077, -0.1108276471, 0.1387223601, 0.0116098393, 0.1117976829, 0.0251071639, 0.0233699866, -0.0105864899, -0.0070499312, -0.0219777282, -0.0545895025, -0.0302102230, -0.0166384708, -0.0886842161, 0.0806303695, 0.0463723987, -0.0318861529, -0.1105836332, 0.0961792320, -0.0085395453, -0.0008200424, -0.1166651994, 0.0690557063, -0.0474326760, 0.0054500299, -0.0037066191, 0.0683766231, -0.0622730404, -0.0607658662, 0.0584610812, -0.0496971384, 0.0920242071, 0.0306903124, -0.0107729435, -0.0019214284, -0.0642832965, -0.1156722009, 0.0646964982, 0.0761144459, -0.0184699781, 0.0540124550, 0.0874218717, 0.0672469139, 0.0159947313, 0.0207300298, 0.0980810896, -0.0275870636, 0.0531542711, -0.0191751439, 0.0129374843, -0.0238327086, -0.0880195275, -0.0441358201, 0.1052870229, -0.1134254411, -0.1261062175, 0.0697272196, -0.0186267160, 0.0693870708, -0.0350478515, 0.0485410653, -0.0096378634, 0.0619284473, -0.0340443663, 0.0305307135, 0.1004097909, 0.0547911972, -0.1333725154, 0.0385880880, 0.0695698187, -0.0249617565, 0.1507887691, -0.0193883944, 0.1190123186, -0.1113826558, -0.0444899239, 0.0373962894, 0.0859985352, -0.0377144180, 0.0267538745, 0.0192272756, -0.1406673044, -0.0096697481, 0.0059407405, 0.0164459441, 0.0443612672, 0.1291892678, 0.0607403591, -0.0294878874, -0.1009489596, -0.0592702888, -0.1011500806, -0.0052071763, -0.0067075128, -0.0894558057, -0.0709579065, -0.1857123971, -0.0549309179, 0.0873290747, 0.0709843189, 0.0230394863, -0.0788614452, 0.0520264804, 0.0065153413, -0.0662634820, 0.0886750892, 0.0047697145, -0.0044826935, 0.1677661687, -0.0527275279, -0.1370964199, -0.0564352274, -0.0521198064, -0.0694187582, 0.0554992221, 0.0768952742, 0.0163771808, -0.1850469559, -0.0904013366, 0.0128731998, 0.1604309529, 0.0855596662, 0.0149017647, 0.0468706377, 0.0355084501, -0.0849146247, 0.0193274058, 0.0253568403, -0.0401397049, -0.0065212967, -0.0045563113, 0.0857801959, 0.1522550136, 0.0492460094, -0.0220233519, -0.0180271100, -0.1843920350, 0.0412341990, -0.0405688249, 0.0556843691, 0.0321311913, -0.0421112515, -0.0179249793, 0.0152909523, 0.0075146374, -0.0098762140, 0.0356245637, 0.0828733072, 0.1738746464, 0.0557148121, -0.0762471333, -0.0236810837, -0.0978984162, -0.0339843556, -0.0451628156, -0.0541717522, 0.0176799111, -0.1054847538, -0.0476464890, -0.0262483880, 0.1495997310, -0.0723496005, 0.1121620461, 0.0455660746, 0.1536492258, 0.0013691887, 0.0762893111, 0.0532673337, -0.1024528444, -0.0481570326, -0.0943246409, 0.0391199738, -0.0091451723, 0.0054920171, 0.0926036388, 0.1166870445, -0.0434941500, 0.0670000017, 0.0015079295, 0.0106093632, -0.0581197590, -0.0120956972, -0.0489232279, -0.0028328784, -0.0089020422, -0.0677668378, -0.0566931181, 0.0296268295, -0.0030903751, 0.0584032238, -0.0004696588, -0.0569105335, 0.0886269435, 0.1063248590, 0.0542931072, -0.1316164136, 0.0154292518, -0.0397509374, -0.0226496588, 0.0227175727, 0.0371449888, -0.0238598865, 0.0856362805, 0.0352889374, 0.1705261320, -0.0295584090, 0.1266688108, 0.0630658641, 0.0505693145, 0.0238773730, 0.0532971993, 0.0822662041, 0.2060283720, -0.2113373727, 0.0627018362, -0.0543996096, -0.0884956568, 0.0381724834, -0.0749992728, -0.0897345543, 0.0676554739, -0.0638529286, 0.0253737792, -0.1915439218, 0.0234660450, -0.0242265351, -0.1655099988, -0.0451610982, 0.0647259355, -0.0192628391, 0.0858847797, 0.0248936210, 0.0117262620, -0.0667977110, -0.0380760431, 0.1563599110, 0.0700462162, -0.0784925297, -0.1027213484, -0.0736215934, 0.0349745639, -0.0472402573, 0.0670010448, -0.0846257284, 0.0527709834, -0.0310775544, 0.0868570954, -0.0844340473, 0.0537697710, 0.0585290417, 0.0351449549, 0.0531966388, -0.1422834843, -0.1570882797, 0.0066748885, 0.0899509564, -0.0024146731, -0.0469753146, -0.0820123106, -0.0583649687, 0.0461413860, -0.0251060463, -0.0768266618, 0.0395634063, 0.0304447822, 0.0736659169, 0.1245129034, -0.0427552275, 0.1711028814, 0.1168677732, -0.0952243805, -0.0045050415, -0.0764198750, -0.0165065192, 0.0074712434, -0.0080841640, 0.0104093309, -0.1118730381, -0.0971015617, 0.0061889263, 0.0063289572, 0.0812110975, 0.0736681074, 0.0226562787, 0.0339621417, -0.0551173128, -0.0547043346, -0.0340283513, 0.0061980570, -0.0511826389, 0.0779166520, 0.0222950727, -0.0775937214, 0.0066539822, -0.0579314306, 0.0122454111, 0.0784294605, -0.0907186493, 0.0112516470, -0.0735512301, 0.0305838119, 0.0793599039, -0.0546075217, 0.1141236573, -0.0861449018, 0.0892511755, -0.0214413125, -0.1147375330, 0.0204825979, 0.0375751704, -0.0270523839, 0.0373228155, 0.1188282967, -0.0457461216, 0.2012408823, 0.0731011480, -0.0631930009, 0.0562444627, 0.0580829047, -0.0572887138, -0.0137604447, -0.0240911581, 0.0645028725, -0.0626760721, -0.0688455924, -0.1033330336, 0.0687390193, -0.0029055085, -0.1850064695, 0.0466114581, -0.0731465742, 0.0568345115, 0.1016503945, 0.0013892679, -0.0504796579, -0.0072748167, -0.0072571607, -0.0389301851, 0.0019628021, -0.0531830639, 0.0261335410, 0.0243177265, 0.0429782718, 0.0320480615, -0.0049035572, -0.0059315725, -0.0272856969, 0.0402702913, -0.0622437000, 0.0961079970, -0.0824041367, -0.0327655934, 0.0530316755, -0.1129683852, -0.0986427888, -0.0795519873, 0.1143328547, 0.0468577780, 0.0207154807, 0.0529161207, 0.0704549924, 0.0631498322, -0.0081568956, 0.0634972975, -0.0057891668, 0.0102863368, 0.0059547308, 0.0112592001, 0.0554497354, 0.0312748253, -0.0702988058, -0.0323003717, 0.0747450367, -0.0294962581, 0.0189378802, -0.0797911212, 0.0653409213, -0.0593888983, -0.0087772459, 0.0386271104, -0.0108238636, -0.1132866964, -0.0670038462, 0.0160851218, -0.0109121408, -0.0789804980, 0.0556036644, 0.0347605459, 0.0228503589, 0.0531652495, -0.0594553985, 0.0686001927, 0.0147398608, -0.1746776104, -0.1031456217, -0.0204956420, 0.0249681063, 0.0124572935, -0.0158717912, 0.1213489622, -0.0307778418, 0.0259785186, 0.0167003516, -0.0215186663, 0.0824111030, -0.0058334460, 0.0126434406, 0.0761603191, -0.0414455235, -0.0314743929, -0.0844868049, 0.0122249341, -0.0030422565, 0.0430096053, -0.0670175031, -0.0790403113, 0.0799615681, 0.0419184640, 0.1871054769, 0.0715385526, -0.0122955367, 0.0147398654, 0.0886375979, 0.0319481678, -0.0105060162, 0.0130201466, 0.0581568517, 0.0233810730, 0.0716804266, 0.0270974748, -0.0603504255, 0.0699020699, -0.0538771115, 0.0869847164, -0.0243441463, -0.0715781972, -0.0815702751, 0.0846048295, 0.0071755699, -0.0100083705, -0.0777315572, -0.0878773481, -0.1035980433, -0.0448578894, -0.1274271607, -0.0383905955, 0.0292580947, -0.0967418924, 0.0215323195, -0.0239816513, -0.0103272423, 0.0457651056, 0.0662960336, -0.0304446537, 0.0997081622, -0.0971104279, -0.0749900565, -0.0502101593, 0.0274585523, 0.1588786095, 0.0176489521, 0.0411819965, -0.1068657786, 0.0934772119, -0.0370954499, -0.0002589174, 0.0111469915, -0.1254388392, -0.0288720131, -0.0546691418, -0.0799134225, 0.0846631527, 0.0230418779, -0.0197953861, -0.0622227117, -0.0827639624, 0.0794196576, 0.0589344203, -0.0966771916, -0.1723968089, -0.0164550804, 0.0095019471, -0.0564326011, 0.0525264703, 0.0727329627, 0.0705912337, -0.1097071916, -0.0469907410, 0.1459441185, -0.0649836138, -0.0345361792, -0.0378395021, -0.0151736531, 0.0739765093, -0.0882472023, -0.1107333452, 0.0811273158, -0.1216958761, -0.0255631842, 0.0502300449, 0.0798475966, -0.0496160351, -0.0297090951, 0.0454379991, 0.0311496630, -0.1675741225, -0.0425096042, -0.0431512445, -0.0119974371, -0.1103999391, 0.1094072163, -0.0195965376, 0.0612369329, 0.1012959182, 0.0114705162, 0.0225640591, -0.0050239828, 0.0748920441, 0.0263464060, 0.0504267812, 0.0040270207, -0.0869992524, 0.0444497764, 0.2151706070, 0.0101078637, -0.0189449992, -0.0216694027, -0.0133217638, -0.0020776067, 0.0636992753, -0.0374920703, 0.0480336472, -0.1063156053, -0.0423090234, -0.0277650468, -0.0913301632, -0.0076742256, 0.1046220884, 0.0147593040, -0.0553491525, -0.0271273907, -0.0429559313, 0.0425131768, 0.0380443223, -0.1070063859, 0.0522427633, -0.0677490011, -0.0377926156, 0.1176999137, -0.1625095457, 0.0484518595, 0.0157574974, -0.0012150534, -0.0156576801, 0.0880521387, -0.1297295839, 0.0486632027, -0.0151632652, -0.1529137343, -0.0586164854, 0.0018631835, 0.1276733428, -0.1048615873, 0.1205450445, -0.1138865650, 0.0818981603, -0.0617407523, -0.0645241290, -0.0314106308, -0.1996662617, 0.0111591397, -0.0653680712, -0.0229708012, -0.0248637740, -0.0967350900, -0.0191920977, -0.0828923807, -0.0930965096, 0.0207066536, -0.0488205962, 0.0250599254, -0.0074760062, -0.0388941765, -0.1278291792, 0.0130873797, -0.0837772712, 0.0879686773, -0.0407875739, -0.0369317457, -0.0418867469, 0.0650052726, -0.0874402002, -0.0517883413, 0.0226935726, 0.0211785007, -0.0401317365, 0.0262785740, 0.0212063324, -0.0147241903, -0.0070522120, 0.0359237678, -0.0449208766, 0.0382623821, -0.0168175977, -0.1038827673, 0.0044295974, 0.0573990941, 0.0879341066, 0.0531631298, 0.0528883375, 0.0262857992, 0.0260664858, 0.0164069906, 0.0473056436, -0.0687885135, -0.1146078110, -0.0060750050, 0.0406357348, -0.0365953594, 0.1861592382, 0.1652065665, -0.0122549534, -0.0861442089, 0.0050337422, 0.0258997027, -0.0400315709, -0.0812877342, 0.0440704972, -0.0641708151, 0.0619680621, 0.0449276902, 0.0543957539, 0.0977384597, 0.0495047420, -0.0569984838, 0.0227860585, -0.1045353115, 0.0711435527, 0.0172062926, -0.0447582826, 0.0279978011, 0.0997758806, -0.0025632649, 0.0162841994, -0.0130231883, -0.0162969567, 0.0338898450, -0.0120434444, 0.0773206204, 0.0759384781, -0.1121489331, 0.0271344054, -0.0058796047, 0.0728174970, 0.0737279654, -0.1097207293, -0.1044767722, -0.0284542907, -0.0963499323, 0.0799511448, -0.0494963750, -0.0920744613, 0.0923794731, -0.0128834276, 0.0345505923, 0.1088285744, 0.0976219103, -0.0010939125, -0.1607705355, 0.0804207921, -0.0763300508, 0.0410617627, -0.0466592610, -0.0003162787, 0.1491618752, -0.0507769361, -0.0396382362, -0.0347495973, 0.0417156070, -0.1025646180, 0.0260712728, 0.0422510877, -0.0333788060, 0.0592152812, -0.1651158631, 0.0067864060, 0.0144655220, -0.0287930798, -0.0442129336, 0.1084755659, 0.0003569782, -0.0024674060, -0.0270218775, -0.1334334761, -0.0967839509, 0.0767392144, 0.0650341883, 0.0068701697, -0.0831512287, -0.0357778557, 0.0159990862, 0.1506294608, -0.1029556394, -0.0267412160, -0.2064292431, 0.1053725705, 0.0567862540, 0.0169087034, 0.0754511505, -0.0921272039, -0.0162123404, -0.0225199498, -0.0307324603, -0.0734880418, -0.0280775912, 0.0733070821, 0.0200051293, 0.0197582450, 0.0190444961, -0.0494710393, 0.1037460789, -0.0374594927, 0.0785047486, -0.1207241714, -0.0472760350, 0.0351263955, -0.0107088424, -0.0967517272, 0.0334177390, 0.0577275306, 0.2245238274, -0.0033989451, 0.1300053298, 0.0014235667, -0.0668437183, 0.0111001451, -0.0089000305, 0.0500164479, 0.0656750575, 0.0527392179, -0.1650812030, -0.0786795542, -0.0591465309, -0.0050137732, 0.0597446077, -0.0760627165, 0.0060166679, -0.0505447015, 0.0690230131, -0.0564304031, 0.0392828807, -0.0402466357, -0.0279882308, 0.0558110327, -0.0984229967, 0.0442271084, -0.0387744270, 0.0704406425, 0.0649265721, -0.0304542370, -0.0119383782, -0.0069201752, 0.1365641356, -0.0197127052, -0.1219602600, -0.1629816741, -0.0312559269, 0.0660986304, -0.0044772862, 0.0229047537, 0.0697835386, 0.0236289036, 0.1680041850, -0.0190022960, 0.1689977348, 0.0117637198, -0.0361540876, -0.0544510819, -0.0118480679, 0.0061349617, -0.0356313474, -0.1023987457, 0.0015960195, 0.0554885864, -0.0865364224, -0.0741181299, 0.0410404801, 0.0561470576, -0.1150411740, -0.0180426836, -0.0050782692, 0.0464949086, -0.0539231114, 0.0313766338, 0.1886858344, -0.0309205130, -0.1412786245, -0.1289129853, -0.0064417198, -0.0946500227, -0.0355694368, -0.0915303454, 0.0029090587, 0.1800011694, 0.0495224372, 0.1242018193, 0.0745089129, -0.0223867018, -0.0862355232, 0.0535192117, 0.0506929941, -0.0555981994, -0.1575749665, -0.1198163778, 0.1051827669, 0.0274587162, 0.0613732487, -0.0331262015, 0.0393787548, -0.0722207427, 0.0032113073, -0.0152415819, -0.0830526799, 0.0370951965, 0.0168048833, -0.0272473302, 0.0533495955, 0.0822492018, -0.0329203829, 0.0477370583, -0.0741635039, 0.0814034566, -0.0112944180, -0.0359694995, -0.0334544964, 0.0309968945, -0.0601724088, -0.0201416593, -0.0975843519, -0.1439998150, -0.0445121080, -0.1109798402, -0.0543566085, -0.0343754105, -0.0834629685, 0.1130694002, 0.0348415039, 0.0147177447, 0.0623618998, -0.0093543474, -0.0246438533, 0.0622746237, -0.0585816391, -0.0002531732, 0.1651898324, 0.1105900779, 0.0117761614, -0.0149462018, 0.1111635938, -0.0015384330, 0.0723261610, 0.0719079599, -0.1472772509, 0.0556479841, -0.0753389373, -0.0651487410, -0.1144681573, -0.0988834649, -0.0103155747, 0.0267772190, 0.0194759145, 0.0810047835, -0.0329108611, 0.0241057090, 0.0930165350, 0.0027251593, 0.0030844859, 0.1429174691, 0.0476013683, 0.0037955993, 0.0238236319, -0.0787182003, 0.0135399746, -0.0825640038, -0.0244243219, 0.0289472584, -0.0118620964, -0.0630501956, 0.0178130381, -0.0791808516, 0.0838879347, 0.0500619784, 0.1985625029, -0.0536995828, -0.0441146269, 0.0516828969, 0.0617978647, 0.1181797683, 0.0580965579, -0.0008185077, 0.1469600499, -0.0628680661, 0.0603292361, 0.0618555360, -0.0253928807, -0.0561748780, -0.0239157286, 0.0750036761, -0.0010602002, -0.0249165874, -0.0356222801, 0.0609998070, 0.1313722432, -0.0305534303, -0.0017720665, -0.0130284010, -0.0457920432, -0.0104269693, 0.0260461941, 0.0323918611, -0.0255668387, 0.0234823190, -0.0474685952, 0.0677708238, -0.0312611833, -0.1137759686, -0.0632325113, 0.0093580168, -0.1645268500, -0.0353091806, 0.0177867413, -0.0554884784, -0.0477975681, 0.0842018053, 0.0087785972, 0.0435318127, 0.0281008109, -0.0194879621, -0.0150272297, -0.1189787313, -0.0648071542, 0.0444921702, 0.0037573881, 0.0731521994, 0.0691876113, -0.0306501072, -0.1228564233, -0.1280979216, 0.0510821491, 0.0231228434, -0.0294176601, 0.0164710004, -0.1355206519, -0.0237637088, 0.0530691743, 0.0081954887, 0.0658194572, 0.0072872345, 0.0654829368, 0.0382112339, -0.0321916975, 0.0459117852, 0.0991058126, -0.0642285272, 0.0714493468, 0.1725676656, -0.0624391623, -0.0406502225, -0.0169662405, -0.0727843270, 0.0525072142, -0.0371239074, 0.0820619464, -0.0308992416, -0.1395411789, 0.1141795143, -0.0700127482, -0.0198663250, 0.0930107310, 0.0907092392, -0.0573950820, -0.0800086781, 0.0137366094, -0.0489853285, 0.0568167083, -0.1210143790, 0.0087409001, 0.0246840641, 0.1871158928, -0.1499207020, 0.0825255662, 0.0179220419, -0.0934908763, 0.0576614812, 0.0512387007, 0.1076585874, 0.0359342098, 0.0815598220, 0.0161890760, -0.0048495196, -0.0788166076, -0.1003828272, 0.0120587274, -0.0454222076, -0.0508150049, 0.0247308332, 0.0140462490, -0.0536446571, 0.0433008634, 0.0142684616, -0.0086659761, 0.0320188068, 0.0586595200, -0.0042753969, -0.0011172822, 0.0017921200, 0.0618312098, 0.0960123837, -0.0306237899, 0.1144832000, -0.0123059163, -0.1885591298, -0.0426444151, -0.0009556775, -0.1693831086, 0.1178343296, -0.0780763105, -0.0045471415, -0.0326567814, -0.0064580194, 0.0009486794, 0.0706981197, 0.0705871060, -0.0166663863, 0.0546516106, 0.0940865651, -0.1356997341, 0.0863429829, -0.1260658503, 0.0210079737, 0.0326899588, 0.0121704880, 0.1811537296, -0.0054993946, -0.1277659982, 0.0082974648, 0.0292688757, 0.0525501557, 0.0140585396, -0.0034227122, 0.0930996984, 0.0717114881, -0.1183483452, -0.0522332862, -0.0014665929, -0.0049208715, -0.0907662958, -0.0159185976, 0.1254650801, -0.0369050913, -0.0048975428, 0.0076743844, -0.0110601485, 0.0147490408, 0.0324805193, -0.0533858947, 0.0437466688, 0.0744810104, 0.0656329691, -0.1146879941, -0.0297295023, 0.0494938642, 0.0535893664, -0.1083852276, 0.0820601583, 0.0400766768, -0.1344964504, 0.0237933137, -0.0442055129, -0.1163231358, -0.0509804115, 0.0270934701, -0.1588386446, -0.0010811042, 0.0149784163, -0.0205368772, 0.0420713164, 0.0845924914, -0.0255618598, -0.1107552275, -0.1503200978, -0.0405797288, 0.0625601485, 0.0985189974, -0.0878518671, -0.0468395539, -0.0893246457, 0.0956365988, -0.0891103521, -0.0415547155, -0.0896627158, -0.0173440762, -0.0844165981, 0.0254834164, 0.1337983757, -0.1004684344, -0.0296228584, -0.0242313780, -0.0508411601, -0.0149503099, 0.0472382456, 0.0346277915, -0.0423938744, 0.0478795171, -0.0045297258, -0.1983699948, -0.0602521449, 0.0220068637, 0.1003836915, -0.0460621864, 0.1221848801, 0.0275122076, -0.0392759070, -0.0071727638, -0.0419006981, 0.0366841033, 0.0220043566, -0.0429883488, -0.0147674596, -0.0238914173, 0.0695348382, -0.0174413808, -0.0092480229, 0.1547406912, 0.0338247344, -0.0767978430, -0.0245644283, 0.0953323469, -0.0954936743, 0.1138949692, -0.0832488313, 0.1216781586, -0.0773829371, -0.0074057383, -0.0819125026, -0.0471797734, 0.0246282220, 0.0247733146, 0.0179630127, -0.0755855069, -0.0594994649, 0.0432132371, 0.0083336858, -0.0023465557, -0.0436100177, -0.0619448684, -0.0604172908, -0.0122984704, 0.0873703510, 0.0290293694, -0.0569490492, -0.0432042629, -0.1003407687, 0.0268877447, -0.0433064103, -0.0057522496, -0.0755953416, -0.0883256793, -0.1038766205, 0.1150557250, -0.0031530182, 0.0613225624, 0.0682378486, -0.0022540195, 0.0120467413, 0.0496409051, -0.0901301429, -0.0172979999, -0.0188349392, -0.0158145018, 0.1001955271, 0.0399945714, 0.0205548443, -0.0231884792, 0.0075806621, 0.0732531622, -0.0138751399, 0.0325411521, 0.0153510887, -0.0389906503, -0.0661882311, 0.0076394370, 0.1050877348, 0.0611644313, -0.0547374301, -0.0291057955, -0.1693996191, -0.0219480824, -0.0157923903, 0.0571217835, -0.0997868776, -0.0422716402, 0.1242877990, -0.0648435205, 0.0809552893, 0.1168855205, -0.0103309350, 0.0546954907, 0.0202192869, -0.0231234524, -0.0228797588, 0.1341175735, 0.0470190682, 0.1104862690, -0.0168182310, -0.1297817826, -0.0278851278, -0.0260980930, 0.0168384425, 0.0820583105, -0.0288189352, 0.0330239348, -0.0012782291, -0.0549669936, 0.0335046388, 0.0272029843, 0.0181930158, 0.0746702552, -0.0010871810, 0.0289668441, 0.0383407958, -0.0521880426, 0.0324421450, 0.0574217290, 0.0294037051, 0.0081487130, 0.0870672539, 0.1244583949, 0.1259148270, -0.0285618212, 0.0778177828, 0.0469435081, 0.0428269096, -0.1102475449, -0.0422416776, 0.0360482521, -0.0205730945, -0.0089013278, 0.0226928629, -0.0086217783, -0.0867889598, -0.0627658218, -0.0012431395, 0.0449940227, -0.0451640375, 0.0784271210, 0.1340430826, 0.0135876704, 0.0301366150, 0.0659542605, 0.0332687348, 0.1189360842, 0.0329130031, 0.0105193099, -0.0942022353, 0.0252650604, -0.0036579769, -0.0070613907, -0.0028196976, 0.0137214679, 0.0119908666, 0.0981391668, 0.0991426930, 0.1294760108, 0.0264402721, 0.0585557558, -0.0503961109, -0.0895836428, -0.1043915078, -0.0993939415, -0.0692736953, -0.1282238364, 0.0278394949, 0.0637935400, 0.0898676142, -0.0083352672, -0.1053441390, 0.0253636073, -0.0092851836, -0.1316507757, 0.1213174239, -0.0761934742, 0.0551945083, 0.0475196615, 0.2212381363, 0.0754990131, -0.0026793000, -0.0166808609, 0.0422028303, 0.0257437546, 0.0757888854, 0.0419017635, -0.0384655409, -0.0016550155, -0.0747334361, -0.0063567595, 0.0066795866, 0.0019424189, -0.0734528527, 0.0289853774, -0.0357661135, -0.1016307622, -0.0692461133, -0.0597851872, -0.0418835580, 0.0755522475, -0.0333650336, -0.1250550002, 0.0840193182, -0.0341319963, -0.0035141192, 0.0447530374, 0.0978146270, -0.0553263612, -0.1225263551, 0.1505128294, 0.0404158272, -0.0036468217, 0.0968746543, 0.0858455524, 0.0473764315, 0.0528667793, -0.0741225854, 0.1565442830, -0.0644775331, 0.0443379171, 0.0436404720, -0.0822193697, 0.0803058892, 0.0983065292, -0.1704013497, 0.0750964507, -0.0425875224, -0.0577990636, -0.0738442317, -0.0067625800, -0.0947718024, 0.0203002132, -0.0586142428, -0.0117686288, -0.0405709073, 0.2067027837, -0.0249876566, -0.0864986181, -0.0565221682, 0.0502341837, -0.0203514826, -0.0553494580, 0.0122238025, 0.0862593725, -0.0090871360, -0.0305987261, -0.2673728168, -0.0334524661, -0.0646337047, 0.0597309023, 0.0569328740, -0.0553995520, -0.0090945605, 0.0549665987, -0.0275818221, -0.1169069111, 0.1609606892, -0.0667426288, 0.0117512625, 0.0542760640, -0.0721844956, 0.0739019960, 0.0660947561, -0.0082655987, 0.0939405933, -0.0040626461, 0.0535468981, 0.0400484502, -0.0600330308, -0.0316538438, -0.0099528665, -0.1020658910, 0.0211791564, -0.0264516603, 0.0458131954, 0.0460889153, -0.0342471749, -0.0553138256, 0.0635273829, -0.0649171621, -0.0810070187, 0.0995761752, -0.0772414431, 0.0420225859, 0.0285598896, -0.0760937929, -0.0450877994, -0.0551799648, -0.0626794845, -0.0255008638, 0.0088209435, 0.0514321290, -0.0075552128, 0.0283403471, -0.0538375564, -0.0419429652, 0.0013824535, -0.0440840162, 0.0272777658, -0.0462521426, 0.1578559726, -0.1310185194, -0.0799750686, -0.0623279102, -0.0390329249, -0.1015390456, 0.0701362789, 0.0070193615, -0.1472750902, 0.0809286460, -0.0182996895, 0.0078944257, -0.1539272368, -0.1127986982, 0.0185805019, 0.0563048981, -0.0053656409, -0.0712243468, -0.0532688759, -0.0204082672, -0.0204582252, 0.0301159397, 0.0611811019, 0.0900569558, -0.0528469309, 0.0529928431, -0.0651750788, 0.0078360662, 0.0197602473, -0.0886103287, -0.0673336163, -0.1380214989, 0.0788137242, 0.0973632559, 0.0839949027, 0.0742941201, -0.0321049951, 0.0376842543, -0.0535768084, 0.0295617301, -0.0778203085, 0.0501817986, -0.1003343239, -0.1061150506, -0.0716524497, -0.1174416170, -0.0816279724, -0.0307130907, 0.1489699930, 0.0858933330, 0.1536215395, -0.0375508517, 0.0445566736, -0.0664703026, 0.1705165356, 0.0650461689, -0.1010898501, -0.0280145351, -0.0278285537, 0.0126154879, -0.1724899262, 0.1264110059, -0.1135503501, -0.0621059276, 0.0124157257, -0.0536922663, 0.0897708535, 0.1008001044, -0.0535118729, 0.0171584859, 0.1562868208, -0.0346967280, -0.0625555366, -0.0495802239, -0.0274484660, 0.0122316750, 0.0448557772, 0.0752771199, 0.0248423200, 0.0352429785, -0.0398467630, 0.0319435187, 0.0235156566, -0.1310601830, -0.0646602362, 0.0535791740, -0.0270545073, 0.0642422065, -0.0370689407, -0.0564142875, 0.0207830369, 0.0489808917, -0.0275260583, 0.0317831077, 0.1193333045, 0.1319499612, 0.1011389419, -0.0586336888, 0.0216954909, 0.0575822666, -0.0454798378, -0.0953886732, 0.0997598842, -0.1074388102, 0.0108522652, 0.1024397090, -0.0005664864, 0.0254331157, 0.1342885494, 0.0179142747, 0.0766122192, -0.0079936413, 0.0289094914, 0.0696827546, -0.0541258566, -0.0892976299, 0.0543933474, -0.0900752768, 0.0115507441, -0.0226499811, -0.1067660823, 0.0677383393, -0.0429038852, -0.0683353767, -0.0405250788, -0.0206638128, -0.1083526090, -0.0362780020, 0.0642249808, 0.0635868609, 0.0390427522, -0.0196144264, -0.0004919680, 0.1204371452, -0.1470066905, 0.0539597683, 0.0948331878, -0.0734979585, 0.0572813973, -0.0179259144, 0.0762726441, 0.0123262079, 0.0632231608, 0.0378601439, 0.0300701857, -0.0098960130, 0.0370451659, -0.0881559625, 0.0351466388, -0.0308572650, 0.0077711400, 0.0722273588, 0.0355740339, -0.0405054763, 0.0598336719, -0.0713883191, 0.0240341350, -0.0453836508, -0.0307843480, -0.0186759215, -0.0200419892, -0.0466029905, -0.1169676781, 0.0452388972, 0.0049037421, 0.0685664713, 0.0232627727, 0.0240882579, 0.0911064520, 0.1265638620, 0.0283474922, -0.0639332756, 0.0057415096, -0.0416970141, 0.0457961708, -0.0966202095, -0.0040277168, -0.0742784366, 0.0007988038, -0.1060303077, 0.0486708060, -0.0215151403, 0.0372783579, -0.0206366200, 0.0324433632, 0.1188926697, 0.0162081104, -0.0131776128, -0.0119700190, -0.0686151162, -0.1088873446, -0.0417596214, 0.0057478757, -0.0598044246, -0.0115359183, -0.0732188672, -0.1481973529, -0.0789710879, -0.0488734320, -0.1715923995, 0.1397656500, -0.1270507872, 0.0786767751, 0.1266342998, -0.0791953951, -0.0727808177, -0.0324212238, -0.0508854017, 0.1015610099, 0.0770944357, 0.0660480261, -0.0302495845, -0.0574345253, -0.0535336323, 0.0521356873, -0.0822833106, -0.1290494651, 0.2070493102, -0.0528743528, 0.0098728407, 0.0276735406, 0.0677386746, -0.1043682769, -0.0433473028, 0.0538732708, -0.0622650646, -0.0495733321, -0.0738181770, 0.0245251227, -0.0464332029, -0.0899704695, -0.0539656393, 0.0015979136, 0.0806499347, -0.1967697889, 0.0600849725, -0.0312312897, 0.0198549572, 0.0100007905, 0.0265554991, -0.0373835526, 0.0485576428, 0.0961533263, -0.0337380171, 0.0122183748, -0.1258658469, 0.0612208024, 0.1381897330, 0.0530691408, 0.0340957157, -0.0471297130, -0.0478111729, 0.0425943546, -0.0310817901, 0.0792243481, -0.0362240672, 0.0109115550, 0.0545084327, 0.0236021038, -0.0245153960, 0.0495379753, -0.0176939666, -0.0060855611, 0.0595120266, -0.0434360281, 0.0983368978, -0.0538077913, -0.0198319126, -0.0611991026, 0.0415370874, -0.0875722691, 0.1154421568, -0.0086715706, 0.0050615673, -0.0067070439, 0.0641900897, 0.1575775743, 0.0189433564, 0.1526211202, 0.0191519056, -0.1409010887, 0.1047984287, 0.0021593040, 0.1242302954, -0.0225467701, 0.0387818106, 0.0721357763, 0.0584683977, -0.0306325573, -0.0180966053, -0.0229769833, 0.0326406732, -0.0144811654, 0.0635957122, 0.0105659226, -0.0878102854, 0.0328696780, 0.0256559085, 0.0503537431, -0.0897291973, 0.0640840754, 0.0620248467, 0.1121889800, -0.0239301231, -0.0484612621, -0.0515214540, 0.0407342948, -0.0820779651, -0.0251291320, 0.1088325381, -0.0182035137, 0.0257800333, 0.1510785520, -0.0893362463, 0.1932473928, -0.0720632151, 0.0203952268, 0.0485243686, 0.0298721064, 0.0775602162, 0.0117187398, -0.0319271833, -0.1512289792, -0.0559690036, 0.0914425179, -0.1870765388, -0.0127110872, 0.0859007314, -0.0302644279, 0.0323909335, -0.1469652504, -0.0273276940, -0.0130961649, -0.1461449713, -0.1070913821, 0.0081732655, 0.0590215214, 0.1260086298, 0.0398711674, -0.0199527238, 0.0699908063, 0.0889250562, 0.0880196691, -0.0628452301, -0.0100869853, -0.1327125430, -0.1625453085, 0.1001238972, -0.1062633097, -0.0333859064, -0.0666663200, -0.1683097035, 0.0410625748, -0.0734275654, 0.0100885723, 0.0548999570, 0.1036512554, -0.0028457493, -0.1333053559, 0.1450061649, 0.0321573317, -0.0095061325, 0.0693398267, 0.0255717020, 0.0014797151, 0.0067033619, 0.0488689281, -0.0083997715, -0.0786337405, -0.1014087349, -0.0373489931, -0.1569235772, 0.0458331443, -0.0737116635, -0.0001851395, 0.0792378336, -0.0487211123, 0.0086998539, -0.0480179898, 0.0497145467, -0.1034781784, 0.0566632561, 0.0659105331, 0.0383919366, -0.1047575995, 0.0055407304, 0.0705449060, -0.1220334023, -0.0129957348, -0.1091078594, 0.0668115318, -0.0741507933, -0.0278058778, 0.0286026914, 0.0038819830, -0.0007494539, -0.0411808304, 0.0842070356, 0.1112974659, 0.0579739548, 0.0049623922, 0.0846267045, 0.0649778619, -0.0153707862, -0.1283007562, -0.0074081868, -0.0734056234, -0.0033340007, 0.0789278746, -0.0370840393, 0.0980769321, 0.1258289963, 0.1284636408, -0.0775903538, 0.0062990598, -0.0210675038, -0.0607093275, 0.0676935241, 0.0592150427, 0.1605533957, -0.0636202693, -0.1501354575, 0.0892145187, -0.0060720891, -0.0460355505, -0.0500963144, 0.0352328494, -0.0081817769, -0.0313492045, 0.0148506369, 0.0637407750, -0.0072105899, 0.0216431320, -0.0585682094, 0.0678480640, -0.0059557073, -0.0322786532, -0.0135444663, 0.0940057635, -0.0320084691, 0.0518604070, 0.0206738971, 0.0555828959, 0.0811146647, 0.0325480998, -0.0418641493, -0.0398090146, -0.0233342573, 0.0388372242, -0.0471945032, -0.0693444088, 0.0637538433, -0.0888476670, -0.0420268252, 0.0331299901, -0.0015375465, -0.0327344984, -0.0181030426, 0.0525057130, 0.1216028333, -0.0441063568, -0.1454514116, -0.0662361309, -0.0511830598, 0.0612740815, -0.0129412040, -0.1013814211, -0.0391318798, 0.0201819688, -0.0348348953, 0.0344572552, 0.0307136588, 0.0124294832, -0.0049280599, -0.1351180375, 0.0679067224, -0.0319231302, -0.0729911923, 0.1155559570, 0.0454957746, 0.0183118582, 0.0214708168, 0.0890403688, 0.0156511106, -0.1155790091, 0.1018532813, 0.0824234486, -0.0568742976, 0.1196459681, 0.0436666906, -0.0254271943, 0.0100918086, -0.1279262602, -0.1770394295, 0.0523741841, -0.0190223381, 0.0509351082, -0.1009591520, 0.0437259078, 0.0605404377, 0.0482377782, 0.0722730681, 0.1328240335, -0.0482204482, 0.0070095453, -0.1411860883, -0.0719166398, -0.1026870459, 0.0944641829, 0.0351216197, -0.0248419121, -0.0896289498, 0.0266220011, 0.0481431633, -0.0102956593, 0.0136860758, -0.0524023473, -0.0939765647, -0.1185374632, 0.0392441526, -0.0141203962, 0.0030649453, 0.0340649225, -0.0553726107, 0.0286652390, 0.0339822508, 0.0925854370, 0.1053082272, -0.0472057089, -0.0287106931, 0.0353276245, -0.0266886055, -0.0832959786, -0.0293104909, 0.0440003425, 0.0422299691, 0.0452771448, 0.1278430820, -0.0185462032, -0.1182855964, -0.0958428979, -0.1765312254, -0.0001204982, -0.1479891390, -0.0700305775, 0.0580934025, 0.0784593970, -0.1314525008, -0.1072018072, -0.0719096214, -0.0370403826, 0.0912605971, 0.1530118585, 0.1269535273, -0.1081122905, 0.0983427316, -0.0397178568, 0.1797903329, -0.0319849625, -0.0061937552, 0.1579932570, 0.0722986460, -0.0290070921, 0.0024323496, 0.0679826885, 0.0888050571, -0.0077144876, 0.0229182206, -0.0951127708, -0.0495780818, -0.0605234504, 0.0782569945, 0.1508593559, -0.0689536929, 0.0353538357, -0.0459340438, 0.0000608154, -0.0020750780, -0.0271288734, -0.0125389155, 0.1405806690, 0.0494399704, 0.0079675997, -0.0698306561, 0.0477677062, 0.0824713856, -0.0801323205, -0.0556503609, -0.0280131809, -0.0996651351, -0.0275149643, 0.0008893926, 0.0735876635, -0.1173877120, 0.0835605562, 0.0769029185, -0.0042090751, -0.0949771255, -0.1294309497, -0.0693911165, 0.0924591646, 0.0626029298, 0.0416700318, -0.0959757566, 0.0311109293, -0.0700014457, -0.0951256901, 0.0344762616, -0.0020258389, -0.0424323231, 0.0017502308, -0.0949190259, 0.0716510862, 0.0127528682, -0.0467713550, -0.0451850668, -0.0412340164, -0.1081667244, -0.0689560771, -0.0855034664, 0.0508152470, 0.0362530202, 0.0361568779, 0.0505736545, -0.0485043861, 0.1470435858, 0.0251569599, 0.0065238029, 0.0288200602, 0.0352955647, -0.0288717709, 0.0432914421, -0.0300711934, -0.1551256180, -0.1068120450, 0.0735220239, -0.0485187657, -0.0393323451, -0.0257443823, -0.0638948232, -0.0765000805, 0.0555230603, 0.0331933796, -0.0583673641, -0.0577057190, -0.0127763469, 0.0874371082, -0.0001834575, 0.0166734457, -0.0461187698, 0.0690435693, 0.0519097000, -0.0457447134, -0.0477472022, 0.0875513628, -0.0836101621, 0.0382187553, 0.0454155728, -0.0409741551, -0.0275476240, -0.0115956739, -0.0707740411, -0.0263236929, -0.0282276385, -0.0085991323, -0.0350839645, -0.1238123700, 0.0891423672, -0.0351028144, 0.0282988064, 0.0691767856, -0.0428005010, -0.0167707652, 0.0686014369, 0.0069747381, 0.0314433835, -0.0927889571, -0.0606312938, -0.0863224566, -0.0028851903, 0.0612400621, -0.0820178390, 0.0430940092, 0.0647546649, 0.0843321607, -0.1223293319, -0.0100752600, -0.0647520125, -0.0181723665, -0.0586597957, 0.0734052956, 0.0078622894, 0.0819697678, 0.0370303392, 0.0078812838, 0.0701787025, 0.0651587546, -0.0374231935, 0.0320500135, -0.0365521424, 0.0773542225, -0.1223367527, 0.0735026747, 0.0372096151, 0.1091288179, -0.0316788256, 0.0460299626, -0.1448148340, 0.0026781671, 0.0420316160, -0.0102428216, -0.0402286202, -0.1918144673, 0.0163274575, 0.1311948895, -0.0296890307, -0.1311182231, 0.0507842340, 0.0082949186, 0.0005667314, 0.0170091651, -0.0309188385, -0.0911648348, 0.1653356999, 0.0474673063, -0.0446876995, 0.0251113195, 0.0776802599, 0.0293256827, -0.0434723347, 0.0274880473, 0.0618762821, 0.0700380579, -0.0323365219, 0.0805133358, -0.0609990358, 0.0287964642, -0.0153416852, -0.0321663283, -0.0388788059, -0.1185442656, 0.0014660023, -0.0895987675, 0.0370874070, -0.0646039769, 0.1427828074, -0.0071743983, -0.0693898425, -0.0046157055, -0.0259518288, 0.1351810992, -0.0478073433, 0.0143928165, -0.0624951795, 0.1006650254, -0.1274138093, -0.0481971018, 0.0997458622, 0.0409583263, -0.0144962445, 0.2484250814, 0.1307130456, -0.2155292332, -0.0847556293, -0.0066899862, -0.0723786950, 0.0155328047, 0.0283971298, 0.0178612284, -0.0377862602, -0.0673008636, -0.1610854566, -0.0962506905, 0.0341396257, 0.0602951460, -0.0364091322, 0.0108519681, -0.0958988667, -0.0443904698, 0.0413129106, 0.0439161025, -0.0818167105, 0.0680553764, 0.1476203054, 0.0221352167, -0.0127158519, 0.1135145351, 0.0290768370, 0.0559365079, 0.0485308133, -0.0709826872, -0.0285385475, 0.1438387632, -0.0126345884, 0.0260978378, -0.0024791397, 0.0496819392, -0.0022080755, 0.1354774088, 0.0388304070, 0.0146970004, -0.0532307662, 0.0711903572, -0.0248372424, -0.0061767474, 0.0297630038, 0.0186284631, 0.0931270495, 0.0156669002, -0.0388497747, -0.0526108146, 0.1022777632, -0.0474575385, 0.0007154457, -0.0301867165, 0.0942398459, -0.0623802021, -0.0845937505, -0.0197567604, -0.0135312304, -0.0506482758, 0.0719659775, 0.0001362935, -0.1253262311, -0.0356151387, 0.0519718155, -0.0179612599, -0.0593882240, 0.0443241261, 0.0036498532, -0.1263978481, 0.0608405881, -0.0496046990, 0.0195548236, 0.1054424345, -0.0231739916, -0.0685117543, -0.0483811721, -0.1082093045, -0.0760557130, -0.0014001441, -0.0911725312, -0.0125066862, -0.0599067546, 0.0055699870, 0.0663022846, 0.1078538150, 0.0275327880, -0.0239800252, -0.0543873571, 0.0370140299, 0.0640433803, -0.1085617468, -0.1312493831, 0.0824592113, 0.0873079449, 0.0693556219, 0.0451015681, -0.0596116446, -0.0723181441, 0.1556764990, 0.0113530103, 0.0540230535, 0.0557931438, 0.1166663840, 0.0680930167, -0.0266817007, 0.0507888682, -0.0780213326, 0.1247286350, -0.0933284014, -0.1401776969, 0.0344763622, -0.0430737734, 0.0023527890, 0.0909465253, -0.0452559069, -0.0087021086, 0.0820421129, -0.0532210320, 0.1125419587, 0.0484548435, -0.0244238507, 0.0703553185, -0.0110753216, -0.0029720757, -0.0415605977, 0.0497176759, -0.0514932610, 0.0408853590, 0.0129936188, 0.0416028202, -0.1160144061, -0.0921143517, -0.0063969605, 0.0711774006, -0.0121571096, 0.0325043947, 0.0312912874, 0.0209691580, 0.1300553977, 0.0480886623, 0.0703443065, 0.0386490040, -0.0928896591, -0.1095543876, -0.0576218963, -0.0242348853, -0.1788128167, -0.0557614192, 0.0113205183, 0.0059540123, 0.0057458668, 0.0369347595, 0.1397901773, -0.0255518183, -0.0147453677, -0.0201248527, -0.0629005134, 0.0262519624, -0.0502612926, -0.0909132659, -0.0370236449, -0.0616054721, 0.0783748925, -0.0165293757, -0.0612541288, 0.0778007507, -0.0314024352, 0.0285036247, -0.0845335275, -0.0192929562, 0.0502248257, -0.0100178737, 0.0740809962, -0.0204855204, -0.0360280313, 0.0555325896, -0.1932626963, -0.1589879543, 0.1003445387, -0.0037094485, 0.0292635225, 0.0822982043, -0.0768491179, 0.0869509950, -0.0266880244, 0.0149077903, -0.0726739317, 0.1084713340, -0.0456891656, -0.0199708529, 0.0416842215, 0.0485159718, -0.0819682628, 0.0852536559, 0.1073474064, -0.0839510560, 0.0465119109, 0.0395214148, -0.1625491828, 0.0647860318, -0.0558823794, 0.0569903664, 0.0818192363, -0.0297494810, -0.1121324077, -0.0708515942, 0.0651080161, 0.0248963423, -0.0246995855, 0.0212842952, -0.0867201239, 0.1024035439, -0.0005035722, 0.0160949975, -0.0016577570, -0.0381384157, 0.0322423950, -0.0113015920, 0.0084489100, 0.0111559257, 0.0597403347, -0.0051970910, 0.1160101667, 0.0080424808, 0.0392447449, 0.0043412820, 0.0576736219, 0.0621780381, -0.0764278173, -0.1320307106, -0.0719385669, -0.0478291959, 0.0393823199, -0.0008195117, 0.0607747808, 0.0224246252, 0.0081916656, -0.0513879806, -0.0848954469, 0.0085354894, 0.0132891349, 0.0029043928, 0.0607381463, 0.0590506680, -0.1389864385, -0.0539984405, -0.0064727725, 0.0099390969, -0.0566329472, -0.0421427265, -0.0127303898, 0.1131219193, 0.0927654281, -0.0556080863, -0.0752411783, 0.1375642866, -0.0354098193, -0.0163341518, -0.0359270126, -0.1117438301, -0.0791456699, 0.0407294966, -0.0494567305, 0.0461270660, 0.0137746185, -0.0071381349, 0.0455663353, -0.1072854623, 0.0134636406, -0.0531583577, -0.0068400791, 0.0930594057, -0.0036605606, 0.0261601098, 0.0470158234, -0.0951067656, -0.0195447206, 0.1474538594, -0.0268729962, -0.1117360890, -0.0309431013, -0.0489905849, 0.1575636864, 0.0884178355, -0.0112659354, 0.0252514593, -0.0613661483, -0.0632536113, -0.0147097092, 0.0638202727, 0.0425311700, -0.0550957844, -0.1012773365, 0.0195631310, 0.0976431295, -0.0142425597, -0.0087763630, 0.1183752567, -0.0655563921, -0.1304506958, -0.0047213174, 0.0678077117, -0.0462714247, 0.0943207294, 0.0220600367, 0.0310260002, -0.1703615189, -0.0715746358, -0.1934204102, -0.0719047487, -0.0221296623, -0.0834932700, 0.0569188297, -0.0366588794, 0.0798250884, 0.0540178418, -0.0973973572, -0.0264252424, -0.1178592518, 0.1395004541, 0.0293028522, -0.0964387357, -0.1074991301, 0.0536247641, -0.0229411088, 0.1395294368, 0.0117954519, 0.0240838584, -0.0507071204, 0.0202007964, -0.1168219373, 0.0576069057, -0.1588492095, 0.1072356552, -0.0655357018, 0.0704773441, -0.0525058508, 0.0985945016, 0.0046335347, -0.1869552583, -0.0638865307, 0.1625276804, 0.0222873539, 0.0856307894, 0.0048509948, 0.1043970808, -0.0163452048, -0.0199497677, -0.0770629048, 0.0386236906, -0.0906032026, 0.0798994303, -0.0183600150, -0.0268940013, 0.0172142964, -0.1326559931, -0.1026134044, -0.0683597401, -0.0065940730, 0.0377239361, -0.0581256226, -0.0138178915, 0.0151292384, 0.0611188188, 0.1356411278, 0.0435175374, -0.0826666281, -0.0383125246, -0.0099310204, -0.0732458979, -0.0462920442, -0.0006043240, -0.0431361459, 0.0368008204, -0.0607565902, 0.0625359043, 0.0869623721, 0.0712048933, -0.0645590797, -0.0631768852, -0.1198563129, -0.0011849711, -0.0212324187, -0.0597451404, -0.0735219866, 0.0228559524, 0.0188859515, 0.0409950837, 0.0333527736, 0.0845199600, 0.0092630973, -0.0098230541, -0.0191064849, 0.1505417526, -0.0222289208, -0.1444257200, 0.1327140033, -0.0024432372, 0.0104022305, -0.1825917363, -0.0502746403, 0.0285166521, -0.0065274555, -0.1231722534, -0.0465835407, 0.0039469749, -0.0043790042, -0.1260632873, -0.0909376889, -0.0219574142, -0.0159954354, 0.1410571188, -0.0175964739, 0.0342151299, 0.0862129778, 0.0491935015, -0.0937821567, 0.0738313496, -0.0341278911, 0.0021751560, 0.0225081556, -0.0078199469, 0.0285234489, -0.1008369327, 0.0495158061, 0.1216750368, 0.0606808178, 0.0121562667, -0.0530158989, -0.0106073702, -0.0869119018, 0.0043642307, -0.0005463604, 0.0300577320, -0.0020763907, 0.0112087093, -0.0558908470, 0.0299976468, 0.0020687962, 0.0027554370, -0.0349248350, 0.0407209396, -0.0234393217, -0.0059752315, -0.0717145801, 0.2203188986, 0.0252203122, 0.0336758532, 0.0891432464, -0.0139343580, 0.0499132425, -0.1157188192, 0.1705787480, 0.0194199774, -0.1052790806, 0.0708212703, -0.0012762677, 0.0126589313, -0.0181015115, 0.0263327323, 0.0288252551, -0.0832242370, 0.1198170111, -0.0413820855, 0.0039671892, -0.0327613205, 0.0431920849, 0.0607339591, 0.0186052024, -0.0714232177, 0.2182315886, 0.0472530089, 0.0148668997, 0.0184691437, 0.0461218506, 0.0301958676, -0.0483833924, 0.0100939628, 0.0175270792, -0.0373467021, 0.0040077642, 0.0285543427, 0.1421046704, 0.0122664673, 0.1473124325, 0.0730522126, -0.0607478693, 0.0354238711, 0.0411076210, 0.0436601453, -0.0403784662, 0.2083687186, 0.0422639698, -0.0203408469, 0.0055587552, -0.0141340485, 0.1007148176, 0.0722026825, -0.1116496921, 0.0477138124, 0.0574498177, 0.1187821776, -0.0477550179, 0.0437241271, -0.1063620299, -0.1298400164, 0.0231598634, 0.0026288358, -0.0619208068, 0.1573996097, 0.0072605126, -0.0146009605, -0.0011970904, 0.1308776289, 0.0780593380, 0.0653647110, 0.0155153386, 0.0079316683, 0.1042866036, 0.0440437272, 0.0008262475, -0.0090674851, -0.0870398208, 0.0269725807, -0.0617198050, -0.0837363005, -0.0097765122, -0.0667316467, 0.0233626254, -0.0603996590, 0.0209999550, -0.0901047066, 0.0268235933, 0.0612323172, 0.0950018615, -0.0739665255, -0.0112845544, 0.0143740308, 0.0428906791, 0.0495250076, 0.0824912712, -0.0836119652, 0.1563232541, 0.1424449533, 0.0490349941, -0.1199644208, -0.0372750685, 0.0180241223, -0.0809555128, 0.0941980481, 0.0087495781, -0.0109543242, 0.0115846954, -0.1372756958, 0.0009411655, 0.0802271292, 0.0107017504, -0.0222091489, -0.0034199324, -0.0622625016, 0.0702233315, -0.0146134347, -0.0458982997, -0.0709918141, -0.1104870141, -0.0396926813, -0.0344294384, -0.0344341546, -0.0543463752, -0.0217649806, -0.0314549394, 0.0603842176, -0.0457641035, -0.0098143220, 0.0708530769, -0.0082160346, 0.0052392520, 0.0761155561, -0.0686508417, 0.0814916417, -0.0196576118, -0.0018852223, -0.0438820571, -0.1270148903, 0.0534000397, 0.0120779909, 0.0464568548, 0.0414626375, 0.1187452376, -0.0622355267, -0.0837639645, -0.0201850124, 0.1399548799, 0.0490633696, 0.0153337084, 0.0579373091, -0.1407538503, 0.1028080657, 0.1189259663, -0.0653422400, -0.0245079026, 0.0296877753, 0.0648459718, 0.0045182602, -0.1093917936, -0.1058210284, 0.0961063802, 0.0244150087, 0.0490369536, -0.1063354611, 0.1004375666, -0.0309462808, 0.0134571344, -0.0445882864, 0.0002444386, -0.0114493892, -0.0731688738, 0.0195831619, -0.0829759240, 0.0899340138, 0.0659037381, -0.0101519972, -0.0542964377, 0.0144775324, 0.0435811840, 0.1828723848, -0.0988116264, 0.1389304847, -0.1932248026, -0.0097909626, 0.0573129281, 0.1497922540, 0.1176192313, 0.0951833129, -0.0357776731, 0.1111869365, 0.1072190404, 0.0286953878, 0.0834054202, 0.0549615994, -0.0564028770, -0.0635842979, 0.1107773557, 0.0503264554, -0.0120344236, -0.1651262045, 0.0886642933, 0.0112002864, -0.1011360437, -0.0530226827, 0.0775034577, -0.0512940995, 0.0201199464, -0.0231413804, 0.1257459819, -0.0745510161, -0.0351319984, 0.0207645092, 0.0918869227, 0.0297456663, -0.0097819958, -0.0059191366, -0.1542222202, 0.0525163114, -0.0153219383, -0.0234189667, 0.0270183627, 0.0232224986, -0.0237132646, 0.0436486453, -0.0082265548, -0.1112815365, 0.0597545654, -0.0092894919, -0.0741528347, -0.1105700061, 0.0264604166, -0.0795564950, 0.0877849981, -0.0047425460, 0.0521672890, 0.1040099114, -0.0121511519, 0.0644636750, -0.0478952788, -0.0056965388, -0.0144003034, -0.0656022802, 0.0176739357, -0.0285322797, -0.0377672426, -0.0752221793, -0.0723817497, -0.1456658393, -0.0323699526, 0.0907362774, -0.0010357089, 0.0637331381, -0.0229034517, -0.0518208779, 0.0283195972, 0.0418767817, -0.0212859269, 0.0242164806, 0.0859365910, 0.0910042971, -0.0044789966, 0.1272016466, 0.0616084561, -0.1475628316, -0.1042011753, 0.0448815003, 0.0037420685, -0.0885752738, 0.0715842620, -0.0777108520, 0.0499780849, 0.0431784391, 0.0752696618, 0.0214269459, 0.0598930158, -0.0502979793, -0.0083733601, 0.1355362236, -0.0988234505, 0.0636614487, -0.0152319362, -0.0103507973, -0.0440402888, -0.0869637579, 0.1199384406, -0.0981394947, -0.0358619541, -0.1810213178, 0.0012171976, -0.0791008547, -0.0920388028, -0.0474603437, 0.0620950535, 0.0079431832, -0.1034836471, 0.0157203339, 0.0355561823, 0.0874553472, -0.0776968673, -0.0672236606, 0.1201107576, -0.0688097328, -0.0066418312, -0.1609743834, -0.0875953883, 0.0339859501, -0.1102576181, 0.0464226194, -0.1086692214, -0.0006229607, -0.0483600646, 0.0748088062, 0.0699563995, 0.1041399613, 0.0696481019, -0.0742274299, 0.0419059917, -0.0346486494, -0.0179769900, 0.0187748745, 0.1281018555, 0.0073863510, 0.0756069943, 0.1194918901, 0.0744972751, 0.0581711084, 0.0388479754, 0.0300672185, 0.1292138994, -0.0147287250, 0.0472498909, -0.0010777041, 0.0324449725, 0.0206387807, 0.0073780399, -0.0164691992, 0.0237317793, -0.0170521922, 0.0545244515, 0.0706371590, -0.0656893179, -0.0360168144, 0.1524422765, 0.0071531124, -0.0480455086, -0.0491932780, -0.0836906210, -0.1228942871, -0.0151375905, -0.0691713616, 0.0265327021, 0.0845091641, 0.0274994262, -0.0140621727, 0.0376018398, 0.1131731123, 0.0882930607, -0.1189235151, 0.1040430218, 0.0749766827, 0.0286144987, -0.0722494572, 0.1025048122, -0.0159379411, -0.0920950472, 0.1487337947, -0.0308438893, -0.0154573098, 0.1136466041, -0.1536486149, 0.0278949998, 0.0921683609, -0.0403018668, -0.0301027931, 0.0386429466, 0.1023719832, -0.0192525238, 0.0645787790, 0.0460605733, 0.0105012786, -0.0544035211, -0.0265957527, 0.1039299890, -0.0525726378, 0.0041211955, -0.0859604776, 0.0633868128, 0.0538066924, 0.0382642895, -0.0238570198, 0.0987453312, 0.1474021077, -0.0611168407, 0.1390677392, -0.0245297514, 0.0692450032, 0.0049343146, 0.0659430325, -0.1129201800, 0.0334908813, 0.1041731238, 0.0775162578, 0.0572627522, 0.0423019603, -0.0275906473, 0.0601419583, -0.0562338978, -0.0734100789, 0.0087821651, 0.2031964809, -0.0493652336, -0.0073842108, 0.0301645324, 0.0579095073, 0.0064755399, 0.0969862789, -0.0547929220, 0.0081270970, -0.1367967725, 0.1129313260, -0.0832969472, -0.0158595312, 0.0175488833, 0.0338310227, -0.0299288481, 0.0322214775, -0.1062763780, 0.0227767490, -0.0328417495, -0.0116866566, 0.0984180942, 0.0502655134, -0.0294759944, -0.0202158391, 0.0116175422, -0.0048847757, 0.0937073678, 0.0228406973, -0.0781711489, -0.0154284984, -0.0491593108, 0.0085504008, 0.1070813015, 0.0537218191, -0.0269957297, -0.0335018076, -0.0849087015, -0.1055584550, 0.0245970376, -0.0219015311, 0.0899752080, 0.0398123972, -0.1110262126, -0.0582671724, -0.0695978329, -0.0178688187, -0.1393060684, 0.1244242936, 0.0189043544, 0.0187990963, 0.0387761593, -0.0203831755, -0.0308822021, -0.0543391407, -0.0902115852, -0.0178713612, -0.0511225425, -0.0851738453, 0.0852711424, -0.0039847130, -0.0566759594, 0.0629719645, -0.0660596713, 0.0259691868, -0.0033649560, 0.0235399269, 0.0029856451, 0.0332875438, -0.0100922976, -0.0928592533, 0.0212818980, -0.0031588376, -0.1519352198, -0.0465399288, -0.0012450386, 0.0523196161, 0.0580581017, -0.0239248313, -0.0325807221, 0.0417542905, 0.0275521073, -0.0760027915, 0.0774738714, 0.1016519889, 0.0338941030, 0.1302284002, -0.0515744835, 0.0464199707, -0.0783924088, -0.0164429061, -0.0096465135, -0.0387261845, 0.0586186498, 0.0802957937, 0.0858897418, -0.0179853216, -0.1071702242, 0.0852396935, -0.0517073236, -0.0606745444, 0.0918558463, -0.1024354249, -0.0716339722, 0.0949954540, -0.1591179222, -0.0936716646, -0.0776851103, -0.0840893239, 0.0955970660, -0.0390218422, 0.0692602396, -0.0809729397, 0.0484377444, -0.0007243175, -0.0605925322, -0.0495403409, 0.0634921938, -0.0394596159, 0.0269721299, -0.0303963684, 0.0349536836, 0.0520933904, -0.0668874830, 0.0789527223, -0.0739273950, 0.0617635250, -0.0339309536, 0.0018790308, -0.1006771699, 0.0734375417, -0.1162020713, 0.0454188064, -0.0699333921, -0.0467513502, 0.0148733612, 0.0439304821, -0.0494236387, -0.0094365813, -0.0355804488, -0.0547888726, 0.1507081836, 0.0151364859, 0.0873507410, -0.0096411481, 0.0358764753, 0.0157086067, 0.1485830396, -0.0037529655, 0.0689706355, 0.0668150187, 0.0866073892, -0.0315084122, 0.1480281800, -0.0544247515, -0.0276991203, 0.0349347480, 0.0330975987, 0.0638405308, -0.0342774726, 0.1183687076, 0.1137681827, 0.0991371796, 0.0688829869, -0.1527878046, 0.0663061514, -0.0761325061, -0.1209196895, -0.0441885889, -0.0173025392, 0.1214422435, -0.0010705623, -0.0221891329, -0.0888939202, -0.0173240900, -0.0223001726, -0.0122924186, -0.0108361198, -0.0241696592, 0.0242461767, -0.0362214185, 0.0026316745, -0.0977667272, -0.1581212580, 0.0438802615, -0.0619006455, -0.1331485659, -0.0745948181, 0.0481308736, -0.0633000582, -0.0429986343, 0.0413672961, 0.0255040079, 0.0028252602, -0.0079344111, 0.1313124895, -0.0307653844, -0.0427747294, 0.1405717432, 0.0018997826, 0.0275129303, 0.0285072159, -0.0974901095, 0.0375235677, 0.0581230521, -0.1669321805, -0.0716113299, -0.0463735312, 0.0014860379, 0.2331187427, 0.0269792546, 0.0562325343, -0.0118946210, -0.0100145750, -0.0178483203, -0.0372966416, -0.0814949125, -0.0311993957, -0.1867726743, -0.0440729894, -0.0151578514, 0.0063476488, 0.0832665861, -0.1085032225, 0.0048028845, 0.0209338702, -0.0454056114, 0.1059875935, 0.0969693139, -0.1436276883, -0.1360847950, 0.0664574131, 0.0498027951, -0.0034644813, 0.0645253733, 0.0443090498, 0.0361699499, 0.0225932524, 0.0562068708, -0.0696742013, -0.0729021579, 0.0642541498, -0.0190563183, -0.0411738753, 0.0775427148, 0.0998552144, 0.1190298274, -0.0293642841, -0.0165405050, 0.0224659462, 0.0220441818, -0.0204066038, 0.0700041503, -0.0378316492, 0.1309685260, 0.1383828968, 0.0717046484, 0.0846483111, -0.1375335753, 0.1590839028, 0.0729982108, -0.0591985807, -0.0497362502, -0.0661687180, 0.0395753048, 0.0051502176, -0.1114254594, -0.0530761145, -0.0411492139, -0.0175350681, -0.1549398303, -0.0211332440, 0.0350764915, -0.0547188073, -0.0066971574, -0.0855369717, 0.0155805852, 0.0844602138, 0.0187806468, -0.0151737025, -0.0306276474, -0.0698199868, 0.0026905830, 0.0355387889, -0.0640661940, 0.0038983151, -0.1214418337, -0.0633934885, -0.0251674093, 0.0291927326, 0.1154722422, -0.0169163961, -0.0480625071, 0.0119332336, 0.0534579903, -0.0989776105, -0.0020666970, 0.0805803463, 0.0190392956, 0.0838639811, -0.1139033958, 0.0249670409, 0.0083465148, 0.0583237894, -0.0000321027, 0.1222942472, 0.0541663952, 0.0964980647, -0.0334098563, 0.0542497933, -0.0611848123, 0.0722230524, -0.0456077754, 0.1129127443, 0.0162953995, 0.0317261368, 0.0197663270, 0.0025528949, 0.0612140000, 0.0816689879, 0.0537607595, 0.1086207181, -0.0183222964, 0.0189396646, 0.0259320159, 0.0421997160, 0.0860297382, 0.1006423831, -0.0953144953, -0.1136675254, -0.1015885174, 0.0539328791, -0.1268552840, 0.0955724716, 0.0237536505, 0.0365342274, -0.0924879760, -0.0617348477, -0.0689668357, -0.0336310118, 0.0104346965, -0.0016216307, 0.0270116813, -0.1805388182, 0.0213447809, 0.0519691706, -0.0576841384, -0.0601422042, -0.0388476178, -0.0292752907, -0.1004250199, 0.1164242327, -0.1922993958, -0.1426143050, 0.0175772980, 0.0212824326, 0.0307567324, -0.0039616833, 0.0790913701, -0.1091100276, 0.1049079075, 0.1174658090, 0.1183325872, -0.0300023090, -0.0103366803, -0.0353345647, -0.0237550549, 0.0292974841, -0.0222693570, 0.0297599509, 0.0314210616, -0.0907583907, 0.0474285856, -0.0161421075, 0.0667215511, -0.1351184994, 0.1271983534, -0.0605081022, -0.0998332351, 0.0104397405, -0.0505600870, -0.0288412031, 0.0046499800, -0.1186611354, 0.0427617244, -0.0343913883, -0.0793561786, 0.0191730708, -0.0492130145, 0.0867838413, 0.0579444952, -0.0044939537, 0.1204386428, -0.0114615373, -0.0566390641, 0.0555103943, 0.0403330177, 0.0346178375, -0.1554238498, 0.0192731619, -0.0916662067, -0.0912105665, 0.0248681549, -0.1045554876, -0.0030047232, 0.0422234833, 0.0291565023, -0.0144809186, 0.0156068522, -0.1057922691, 0.1337719858, 0.0926672518, 0.0445775539, 0.0322940424, -0.1105289608, 0.0389452465, -0.0045756465, -0.0218290500, 0.1157510206, 0.1060835272, 0.0200104490, 0.0409865975, -0.0681962669, -0.0325980149, 0.0358747840, 0.1268091798, 0.0586330518, 0.0814786330, -0.0279398803, -0.0018153097, 0.0013671052, 0.0322220512, -0.0415386297, -0.0213391967, 0.0492801107, 0.0412515923, -0.0039107762, 0.2001566440, -0.0431242958, 0.0488819219, -0.0655205920, 0.0216827765, -0.0949235708, -0.1080844477, -0.0468281843, -0.0137977889, 0.0407779440, 0.0679979995, -0.0920611769, 0.0162980072, 0.0662062764, -0.1220425591, -0.0780807808, -0.2036008537, -0.0273289680, -0.1023112088, 0.0662366375, 0.0007605739, -0.0541456118, -0.0469158441, -0.0262541082, -0.0854748785, -0.0276896562, 0.0296519361, -0.0112960320, 0.0322473049, 0.0163796805, 0.0238843821, 0.0228797458, -0.0644301772, -0.0027588643, 0.0093945079, -0.0327699147, 0.0608324446, -0.0370488614, 0.0315993503, 0.1502854079, 0.0598364584, -0.0118773840, -0.0037678033, 0.1112357304, -0.1362713575, 0.0235619061, 0.0902712643, 0.0426377878, 0.0434379429, 0.0019445178, -0.0652661175, 0.0350084603, 0.0266839284, -0.0110635161, -0.0574648194, -0.0520041026, -0.0816317946, 0.0612573996, 0.0428791419, -0.0108461380, -0.0524475165, -0.0468147472, 0.0579225793, -0.0571613982, 0.0320059136, 0.0536460578, 0.0160640702, 0.0023411815, -0.1113270447, 0.0036226157, 0.0284876674, 0.1221881360, -0.0280516800, 0.0010647271, 0.0086001148, 0.0553448796, 0.0635642409, -0.1000657380, 0.0562295727, -0.0292677544, 0.0354701318, -0.0449715778, 0.1465500593, 0.0853881240, 0.0139790419, 0.0108099412, 0.0125685222, -0.0166723952, 0.0713382065, 0.0023212805, 0.0729829744, -0.0029648417, 0.1409463733, 0.0158301126, 0.0471401885, 0.0369870141, 0.1849055141, -0.0178415105, 0.0689950287, 0.0004445650, -0.1238410473, 0.0090161934, -0.0394781828, -0.0589016825, -0.0108935907, -0.0807491839, 0.0193328951, -0.0037847287, 0.0349293612, -0.0575662404, -0.1128860861, -0.0552187562, 0.1217707396, -0.0892634317, -0.0080082975, -0.0696402043, -0.0903151482, -0.0419643298, 0.0388773903, 0.0179684982, -0.0661939979, -0.0014376305, 0.0310915112, 0.0138178375, -0.1015031636, 0.0815715119, -0.1355718672, 0.1862190515, -0.0905392841, 0.0558032915, -0.0697349757, 0.0059496742, 0.1205316782, -0.1856346577, -0.1771866977, 0.0801912770, 0.0522074811, 0.1534898579, -0.0066972524, 0.0527838208, -0.0855820030, -0.0209894851, 0.1137819290, 0.0942111909, -0.0958048776, -0.0860684663, 0.0077806921, -0.0739004910, 0.0509073064, -0.1142272055, 0.0944832340, -0.0056538042, 0.0442178100, 0.1186810881, -0.0436071306, 0.0102806985, -0.0487123020, 0.0421128795, -0.1076626107, -0.0929370373, -0.0351912752, 0.0349889547, 0.0008213893, -0.0036847899, -0.0794393867, 0.0072199441, -0.0427253544, 0.1496446133, -0.0113614351, 0.0081922468, -0.1041570753, 0.0826716349, 0.0067784693, 0.0894552991, -0.0774668902, -0.0164607503, -0.0107914936, 0.1336772591, -0.0038698148, -0.0976713821, -0.0139399003, 0.0053863525, 0.1223081127, 0.0712258443, -0.0589649975, -0.0779472739, 0.0921988040, 0.0042065177, 0.0261691622, -0.0084955720, 0.0881531239, -0.0594130196, 0.0423064232, -0.0207669027, 0.0782986507, 0.1355743706, -0.0269709080, 0.1508166939, -0.0496627390, -0.1192860380, 0.0055027846, 0.0049068872, -0.1040062234, -0.0134769008, -0.1520641297, 0.0194525812, 0.0003346913, 0.0673363358, -0.0279482249, 0.0454994813, -0.0246233232, -0.0695264190, 0.0871376470, -0.0007314691, -0.0232264586, 0.0872343108, -0.0103738047, 0.1104512885, -0.0753566548, 0.0024641948, -0.0157765504, -0.0081018489, 0.0579340421, -0.0284079965, 0.0300991647, -0.0167778265, -0.0141233038, -0.0374275818, -0.0763487071, -0.0245377738, 0.0080732219, -0.0017767493, -0.0443282574, 0.0468842238, 0.0099546332, -0.0977253318, -0.0350941755, 0.0492642112, -0.1243432239, 0.1073946953, 0.0881536379, 0.0633279458, -0.0683960393, -0.0190388821, 0.0932086185, -0.0054190443, 0.1002234817, -0.0352048911, -0.0117140561, -0.0088461097, 0.0949808136, -0.1129587293, 0.0573274046, -0.0128558865, 0.0014960542, -0.0297355894, -0.0357167199, -0.0467542261, 0.0107496008, -0.0447036587, -0.0441256464, 0.0318184942, -0.0283812862, -0.0384422429, 0.0920762569, 0.0165305585, 0.0785846412, -0.0452649891, -0.0126415752, -0.1121604890, -0.0451629385, 0.0330382772, 0.0107721910, -0.0074450793, 0.0692053810, 0.0740747005, 0.0441170260, -0.0868671238, 0.2025378346, 0.0118599515, 0.0076280944, 0.0728641748, -0.0406480618, 0.1488626748, 0.0092284139, -0.0211079158, -0.0052465526, -0.0932520628, 0.0261721089, 0.1193425506, -0.0093299169, -0.0715010464, -0.1330066025, 0.0948455483, 0.0312261432, 0.0468813889, 0.0811562389, 0.0173253715, -0.0671814308, -0.0549602211, -0.0240978822, -0.0270124916, -0.0490189195, -0.0676191151, -0.0395882763, -0.0104844514, 0.0131000699, -0.0547031760, 0.0380904637, 0.1228499264, -0.0627794340, -0.0954106823, 0.0260594394, -0.0406077281, 0.0627036616, 0.0160451010, -0.1452352405, 0.0530515313, 0.0053487634, 0.0682585537, 0.0056887143, 0.1046303287, -0.0473423488, 0.0184011683, -0.0399647579, -0.0531717949, 0.1896777898, 0.1230188310, -0.1400534958, -0.0637931302, -0.0248273127, -0.0487666167, -0.0230539106, -0.0243610758, 0.0353963561, -0.0320519432, 0.1296498030, 0.0586247146, -0.0251313932, -0.1797147542, -0.1043700799, -0.1609721035, -0.1223237813, 0.0593826696, -0.0597670972, 0.0103642195, 0.0125014661, 0.0774716586, -0.1339006722, 0.0616522469, 0.0848767310, 0.0528485253, -0.0072858594, -0.0336964503, 0.1351592839, -0.0926730856, -0.1161561459, 0.0119221490, -0.0219819490, -0.0442888662, -0.0292613655, 0.0793737322, 0.0642002821, -0.1317414790, 0.1267662942, -0.0671271011, 0.0178523175, -0.0575963557, -0.0994605273, 0.1406590641, -0.0082839839, 0.0624472573, -0.1134447679, -0.0170166157, -0.0006943303, 0.0135049820, 0.2077929378, 0.0257626045, 0.1121704653, -0.0074230460, -0.0071339924, 0.0024383590, 0.0580878817, 0.0730321705, 0.0353016630, 0.0269686989, 0.0958176404, 0.0528967939, 0.0158214755, -0.0493420623, -0.0683276579, 0.0908211768, 0.0808767453, -0.0012876689, -0.0324227847, 0.1359569281, 0.1545078158, -0.0782458782, -0.0651557520, -0.0314777493, -0.0623926148, -0.1338599771, -0.1054428518, 0.1086731106, -0.0298850909, -0.2160534412, 0.0013490207, 0.1368574202, 0.1093362495, 0.0074456185, -0.0101647917, 0.1880681515, -0.1359661072, 0.0616217256, 0.0582130849, 0.0152848214, -0.0154977916, 0.0621639192, -0.0823811591, 0.0213133432, 0.1328301132, 0.0043918826, -0.1283473074, 0.0218675882, 0.0412540771, -0.0725336745, 0.0334315971, -0.1035944447, -0.1160100251, 0.0773306787, 0.0156853851, -0.0627891868, 0.0338842273, 0.0907430947, 0.0593136251, -0.0316836201, 0.0991757810, -0.0620427951, -0.0560273901, -0.0749771520, 0.0156368725, 0.1990882456, -0.0387367420, -0.0210986435, 0.1286397278, -0.0597569048, -0.0217588805, 0.0500648208, 0.0808306634, 0.0247384124, 0.1781697571, 0.0271837115, -0.0299868695, -0.0564660691, -0.0021379199, -0.0268921424, -0.0670418963, -0.0655825511, -0.0916617438, 0.0460505560, -0.0507496707, 0.0168387257, 0.0740687624, 0.0398036167, 0.0244402066, -0.0025443584, -0.0038461592, -0.0050017647, 0.0601334646, 0.0412612520, 0.0133823678, 0.0321109779, -0.0325115956, 0.0806737840, 0.0575457215, 0.0681061596, -0.0896133259, -0.0259246342, 0.0021273624, 0.1215715259, 0.0746470466, 0.0378544554, 0.0070312200, 0.0378041491, -0.0561581738, 0.0344006270, -0.1236959174, 0.0887501538, -0.0586738884, -0.0657443404, -0.0620412491, -0.0670434982, -0.0198936053, -0.0202347282, -0.0714034885, 0.0831549540, -0.1127787381, -0.0048694648, 0.0547835194, -0.0878753066, -0.0884823054, 0.0835041031, 0.0713056773, -0.0643596202, 0.0167191625, 0.0125844590, -0.0328297764, 0.0683032945, 0.0630987436, -0.0104744807, 0.0101780258, 0.0017337576, 0.0559443608, -0.0309681967, 0.0796836391, 0.0492730066, 0.0318296999, -0.0589238033, 0.0057035293, -0.0336321555, 0.0608173758, -0.0900046378, -0.0563037284, -0.0098847896, 0.1173200458, -0.1236128733, 0.0142415743, -0.1313036233, 0.0902862251, 0.0355655402, 0.0151453391, -0.0133436136, -0.0760231540, 0.0593269505, 0.0046166480, -0.0183382761, 0.0170833096, 0.1035028845, -0.0266063400, -0.0944760218, 0.1146125197, -0.0427631624, 0.1282118708, 0.0513423756, -0.0599927865, 0.0129587660, 0.0346717462, 0.0411908515, -0.1063124835, 0.0292930268, -0.0805761591, -0.0760250837, 0.0208803844, 0.0452535115, 0.0163962860, 0.1320148855, 0.0146697527, -0.0119162891, -0.0165921580, 0.0640813559, -0.0145804919, 0.0027626697, -0.0449310131, -0.0014203740, -0.0469864383, -0.0666606203, -0.1199365407, -0.1073079854, 0.0520703420, -0.0135388933, 0.0757529065, -0.0272122435, -0.0254960023, -0.0661459714, 0.0203526355, -0.0371251516, -0.2070589066, 0.0330217145, 0.0335254073, -0.0139732789, -0.0072815791, 0.0423563346, 0.0032198937, 0.0208059717, 0.0125074983, -0.1159296334, 0.0792595297, 0.0194059256, -0.0056023765, -0.0232450143, -0.0657222793, 0.0571258850, 0.0171007942, -0.1020736545, 0.1354867816, 0.0269787908, 0.1176495403, 0.0964214206, 0.1106420383, -0.1332650185, -0.0798756331, -0.0991609395, 0.0098438449, 0.1646620929, -0.0225716867, -0.0336313471, 0.0435333028, 0.0523015633, 0.0517602898, 0.0437075831, -0.0657595620, 0.0121897375, -0.0174657851, -0.0003391467, -0.1550315619, -0.0197426602, -0.0494582467, 0.1248276830, 0.0980195329, -0.0280908011, -0.0197313856, 0.0377631783, 0.0458807573, 0.0688450038, 0.0833638832, 0.0658916309, 0.0477818586, -0.0603337735, 0.0584122539, -0.0369813889, 0.0089695100, -0.0554836541, -0.0013582783, 0.0876896009, 0.0326534808, -0.0711679906, 0.0069679059, 0.0098913554, -0.0686059594, 0.0017000409, 0.1052448004, 0.1483903676, 0.1155054271, -0.0773885399, -0.0739467442, 0.0451318994, 0.1537016928, 0.1047234386, 0.0596017540, 0.0171690360, 0.0132007813, 0.0279062204, 0.1150868386, -0.0528448522, -0.0846979022, 0.1211715266, -0.0002434216, -0.0978356823, -0.0266575441, -0.0361461751, 0.0390787423, 0.0928858519, -0.0059392760, 0.0030503720, -0.0803296566, 0.0755303577, -0.0675617680, -0.0462724268, -0.0453707650, 0.0119872689, 0.0295047760, -0.0365135670, -0.0517673567, -0.0206718240, -0.0155755803, 0.0204215236, 0.1311704069, -0.0584450811, -0.0375609957, 0.0283091031, 0.0373388268, -0.0558879711, -0.0278632231, 0.0225135386, 0.0998370498, -0.0597980581, 0.0062393732, 0.0833763927, 0.0234154724, 0.1023828536, -0.0017542541, -0.0905186012, -0.0004132334, -0.1997652501, -0.0406206325, 0.0862711743, -0.1187940985, -0.0989184231, -0.0831108987, 0.0136317164, 0.1122924238, 0.1359920800, 0.0874372125, 0.0013446561, -0.0694936812, -0.0674696937, -0.0630888343, -0.0608799309, -0.0049817152, -0.1069513857, -0.0720968470, -0.0468503200, -0.1365780979, 0.0348401815, -0.1196533218, -0.1123096570, 0.0733970031, -0.0536311120, 0.0129762869, 0.1273053586, -0.0080926344, -0.0466164723, -0.0363274887, -0.0425367355, -0.0488474816, -0.1048040316, -0.0607838035, 0.0237527005, -0.0061111376, -0.0322279818, -0.0800791755, 0.1136049926, -0.1144707501, 0.0029176418, 0.0226275101, 0.0542687587, 0.0113398135, 0.0081986841, 0.0457640886, 0.0648281127, -0.0008239325, 0.0542327873, 0.0644940361, 0.0280335732, -0.0267186128, -0.0915415138, 0.0757956505, -0.0393235013, 0.0328189135, -0.0673301518, 0.0153048914, 0.1133693829, -0.0054866262, -0.0488386452, 0.0547675490, -0.1403205097, 0.0398557037, 0.0521425232, -0.0535492375, 0.1331530362, -0.0094792601, -0.0394966602, 0.0383935049, 0.0625167042, -0.0786449686, 0.1065557078, -0.0760085285, 0.1485444158, -0.0055110045, 0.0276230387, -0.1267478466, 0.0212637074, 0.1109944135, -0.0565839671, -0.0405598953, 0.0461506918, 0.1401186436, 0.1648298949, -0.0590858832, -0.1563558280, -0.0704687983, -0.0699709803, -0.1370075047, 0.0641477704, 0.0295326449, -0.0512833893, -0.0387732387, 0.0636324510, -0.0678357705, -0.0138566606, -0.0636367351, 0.0434604213, 0.0771631747, -0.0486416630, -0.1936705709, -0.0818545371, 0.0012694634, 0.0280640535, -0.0759520978, -0.0514072329, -0.0213521384, -0.0631568804, -0.0268430226, -0.0493836179, 0.0333346203, -0.0331345834, 0.0530763641, 0.1212668270, -0.0546864383, -0.0895158798, -0.0005122311, -0.0066351118, -0.0370290577, -0.0594672188, -0.1051815674, -0.1147516742, -0.0914740860, -0.0186054725, 0.0221332684, 0.0538224764, 0.0006609913, -0.0289939921, -0.0204772502, 0.1334895194, -0.0049326811, 0.0879641026, -0.0441698208, 0.0276836399, -0.0512912124, -0.0444346555, -0.0708209351, -0.0417439789, -0.0180974174, 0.0205350034, 0.0210481416, -0.0966271609, -0.1795815974, -0.0557013601, -0.0022541718, -0.0160186812, -0.0397723503, 0.0341393575, 0.0639984831, -0.0478060544, -0.0035377163, 0.0370358415, -0.0879385769, -0.0737380311, 0.0309941377, 0.0746875405, 0.1181722209, -0.0768542141, -0.0964093432, 0.1022276804, 0.1450299472, 0.0698277652, -0.0727712885, 0.0074669570, -0.1100181043, 0.1061716825, -0.1027437747, 0.1253033727, 0.0258620381, 0.0913228914, 0.0813116282, -0.1721734852, 0.0644949228, 0.1142060757, 0.1575365812, -0.0181173719, 0.0258141421, -0.0807520002, 0.0190437511, 0.0094549991, -0.0304127596, 0.0334237330, -0.0469149537, -0.0405229032, -0.0666193813, -0.0043504871, 0.0289397482, 0.0252661910, -0.0243691131, 0.0225396249, 0.0272405278, -0.0161454920, -0.0374830440, -0.0611499548, 0.0152579844, -0.0647585019, 0.0222234689, 0.1403229237, -0.0113651715, -0.0500610322, 0.0592201874, -0.1137121469, -0.0064664241, 0.0446610190, -0.1329732686, 0.0342770554, -0.1191192865, -0.0996992886, -0.0599301979, 0.0578721948, 0.0387466997, -0.0130451005, 0.0556320623, 0.0699271709, -0.0909463689, 0.0048225224, -0.0646471530, -0.0773319677, -0.0001986790, -0.0486464575, -0.0173911732, -0.1158135757, 0.0170310680, -0.0182614103, -0.0694414228, -0.0148807922, 0.0941220373, -0.0322240964, -0.0650914013, 0.0272581708, -0.0036509074, -0.0004671421, 0.0681644380, 0.0107891262, 0.0308187641, -0.0957880616, -0.0038356222, 0.0274663977, -0.1451906264, -0.0370691195, 0.0659425557, 0.1618777364, -0.0463058278, -0.0369798504, 0.1469262540, -0.0774368793, 0.0447957069, 0.0311432648, 0.0315277502, 0.0701204911, 0.0311565418, -0.0456744954, -0.0047503738, 0.1191857457, 0.0092269629, 0.1072510183, -0.0070568584, -0.0094948839, -0.0575962476, -0.0174226388, -0.1188895181, 0.1038978845, -0.1694018096, -0.0056719072, -0.0241632015, 0.0077159503, -0.0181637760, 0.0485646501, -0.1029000506, -0.0503515117, -0.0220668167, -0.0987724364, -0.0368244685, -0.0316788033, -0.0548210256, 0.0945778936, 0.0924588814, 0.0733454823, -0.0522894710, -0.0880150944, -0.0303728841, 0.0003099069, -0.0037661195, -0.1097067073, -0.0617460907, -0.0486639105, 0.0188160688, 0.0055024745, 0.1264879555, 0.0830869675, -0.0726658553, 0.0447610430, -0.0275746342, -0.0731765851, 0.0264147297, 0.0600777455, -0.0756229758, 0.0758909881, -0.1438201964, 0.1345668435, -0.0382064357, 0.0658270568, -0.0627773851, 0.0495144054, 0.0365521386, 0.0843243673, 0.0151774082, -0.0327757746, -0.0071017314, -0.0006591566, 0.0823390856, -0.0155484173, 0.0270432830, 0.1079643741, -0.0815531760, 0.0526308529, 0.0432810746, -0.1228509918, -0.0228704754, 0.0362946466, 0.0802379325, -0.0556551851, -0.1202656776, -0.0663576126, -0.0062362924, -0.0638353601, 0.0889100283, -0.0412626788, -0.0661723912, 0.0131689571, 0.0893174261, 0.0492685102, 0.0594426021, 0.0402300805, -0.0301878788, 0.0474567786, -0.0796909034, -0.0804905593, -0.0224742889, -0.0997473523, 0.0451112092, 0.0901043713, 0.0706197619, -0.0259465165, -0.0015538149, 0.0158034358, -0.0705655813, 0.1136251763, -0.0421607494, -0.0346411616, -0.0439968780, 0.0587348454, -0.0856675431, 0.0536987074, 0.0041466542, -0.0349094979, -0.0092835240, -0.1053614989, -0.0124763083, 0.0768166706, 0.0287965760, -0.1270492673, -0.1507608145, -0.0146729350, 0.0640920252, -0.0367489532, 0.0059010312, -0.0504077524, 0.0125950687, -0.0764042288, 0.1020711884, -0.0271587670, 0.0466982275, 0.2085295022, 0.0645574257, -0.0506507047, -0.1882014871, -0.0143437684, -0.0584501773, -0.0185236298, -0.0023701414, 0.0703919157, 0.0741863251, -0.0027334257, -0.0320431925, -0.0888968408, -0.1298635304, -0.0634731054, -0.0053433194, -0.0676342025, -0.0396235026, 0.0604061820, -0.0583821051, 0.0632432252, -0.0222409368, 0.1573906988, 0.1292571127, 0.0158393644, -0.0257157963, 0.0753342658, 0.0824084878, 0.0529141277, 0.0772228837, 0.0116361463, -0.1499983817, 0.0682486668, -0.0259084627, -0.0021650307, -0.0024009161, 0.0242921971, 0.1054432392, 0.0682252869, 0.0745332986, -0.0521812886, 0.0612649173, -0.0570267402, -0.0082737487, -0.0856904685, -0.0112948585, -0.0500668958, -0.0061381944, -0.0294293668, -0.0508749560, 0.0544866696, 0.2352959812, 0.0138569213, -0.1187154651, -0.0436989814, -0.0604165420, -0.1135631055, -0.0343362056, 0.0615214556, -0.1821625829, 0.0758180916, -0.0768888444, 0.0521330610, 0.0094907619, 0.0807405487, -0.1168948635, 0.0150884520, 0.0173818246, 0.0388567857, 0.0282003898, -0.1063218415, 0.0765854269, 0.0276197270, 0.0248286463, -0.0013263375, 0.0970312282, -0.0184055939, -0.1108617783, 0.1068792492, -0.0232360773, -0.0138633847, -0.0131397890, -0.1479495317, -0.0897358507, 0.0541989058, -0.0208302215, 0.0013406090, 0.0094335228, 0.0305962972, 0.0782745034, 0.0062269848, 0.0893205851, -0.0477268323, 0.0376311094, -0.0625595227, 0.0336076505, -0.0362849757, -0.0846868455, 0.0326934755, 0.0584596768, 0.0235991403, -0.0341886058, -0.0827018395, -0.0756447613, -0.0715014189, -0.1204358339, -0.1378381550, -0.0666417703, -0.0735728294, -0.0155845275, 0.0108715296, 0.1043004543, 0.1194682494, 0.1465874910, -0.0133669805, 0.0204179082, -0.0692952648, 0.0830832571, 0.1095725074, 0.0987983570, 0.0350829139, 0.0125477808, 0.0170386638, 0.0691186413, -0.0495800301, 0.1263057142, -0.0519089252, 0.1111214012, -0.0192424804, 0.0633009225, 0.0248807184, -0.0336722992, 0.0650997460, 0.0371786468, -0.0425206833, 0.0952428356, 0.0502313823, -0.0016137604, 0.1427873671, -0.0154663511, 0.0859044865, -0.1071055382, 0.0303281322, 0.0243515484, 0.0672522336, -0.0039398037, 0.0367555730, -0.1157863885, 0.0368955471, 0.0647086129, 0.0606173873, -0.0043525398, -0.0230190661, 0.0422625467, 0.0142333414, -0.0329848565, 0.0279577132, -0.0541345924, 0.0339428112, -0.0575518012, -0.0713049173, 0.1121378094, -0.0461251512, -0.0698202327, 0.1392060220, 0.0014644926, 0.0548709407, -0.0281594172, -0.1365572512, 0.0126740346, -0.0316077583, 0.1690960526, -0.0111040678, -0.0873305053, 0.0328438729, -0.0716483742, -0.0285576284, 0.0378520079, -0.0541410111, -0.0620643646, -0.0758342296, 0.0067667700, -0.0100599639, 0.1118479893, 0.0620336048, -0.0951540470, 0.0769129395, 0.0173255168, 0.0198933966, 0.0495923460, 0.0587724894, 0.0126484521, 0.0964526162, 0.1580571234, 0.0691334158, -0.0355396979, -0.0863593444, -0.1273651272, 0.0699820668, -0.0526297092, 0.0962430164, -0.1246336997, 0.0697020888, -0.0214358978, -0.0664487481, 0.0574122407, 0.0814009607, 0.0540624708, 0.0345595181, 0.0930675119, -0.0447616652, 0.0042455755, -0.0600359440, -0.0902049989, 0.0416128784, -0.0315165296, -0.0572369620, -0.0074669495, 0.0522868000, 0.0286745690, -0.0434348509, 0.0336652435, -0.0421402492, -0.0020767748, 0.0256087407, -0.0681518391, -0.0130081512, 0.0190228447, 0.0400176831, 0.1293179244, -0.1500528008, -0.0440359078, 0.0530981794, 0.0032537095, -0.1931120008, 0.0144553743, 0.0860205591, 0.0230511613, -0.0180168655, -0.0085125044, -0.0310489163, 0.1649919152, -0.0902868807, -0.0282074083, -0.1634726822, 0.0294556096, -0.0868559107, -0.1473696679, 0.1962642074, -0.0375396796, 0.1000907049, 0.0460422188, 0.0468589030, -0.0625187680, -0.0691169798, -0.0088913646, 0.0732612312, 0.0233553983, -0.0384112671, -0.0487776287, -0.0114610456, -0.0306018405, -0.0134658124, -0.1213404536, 0.0747058615, 0.0121001955, 0.0654257908, 0.0540329218, 0.0420405455, 0.0389233530, 0.0336170942, 0.1138065457, 0.0976245403, 0.0633782223, 0.0738957524, 0.0056023747, -0.0505979694, -0.0987262428, -0.0406327322, 0.0710094720, 0.0206359681, 0.1047321409, 0.0375734717, 0.0402077548, 0.0548768565, 0.1777367443, 0.0982289761, -0.1068166643, -0.1081709787, -0.0929260999, 0.0385467075, 0.0174393877, -0.1374467909, -0.0214799121, -0.0006932467, -0.0121233966, -0.0260546412, -0.0807110593, 0.1133235320, 0.1288039833, -0.1034060270, 0.0051622950, 0.0378462896, -0.0173835531, -0.0032906570, -0.0694699958, -0.0650941879, 0.0918752551, 0.0098924721, 0.1711044312, 0.0772826448, 0.0094163120, 0.0187577624, 0.0759755373, 0.0283987001, -0.0093881264, -0.0902204141, 0.0050180145, -0.1920066923, -0.0221936591, 0.1127513722, -0.0087241074, -0.0076190867, 0.0292341691, 0.0474101752, 0.0170301422, 0.0424792804, -0.0145893656, 0.0855864286, 0.1055794060, -0.0636242107, -0.0304686893, 0.0127742067, 0.0895675570, -0.0854037181, -0.0470867716, 0.0185626484, 0.0360932946, -0.0927176476, -0.0166369919, 0.0844226629, 0.0958852321, -0.0751132816, 0.0002945289, 0.0279517490, -0.1460811198, 0.1129507571, -0.0488324687, 0.0365687832, -0.1319220215, -0.0298561677, -0.0102063948, 0.0833401084, -0.0753430128, -0.0340023637, -0.0656594187, -0.0372997820, 0.0712279230, -0.0311317928, -0.0254023410, 0.0181779563, -0.0226247218, 0.0518159457, 0.0796563476, 0.0044373209, 0.0020392202, 0.0733793974, 0.0913358554, 0.0693190917, -0.0179234706, 0.1716943830, 0.1800977141, -0.0468965471, 0.0551907197, -0.0119517436, -0.0240314566, 0.0321146920, 0.0440230183, 0.1076510772, -0.0536756292, 0.0952987894, 0.0395987555, -0.0287886281, 0.0523100048, -0.0633087978, -0.0127384476, 0.0101851374, 0.0042638294, 0.0242828429, -0.0392264575, -0.0001629069, 0.0472922921, -0.0017102845, 0.0246827267, -0.0530524068, 0.0247695670, -0.0307612680, -0.0714932010, 0.0160109978, 0.0541838184, 0.0441796146, 0.0967356339, 0.0765502527, -0.0707614869, -0.0356710702, -0.0346708670, -0.0109612867, 0.0762874782, -0.0457890369, 0.1365689486, 0.0847567543, -0.0141767338, -0.1393902302, -0.1131165549, -0.1381585598, 0.0208075754, 0.0306460336, -0.0331619605, 0.0523989648, -0.0355417952, 0.1102827042, 0.0766436905, 0.1111078784, -0.0034316778, -0.1035442948, 0.1524268240, -0.0059629939, 0.0693080127, -0.0346086361, -0.0819515288, -0.0441782624, 0.0758386999, -0.0735030323, -0.0856493190, -0.0301967673, -0.0366815366, -0.0177348442, -0.0813671798, 0.0540677533, -0.0807873011, 0.0709789097, 0.1109924391, 0.1811609417, 0.1152035594, 0.0007234216, -0.0097318832, 0.0548935533, -0.0341554992, -0.0732904300, 0.1000521034, 0.1485332251, 0.0101377619, -0.0718333423, -0.0015520025, 0.0108652310, 0.0736901090, 0.0691629872, 0.0221581310, -0.0714503303, 0.1252409369, -0.0370949358, -0.0291291475, -0.0114967823, 0.0243107509, -0.1263607591, 0.0061531109, -0.0726031810, -0.0163917858, 0.1197500154, -0.0205357000, 0.0352366306, 0.0272935480, -0.0597563908, 0.0162914135, -0.0475275293, 0.0317154564, 0.0231865644, 0.0229550712, -0.0878318399, -0.0769662261, -0.0084376093, -0.1436814517, 0.0486702882, -0.0444948077, 0.0344186611, 0.1586829722, 0.0306111872, -0.0720247924, 0.0352571681, 0.1263110638, -0.0371419601, 0.0427002460, 0.0904433280, 0.0232714564, -0.0645717382, 0.1127393618, 0.0494571701, 0.1218545958, -0.0541213639, -0.0197980404, 0.0638287365, 0.1193595231, 0.0158308670, 0.0024402379, 0.0038583949, -0.0296583772, 0.0488710739, 0.0593502000, -0.1054385975, -0.0123674776, 0.0202529170, -0.0410036221, 0.0020231297, -0.0691322312, 0.1387873292, -0.0145713761, -0.1726531535, -0.1321559846, -0.0488448627, 0.0272707790, -0.0492367037, 0.0969926342, -0.0205596481, -0.1247071922, -0.0173755772, 0.0026016310, -0.0298877321, -0.0547220409, 0.1180530339, 0.0999964923, -0.0176516436, -0.0070915706, 0.0048563965, -0.0305165425, 0.0442566276, 0.1099427268, 0.0247343257, -0.0316841751, 0.0077317879, 0.0571808815, -0.1193546355, 0.0256112143, 0.0747280866, -0.0300946161, 0.1271756738, 0.0311215930, -0.0449525043, -0.0607501455, -0.0435794741, -0.0701720268, -0.0417013653, 0.0927775651, -0.0364557728, -0.0734337270, -0.1198048368, 0.0890350938, -0.0995081514, 0.0610925481, 0.0275508519, 0.0382894985, -0.0752343908, 0.1578427255, 0.0633764863, 0.0250334069, -0.0590628535, -0.0574106015, -0.0375956744, 0.0643678680, 0.1410599947, -0.0069509558, -0.0362076014, -0.0528564602, -0.0871781111, -0.2029578984, 0.0207442436, 0.0172211900, -0.0387443900, 0.1029771864, -0.0718968287, 0.0962626263, -0.1150707006, 0.0225296505, -0.1062505096, -0.0542173535, 0.0691584051, -0.0978672430, 0.0800578967, -0.0200731158, -0.1154372245, 0.0175106451, 0.0241347291, 0.0720801651, 0.0755986571, 0.1236324012, -0.0491413474, -0.0902501494, -0.0092632212, -0.0097360555, -0.0836219341, 0.0957553536, 0.0416434258, 0.0069763307, -0.0234236009, -0.0770373046, 0.0914521292, -0.0307233278, -0.1047434211, -0.0492566191, -0.0445616171, 0.0156112798, 0.0313897170, -0.0548076928, -0.0592403784, 0.0328433290, -0.0599721558, 0.0666912720, -0.0087868199, 0.0353315137, 0.0953968167, -0.0230226442, -0.1480569392, -0.0423719920, 0.0709881335, -0.0336242095, 0.0245781597, -0.1663195044, 0.1763687283, -0.0307378266, -0.0802715346, 0.0240021907, 0.0128249507, 0.0550153553, -0.1564878672, 0.0237405431, 0.0268198233, 0.0009643137, -0.0380818434, -0.1125202253, 0.0103841610, 0.0488424003, -0.0867859647, -0.0207586046, -0.1463314146, 0.0255243778, -0.0633173957, 0.0735521987, -0.0305285361, 0.0482360907, -0.1044612676, 0.0245012268, 0.0260498300, -0.0520776138, 0.0555794388, -0.0625501648, 0.0371290669, 0.0932822302, 0.0566952862, -0.0360317305, -0.0238822959, -0.0496251732, -0.0623582043, -0.0368347652, 0.0171938799, 0.0077728778, 0.0799120888, 0.0028275675, -0.0558699332, -0.0069434457, -0.1012842804, -0.0467880890, -0.0665024519, 0.0199738853, 0.0793317631, 0.1737738103, 0.0838446170, -0.1421862692, -0.0309060290, -0.1135769859, -0.1079572365, 0.0516597219, -0.0370461978, 0.0204926990, 0.0025882255, 0.1490520686, 0.0068053957, 0.2092957646, 0.0017567328, 0.1124783605, -0.0688280910, -0.0033177752, -0.1009434536, 0.0150521975, 0.0502415299, 0.0707187057, -0.0006706007, -0.0248026140, 0.0381728448, -0.0675836131, 0.1260483861, -0.0251447111, -0.0943851843, -0.0620146394, -0.0182443727, 0.0445852652, -0.0831963271, -0.0770132989, -0.0337415636, 0.0041088462, -0.1036715657, 0.0636121035, -0.0457925797, -0.0001995079, -0.0025880076, 0.0180921666, 0.0065539237, 0.0530918315, -0.0650744066, 0.0273851547, -0.0396055728, 0.1616123170, -0.0360402837, -0.0257851519, -0.0482235774, 0.1144434065, 0.0098604951, -0.0245936606, 0.0753188357, 0.0760424957, 0.0373858362, -0.0421240404, -0.0643197447, 0.0125432611, 0.0315541551, -0.0442936569, 0.0918421745, 0.0332874320, 0.0286614764, 0.1537031382, -0.0820427835, -0.0733414143, -0.0298258979, -0.0531212017, -0.0251111519, 0.0815786421, -0.0086294394, 0.0758012682, 0.0465162918, -0.0233371742, 0.0891067907, -0.0407357402, 0.0027299263, -0.0729205236, -0.0611742809, 0.0355189741, 0.2029308081, -0.0918409526, 0.1222511083, -0.0031389061, -0.0017515086, 0.0067754202, 0.1629417539, -0.1173535660, 0.0225358121, -0.0100064445, -0.0159429461, 0.1173378900, -0.0018804073, -0.0212441199, 0.0207827203, -0.0402471498, 0.1564983726, 0.0354240574, -0.0715119541, 0.0238625444, 0.0547838695, 0.0842199549, 0.0671914741, 0.0381319299, 0.0161588080, -0.0717281848, 0.1349720359, -0.0044639874, -0.0648759454, 0.0045377365, 0.0257540233, 0.0381207578, -0.1101049036, -0.1220000833, 0.0053626280, 0.0872603953, 0.0927584469, -0.0213121511, 0.0401440635, 0.0182211418, 0.0811422169, 0.1222146228, 0.0497397035, -0.0764497742, -0.0949206278, 0.1629260927, 0.0448194072, -0.0218278114, 0.0159538388, -0.0274746660, 0.0093758805, 0.0065175975, -0.0896177590, 0.0341952741, 0.0024153702, -0.0252114460, 0.0781001523, -0.0021414310, 0.0055425353, -0.0217285845, 0.0382516831, 0.0746511072, 0.0011725035, -0.0208048224, 0.0140015474, 0.0940796956, -0.0530008227, 0.1135931388, -0.0274897888, -0.1214879081, -0.0148918126, 0.0282621738, 0.0256618224, -0.0571075939, 0.0227450542, -0.0628013313, 0.0107251815, -0.0317583755, 0.0727912337, -0.0850902647, 0.1245548651, -0.0214838032, -0.0013109129, -0.0519986637, 0.0462797582, -0.1114407778, 0.0222228914, 0.0169344656, -0.1209679544, 0.0153716495, 0.0777876079, 0.1220904961, -0.0138728600, -0.0013127141, 0.0021622777, -0.1369027495, 0.0009115413, 0.0235881731, 0.0190763474, 0.1643238068, 0.0244589634, -0.1661321074, -0.0648083836, -0.0575144961, -0.0348664597, 0.1061374322, 0.0120574255, 0.0566680953, -0.1131682619, -0.0554625168, -0.0822595805, -0.0375324413, 0.0151780648, -0.1103167832, -0.0796864778, 0.0871553868, 0.0110154860, -0.0784950256, -0.0084861470, 0.2001595497, 0.0265583489, -0.0814572051, 0.0498890355, -0.0527232811, -0.0359281115, -0.0544405803, -0.0349697769, -0.0800275803, 0.1546163708, 0.0113200592, 0.1080590039, -0.0257693864, -0.0233829543, -0.0223512575, 0.0608246364, -0.0427676104, 0.0688868091, -0.0247830842, -0.0133148581, 0.0711231977, -0.0376182050, 0.0386990421, 0.0101868771, 0.0227039047, 0.0289124660, 0.0143576181, -0.0559336394, 0.0163343959, -0.0835640728, -0.0687960535, 0.1184403002, -0.0712987855, -0.1715946048, 0.1609805375, 0.0625281930, -0.0028749928, -0.0211016200, -0.0627139434, -0.0485051945, -0.0419262461, -0.0446001180, -0.0462035388, -0.0320175886, -0.0236289520, 0.0764057860, 0.1163257062, 0.0425974205, 0.0603384413, -0.0469485931, 0.0681790113, 0.0685236752, 0.0036462396, 0.0886435136, 0.1514965296, -0.1688886583, -0.0180195477, -0.1078967750, 0.0568385683, -0.0556624494, 0.0016675126, 0.0605284944, 0.0293080285, 0.0435559042, 0.0099720405, 0.0554973669, 0.0070735402, -0.0590165369, 0.0478349626, -0.0134960338, -0.0402472243, 0.0330969691, 0.0028428000, 0.0692471042, -0.1258334368, 0.0177546851, 0.0528835952, 0.0794697106, -0.0915588439, 0.0028376069, 0.0079719555, 0.1241327226, -0.0070553087, 0.0830811486, 0.0530309416, -0.0372530818, 0.1529768556, 0.0409414321, 0.0830607042, -0.0296355523, -0.0210957415, 0.0841399133, 0.1007990539, -0.0781415999, 0.0079552196, -0.0678132921, 0.1093422174, 0.0240535792, 0.0943911597, -0.1137450263, 0.0515796766, 0.0214403346, -0.0555694327, 0.0252923928, 0.0380311757, -0.0736564994, -0.0307864901, 0.0344067402, -0.0031202892, 0.0531477556, -0.0435731001, 0.0797739774, 0.0790238231, 0.0133087412, 0.0019213725, -0.0989923924, -0.0175169818, 0.0761136264, 0.0880116075, 0.1164296418, 0.0129930098, -0.0288231932, -0.0736434162, 0.0872126669, 0.0645041168, -0.0750370845, 0.0156133957, 0.1130054295, 0.0199873261, -0.0719404221, -0.0827526599, -0.0146484096, -0.0058570728, -0.1326204389, -0.0439313799, 0.0678556412, 0.0238498282, -0.0887876749, 0.0394986942, 0.0329228006, 0.0238000527, 0.0066835508, 0.0844751745, -0.0522069931, 0.0143530937, 0.0699587017, 0.0303130560, -0.0666177571, -0.0677411780, -0.0530422553, -0.1757559776, 0.1139644310, -0.0146995895, -0.1802565455, 0.0471466295, -0.0162419211, 0.0709124058, -0.0208016858, -0.1143291444, 0.0637967885, 0.0230352804, 0.0189384203, -0.0375672840, 0.0195643287, -0.1433295906, 0.0122804120, 0.1757855415, -0.0762928873, 0.0649546981, -0.0557149164, -0.1071905345, 0.0019349642, -0.0194113273, 0.1373025775, 0.0169223920, -0.1415568888, -0.0122430865, -0.0058493651, 0.0012946032, -0.0990374833, 0.0563366935, -0.0813064277, -0.0040220302, -0.0867093205, -0.1365451068, 0.0302501544, -0.0783958435, -0.0565010533, 0.0186671466, -0.0433064662, -0.1331631839, 0.1365184039, 0.0436242893, 0.0506576970, -0.0021568500, -0.1213441119, -0.0461606830, -0.0390272066, -0.0216600895, 0.0673188865, -0.0469482914, 0.0231788419, 0.1163444817, 0.0055831289, -0.0512421019, -0.0224883277, 0.0563442707, 0.0453061610, -0.0032103127, -0.0444232821, 0.0204648823, -0.0415516347, 0.0436410420, -0.0569485053, 0.0904941708, -0.0911911950, 0.0168100670, -0.0442915112, -0.1343385279, 0.0680657923, 0.0735901594, -0.0957077369, -0.1589157432, -0.1147863939, 0.1153632253, 0.0642438903, 0.0217282269, -0.1598320007, 0.0251355246, 0.0584208257, 0.0089994129, 0.0301755071, 0.0126795918, 0.0094606690, 0.0561641566, -0.0662871078, -0.1241028085, -0.1535629779, -0.0539161935, 0.0332627036, -0.0508892387, -0.0036791824, 0.0275943987, -0.0315990970, 0.0899581760, -0.0823493749, 0.0055244397, 0.0187065564, 0.0639778301, -0.1139100865, 0.0610653386, 0.1697304249, 0.0138817821, 0.0348496400, 0.0012259558, 0.1024710461, -0.0575425699, -0.0308576301, -0.0880289599, 0.0213133469, 0.0652462021, 0.0177295320, -0.0637305677, -0.0544303842, -0.0125510097, 0.0057398155, 0.0252653584, -0.0392370783, 0.0846624821, 0.0444094017, 0.1020229384, 0.0158056878, 0.1671299338, 0.0418474488, -0.1194981039, -0.0385683440, -0.0015914850, 0.0730265826, 0.1235540956, 0.1125956550, -0.0659855008, -0.0071637225, -0.0329864323, -0.0616697222, 0.1095507368, 0.0862357616, 0.1561082006, 0.1121824533, -0.0703005418, 0.0043677054, 0.0799198002, 0.0972813964, 0.0230928082, 0.1101257205, 0.1120525375, -0.0629848018, 0.1084816828, -0.0928033069, 0.0100025889, -0.0878321677, -0.0350165963, -0.0119833723, 0.0453131199, 0.1176308841, -0.0439488888, -0.0156996157, -0.0100031691, 0.0184664857, -0.0300435834, -0.0436479300, 0.0139848683, 0.0500074588, -0.0543695129, 0.0424771607, -0.0543431863, -0.0865706503, -0.0589348115, 0.0016605929, 0.0613729283, -0.0011392720, 0.0090910196, 0.0240436420, -0.0636938885, 0.0747893453, 0.0694700032, -0.0017695650, 0.0224826019, -0.0033672340, -0.1057223976, -0.0011724271, -0.0709628239, 0.0929316580, -0.0426349342, 0.0102029108, -0.0036025718, 0.0912241861, -0.0561167970, -0.1969781816, -0.0247597098, -0.0800045505, 0.0199601483, -0.0724508688, 0.1523129642, 0.2056934834, 0.0088122776, 0.0878492743, 0.0742174014, -0.0042315982, -0.0823902190, -0.0253247339, -0.0208524987, 0.0129438173, -0.0023608208, -0.1074094400, -0.0188728161, -0.0388140641, -0.0455315635, 0.0591709986, -0.0506609231, -0.0935916975, 0.0517518856, -0.0014561433, -0.1107083187, 0.0328718573, -0.0557399653, -0.0282237176, -0.0129646733, 0.0491966978, 0.0834731981, -0.1174571216, -0.0738848746, -0.0228081644, 0.0518301576, 0.0119299497, 0.1153045818, -0.0606091693, -0.0776648372, -0.0286230538, 0.0879992545, -0.0663737208, 0.0156954359, 0.0554979518, 0.1131967232, -0.0461953171, 0.0511801578, 0.0833670348, -0.0029138029, 0.0624634326, -0.1037318259, 0.0999138057, 0.0346034244, 0.1586756706, 0.0071906112, -0.0750989169, -0.0086718872, -0.0651238784, 0.0402116515, 0.0055665178, 0.0498942696, -0.0500109904, 0.1206776053, 0.0726959482, -0.1096949503, -0.0027589677, -0.0134267667, 0.1223457754, -0.1058850288, 0.0183590874, -0.0658889934, -0.0467104726, 0.0985650793, 0.0341219082, 0.0391204171, 0.0238521434, -0.0259196609, 0.1944493204, -0.0408707745, 0.1150951982, 0.0675076544, -0.0322114825, 0.0608254224, -0.0677645579, -0.1226785928, 0.0626100749, 0.0443852767, 0.0181834865, 0.0688309297, 0.0107313618, -0.0376657471, 0.0642420799, 0.0097060408, -0.0474923253, -0.0132230651, -0.0478077456, 0.0342315547, -0.0695159957, 0.0391696244, -0.0063856095, -0.0111215077, 0.0472381935, 0.0674501434, -0.0047314418, -0.1508212090, -0.1860141903, -0.0852994695, 0.0469911471, 0.0224115029, 0.0241655447, 0.0049869772, 0.0721442476, -0.0064262687, 0.0001379941, 0.0743445531, -0.1466059536, -0.0227130074, -0.0374062806, -0.1006170586, 0.0295224339, 0.0673421770, 0.0811817646, 0.1459191740, 0.1061184481, -0.0794527605, -0.1245028004, -0.0976285934, -0.0327735543, -0.0637303144, 0.1264211982, 0.0476585217, -0.0035367552, 0.0332216583, 0.0622790307, 0.0212391242, -0.0319336876, 0.0794600993, -0.0002299808, -0.0585928597, 0.0190624911, 0.0650900081, 0.1155077815, 0.1476475000, 0.1378150582, -0.1143747568, 0.1548402905, 0.0378671810, -0.0167807303, -0.0372322164, 0.0164165795, 0.1174838915, -0.0623107478, 0.0743084028, -0.0288849715, -0.1403084248, 0.0854528993, -0.0895485356, 0.0345638543, -0.0635612532, -0.0372938886, 0.0381757617, 0.0609538332, 0.1169872507, -0.1495136023, 0.0005834363, 0.0574646220, 0.0541215986, 0.0589413345, 0.0144055448, -0.0375718847, -0.0663537085, -0.1469556987, 0.1290303171, -0.0742831528, 0.0159277134, -0.0451047979, 0.0845749527, -0.0572105944, -0.0447899029, 0.0515345819, -0.0930510238, -0.0718261674, -0.0131980674, 0.0332690775, 0.0783411935, 0.0507248342, -0.0113220401, 0.0471175313, 0.0309266634, 0.1082140133, -0.0317413062, -0.0259969532, -0.0310375411, 0.0265608504, 0.0535893627, -0.0040676035, 0.0361466445, 0.0423571095, 0.0227320343, -0.0979806259, 0.1312994659, 0.0082581639, -0.0147495884, 0.0096633397, 0.0262541436, -0.0196924228, 0.0524929725, 0.0934904814, 0.0589950383, -0.0095415767, -0.0264802296, 0.0635710210, 0.0542759895, -0.0900524184, -0.0511339121, 0.0486591570, 0.0477675870, -0.0061002811, -0.1244769543, -0.0025641280, 0.0533587486, 0.0512831919, -0.0525569394, -0.0514871627, 0.0154497717, 0.0458120182, -0.1503400505, 0.1070491001, 0.0016050448, 0.0383862518, -0.0091121048, -0.0627845749, -0.0284778122, -0.0053319726, 0.0834109932, -0.0693082213, -0.0642736256, -0.0666291714, 0.0470846146, -0.1381095797, 0.0750315115, 0.0016322006, -0.0339778513, 0.0411541462, 0.0303160287, 0.0277168415, 0.0303730369, -0.1193963587, 0.1386853755, -0.1147132888, 0.1637099981, -0.0344399735, 0.0172104184, 0.0551107787, 0.0815540850, 0.0821200088, 0.0705801249, -0.0066948854, -0.0282876454, 0.0082076648, 0.1393792331, -0.0397009403, -0.0716526136, 0.0492310971, -0.1170427874, 0.0886316448, -0.0527415685, -0.1249541640, -0.0755169988, -0.0479694828, 0.0548954941, -0.0664543509, 0.0324024260, -0.0760710090, -0.0966889709, -0.1035892218, -0.0845701322, 0.0700734183, 0.0234808493, -0.0930521190, 0.0764654651, -0.1484582573, -0.0468827076, 0.0883299112, -0.0530120507, -0.0778192207, -0.0669114217, 0.0956371576, 0.0607676357, 0.0520223528, 0.1683172137, -0.0239787325, -0.0534771308, -0.1198213249, -0.0061744824, 0.1241250634, 0.0367742740, -0.1458314508, -0.0264781415, -0.0849567056, 0.0399343595, -0.0592978224, 0.0038689589, 0.0676404536, 0.0669472814, 0.0023594350, -0.0585059561, -0.0973091349, 0.0502814539, 0.0813567266, 0.1287733912, 0.0086907996, 0.1174860671, -0.0842683464, -0.0275374204, -0.0118990075, -0.0060748905, -0.0124430507, 0.0059276074, 0.0870056376, 0.0068450551, -0.0960183442, -0.0311580449, -0.0691131949, -0.0248175338, -0.0242588520, 0.0693094283, 0.0484571643, 0.0683627948, -0.0411849096, 0.0571186952, 0.0328813791, -0.0213168953, -0.0037025819, 0.1342003793, -0.0242136866, 0.0111294091, -0.0092344619, -0.0535446182, -0.0475714877, -0.0810947046, 0.0159845501, -0.0315819308, -0.0721940100, -0.0672056377, 0.1004369855, 0.0105844680, -0.0338032581, -0.0206198804, 0.0371092074, -0.0413148329, 0.0130896764, -0.0758024454, -0.0890855342, 0.0932839289, 0.0865571722, -0.0118745789, -0.1037257165, 0.0933985412, 0.1260318756, 0.0534129217, 0.0464519560, 0.0993354917, -0.0187118575, 0.0442575999, 0.0528763011, -0.0431970619, 0.0118505396, -0.0378506109, 0.0180822015, 0.0839403123, 0.0206317529, 0.0627893582, 0.0282579027, -0.0021957178, -0.1224842370, 0.1012360230, 0.1812270880, -0.0437645018, 0.0307047069, -0.0858278424, 0.1368571520, -0.0092598945, 0.0330048092, -0.0481357947, -0.0215258952, 0.0964893773, -0.0162605047, 0.0680257231, 0.0449847542, 0.0359594263, 0.0232380405, -0.1126722321, -0.0738774687, 0.0790534690, -0.0080074808, -0.0306417681, 0.0871439278, -0.0552400053, 0.1313985884, -0.1254106909, -0.0207286850, 0.0370312482, -0.0518213660, -0.0602218509, -0.1503302157, -0.0154360030, -0.1067031249, 0.0135041401, -0.0768120512, 0.0665045753, -0.0203978512, -0.0187484100, 0.0292685740, 0.0784043595, 0.0847306922, 0.0561779216, -0.0257859007, 0.0040088817, -0.0164681673, 0.0738618150, -0.0293527152, 0.0615750104, -0.0474949703, -0.0684954002, 0.0425276943, -0.0403348878, -0.0455247983, 0.0073405653, -0.0309404358, -0.0340502486, 0.0281933025, 0.0051432271, -0.0268216934, 0.0170157105, -0.0893567950, 0.0499516577, 0.0408258848, -0.1445389688, 0.0143031674, -0.0633123666, -0.0435050838, 0.1129125133, -0.0744021684, 0.1343832761, -0.0184673071, -0.1321929097, -0.0757012293, 0.1890954226, 0.0211187676, -0.0539000072, -0.0006542243, 0.0644033104, 0.1330655068, 0.0760761425, -0.0295792110, 0.1154870763, -0.0128579326, -0.1390232742, 0.1699367315, -0.0726730153, 0.0879555270, 0.0352925584, -0.1016304642, 0.0024002348, -0.0492295958, 0.0301995799, 0.1358862966, 0.0118180662, -0.0806423873, 0.0309345908, 0.0374196917, -0.0760785341, -0.0133723337, -0.0313168429, -0.0030049309, -0.0511148125, -0.0674153119, -0.0515801348, 0.0232428815, 0.0374442153, 0.0194505304, 0.0236379895, -0.1133170873, 0.1100753024, -0.0275425855, -0.1781623214, 0.0629485175, 0.0642516464, -0.0104162525, -0.1470241249, 0.0411845297, 0.0241341293, 0.1156002209, 0.0824277848, -0.0521206409, -0.0152105372, -0.1252623945, 0.0110961236, 0.0060113948, 0.1501454562, -0.0547552034, -0.0682566836, 0.0282992963, 0.0022082683, -0.0037636263, -0.0163751245, 0.0692264363, 0.0093450695, -0.0857387856, 0.0137252780, 0.0240445696, 0.0152336461, -0.0711248070, -0.0006966712, 0.0126689896, -0.0547629446, 0.0097992513, 0.1198420972, 0.0256669037, 0.0190047696, 0.0312168114, 0.0631683171, -0.0290856697, 0.0155655490, 0.0763425753, -0.0334251821, -0.0036239433, -0.0724947006, 0.1124923900, -0.0158953629, 0.1367877424, 0.0554211289, 0.0546440035, -0.0478168875, -0.0166991539, -0.0772250816, -0.0371367894, -0.0676200837, 0.0944302827, -0.0814094245, 0.0038979128, -0.1169690937, 0.1189957410, -0.0306097008, 0.0433672033, -0.1054211184, -0.1182963625, -0.0637108833, -0.0994433686, 0.1072578803, 0.0350321233, 0.0273172576, -0.0832715929, -0.0143496906, -0.1135228351, -0.0312802903, 0.0901693925, 0.1249935180, -0.0706897452, 0.0354556777, -0.1383582801, 0.0696098581, 0.1008423269, 0.0453829020, -0.0660855323, 0.0335904025, 0.0232136212, 0.1117355824, -0.0837467387, -0.0741611868, -0.1009387672, 0.1446089596, 0.0718253404, 0.0055747312, 0.0018869722, 0.0065667704, 0.0025745500, -0.1065583006, 0.0189145859, 0.0492212884, 0.0807596594, 0.0800761282, 0.0515223518, -0.0914731175, 0.0313548781, 0.0381647199, -0.0419918932, -0.1207927167, -0.0912018865, -0.1567927897, 0.0268861242, 0.0005904511, 0.0894943699, 0.0557722673, 0.0088748150, -0.0011364501, 0.0083371419, 0.0147511773, -0.0883436203, -0.0429844260, 0.0274263043, 0.0002734363, 0.0117762769, -0.0466811359, -0.1512967199, -0.0247186236, 0.0396939516, 0.0204567462, 0.0711273327, 0.0613337345, 0.0677679703, -0.0011161431, -0.0106420452, 0.1060161293, -0.0373968519, -0.0958698839, 0.0784584135, 0.0748990104, -0.0641024485, 0.0705146119, 0.0328523032, 0.0367844552, -0.0100743473, -0.0582007281, -0.0561186559, -0.0053060763, 0.0107628666, -0.1165419221, -0.0583724752, -0.0526995957, 0.0059739086, 0.0113038421, -0.1660466492, -0.0268533099, 0.0487797856, -0.0206320062, -0.0144395959, -0.0447791815, 0.0042554755, -0.0074363151, -0.0094136167, 0.0172510054, -0.0198163781, -0.0249168519, -0.0120071331, -0.0394254588, -0.1491055787, 0.0167699605, 0.0336922407, 0.0137003642, -0.0794824138, -0.0250213258, 0.0178010985, 0.1246841922, -0.1344669014, -0.0532392710, 0.0580967478, 0.0414693952, -0.0547596514, 0.1707464457, -0.0640317351, 0.1501802653, 0.0704891682, -0.0633559674, -0.1024935916, 0.1035929620, 0.1073700339, -0.1073264629, -0.0868786946, 0.0586322285, -0.0142578483, 0.0253311265, 0.0074582696, -0.0912613645, 0.0132386787, -0.0141580608, 0.0279774833, 0.0138700968, -0.1152537465, -0.1132572740, -0.0642644316, -0.0205063634, 0.0247453116, 0.0225950405, 0.1120581478, 0.0759436935, -0.0314645767, 0.0085892584, -0.0281609204, 0.0037502944, -0.0739114583, 0.0044313967, -0.1145416647, 0.1458119750, -0.0919038355, 0.0282498226, 0.0300014988, 0.0154738976, -0.0395045578, 0.1301109195, -0.0304714441, 0.0589310713, 0.0804203153, 0.0359335542, -0.0351469107, -0.0652569309, -0.0518516526, -0.0228911191, 0.0327558033, -0.1643804312, 0.1811088622, -0.0200987663, -0.0569986776, -0.0919881240, -0.1312272847, 0.0155314431, 0.0229630992, 0.0175323766, 0.0158036426, 0.0409700945, -0.0503617041, 0.0900829509, -0.0718421787, -0.0581417941, -0.0984909087, -0.0409986563, 0.1007780358, -0.0132459383, -0.0016297344, -0.0441456139, 0.0310195945, -0.0632841587, 0.0150737744, -0.0304076187, -0.0026037805, 0.1564415246, -0.1040919349, 0.1811741889, -0.0409490392, -0.0958930999, -0.1426027864, 0.0881069228, 0.0331997313, -0.0708787367, -0.0169183873, 0.0310823470, -0.1478602290, -0.0214819573, 0.0196527876, 0.1027061492, -0.0686810985, 0.0058447123, 0.1061457172, -0.0467639193, 0.1269646585, -0.0333484747, 0.0102740861, -0.0563296750, 0.0245988593, -0.2314630300, 0.0525560789, 0.0269934852, 0.0078820102, -0.0713452026, -0.0784951746, 0.0417960100, 0.0039282916, -0.0300708730, -0.0849862099, 0.0468108132, -0.0273547955, -0.0507002473, 0.0089945896, 0.0263619442, -0.0612521730, -0.0283818711, -0.0740697980, -0.0805758685, -0.1018708125, -0.0508342087, -0.0211183969, 0.0204298552, -0.0931503475, 0.0169399306, -0.0342083201, -0.1022910103, 0.0355547704, 0.0258128904, 0.0075580003, -0.1655235291, -0.0660513416, -0.0723162293, 0.0760094523, -0.1323036999, 0.0020430721, -0.0307050534, 0.0096547548, -0.0143510634, 0.0837337747, -0.0410851091, -0.0828821659, 0.0411073193, -0.1038351208, 0.0044284901, 0.0450164005, 0.0757868886, 0.0620234050, 0.0893656164, -0.0592811964, -0.0528309755, -0.0632279515, -0.0195770636, -0.0792176053, 0.0821831822, 0.0714623928, 0.0349860750, -0.0033594323, -0.2075404376, -0.0432622582, 0.0335384645, 0.0073671769, -0.0051297862, -0.0839614943, -0.0970842689, -0.0369300768, -0.0059204167, -0.0155908708, 0.0713659897, -0.0209179930, 0.0624270551, 0.1351915300, 0.0445467494, 0.1119909883, -0.0405903943, -0.0346684270, 0.0316216685, -0.0668905079, 0.0061178952, 0.0728338063, 0.0804490745, 0.0345647596, 0.0373038054, -0.0065359399, 0.0447565019, -0.0260287039, -0.1588644981, -0.0892035067, 0.1119362861, 0.1340436041, 0.0612612255, 0.0129499752, -0.0313087255, -0.0118878372, 0.1091340855, 0.0348113552, 0.0429683588, -0.0428864397, -0.0076777823, -0.0540227219, -0.0221013445, -0.1294015944, -0.0773621947, 0.0445416719, -0.1083326638, 0.0527372845, -0.0708165690, 0.0747460127, -0.0489763990, 0.1225240529, -0.0418221988, -0.0051427744, -0.1048562750, 0.0067342706, 0.1479432583, 0.0035820613, 0.0887120664, -0.0276375003, 0.0575924143, -0.1375623941, -0.0555651300, 0.0617145002, 0.0516927168, -0.1155940965, -0.0694759637, 0.0889292210, -0.0384530500, -0.0336634740, -0.0309269875, 0.0103098908, 0.0261281691, -0.1106633618, 0.0114762820, 0.1769700497, 0.0613409206, 0.1032204702, 0.2758197188, -0.0872018337, -0.0056336895, 0.0866310075, 0.0723156184, 0.0006032009, 0.1654946804, 0.1183489487, 0.0875132754, -0.0251060314, 0.0346585847, 0.0415703952, 0.0475065634, -0.1052216366, -0.0839467347, 0.0012696497, -0.0477478281, 0.0404783487, -0.0161568224, 0.0393913090, 0.0102272779, 0.0273371097, -0.0506092235, 0.0602725148, -0.0196210071, 0.0548511520, -0.0284012742, 0.0447218716, 0.0981939137, 0.1534019113, -0.0441914834, -0.0910444930, -0.0115782572, 0.0067389719, 0.0338799469, -0.0906696171, 0.0527025424, 0.0858291090, 0.1080706567, -0.1337136924, -0.0699528158, -0.0484675430, 0.0519372523, 0.1137716845, -0.0425459221, 0.0157485660, 0.0544496328, -0.0312260464, 0.1123539507, 0.0276350956, -0.0561313890, -0.0128307641, -0.0597040094, 0.0503060073, -0.0572218336, -0.0669901296, -0.0802536756, -0.0364695303, -0.1202482060, 0.1029073372, 0.0360702947, 0.0311421603, -0.0882488638, -0.0072199409, -0.0554006882, -0.0103632733, 0.0163179748, 0.0098466519, 0.0787706077, 0.0491213687, -0.0054426175, -0.0404607393, -0.0059345197, 0.0406642295, 0.1241625398, -0.0007094676, 0.0049789352, -0.0573057830, 0.0569613837, -0.0460048951, -0.1287094355, -0.0438076109, 0.0758329481, 0.0642664060, -0.0864819884, -0.0287539624, -0.0064156018, -0.0777480379, -0.0164469406, -0.0368616432, -0.0167564172, -0.0124213649, 0.0055465773, -0.0478553437, 0.0125493566, -0.0005228652, 0.0393695571, 0.1319414973, -0.0066909976, -0.1009688526, 0.0206721425, -0.0775348768, 0.1207250878, 0.0875964463, 0.0789199471, -0.0526694022, -0.0107488595, -0.0361931883, 0.0364667848, -0.1238658056, 0.0527033880, -0.1226308718, -0.1085364446, -0.0529201590, 0.1412493140, -0.0538308658, 0.1380609870, -0.0244944599, -0.0071857013, 0.0082936119, 0.0558605418, -0.0176019631, -0.1066328883, -0.0642992333, -0.1155300587, -0.0610371381, 0.0421901383, -0.0125397556, 0.0728527457, 0.1872228682, -0.1193487793, 0.0466493145, 0.1088637412, 0.0230633505, 0.1020562053, 0.0624237657, -0.0031423136, -0.0734192431, 0.0281484276, 0.0867058858, -0.0250520445, 0.1297607422, 0.0006704852, 0.0394050665, -0.0208648387, -0.0437430069, -0.1583850235, -0.1210917234, -0.0666162223, 0.0177550353, -0.0467564240, -0.0983086973, 0.1381457299, -0.0972841680, -0.0162268616, 0.0422425494, 0.0970398039, -0.0241814107, 0.0049078632, 0.0745839998, -0.1035471186, 0.1330781579, -0.1181866825, -0.0600695983, -0.0704163313, -0.0927891061, 0.1085566133, -0.0094964020, -0.1147167161, 0.1134988144, -0.0234491713, -0.0170843415, 0.0751147494, 0.0886277929, -0.0500252619, -0.0610912889, -0.0677367300, 0.0387878008, -0.0132756289, 0.0467913449, 0.1074326411, 0.0298770815, -0.0457125157, -0.0708475113, 0.0579114258, 0.0259383190, -0.0448269844, 0.0253930893, 0.0384507254, -0.0525167212, 0.0111675886, 0.0804991871, 0.1015760824, -0.0435198992, -0.0633623749, -0.0861362368, 0.0461400077, 0.0280238017, -0.0154779889, -0.0049866810, -0.0197740048, -0.0615117438, 0.0177485570, -0.1309273988, 0.0446885861, 0.0076389425, 0.1549873501, -0.0418888070, -0.0484046862, -0.0805674121, 0.0103387414, -0.0748076290, 0.1267339885, -0.0109155644, 0.1067826003, 0.0046790289, 0.0323569514, -0.2112933993, -0.1701678783, -0.0043244781, 0.1184662730, -0.0663667843, -0.0120568536, 0.0082348585, 0.0134698423, 0.1423279643, -0.0755011141, -0.0053343414, 0.0426035710, 0.0076490697, -0.0205108244, -0.0269798357, -0.0122605152, 0.0019667998, 0.0025669858, 0.0919647962, 0.0219782181, 0.0574073493, 0.0164743904, 0.0061853677, -0.1058400050, -0.0403899550, 0.0322594158, -0.0602959618, -0.0384366363, -0.1360400021, -0.0040008724, 0.0323505700, -0.0451891795, 0.1042900905, 0.0270532779, 0.0625151321, 0.0112317102, -0.0634490550, 0.0016328823, 0.0316618867, 0.0057804249, -0.0331821926, 0.0806458071, 0.0303182863, 0.0834383592, -0.0430951491, -0.0309327058, -0.0555120520, -0.0147682987, 0.0577183478, -0.0248868205, 0.0545573905, -0.1340071261, -0.0160722993, -0.0649649724, 0.0072205942, 0.1036971956, -0.0352973081, 0.0028594281, -0.0792911947, -0.0076378128, -0.0347782932, -0.0869854838, 0.0305385347, -0.0602797866, 0.0815759972, -0.0790274963, -0.0682812780, 0.0076609822, 0.0051900111, 0.0452889502, -0.0843744278, -0.0833166465, 0.0015759768, -0.0312366653, -0.0201026946, -0.1017954201, 0.1041730121, 0.0499939509, -0.1157134250, -0.0577242412, -0.0512704924, -0.0216715075, 0.0487104766, 0.1129830554, -0.0201994404, 0.0533774085, -0.0219632220, 0.0624929443, -0.0497496352, -0.0433004647, -0.0651363879, -0.0129009113, -0.0296908095, 0.0729436800, -0.0127333477, 0.0503258184, 0.1166123748, 0.0849382728, -0.1100717112, -0.0605730079, 0.0253963787, 0.0595752783, -0.0194394663, -0.0328959562, 0.1023834273, 0.0602505691, 0.0217696037, 0.1736560315, 0.0603690781, 0.0096348496, -0.0925389081, 0.0159893855, -0.0606106408, 0.0609395243, 0.0711346865, -0.0301161557, -0.0815308318, -0.0058174022, 0.0629408211, -0.0259265900, 0.0188024156, -0.1206126809, -0.0172688961, 0.1009956896, 0.0676227361, 0.0408030264, 0.0502503514, -0.1636768579, 0.0558623001, 0.0405540243, 0.0018899888, -0.0030406672, -0.0907613859, -0.0356993042, -0.1154696569, -0.0516905822, 0.0688466579, 0.0165876485, 0.0988928974, 0.0322867297, 0.1412109882, -0.0701811388, 0.0482506081, 0.0724330693, -0.1209498793, -0.0835572481, -0.0088330265, -0.0671757832, -0.0439885668, 0.0167372189, 0.0270026084, -0.0394555330, 0.1212943569, -0.0193687119, 0.0620911047, 0.0034098793, -0.0976367891, -0.0370578058, 0.0274117831, -0.0147422850, 0.0321402624, -0.1002347097, 0.1242699772, 0.0545715317, -0.0101418737, 0.0570904873, 0.1305847764, 0.0514678285, 0.0252970383, -0.0730694383, 0.1021742299, -0.1174357757, -0.1323194802, 0.1073406860, -0.1208916679, -0.0001973277, 0.0226378217, 0.0490637161, -0.0026269108, -0.0085031893, -0.0404621661, 0.0523157194, 0.1009385288, -0.0273127891, 0.0250892490, -0.0108226053, -0.0667748377, 0.0002173502, -0.0700613558, -0.0296783075, -0.0615518168, -0.0360602662, -0.0137008661, 0.0440738276, 0.0038019065, -0.1014795303, -0.0309297126, 0.0034376141, -0.0384614728, -0.0243383292, -0.0930394605, -0.0620656200, -0.0334145911, -0.0141134858, 0.0331500880, -0.1041948050, 0.0268117636, -0.0541312061, -0.0511034504, -0.0573705249, 0.0292800926, 0.0050271330, -0.0869080871, 0.1114122272, -0.1706219465, -0.0685046762, -0.1250293255, 0.0706018880, -0.1114406735, 0.0905252621, -0.0632537380, -0.0526808053, 0.0674048513, -0.1722277999, -0.0363108739, 0.0360085331, 0.0366963632, 0.0258266628, 0.0642295107, 0.0088800993, -0.0492260978, -0.0419043265, -0.0862555653, 0.0933043659, 0.0683608875, -0.0104469266, 0.0418795012, -0.0107228542, -0.0048138984, 0.0249560736, 0.0075339796, -0.0544056296, 0.0986686051, -0.0367739312, 0.1950491220, 0.0717444867, 0.0179062728, -0.0196419712, -0.0474626645, 0.0153288040, 0.1393782794, 0.0766036287, -0.0127470996, -0.0641077384, -0.0013138689, -0.1800475121, -0.1479278207, -0.0274042301, -0.1998378336, 0.0701140016, 0.0007559322, -0.0199736301, -0.0772644058, -0.1213409752, 0.0250052083, -0.1513755172, -0.0966046304, 0.0524105877, -0.0527983904, -0.0613728762, 0.0356099196, -0.0177653432, 0.1556816697, -0.0723164231, 0.0498531461, -0.0443215072, 0.0404759943, 0.0100776562, 0.0449589193, -0.0038108132, -0.0574939176, 0.0355611891, -0.0163245499, -0.1080448106, 0.1175045744, -0.0430247672, -0.0778523013, -0.0137177864, 0.1008593366, 0.1399990022, -0.0007828921, 0.0442831963, 0.0948669538, 0.1201184615, -0.0302831996, -0.0969728529, 0.0368892923, -0.0551883280, 0.0730946735, 0.0529760271, 0.0047495384, 0.0782773644, -0.0185463484, -0.0261216909, -0.0289488696, -0.1588966995, -0.0603682399, 0.0514122844, -0.0236035399, -0.0852432773, -0.0931561366, -0.0091074239, 0.0857245326, -0.0834618956, -0.0897182971, 0.0036205160, -0.1563568860, 0.0364714265, -0.0061189653, 0.1530388892, 0.0374551900, -0.1173017025, -0.1558951586, -0.0537901968, 0.0511935540, 0.0491224676, 0.0686228424, 0.0360519476, -0.0289593711, -0.0728511363, -0.0092252884, 0.0324843526, -0.0067010578, -0.0257225782, -0.1010625511, -0.0154326297, -0.0643634200, 0.0403136909, 0.1166175008, -0.0281585865, -0.1214739233, -0.0487310179, 0.0641570464, -0.1042990386, -0.1683041304, -0.1875508279, 0.0708028227, 0.0531484708, -0.0228488725, 0.0123175383, -0.0501333848, -0.0459306613, 0.0496071428, 0.1003519148, -0.0149045028, 0.0712131262, 0.0487076379, 0.1319755614, -0.0131558441, 0.0656333342, 0.0699494630, -0.0055033965, 0.1765454262, -0.0367207006, -0.0525579937, -0.0989273638, -0.0376202762, 0.0554249883, 0.0460726097, 0.0635575801, -0.1306733936, 0.0102097355, 0.1016734764, -0.0482794493, 0.0979198143, -0.0740237385, -0.0434515886, 0.0344968066, -0.0673291236, -0.0987545401, -0.0731998682, -0.0176913664, -0.0331058428, -0.0310195982, -0.0411375724, -0.0326899067, 0.0914083198, 0.0496813953, -0.0830722973, 0.0939747617, -0.0257727243, 0.0158641264, -0.0654624104, -0.1238938272, -0.0217311755, 0.0054168198, -0.0937787741, -0.0449260958, -0.0860102400, 0.0099957855, 0.1126495078, 0.1480343640, -0.0472191572, 0.0787078813, 0.0255473033, 0.0692395791, -0.0375166982, 0.0195214078, 0.0314137600, 0.1396745443, 0.0827555582, -0.0811824873, 0.0324542336, 0.0030212607, 0.0479774177, 0.0834196284, -0.0136791337, 0.0053053321, 0.0150628425, -0.0747779012, -0.0165715627, -0.1216341481, 0.0623779632, 0.0110403886, -0.0328217000, 0.1291227937, 0.0490885042, -0.0295808595, 0.0163037442, 0.0142522994, 0.0332365967, -0.0570023730, 0.1063938662, -0.0414973497, 0.0497852229, -0.0084114913, -0.0741844401, -0.0019726492, -0.0111403959, 0.0495296493, -0.0190078244, 0.0470565297, 0.0573450923, -0.0621493906, -0.0497056507, 0.0076630777, -0.0201349668, 0.0087270010, -0.0355642736, -0.0361893773, 0.1394350976, 0.0330136567, 0.0795591325, 0.0108114034, -0.0402355865, -0.0613078810, 0.0085742241, -0.1243401617, -0.0294651836, -0.0300749578, 0.1491326243, 0.0618097335, 0.0081235226, 0.0165871885, 0.0368745402, 0.0685531646, -0.0813977644, 0.0623858236, -0.0445827022, -0.0376395732, 0.0209230185, 0.0453035533, -0.0387653857, 0.0092830025, -0.0557418056, 0.0086289328, -0.0537787080, 0.0697156489, 0.0458199531, -0.0487916246, 0.1233016849, 0.0033494737, -0.0299827084, -0.1765367836, 0.0165286809, 0.0064539155, -0.0930202529, 0.0134438202, -0.0744051337, -0.0173912775, -0.1029985249, 0.1101801693, -0.0468342379, -0.0528365150, -0.0303816088, 0.1196755618, 0.1364213079, -0.1378810704, -0.0430846103, -0.0183802005, 0.0293165296, 0.0298656654, 0.0057582408, 0.0419511013, -0.0193027407, 0.0774171799, 0.0573661104, -0.1535081267, -0.1206245273, -0.0204729848, 0.0361812301, 0.0744787306, -0.0621828549, -0.0158411618, -0.0311001614, -0.0363444947, 0.0845170319, -0.0497213677, -0.0583769083, 0.0187849011, -0.0552101694, 0.0926037133, 0.0606087223, -0.0580952726, -0.0657940581, 0.0503183678, -0.0907897800, -0.0288907848, -0.0478150398, 0.0717736036, 0.0175081361, -0.1710047573, 0.0625908971, 0.0196334906, 0.0165351778, 0.0324450359, -0.0343584120, 0.0296832342, 0.0454486981, -0.0577372164, 0.0851790830, -0.0961843878, -0.1110303774, -0.0188170746, 0.0221650247, 0.0840963051, 0.0820224360, 0.0374078564, 0.0637504607, 0.0078417556, 0.1600302756, -0.0656181797, -0.0934613720, -0.0887648836, -0.1527103931, 0.0126866233, 0.0103100725, 0.0069631133, -0.0960783958, 0.0745518506, -0.0935868397, -0.0390029326, 0.0194099694, 0.0331224389, -0.0995200202, -0.0553915352, 0.0202032011, -0.1882414371, -0.0130590275, 0.0908733681, 0.1074533463, 0.0880839154, 0.0275253449, -0.0204915516, 0.0049314760, 0.1308083832, -0.0813730806, -0.0603369996, -0.0199960098, 0.0356695130, 0.0014681555, -0.0473093912, -0.0229776427, -0.0904776901, -0.0273289606, 0.0313541666, -0.0602308139, 0.0169179626, -0.0829940438, -0.0964451656, -0.1255735010, -0.0683431923, -0.0230413619, -0.0144220535, -0.0875474960, -0.0230700634, 0.0065831603, -0.0830721557, -0.0270291362, -0.0062176175, 0.0378276259, -0.0526986644, -0.0018212302, 0.0665705353, 0.0921385661, 0.0944536626, 0.1294405460, -0.0217180289, -0.0192834251, -0.0013354011, 0.0272181686, 0.0251499433, 0.0309099406, 0.0404562503, 0.0269775186, -0.0891761333, 0.1485836953, 0.0182132348, -0.0407283008, -0.0661233738, -0.0152708553, -0.0525353625, 0.0343648642, -0.1048847809, -0.1952239126, 0.0001684036, 0.0416932628, 0.1180349737, 0.0131616853, 0.0470018871, 0.1126618236, 0.1959852576, -0.0154385939, -0.0374519378, 0.1156930625, -0.0102427201, -0.0709692240, -0.0603362024, -0.1657909453, -0.0021251729, 0.0854671448, 0.0393746272, 0.0024067722, -0.0285968743, -0.1130098552, 0.0005294867, -0.0653336048, 0.0022232914, 0.0784292966, -0.0866404548, -0.0802252889, 0.0060072010, 0.0221653022, -0.0118522309, -0.0848744214, -0.0734176561, 0.0552781150, -0.0785120428, -0.0156858973, -0.0723035187, -0.1737086773, -0.0441373363, -0.0125274668, 0.0344837569, -0.0180453155, -0.0164554343, -0.1188764945, -0.0007014507, -0.0541173965, -0.0412267819, -0.0567938685, 0.0558849871, 0.1251011044, -0.0935487077, -0.0038610809, -0.0052074548, -0.0429841802, -0.0015938319, 0.1322333217, -0.0189301260, 0.0499956012, -0.0691285133, -0.0426454768, -0.0837511793, 0.0867073834, 0.0067603402, 0.0495606363, -0.0769598857, 0.0051181791, -0.0270213448, -0.0873166919, -0.0757586062, 0.0453068167, -0.0794876665, -0.0221100934, 0.0708654448, 0.0681720003, 0.0718029365, -0.0851935521, -0.0081177130, 0.0572420284, 0.0268036611, 0.0021321531, -0.0940199643, 0.2129614055, 0.1384111792, 0.0383804962, -0.0527579710, 0.0378630795, 0.0561628640, 0.0619008094, -0.0114327669, 0.0087726936, 0.0214132164, 0.0083758002, -0.0521943644, -0.0528100058, -0.1234573722, -0.0452511981, -0.0531955138, -0.0796150863, -0.0506646261, 0.0378584564, -0.0563230217, 0.1174172685, 0.0338124819, -0.0345207751, 0.0784286782, 0.0039882921, -0.0682393983, 0.0861914158, -0.0137826577, -0.0406199582, -0.0666296929, 0.0094169630, 0.1005867273, 0.0721163899, 0.0320303403, 0.0213250294, -0.0772491768, 0.0232230332, 0.0572585613, -0.1372187883, -0.0404387414, 0.0275477115, -0.0285450518, -0.1013200060, -0.0430922322, 0.0620634891, -0.0552043319, 0.0190290697, -0.0235104039, -0.0842154324, -0.0941186175, 0.0831695572, 0.0618817732, 0.0648779944, -0.0902307332, -0.0073204958, -0.0491468683, -0.0316539705, 0.0105825625, 0.0650750473, 0.0016595311, -0.0152000347, 0.0335278846, 0.0459028184, 0.0350811705, -0.0367156155, 0.0615328774, -0.1692090333, -0.1171072647, 0.0329356268, 0.1154993102, 0.0830376744, 0.0282395780, 0.1826343387, 0.0346074924, 0.0888060257, 0.1047945917, -0.0224558264, 0.0072777346, 0.0243029818, 0.0085824411, -0.0167648178, 0.0942949206, 0.0635663122, -0.0501705334, -0.0725655705, 0.0221059434, -0.0952844769, -0.0836542845, 0.0354063809, 0.0296591576, -0.0171695054, -0.0196141247, 0.0057272362, -0.1399027854, 0.0644305497, -0.0705022365, 0.0344233178, -0.1398640722, -0.0267502256, -0.0270560291, 0.0673376173, -0.1899022907, 0.0629345328, -0.0107075190, -0.1563313156, -0.0055877054, -0.2023608387, 0.0649551824, 0.1089982241, -0.1081001982, -0.0786064491, -0.1103396267, -0.0358837098, 0.0208164901, 0.0556396060, -0.0081913639, -0.0601188838, -0.0754845068, -0.0099186208, -0.0162826441, 0.1308362931, -0.0299113877, 0.0284665097, -0.0598128960, -0.0791175514, 0.0713539124, 0.0164564885, 0.0816224143, -0.0623626187, -0.0003249635, -0.1034578383, -0.0594408289, 0.0138292778, -0.1763033867, 0.0158669502, -0.0017163996, 0.0489186496, 0.0304051712, -0.0610274598, -0.0223960746, -0.0960626528, 0.0113596283, 0.0181104746, -0.1249320731, -0.0100349952, 0.0416666307, -0.0032335762, 0.0026731342, -0.0559290089, -0.0280392393, -0.0352764130, -0.0243729614, 0.0993373245, -0.0606747866, -0.0394413732, 0.1557364911, -0.0250376407, 0.0216337610, -0.0771744400, -0.0619072765, 0.0661817268, -0.0792878643, 0.0637966394, -0.0607594252, -0.0617385805, -0.1544582546, 0.1114603728, 0.0582880974, -0.0438258722, 0.1393762976, 0.1305622011, 0.0031747408, -0.0747664943, 0.0501928888, -0.0193602052, 0.0508683771, 0.0013167718, 0.0602318197, -0.0128440820, 0.0585231110, -0.1104698926, 0.0820905417, -0.0803957954, 0.0131878089, 0.1206348538, 0.0682235062, -0.0215890035, -0.0444768891, -0.0976417288, 0.1600797623, -0.0278824195, 0.0609571263, 0.0915414542, 0.0926680043, -0.0535911769, -0.0764309317, -0.0756462067, -0.0441764072, 0.0786722675, -0.0391991436, -0.1131584123, 0.0971531123, 0.0581128038, 0.0751416460, -0.0980830565, 0.0115891229, 0.0662860423, -0.0426947176, -0.0131619759, 0.1286885142, -0.0255937055, -0.0103755966, 0.0638291538, -0.1731766462, 0.0143265985, -0.0107000247, 0.0721928179, -0.1051721945, 0.1052211747, 0.0825268030, 0.0597790629, 0.0533020571, 0.1165852323, 0.0229701512, -0.0698469579, 0.1620587260, 0.0231824927, -0.0336599126, -0.1276507974, -0.0266205892, -0.0945791751, -0.0154776797, 0.0096901655, -0.0531228818, 0.0305558350, 0.0586506203, -0.0033351099, 0.0113826003, -0.0057867812, -0.1385008842, -0.0641892999, 0.0512098633, 0.0323015526, -0.1139866784, 0.0760780424, 0.0403414555, -0.0593413822, -0.0309258513, 0.0641447827, 0.1631155163, -0.0522004887, -0.1380977035, -0.0524290241, -0.1032365188, -0.1919414997, 0.0975904837, -0.0290072896, -0.0697995424, 0.0498713031, 0.0000687726, -0.0466752797, -0.0372003131, -0.0640017390, -0.0755065680, 0.0888518617, -0.0443630293, 0.0453433096, -0.0129993949, -0.1405068934, 0.1007459462, -0.1302434206, -0.0534201115, -0.0059932545, 0.0040761176, 0.0013955534, -0.0589722246, 0.0428933874, -0.0374739319, 0.0021929252, 0.0851514563, -0.0075850310, 0.0616252348, -0.0356048159, -0.0223168731, -0.1284158379, 0.0435545072, -0.0106050670, 0.0168353319, -0.1048404947, -0.0307310782, 0.0887078717, 0.0356466174, 0.0840123221, 0.0671735704, 0.0258762706, -0.0002670325, -0.0297737923, -0.0297235940, 0.0316771306, 0.0234215613, 0.0085588507, -0.0128601296, 0.1530832201, 0.0426989794, -0.0651386827, -0.0742578134, 0.0434055440, 0.0303788297, 0.0654020384, 0.1216344237, -0.1065579131, -0.0458726808, -0.0428487845, -0.0360243991, -0.1208146065, 0.0808673352, -0.0256712418, -0.0602060333, -0.0082227895, -0.0998268947, -0.0543342084, -0.0249238163, -0.0738211870, -0.0355108418, 0.0100323297, -0.0084992982};
# 26 "firmware/parameters.h" 2
# 1 "firmware/weights/b6.h" 1
# 12 "firmware/weights/b6.h"
model_default_t b6[192] = {};
# 27 "firmware/parameters.h" 2
# 1 "firmware/weights/br6.h" 1
# 12 "firmware/weights/br6.h"
model_default_t br6[192] = {};
# 28 "firmware/parameters.h" 2
# 1 "firmware/weights/w12.h" 1
# 12 "firmware/weights/w12.h"
model_default_t w12[256] = {0.0633617043, 0.0125310635, -0.1116434261, 0.0968773291, 0.1550549269, 0.0465845540, -0.0209799856, 0.0287835207, -0.1646457613, -0.0056621931, -0.0827925205, 0.2249059677, 0.2194464207, 0.1880234331, -0.0010083379, -0.2535772324, 0.1229380444, -0.0997768715, 0.1840314418, 0.0775087401, -0.0371234342, 0.0183786564, -0.0239324663, -0.1015806794, -0.1641625762, 0.0105410749, -0.0793091282, 0.0565169007, -0.0769029781, 0.0045159454, -0.2136601359, -0.0032275522, 0.0580685623, 0.0741212815, -0.0679808408, 0.1714195907, -0.0143775800, -0.2823314667, -0.0174536612, -0.0892173573, -0.0347200483, 0.2314438522, 0.0780915469, -0.0157755837, -0.1029967666, 0.0826342925, 0.1817878187, -0.1350027174, 0.0047351662, 0.2161197215, -0.0404755026, 0.2571154237, 0.0120364064, 0.0318481550, 0.0769972727, -0.0894763321, 0.0488246568, 0.0842116624, -0.1215742156, 0.2201006263, -0.1180046052, -0.2532008588, 0.0425637551, 0.1178028509, 0.0862233862, 0.1014764085, 0.1400892884, 0.0113298548, 0.1661834717, -0.0626415014, -0.0977258310, 0.0585841909, 0.2252701074, -0.0776995942, 0.0990147218, -0.0155182760, 0.1951258481, 0.1140964404, -0.2172122300, 0.1567661315, 0.2141486704, 0.0657510310, 0.0097633898, 0.0478349663, 0.0222249571, -0.0820761174, -0.1843095720, -0.1697048992, 0.0671937391, -0.0530137531, -0.1089942530, -0.0088874279, 0.1174912006, 0.1355454773, 0.2418306619, 0.0950913876, -0.0825491473, 0.0250887629, 0.1037218198, -0.0662923902, -0.1509464830, -0.0173777584, -0.0202831924, -0.1172023863, -0.0669775978, -0.0599433370, 0.0888868049, -0.0278091375, 0.1891570687, 0.1224856600, -0.1574999541, 0.1859263629, -0.1150520891, -0.0430281386, 0.0866353288, -0.0732172132, -0.0786187351, 0.0095578404, 0.0407739058, 0.0604782701, -0.0004433888, -0.0077383392, 0.0967134237, -0.0689576119, -0.1612801403, 0.1319082081, -0.0430874787, -0.1274380386, 0.0931724012, -0.0781126246, -0.0628110617, 0.1334636658, -0.2067856044, -0.1881308705, -0.0532267243, 0.2701897621, 0.1579200774, -0.0526782237, 0.1462246329, 0.1311597079, 0.2344963551, -0.2371324301, 0.1074442342, -0.0011787148, 0.0588413812, 0.1349908412, 0.0257885717, 0.0044210381, 0.1227341145, 0.0728136599, 0.0029533831, 0.1177444160, -0.2081667781, 0.0619057529, 0.0199543554, -0.0067066234, -0.0790224001, 0.0808891952, -0.0014051995, 0.1603842676, 0.1332368553, -0.0923330933, -0.1232065037, -0.1510673314, 0.0727959722, -0.2193181217, 0.0918564647, -0.0992079303, -0.1025798991, 0.0947125256, -0.1560741514, 0.2182044685, 0.1374425143, 0.0281953476, -0.0628368258, -0.1127911210, 0.1052273810, 0.1104056090, 0.0623913854, 0.2006621957, 0.0818739012, 0.1230550334, 0.0049992129, -0.1199948788, 0.0884035528, -0.0643750578, -0.1494214833, 0.0869989023, -0.0901226550, -0.1327995956, -0.1340530366, -0.0268267300, -0.1035121530, 0.1120074987, 0.2188260704, -0.0299183223, -0.0346603729, 0.0381263271, 0.2711367607, -0.0868542641, -0.1687141061, -0.1656406522, -0.0717060938, 0.0636629239, -0.1995295733, -0.0220976155, 0.0406618491, 0.1322226971, 0.0504874960, -0.0574357174, 0.0192682166, 0.0579295158, 0.0406706296, -0.1100853905, 0.0081017790, -0.1640184522, 0.0978171304, 0.0048127226, 0.0390092209, 0.1571812332, 0.0674982145, -0.0400317051, 0.0398501605, -0.0764776468, -0.1962431073, -0.1214675009, -0.2053001374, -0.1707140654, 0.0638103858, 0.0076814322, 0.0399269462, 0.1169894934, -0.0193079114, -0.0332482234, -0.1505623013, -0.0593738109, -0.1297235787, 0.0705874562, 0.2707820535, -0.0234094914, 0.0176931601, 0.1868426353, -0.1670797765, -0.1560364962, -0.0252912343, -0.2014798671, -0.1187515780, 0.0541941337, 0.0592065640, -0.0374492854, -0.2058661878, -0.1271226257, 0.2263045460, 0.1634045839, 0.0634908155, -0.1376210749};
# 29 "firmware/parameters.h" 2
# 1 "firmware/weights/b12.h" 1
# 12 "firmware/weights/b12.h"
bias12_t b12[4] = {0, 0, 0, 0};
# 30 "firmware/parameters.h" 2
# 1 "firmware/weights/w13.h" 1
# 12 "firmware/weights/w13.h"
model_default_t w13[280] = {-0.5821045637, -0.5995308161, 0.7147501707, 0.8300285339, -0.5374967456, -0.6325706244, 0.5756201148, 0.4738917351, -0.6301553845, -1.1042366028, -0.1723404378, 0.0563108996, -0.0845804587, -0.5919845700, 0.1722545922, -0.9110442400, 0.4540700614, 0.0732482299, 0.6986721158, -0.3613760173, 0.2583999336, 0.4397739470, -0.8306318521, 0.6586495042, -0.4179660082, 0.0242978875, 0.0164721720, -0.8002575636, 0.0458998680, -0.6365913749, -1.0769778490, 0.2574746609, -0.5492847562, -0.8960470557, -0.0587573424, 0.3996892869, 0.1635566801, -0.3680191934, 0.2581170201, 0.4413941205, 0.3825246990, -0.1625307500, 0.0862209201, 0.0604220070, -0.7627707720, -0.2353579402, -0.4921883941, 0.0946831852, 0.5226438046, -0.3718315661, 0.4554022849, -0.7579147220, 0.5946013331, -0.1309973150, 1.0569906235, 0.6741221547, -0.2318911403, 0.1719154865, -0.9099454880, 0.1106948331, 0.1648911387, -0.9138775468, -0.5829458237, -0.5522460938, 0.1348737776, -0.2042043358, -0.8349060416, 0.5410489440, -0.3158374131, -0.0339056924, -0.1831878573, -0.2287633717, 0.6896379590, 0.3058499992, -0.4716619551, 0.8629540801, -0.6271834373, -0.0822427422, 0.0429103971, -0.2540904284, -0.9056655765, -0.7424818873, 0.4675337970, -0.0333576798, 0.7856631875, 1.0879665613, 0.2751346231, 0.8190971613, 0.5586345196, -0.1099110022, -0.3701879382, -0.0450464115, 0.3235544562, -0.2698948383, 0.6667225957, 0.5710914731, -0.2785363793, 1.0100823641, 0.7134541273, 0.2836422920, 0.1209580153, 0.1617271006, -0.2856093049, 0.4572059214, -0.4376237690, -0.9386695027, -0.6911371350, -0.1094441265, -0.7259578705, -0.1940597743, 0.6023218632, 0.5788248777, -0.3193282783, 0.0840746313, 0.7014052868, -0.6375553608, 0.2680661380, -0.4722646773, -0.3750465810, -0.5137270689, 0.5807237029, 0.3104082942, 0.4311323762, -0.1717675626, 0.4290550649, 0.8148919344, 0.6898315549, -0.5687480569, -0.1156775877, 0.5337709188, -0.6592367887, -0.2714477181, -0.8517220020, -0.5250798464, 0.3317453563, 0.2580560446, 0.3545989692, -0.6840258241, 0.6793148518, -0.3449039161, -0.8757909536, -0.0280462112, 1.0200293064, 0.4695639908, -0.0806986019, -0.4442815781, 0.3193189502, -0.8452351689, -0.6941099763, -0.2569043934, 0.5349177122, 0.2248221934, -0.4677745998, -0.2938897610, -0.4364207685, -0.0748482198, -0.4691219032, 0.0984863862, 0.0380842350, 0.1586190611, -0.5543059707, 0.8117190003, 0.5716339350, -0.5739943981, 0.3109429777, 0.0709265769, 0.6270430088, 0.6944087148, -0.1431467533, 0.9498937130, -0.6270530820, 0.0904155523, -0.0516645573, 0.6947264075, 0.1705438495, 0.1281259805, 0.6075981259, 0.2054569125, 0.4391962886, 0.3874604106, 0.0810317397, 0.5693332553, 0.0772831067, 0.0297314748, -0.2166893184, 0.1379185468, -0.6834079027, 0.6211562157, -0.0791864842, -0.2813932002, -0.1157720312, -0.4952171445, 0.8875238299, -0.2611021996, -0.8404596448, -0.2021055222, 0.0214000959, -0.1923515648, 0.3942888081, 0.3208041489, 0.6138057113, -0.3944691718, 0.0627090558, -0.8439914584, -0.2138485014, -0.0577475429, -0.4256159067, 0.9032865763, 0.0355136208, 0.4197684228, 0.0766518787, 0.2387009263, 0.5496294498, 0.5670031905, -0.0386786088, 0.5185084343, 0.1452000439, 0.1497846246, 0.5705943704, -0.4226665795, 0.1785686165, 0.0702436194, 0.0244281590, -0.5683379173, -0.6940209270, 0.0917289928, -0.4200356305, -0.0271027125, -1.0242232084, -0.2186402977, -0.1429586262, 0.5521196723, -0.2977041900, 0.2085640430, 0.6377439499, 0.4198944271, 0.5090473294, 0.4349875450, -0.0539094098, -0.2153874487, -0.6165490746, -0.3107331097, -0.2961609364, 1.1329909563, 0.4129429162, 0.5873808861, 0.2659890354, -0.2486071736, 1.0929379463, -0.2866106927, -0.1194017977, 0.0377704278, -0.7468437552, 0.4485373795, 0.1022696570, -0.1788246334, -0.0539929383, -0.7587056160, 0.2947611511, -0.2886826396, -0.5439141989, -0.6840926409, -0.6323434114, -0.1131408438, 0.0729864761, -0.0572740510, -0.2110078037, -0.5273517966, -0.4951358140, 0.0153081203, 0.1972226202, -0.3328548968, -1.0925121307, 0.2925411761, 0.2214920521, 0.7469943166, -0.5690702796, 0.2091378719, -0.4866421223, -0.3830738366};
# 31 "firmware/parameters.h" 2
# 1 "firmware/weights/b13.h" 1
# 12 "firmware/weights/b13.h"
model_default_t b13[70] = {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000};
# 32 "firmware/parameters.h" 2



struct config2_1 : nnet::dense_config {
    static const unsigned n_in = 70;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 13440;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config2_2 : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 12288;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct sigmoid_config2_recr : nnet::activ_config {
    static const unsigned n_in = 64 * 2;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct tanh_config2 : nnet::activ_config {
    static const unsigned n_in = 64;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct config2 : nnet::gru_config {
    typedef model_default_t accum_t;
    typedef model_default_t weight_t;
    typedef model_default_t bias_t;
    typedef config2_1 mult_config1;
    typedef config2_2 mult_config2;
    typedef sigmoid_config2_recr ACT_CONFIG_GRU;
    template<class x_T, class y_T, class config_T>
    using activation_recr = nnet::activation::sigmoid<x_T, y_T, config_T>;
    typedef tanh_config2 ACT_CONFIG_T;
    template<class x_T, class y_T, class config_T>
    using activation = nnet::activation::tanh<x_T, y_T, config_T>;
    static const unsigned n_in = 70;
    static const unsigned n_out = 64;
    static const unsigned n_state = 64;
    static const unsigned n_sequence = 73;
    static const unsigned n_sequence_out = 73;
    static const unsigned io_type = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const bool use_static = true;
};


struct config3_1 : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 12288;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config3_2 : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 12288;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct sigmoid_config3_recr : nnet::activ_config {
    static const unsigned n_in = 64 * 2;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct tanh_config3 : nnet::activ_config {
    static const unsigned n_in = 64;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct config3 : nnet::gru_config {
    typedef model_default_t accum_t;
    typedef model_default_t weight_t;
    typedef model_default_t bias_t;
    typedef config3_1 mult_config1;
    typedef config3_2 mult_config2;
    typedef sigmoid_config3_recr ACT_CONFIG_GRU;
    template<class x_T, class y_T, class config_T>
    using activation_recr = nnet::activation::sigmoid<x_T, y_T, config_T>;
    typedef tanh_config3 ACT_CONFIG_T;
    template<class x_T, class y_T, class config_T>
    using activation = nnet::activation::tanh<x_T, y_T, config_T>;
    static const unsigned n_in = 64;
    static const unsigned n_out = 64;
    static const unsigned n_state = 64;
    static const unsigned n_sequence = 73;
    static const unsigned n_sequence_out = 73;
    static const unsigned io_type = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const bool use_static = true;
};


struct config11_mult : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64;
    static const unsigned reuse_factor = 1;
    static const unsigned strategy = nnet::latency;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config11 : nnet::conv1d_config {
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_width = 73;
    static const unsigned n_chan = 64;
    static const unsigned filt_width = 1;
    static const unsigned kernel_size = filt_width;
    static const unsigned n_filt = 64;
    static const unsigned stride_width = 1;
    static const unsigned dilation = 1;
    static const unsigned out_width = 73;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::latency;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_width = 73;
    static const ap_uint<filt_width> pixels[min_width];
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config11_mult mult_config;
};
const ap_uint<config11::filt_width> config11::pixels[] = {0};


struct config6_1 : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 12288;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config6_2 : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 64 * 3;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 12288;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct sigmoid_config6_recr : nnet::activ_config {
    static const unsigned n_in = 64 * 2;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct tanh_config6 : nnet::activ_config {
    static const unsigned n_in = 64;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef ap_fixed<18,8> table_t;
};

struct config6 : nnet::gru_config {
    typedef model_default_t accum_t;
    typedef model_default_t weight_t;
    typedef model_default_t bias_t;
    typedef config6_1 mult_config1;
    typedef config6_2 mult_config2;
    typedef sigmoid_config6_recr ACT_CONFIG_GRU;
    template<class x_T, class y_T, class config_T>
    using activation_recr = nnet::activation::sigmoid<x_T, y_T, config_T>;
    typedef tanh_config6 ACT_CONFIG_T;
    template<class x_T, class y_T, class config_T>
    using activation = nnet::activation::tanh<x_T, y_T, config_T>;
    static const unsigned n_in = 64;
    static const unsigned n_out = 64;
    static const unsigned n_state = 64;
    static const unsigned n_sequence = 73;
    static const unsigned n_sequence_out = 73;
    static const unsigned io_type = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const bool use_static = true;
};


struct config12_mult : nnet::dense_config {
    static const unsigned n_in = 64;
    static const unsigned n_out = 4;
    static const unsigned reuse_factor = 1;
    static const unsigned strategy = nnet::latency;
    typedef model_default_t accum_t;
    typedef bias12_t bias_t;
    typedef model_default_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config12 : nnet::conv1d_config {
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_width = 73;
    static const unsigned n_chan = 64;
    static const unsigned filt_width = 1;
    static const unsigned kernel_size = filt_width;
    static const unsigned n_filt = 4;
    static const unsigned stride_width = 1;
    static const unsigned dilation = 1;
    static const unsigned out_width = 73;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::latency;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_width = 73;
    static const ap_uint<filt_width> pixels[min_width];
    typedef model_default_t accum_t;
    typedef bias12_t bias_t;
    typedef model_default_t weight_t;
    typedef config12_mult mult_config;
};
const ap_uint<config12::filt_width> config12::pixels[] = {0};


struct config13_mult : nnet::dense_config {
    static const unsigned n_in = 4;
    static const unsigned n_out = 70;
    static const unsigned reuse_factor = 1;
    static const unsigned strategy = nnet::latency;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config13 : nnet::conv1d_config {
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_width = 73;
    static const unsigned n_chan = 4;
    static const unsigned filt_width = 1;
    static const unsigned kernel_size = filt_width;
    static const unsigned n_filt = 70;
    static const unsigned stride_width = 1;
    static const unsigned dilation = 1;
    static const unsigned out_width = 73;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::latency;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_width = 73;
    static const ap_uint<filt_width> pixels[min_width];
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config13_mult mult_config;
};
const ap_uint<config13::filt_width> config13::pixels[] = {0};
# 23 "firmware/myproject.cpp" 2

void myproject(
    input_t input_1[73*70],
    result_t layer13_out[73*70]
) {_ssdm_SpecArrayDimSize(input_1, 5110);_ssdm_SpecArrayDimSize(layer13_out, 5110);


#pragma HLS ARRAY_RESHAPE variable=&input_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=&layer13_out complete dim=0
#pragma HLS INTERFACE ap_vld port=&input_1,&layer13_out
#pragma HLS PIPELINE
# 67 "firmware/myproject.cpp"
 layer2_t layer2_out[73*64];
#pragma HLS ARRAY_PARTITION variable=&layer2_out complete dim=0
 nnet::gru_stack<input_t, layer2_t, config2>(input_1, layer2_out, w2, wr2, b2, br2);

    layer3_t layer3_out[73*64];
#pragma HLS ARRAY_PARTITION variable=&layer3_out complete dim=0
 nnet::gru_stack<layer2_t, layer3_t, config3>(layer2_out, layer3_out, w3, wr3, b3, br3);

    layer11_t layer11_out[73*64];
#pragma HLS ARRAY_PARTITION variable=&layer11_out complete dim=0
 nnet::pointwise_conv_1d_cl<layer3_t, layer11_t, config11>(layer3_out, layer11_out, w11, b11);

    layer6_t layer6_out[73*64];
#pragma HLS ARRAY_PARTITION variable=&layer6_out complete dim=0
 nnet::gru_stack<layer11_t, layer6_t, config6>(layer11_out, layer6_out, w6, wr6, b6, br6);

    layer12_t layer12_out[73*4];
#pragma HLS ARRAY_PARTITION variable=&layer12_out complete dim=0
 nnet::pointwise_conv_1d_cl<layer6_t, layer12_t, config12>(layer6_out, layer12_out, w12, b12);

    nnet::pointwise_conv_1d_cl<layer12_t, result_t, config13>(layer12_out, layer13_out, w13, b13);

}
