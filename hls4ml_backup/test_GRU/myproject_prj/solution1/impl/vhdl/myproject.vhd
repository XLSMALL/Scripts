-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_1_V : IN STD_LOGIC_VECTOR (799 downto 0);
    input_1_V_ap_vld : IN STD_LOGIC;
    layer3_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_0_V_ap_vld : OUT STD_LOGIC;
    layer3_out_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_1_V_ap_vld : IN STD_LOGIC;
    layer3_out_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_2_V_ap_vld : IN STD_LOGIC;
    layer3_out_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_3_V_ap_vld : IN STD_LOGIC;
    layer3_out_4_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_4_V_ap_vld : IN STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.297750,HLS_SYN_LAT=104,HLS_SYN_TPT=105,HLS_SYN_MEM=2,HLS_SYN_DSP=33,HLS_SYN_FF=5101,HLS_SYN_LUT=2253,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (104 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (104 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (104 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (104 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (104 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (104 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (104 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (104 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (104 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (104 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (104 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (104 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv800_lc_1 : STD_LOGIC_VECTOR (799 downto
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_1_V_preg : STD_LOGIC_VECTOR (799 downto
    signal input_1_V_in_sig : STD_LOGIC_VECTOR (799 downto 0);
    signal input_1_V_ap_vld_preg : STD_LOGIC := '0';
    signal input_1_V_ap_vld_in_sig : STD_LOGIC;
    signal input_1_V_blk_n : STD_LOGIC;
    signal data_in_0_V_1_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal data_in_1_V_1_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_2_V_1_reg_804 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_3_V_1_reg_809 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_4_V_1_reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_5_V_1_reg_819 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_6_V_1_reg_824 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_7_V_1_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_8_V_1_reg_834 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_9_V_1_reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_0_V_2_reg_844 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_1_V_2_reg_849 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_2_V_2_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_3_V_2_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_4_V_2_reg_864 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_5_V_2_reg_869 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_6_V_2_reg_874 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_7_V_2_reg_879 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_8_V_2_reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_9_V_2_reg_889 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_0_V_3_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_1_V_3_reg_899 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_2_V_3_reg_904 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_3_V_3_reg_909 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_4_V_3_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_5_V_3_reg_919 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_6_V_3_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_7_V_3_reg_929 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_8_V_3_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_9_V_3_reg_939 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_0_V_4_reg_944 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_1_V_4_reg_949 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_2_V_4_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_3_V_4_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_4_V_4_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_5_V_4_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_6_V_4_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_7_V_4_reg_979 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_8_V_4_reg_984 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_9_V_4_reg_989 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal h_state_0_V_reg_994 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_done : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_idle : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ready : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ce : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_ignore_call21 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_ce : STD_LOGIC;
    signal grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (104 downto 0);
    signal ap_NS_fsm_state22 : STD_LOGIC;
    signal ap_NS_fsm_state43 : STD_LOGIC;
    signal ap_NS_fsm_state64 : STD_LOGIC;
    signal ap_NS_fsm_state85 : STD_LOGIC;
    signal data_in_0_V_fu_290_p1 : STD_LOGIC_VECTOR (15 downto 0);

    component gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        reset_state : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_ap_fixed_config3_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261 : component gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start,
        ap_done => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_done,
        ap_idle => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_idle,
        ap_ready => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ready,
        ap_ce => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ce,
        reset_state => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state,
        data_0_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read,
        data_1_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read,
        data_2_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read,
        data_3_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read,
        data_4_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read,
        data_5_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read,
        data_6_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read,
        data_7_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read,
        data_8_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read,
        data_9_V_read => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read,
        ap_return => grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_return);

    grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284 : component dense_latency_ap_fixed_ap_fixed_config3_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => h_state_0_V_reg_994,
        ap_return => grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_return,
        ap_ce => grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state85) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_logic_1 = ap_NS_fsm_state64) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_logic_1 = ap_NS_fsm_state43) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = ap_NS_fsm_state22) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_1_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
                    input_1_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_1_V_ap_vld = ap_const_logic_1))) then 
                    input_1_V_ap_vld_preg <= input_1_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_1_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_V_preg <= ap_const_lv800_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_1_V_ap_vld = ap_const_logic_1))) then 
                    input_1_V_preg <= input_1_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_in_0_V_1_reg_794 <= input_1_V_in_sig(175 downto 160);
                data_in_0_V_2_reg_844 <= input_1_V_in_sig(335 downto 320);
                data_in_0_V_3_reg_894 <= input_1_V_in_sig(495 downto 480);
                data_in_0_V_4_reg_944 <= input_1_V_in_sig(655 downto 640);
                data_in_1_V_1_reg_799 <= input_1_V_in_sig(191 downto 176);
                data_in_1_V_2_reg_849 <= input_1_V_in_sig(351 downto 336);
                data_in_1_V_3_reg_899 <= input_1_V_in_sig(511 downto 496);
                data_in_1_V_4_reg_949 <= input_1_V_in_sig(671 downto 656);
                data_in_2_V_1_reg_804 <= input_1_V_in_sig(207 downto 192);
                data_in_2_V_2_reg_854 <= input_1_V_in_sig(367 downto 352);
                data_in_2_V_3_reg_904 <= input_1_V_in_sig(527 downto 512);
                data_in_2_V_4_reg_954 <= input_1_V_in_sig(687 downto 672);
                data_in_3_V_1_reg_809 <= input_1_V_in_sig(223 downto 208);
                data_in_3_V_2_reg_859 <= input_1_V_in_sig(383 downto 368);
                data_in_3_V_3_reg_909 <= input_1_V_in_sig(543 downto 528);
                data_in_3_V_4_reg_959 <= input_1_V_in_sig(703 downto 688);
                data_in_4_V_1_reg_814 <= input_1_V_in_sig(239 downto 224);
                data_in_4_V_2_reg_864 <= input_1_V_in_sig(399 downto 384);
                data_in_4_V_3_reg_914 <= input_1_V_in_sig(559 downto 544);
                data_in_4_V_4_reg_964 <= input_1_V_in_sig(719 downto 704);
                data_in_5_V_1_reg_819 <= input_1_V_in_sig(255 downto 240);
                data_in_5_V_2_reg_869 <= input_1_V_in_sig(415 downto 400);
                data_in_5_V_3_reg_919 <= input_1_V_in_sig(575 downto 560);
                data_in_5_V_4_reg_969 <= input_1_V_in_sig(735 downto 720);
                data_in_6_V_1_reg_824 <= input_1_V_in_sig(271 downto 256);
                data_in_6_V_2_reg_874 <= input_1_V_in_sig(431 downto 416);
                data_in_6_V_3_reg_924 <= input_1_V_in_sig(591 downto 576);
                data_in_6_V_4_reg_974 <= input_1_V_in_sig(751 downto 736);
                data_in_7_V_1_reg_829 <= input_1_V_in_sig(287 downto 272);
                data_in_7_V_2_reg_879 <= input_1_V_in_sig(447 downto 432);
                data_in_7_V_3_reg_929 <= input_1_V_in_sig(607 downto 592);
                data_in_7_V_4_reg_979 <= input_1_V_in_sig(767 downto 752);
                data_in_8_V_1_reg_834 <= input_1_V_in_sig(303 downto 288);
                data_in_8_V_2_reg_884 <= input_1_V_in_sig(463 downto 448);
                data_in_8_V_3_reg_934 <= input_1_V_in_sig(623 downto 608);
                data_in_8_V_4_reg_984 <= input_1_V_in_sig(783 downto 768);
                data_in_9_V_1_reg_839 <= input_1_V_in_sig(319 downto 304);
                data_in_9_V_2_reg_889 <= input_1_V_in_sig(479 downto 464);
                data_in_9_V_3_reg_939 <= input_1_V_in_sig(639 downto 624);
                data_in_9_V_4_reg_989 <= input_1_V_in_sig(799 downto 784);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                h_state_0_V_reg_994 <= grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_1_V_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_NS_fsm_state22 <= ap_NS_fsm(21);
    ap_NS_fsm_state43 <= ap_NS_fsm(42);
    ap_NS_fsm_state64 <= ap_NS_fsm(63);
    ap_NS_fsm_state85 <= ap_NS_fsm(84);

    ap_block_state1_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call21_assign_proc : process(ap_start, input_1_V_ap_vld_in_sig)
    begin
                ap_block_state1_ignore_call21 <= ((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_in_0_V_fu_290_p1 <= input_1_V_in_sig(16 - 1 downto 0);

    grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_ce_assign_proc : process(ap_CS_fsm_state104, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, input_1_V_ap_vld_in_sig)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and ((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0)))) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ce <= ap_const_logic_0;
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, input_1_V_ap_vld_in_sig, grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg)
    begin
        if ((not(((input_1_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start <= ap_const_logic_1;
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start <= grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_ap_start_reg;
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read_assign_proc : process(ap_CS_fsm_state1, data_in_0_V_1_reg_794, data_in_0_V_2_reg_844, data_in_0_V_3_reg_894, data_in_0_V_4_reg_944, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85, data_in_0_V_fu_290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= data_in_0_V_4_reg_944;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= data_in_0_V_3_reg_894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= data_in_0_V_2_reg_844;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= data_in_0_V_1_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= data_in_0_V_fu_290_p1;
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_0_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_1_V_1_reg_799, data_in_1_V_2_reg_849, data_in_1_V_3_reg_899, data_in_1_V_4_reg_949, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= data_in_1_V_4_reg_949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= data_in_1_V_3_reg_899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= data_in_1_V_2_reg_849;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= data_in_1_V_1_reg_799;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= input_1_V_in_sig(31 downto 16);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_1_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_2_V_1_reg_804, data_in_2_V_2_reg_854, data_in_2_V_3_reg_904, data_in_2_V_4_reg_954, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= data_in_2_V_4_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= data_in_2_V_3_reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= data_in_2_V_2_reg_854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= data_in_2_V_1_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= input_1_V_in_sig(47 downto 32);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_2_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_3_V_1_reg_809, data_in_3_V_2_reg_859, data_in_3_V_3_reg_909, data_in_3_V_4_reg_959, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= data_in_3_V_4_reg_959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= data_in_3_V_3_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= data_in_3_V_2_reg_859;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= data_in_3_V_1_reg_809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= input_1_V_in_sig(63 downto 48);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_3_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_4_V_1_reg_814, data_in_4_V_2_reg_864, data_in_4_V_3_reg_914, data_in_4_V_4_reg_964, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= data_in_4_V_4_reg_964;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= data_in_4_V_3_reg_914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= data_in_4_V_2_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= data_in_4_V_1_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= input_1_V_in_sig(79 downto 64);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_4_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_5_V_1_reg_819, data_in_5_V_2_reg_869, data_in_5_V_3_reg_919, data_in_5_V_4_reg_969, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= data_in_5_V_4_reg_969;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= data_in_5_V_3_reg_919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= data_in_5_V_2_reg_869;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= data_in_5_V_1_reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= input_1_V_in_sig(95 downto 80);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_5_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_6_V_1_reg_824, data_in_6_V_2_reg_874, data_in_6_V_3_reg_924, data_in_6_V_4_reg_974, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= data_in_6_V_4_reg_974;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= data_in_6_V_3_reg_924;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= data_in_6_V_2_reg_874;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= data_in_6_V_1_reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= input_1_V_in_sig(111 downto 96);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_6_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_7_V_1_reg_829, data_in_7_V_2_reg_879, data_in_7_V_3_reg_929, data_in_7_V_4_reg_979, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= data_in_7_V_4_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= data_in_7_V_3_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= data_in_7_V_2_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= data_in_7_V_1_reg_829;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= input_1_V_in_sig(127 downto 112);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_7_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_8_V_1_reg_834, data_in_8_V_2_reg_884, data_in_8_V_3_reg_934, data_in_8_V_4_reg_984, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= data_in_8_V_4_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= data_in_8_V_3_reg_934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= data_in_8_V_2_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= data_in_8_V_1_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= input_1_V_in_sig(143 downto 128);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_8_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read_assign_proc : process(ap_CS_fsm_state1, input_1_V_in_sig, data_in_9_V_1_reg_839, data_in_9_V_2_reg_889, data_in_9_V_3_reg_939, data_in_9_V_4_reg_989, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= data_in_9_V_4_reg_989;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= data_in_9_V_3_reg_939;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= data_in_9_V_2_reg_889;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= data_in_9_V_1_reg_839;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= input_1_V_in_sig(159 downto 144);
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_data_9_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state64, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state <= ap_const_logic_1;
        else 
            grp_gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s_fu_261_reset_state <= 'X';
        end if; 
    end process;


    input_1_V_ap_vld_in_sig_assign_proc : process(input_1_V_ap_vld, input_1_V_ap_vld_preg)
    begin
        if ((input_1_V_ap_vld = ap_const_logic_1)) then 
            input_1_V_ap_vld_in_sig <= input_1_V_ap_vld;
        else 
            input_1_V_ap_vld_in_sig <= input_1_V_ap_vld_preg;
        end if; 
    end process;


    input_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, input_1_V_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            input_1_V_blk_n <= input_1_V_ap_vld;
        else 
            input_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_1_V_in_sig_assign_proc : process(input_1_V, input_1_V_preg, input_1_V_ap_vld)
    begin
        if ((input_1_V_ap_vld = ap_const_logic_1)) then 
            input_1_V_in_sig <= input_1_V;
        else 
            input_1_V_in_sig <= input_1_V_preg;
        end if; 
    end process;

    layer3_out_0_V <= grp_dense_latency_ap_fixed_ap_fixed_config3_0_0_fu_284_ap_return;

    layer3_out_0_V_ap_vld_assign_proc : process(ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            layer3_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
