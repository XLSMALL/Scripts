-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    reset_state : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gru_static_ap_fixed_ap_fixed_16_6_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv17_400 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal h_state_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln443_fu_164_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln443_reg_341 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_reg_347_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_reg_347_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_reg_347_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_reg_354_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_reg_354_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpres_state_zr_2_V_reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputacc_zr_0_V_fu_189_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputacc_zr_0_V_reg_365 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal inputacc_zr_1_V_fu_195_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputacc_zr_1_V_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpres_zr_0_V_reg_375 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal tmpres_zr_1_V_reg_381 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_reg_406 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal inputacc_h_0_V_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputacc_h_0_V_reg_411 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1192_reg_416 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_port_reg_reset_state : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp32 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp33 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp34 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp35 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp39 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_ignoreCallOp41 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start : STD_LOGIC;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_done : STD_LOGIC;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_idle : STD_LOGIC;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ready : STD_LOGIC;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ce : STD_LOGIC;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state8_pp0_stage7_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_ignoreCallOp50 : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_ignoreCallOp51 : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage9_11001_ignoreCallOp52 : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage10_11001_ignoreCallOp53 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_data_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_ce : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call17 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1_ignore_call17 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp40 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0_ignore_call17 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_ignoreCallOp42 : BOOLEAN;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start : STD_LOGIC;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_done : STD_LOGIC;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_idle : STD_LOGIC;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ready : STD_LOGIC;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ce : STD_LOGIC;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_return : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state16_pp0_stage15_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage15_11001_ignoreCallOp69 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp70 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp71 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp72 : BOOLEAN;
    signal grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_sig_allocacmp_h_state_V_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln443_fu_164_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal trunc_ln_fu_224_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1193_fu_239_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_242_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_283_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_271_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component myproject_mul_mul_16s_16s_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mac_muladd_11s_17s_26s_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116 : component dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => data_0_V_read,
        data_1_V_read => data_1_V_read,
        data_2_V_read => data_2_V_read,
        data_3_V_read => data_3_V_read,
        data_4_V_read => data_4_V_read,
        data_5_V_read => data_5_V_read,
        data_6_V_read => data_6_V_read,
        data_7_V_read => data_7_V_read,
        data_8_V_read => data_8_V_read,
        data_9_V_read => data_9_V_read,
        ap_return_0 => grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_1,
        ap_return_2 => grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_2,
        ap_ce => grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_ce);

    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140 : component sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start,
        ap_done => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_done,
        ap_idle => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_idle,
        ap_ready => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ready,
        ap_ce => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ce,
        data_0_V_read => inputacc_zr_0_V_reg_365,
        data_1_V_read => inputacc_zr_1_V_reg_370,
        ap_return_0 => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_0,
        ap_return_1 => grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_1);

    grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148 : component dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_data_V_read,
        ap_return_0 => grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_1,
        ap_return_2 => grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_2,
        ap_ce => grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_ce);

    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153 : component tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start,
        ap_done => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_done,
        ap_idle => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_idle,
        ap_ready => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ready,
        ap_ce => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ce,
        data_V_read => inputacc_h_0_V_reg_411,
        ap_return => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_return);

    myproject_mul_mul_16s_16s_26_3_1_U56 : component myproject_mul_mul_16s_16s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmpres_zr_1_V_reg_381,
        din1 => tmpres_state_zr_2_V_reg_360,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    myproject_mul_mul_16s_16s_26_3_1_U57 : component myproject_mul_mul_16s_16s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmpres_zr_0_V_reg_375,
        din1 => select_ln443_reg_341,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    myproject_mac_muladd_11s_17s_26s_26_3_1_U58 : component myproject_mac_muladd_11s_17s_26s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 17,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_return,
        din1 => sub_ln1193_fu_242_p2,
        din2 => mul_ln1192_reg_416,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
                    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ready = ap_const_logic_1)) then 
                    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_reset_state <= reset_state;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                call_ret1_reg_347_0 <= grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_0;
                call_ret1_reg_347_1 <= grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_1;
                call_ret1_reg_347_2 <= grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_return_2;
                call_ret_reg_354_0 <= grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_0;
                call_ret_reg_354_1 <= grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_1;
                tmpres_state_zr_2_V_reg_360 <= grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                h_state_V_0 <= grp_fu_283_p3(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                inputacc_h_0_V_reg_411 <= inputacc_h_0_V_fu_233_p2;
                mul_ln1192_reg_416 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                inputacc_zr_0_V_reg_365 <= inputacc_zr_0_V_fu_189_p2;
                inputacc_zr_1_V_reg_370 <= inputacc_zr_1_V_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul_ln1118_reg_406 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln443_reg_341 <= select_ln443_fu_164_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                tmpres_zr_0_V_reg_375 <= grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_0;
                tmpres_zr_1_V_reg_381 <= grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0, ap_reset_start_pp0, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_start_pp0 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_start_pp0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp32_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp32 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp70_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp70 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001_ignoreCallOp53 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage10_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage11_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage12_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage13_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage14_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001_ignoreCallOp69 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage15_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1_11001_ignoreCallOp33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp71 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp72 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp35 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp40 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_ignoreCallOp41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_ignoreCallOp42 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage6_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_ignoreCallOp50 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage7_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage8_11001_ignoreCallOp51 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage8_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001_ignoreCallOp52 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage9_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call13_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call13 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call31_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call31 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter1_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_283_p3(25 downto 10);

    ap_sig_allocacmp_h_state_V_0_load_assign_proc : process(ap_enable_reg_pp0_iter1, h_state_V_0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, grp_fu_283_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_sig_allocacmp_h_state_V_0_load <= grp_fu_283_p3(25 downto 10);
        else 
            ap_sig_allocacmp_h_state_V_0_load <= h_state_V_0;
        end if; 
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001_ignoreCallOp32, ap_block_pp0_stage1_11001_ignoreCallOp33, ap_block_pp0_stage2_11001_ignoreCallOp34, ap_block_pp0_stage3_11001_ignoreCallOp35, ap_block_pp0_stage4_11001_ignoreCallOp39, ap_block_pp0_stage5_11001_ignoreCallOp41, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp32) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp35) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp33) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp34) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp39) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
            grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_ap_fixed_config2_1_0_0_0_0_fu_116_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage4_11001_ignoreCallOp40, ap_block_pp0_stage5_11001_ignoreCallOp42)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp42) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp40) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
            grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_ap_fixed_ap_fixed_config2_2_0_0_0_0_fu_148_data_V_read <= 
        ap_const_lv16_0 when (select_ln443_fu_164_p0(0) = '1') else 
        ap_sig_allocacmp_h_state_V_0_load;

    grp_fu_271_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))))) then 
            grp_fu_271_ce <= ap_const_logic_1;
        else 
            grp_fu_271_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_277_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_283_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage7_11001_ignoreCallOp50, ap_block_pp0_stage8_11001_ignoreCallOp51, ap_block_pp0_stage9_11001_ignoreCallOp52, ap_block_pp0_stage10_11001_ignoreCallOp53, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage9_11001_ignoreCallOp52) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001_ignoreCallOp51) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001_ignoreCallOp50) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001_ignoreCallOp53) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))))) then 
            grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ce <= ap_const_logic_1;
        else 
            grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start <= grp_sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_fu_140_ap_start_reg;

    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage15, ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage15_11001_ignoreCallOp69, ap_block_pp0_stage0_11001_ignoreCallOp70, ap_block_pp0_stage1_11001_ignoreCallOp71, ap_block_pp0_stage2_11001_ignoreCallOp72)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage15_11001_ignoreCallOp69) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp70) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp71) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp72) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
            grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ce <= ap_const_logic_1;
        else 
            grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start <= grp_tanh_ap_fixed_ap_fixed_16_6_5_3_0_tanh_config2_s_fu_153_ap_start_reg;
    inputacc_h_0_V_fu_233_p2 <= std_logic_vector(unsigned(trunc_ln_fu_224_p4) + unsigned(call_ret1_reg_347_2));
    inputacc_zr_0_V_fu_189_p2 <= std_logic_vector(unsigned(call_ret_reg_354_0) + unsigned(call_ret1_reg_347_0));
    inputacc_zr_1_V_fu_195_p2 <= std_logic_vector(unsigned(call_ret_reg_354_1) + unsigned(call_ret1_reg_347_1));
    select_ln443_fu_164_p0 <= (0=>ap_port_reg_reset_state, others=>'-');
    select_ln443_fu_164_p3 <= 
        ap_const_lv16_0 when (select_ln443_fu_164_p0(0) = '1') else 
        ap_sig_allocacmp_h_state_V_0_load;
        sext_ln1193_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmpres_zr_0_V_reg_375),17));

    sub_ln1193_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv17_400) - unsigned(sext_ln1193_fu_239_p1));
    trunc_ln_fu_224_p4 <= mul_ln1118_reg_406(25 downto 10);
end behav;
