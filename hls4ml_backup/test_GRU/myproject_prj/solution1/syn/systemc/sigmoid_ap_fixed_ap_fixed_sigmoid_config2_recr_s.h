// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_HH_
#define _sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_sigmoid_bkb.h"

namespace ap_rtl {

struct sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<16> > data_0_V_read;
    sc_in< sc_lv<16> > data_1_V_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;


    // Module declarations
    sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s(sc_module_name name);
    SC_HAS_PROCESS(sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s);

    ~sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s();

    sc_trace_file* mVcdFile;

    sigmoid_ap_fixed_ap_fixed_sigmoid_config2_recr_s_sigmoid_bkb* sigmoid_table2_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > sigmoid_table2_address0;
    sc_signal< sc_logic > sigmoid_table2_ce0;
    sc_signal< sc_lv<10> > sigmoid_table2_q0;
    sc_signal< sc_lv<10> > sigmoid_table2_address1;
    sc_signal< sc_logic > sigmoid_table2_ce1;
    sc_signal< sc_lv<10> > sigmoid_table2_q1;
    sc_signal< sc_lv<13> > select_ln850_fu_157_p3;
    sc_signal< sc_lv<13> > select_ln850_reg_377;
    sc_signal< sc_lv<12> > trunc_ln147_fu_165_p1;
    sc_signal< sc_lv<12> > trunc_ln147_reg_382;
    sc_signal< sc_lv<13> > select_ln850_1_fu_229_p3;
    sc_signal< sc_lv<13> > select_ln850_1_reg_387;
    sc_signal< sc_lv<12> > trunc_ln147_1_fu_237_p1;
    sc_signal< sc_lv<12> > trunc_ln147_1_reg_392;
    sc_signal< sc_lv<10> > select_ln149_fu_287_p3;
    sc_signal< sc_lv<10> > select_ln149_reg_397;
    sc_signal< sc_lv<10> > select_ln149_1_fu_341_p3;
    sc_signal< sc_lv<10> > select_ln149_1_reg_402;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln150_fu_349_p1;
    sc_signal< sc_lv<64> > zext_ln150_1_fu_353_p1;
    sc_signal< sc_lv<12> > tmp_fu_105_p4;
    sc_signal< sc_lv<26> > shl_ln_fu_97_p3;
    sc_signal< sc_lv<4> > trunc_ln851_fu_125_p1;
    sc_signal< sc_lv<10> > p_Result_4_fu_129_p3;
    sc_signal< sc_lv<13> > sext_ln850_fu_115_p1;
    sc_signal< sc_lv<1> > icmp_ln851_fu_137_p2;
    sc_signal< sc_lv<13> > add_ln700_fu_143_p2;
    sc_signal< sc_lv<1> > icmp_ln850_fu_119_p2;
    sc_signal< sc_lv<13> > select_ln851_fu_149_p3;
    sc_signal< sc_lv<12> > tmp_3_fu_177_p4;
    sc_signal< sc_lv<26> > shl_ln1118_1_fu_169_p3;
    sc_signal< sc_lv<4> > trunc_ln851_1_fu_197_p1;
    sc_signal< sc_lv<10> > p_Result_4_1_fu_201_p3;
    sc_signal< sc_lv<13> > sext_ln850_1_fu_187_p1;
    sc_signal< sc_lv<1> > icmp_ln851_1_fu_209_p2;
    sc_signal< sc_lv<13> > add_ln700_1_fu_215_p2;
    sc_signal< sc_lv<1> > icmp_ln850_1_fu_191_p2;
    sc_signal< sc_lv<13> > select_ln851_1_fu_221_p3;
    sc_signal< sc_lv<13> > add_ln147_fu_241_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_251_p3;
    sc_signal< sc_lv<12> > add_ln147_2_fu_246_p2;
    sc_signal< sc_lv<12> > select_ln148_fu_259_p3;
    sc_signal< sc_lv<2> > tmp_5_fu_271_p4;
    sc_signal< sc_lv<1> > icmp_ln149_fu_281_p2;
    sc_signal< sc_lv<10> > trunc_ln148_fu_267_p1;
    sc_signal< sc_lv<13> > add_ln147_1_fu_295_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_305_p3;
    sc_signal< sc_lv<12> > add_ln147_3_fu_300_p2;
    sc_signal< sc_lv<12> > select_ln148_1_fu_313_p3;
    sc_signal< sc_lv<2> > tmp_7_fu_325_p4;
    sc_signal< sc_lv<1> > icmp_ln149_1_fu_335_p2;
    sc_signal< sc_lv<10> > trunc_ln148_1_fu_321_p1;
    sc_signal< sc_lv<16> > zext_ln703_fu_357_p1;
    sc_signal< sc_lv<16> > zext_ln703_1_fu_361_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to2;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<26> ap_const_lv26_3FFFFF1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<13> ap_const_lv13_200;
    static const sc_lv<12> ap_const_lv12_200;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<10> ap_const_lv10_3FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln147_1_fu_295_p2();
    void thread_add_ln147_2_fu_246_p2();
    void thread_add_ln147_3_fu_300_p2();
    void thread_add_ln147_fu_241_p2();
    void thread_add_ln700_1_fu_215_p2();
    void thread_add_ln700_fu_143_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_icmp_ln149_1_fu_335_p2();
    void thread_icmp_ln149_fu_281_p2();
    void thread_icmp_ln850_1_fu_191_p2();
    void thread_icmp_ln850_fu_119_p2();
    void thread_icmp_ln851_1_fu_209_p2();
    void thread_icmp_ln851_fu_137_p2();
    void thread_p_Result_4_1_fu_201_p3();
    void thread_p_Result_4_fu_129_p3();
    void thread_select_ln148_1_fu_313_p3();
    void thread_select_ln148_fu_259_p3();
    void thread_select_ln149_1_fu_341_p3();
    void thread_select_ln149_fu_287_p3();
    void thread_select_ln850_1_fu_229_p3();
    void thread_select_ln850_fu_157_p3();
    void thread_select_ln851_1_fu_221_p3();
    void thread_select_ln851_fu_149_p3();
    void thread_sext_ln850_1_fu_187_p1();
    void thread_sext_ln850_fu_115_p1();
    void thread_shl_ln1118_1_fu_169_p3();
    void thread_shl_ln_fu_97_p3();
    void thread_sigmoid_table2_address0();
    void thread_sigmoid_table2_address1();
    void thread_sigmoid_table2_ce0();
    void thread_sigmoid_table2_ce1();
    void thread_tmp_3_fu_177_p4();
    void thread_tmp_4_fu_251_p3();
    void thread_tmp_5_fu_271_p4();
    void thread_tmp_6_fu_305_p3();
    void thread_tmp_7_fu_325_p4();
    void thread_tmp_fu_105_p4();
    void thread_trunc_ln147_1_fu_237_p1();
    void thread_trunc_ln147_fu_165_p1();
    void thread_trunc_ln148_1_fu_321_p1();
    void thread_trunc_ln148_fu_267_p1();
    void thread_trunc_ln851_1_fu_197_p1();
    void thread_trunc_ln851_fu_125_p1();
    void thread_zext_ln150_1_fu_353_p1();
    void thread_zext_ln150_fu_349_p1();
    void thread_zext_ln703_1_fu_361_p1();
    void thread_zext_ln703_fu_357_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
